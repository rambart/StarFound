//
//  ClassLevelXMLParser.swift
//  StarFinder
//
//  Created by Tom on 4/10/18.
//  Copyright © 2018 Tom. All rights reserved.
//

import Foundation
import UIKit

let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext


func clearCompendium() {
    do {
        let racesToDelete = try context.fetch(CompendiumRace.fetchRequest())
        let themesToDelete = try context.fetch(CompendiumTheme.fetchRequest())
        let classesToDelete = try context.fetch(CompendiumClass.fetchRequest())
        let featsToDelete = try context.fetch(CompendiumFeat.fetchRequest())
        let spellsToDelete = try context.fetch(CompendiumSpell.fetchRequest())
        let armorToDelete = try context.fetch(CompendiumArmor.fetchRequest())
        let weaponsToDelete = try context.fetch(CompendiumWeapon.fetchRequest())
        let ammoToDelete = try context.fetch(CompendiumAmmo.fetchRequest())
        let itemsToDelete = try context.fetch(CompendiumItem.fetchRequest())
        for item in racesToDelete {
            context.delete(item as! CompendiumRace)
        }
        for item in themesToDelete {
            context.delete(item as! CompendiumTheme)
        }
        for item in classesToDelete {
            context.delete(item as! CompendiumClass)
        }
        for item in featsToDelete {
            context.delete(item as! CompendiumFeat)
        }
        for item in spellsToDelete {
            context.delete(item as! CompendiumSpell)
        }
        for item in armorToDelete {
            context.delete(item as! CompendiumArmor)
        }
        for item in weaponsToDelete {
            context.delete(item as! CompendiumWeapon)
        }
        for item in ammoToDelete {
            context.delete(item as! CompendiumAmmo)
        }
        for item in itemsToDelete {
            context.delete(item as! CompendiumItem)
        }
    } catch {
        print("Did not fetch compendium")
    }
}

func updateCompendium(_ version: Int) {
    
    if let compVersion = UserDefaults.standard.value(forKey: "compendiumVersion") as? Int {
        if compVersion < version {
            loadCompendium(version)
        } else {
            print("Compendium up to date")
        }
    } else {
        loadCompendium(version)
    }
    
}

func loadCompendium(_ version: Int) {
    
    print("Loading Compendium")
    
    clearCompendium()
    
    loadEnvoy()
    loadMechanic()
    loadMystic()
    loadOperative()
    loadSolarian()
    loadSoldier()
    loadTechnomancer()
    
    loadRaces()
    
    loadThemes()
    
    loadFeats()
    
    loadSpells()
    
    loadArmor()
    
    loadWeapons()
    
    loadAmmo()
    
    loadItems()
    
    
    
    UserDefaults.standard.set(version, forKey: "compendiumVersion")
    
    (UIApplication.shared.delegate as! AppDelegate).saveContext()
}

//Envoy     ################################################################################################################

func loadEnvoy() {
    let envoy = CompendiumClass(context: context)
    envoy.name = "Envoy"
    envoy.hitPoints = 6
    envoy.staminaPoints = 6
    envoy.skillRanks = 8
    envoy.classSkills = "Acrobatics, Athletics, Bluff, Computers, Culture, Diplomacy, Disguise, Engineering, Intimidate, Medicine, Perception, Piloting, Profession, Sense Motive, Sleight of Hand, Stealth"
    
    let level1 = CompendiumLevel(context: context)
    level1.level = 1
    level1.bab = 0
    level1.fort = 0
    level1.ref = 2
    level1.will = 2
    let feature10 = Feature(context: context)
    feature10.name = "Proficiencies"
    feature10.content = "Armor-light; Weapons-basic melee weapons, grenades, small arms"
    level1.addToCompendiumClassFeature(feature10)
    let feature11 = Feature(context: context)
    feature11.name = "Envoy Improvisation"
    feature11.content = "As you gain experience, you learn envoy improvisations—little tricks that bolster allies, confound enemies, or change the ebb and flow of battle using guile, inspiration, or luck.\n\nYou learn your first envoy improvisation at 1st level, and you learn an additional improvisation at 2nd level and every 2 levels thereafter.\n\nIf an improvisation allows you to grant an effect to an ally, you cannot grant yourself that effect unless the improvisation states otherwise. If an envoy improvisation allows a saving throw to resist its effects or requires an enemy to attempt a skill check, the DC is equal to 10 + half your envoy level + your Charisma modifier.\n\nSome envoy improvisations are language-dependent, mind-affecting, sense-dependent, or some combination of any or all of these.\n\nYou learn your first envoy improvisation at 1st level and an additional improvisation at 2nd level and every 2 levels thereafter. Many improvisations require you to have a minimum envoy level, and they are organized accordingly. Some improvisations have additional prerequisites, such as other improvisations."
    
    let option0 = Option(context: context)
    option0.name = "Clever Feint (Ex)"
    option0.content = "[sense-dependent]\nAs a standard action, you can fake out an enemy within 60 feet, making that enemy open to your attacks. Attempt a Bluff check with the same DC as a check to feint against that enemy (though this isn’t a standard check to feint, so Improved Feint and Greater Feint don’t apply). Even if you fail, that enemy is flat-footed against your attacks until the end of your next turn. If you succeed, the enemy is also flat-footed against your allies’ attacks until the end of your next turn. You can’t use clever feint against a creature that lacks an Intelligence score.\n\nAt 6th level, you can spend 1 Resolve Point to treat a failed Bluff check for clever feint as if it were a success."
    feature11.addToFeatureOptions(option0)
    
    let option1 = Option(context: context)
    option1.name = "Dispiriting Taunt (Ex)"
    option1.content = "[language-dependent, mind-affecting, sense-dependent]\nAs a standard action, you can taunt an enemy within 60 feet.\n\nAttempt an Intimidate check with the same DC as a check to demoralize that enemy (though this isn’t a check to demoralize, so you can’t use abilities that would apply to a demoralization attempt, like the rattling presence expertise talent). If you fail, that enemy is off-target until the end of your next turn. If you succeed, that enemy is instead shaken until the end of your next turn. This is an emotion and fear effect.\n\nAt 6th level, you can spend 1 Resolve Point to treat a failed Intimidate check for dispiriting taunt as if it were a success."
    feature11.addToFeatureOptions(option1)
    
    let option2 = Option(context: context)
    option2.name = "Don’t Quit (Ex)"
    option2.content = "[mind-affecting, sense-dependent]\nAs a standard action, you can signal a single ally within 60 feet.\n\nThat ally ignores one condition of your choice until the start of your next turn, chosen from the following list: confused, fascinated, fatigued, shaken, sickened, and staggered.\n\nWhile your ally doesn’t suffer the effects of the condition during that period, the condition is merely suppressed, not removed, and its effects resume at the start of your next turn. The condition can still be removed with spells, technology, and other effects as normal.\n\nAt 6th level, add the following conditions to the list: cowering, dazed, exhausted, frightened, nauseated, panicked, paralyzed, and stunned.\n\nAt 12th level, you can spend 1 Resolve Point to remove the condition with this ability instead of suppressing it. You can’t remove a condition with a permanent duration in this way; if you attempt to do so, your attempt fails but you don’t lose the Resolve Point."
    feature11.addToFeatureOptions(option2)
    
    let option3 = Option(context: context)
    option3.name = "Expanded Attunement (Ex)"
    option3.content = "You can use beneficial mind-affecting envoy improvisations to aid allies who usually would not be able to gain benefits from mind-affecting effects, such as constructs, robots, and undead. If the improvisation grants a morale bonus, even allies who can’t normally benefit from morale bonuses gain that bonus."
    feature11.addToFeatureOptions(option3)
    
    let option4 = Option(context: context)
    option4.name = "Get ’Em (Ex)"
    option4.content = "[language-dependent, mind-affecting, sense-dependent]\nAs a move action, you can choose one enemy within 60 feet.\n\nUntil the start of your next turn, you and your allies gain a +1 morale bonus to attack rolls made against that enemy. The bonus persists even if the enemy moves beyond 60 feet or out of line of sight or hearing.\n\nAt 6th level, you can spend 1 Resolve Point to grant this bonus to attack rolls and damage rolls against all enemies who are within 60 feet."
    feature11.addToFeatureOptions(option4)
    
    let option5 = Option(context: context)
    option5.name = "Inspiring Boost (Ex)"
    option5.content = "[language-dependent, mind-affecting, sense-dependent]\nAs a standard action, you can signal an ally within 30 feet who has taken damage from any attack made by a significant enemy at any point after your last turn ended. That ally regains a number of Stamina Points (up to his maximum) equal to twice your envoy level + your Charisma modifier; at 15th level, this increases to three times your envoy level + your Charisma modifier. Once an ally has benefited from your inspiring boost, that ally can’t gain the benefits of your inspiring boost again until he takes a 10-minute rest to recover Stamina Points.\n\nAt 6th level, you can spend 1 Resolve Point to add your envoy level to the number of Stamina Points regained."
    feature11.addToFeatureOptions(option5)
    
    let option6 = Option(context: context)
    option6.name = "Look Alive (Ex)"
    option6.content = "[mind-affecting]\nWhen you spend a Resolve Point to regain Stamina Points after a 10-minute rest, all allies who stay within 60 feet of you throughout the rest gain a +2 morale bonus to Perception and initiative checks for the next hour or until the next 10-minute rest to recover Stamina Points, whichever comes first."
    feature11.addToFeatureOptions(option6)
    
    let option7 = Option(context: context)
    option7.name = "Not in the Face (Ex)"
    option7.content = "[sense-dependent]\nAs a move action, you can choose one enemy within 60 feet.\n\nThat enemy must succeed at a Will save or take a –4 penalty to all attacks it makes against you until the end of your next turn.\n\nAt 6th level, you can spend 1 Resolve Point to make the enemy take the penalty with no saving throw allowed."
    feature11.addToFeatureOptions(option7)
    
    let option8 = Option(context: context)
    option8.name = "Universal Expression (Ex)"
    option8.content = "When using a language-dependent improvisation that affects an enemy, you can use the improvisation against that enemy even if the two of you do not share a language."
    feature11.addToFeatureOptions(option8)
    
    let option9 = Option(context: context)
    option9.name = "Watch Your Step (Ex)"
    option9.content = "[language-dependent, mind-affecting, sense-dependent]\nWhen an ally within 60 feet must succeed at a Reflex save to avoid a harmful effect, as a reaction before your ally attempts the saving throw, you can grant the ally a +2 bonus to that saving throw.\n\nAt 6th level, you can spend 1 Resolve Point to have the ally roll twice on the saving throw and take the better result. Both of those rolls benefit from the +2 bonus provided by this ability."
    feature11.addToFeatureOptions(option9)
    
    level1.addToCompendiumClassFeature(feature11)
    let feature12 = Feature(context: context)
    feature12.name = "Expertise (EX)"
    feature12.content = "You are an expert at dealing with challenges that test your skills, be the challenges social or otherwise. At 1st level, when attempting a Sense Motive check, you can roll 1d6 (your expertise die) and add the result of the roll to your check as an insight bonus. You can use this and other expertise abilities as long as you have at least 1 Resolve Point remaining. At 5th level, anytime you roll your expertise die, you gain a +1 bonus to the result. At 9th, 17th, and 20th levels, this bonus increases by 1. At 13th level, you roll 1d8 as your expertise die instead of 1d6.\n\nBeginning at 9th level, you have even greater expertise with skills to which you can add your expertise die that you have also selected with the Skill Focus feat. For each such skill, once per day when rolling your expertise die to add to that skill, you may roll the expertise die twice and take the better of the two results"
    level1.addToCompendiumClassFeature(feature12)
    let feature13 = Feature(context: context)
    feature13.name = "Skill Expertise (EX)"
    feature13.content = "At 1st level and every 4 levels thereafter, you can use expertise with one additional class skill. You must have at least 1 rank in a skill to select it, and it must come from the following list: Bluff (Cha), Computers (Int), Culture (Int), Diplomacy (Cha), Disguise (Cha), Engineering (Int), Intimidate (Cha), and Medicine (Int)."
    let optionC0 = Option(context: context)
    optionC0.name = "Bluff"
    feature13.addToFeatureOptions(optionC0)
    
    let optionC1 = Option(context: context)
    optionC1.name = "Computers"
    feature13.addToFeatureOptions(optionC1)
    
    let optionC2 = Option(context: context)
    optionC2.name = "Culture"
    feature13.addToFeatureOptions(optionC2)
    
    let optionC3 = Option(context: context)
    optionC3.name = "Diplomacy"
    feature13.addToFeatureOptions(optionC3)
    
    let optionC4 = Option(context: context)
    optionC4.name = "Disguise"
    feature13.addToFeatureOptions(optionC4)
    
    let optionC5 = Option(context: context)
    optionC5.name = "Engineering"
    feature13.addToFeatureOptions(optionC5)
    
    let optionC6 = Option(context: context)
    optionC6.name = "Intimidate"
    feature13.addToFeatureOptions(optionC6)
    
    let optionC7 = Option(context: context)
    optionC7.name = "Medicine"
    feature13.addToFeatureOptions(optionC7)
    level1.addToCompendiumClassFeature(feature13)
    envoy.addToClassLevel(level1)
    
    let level2 = CompendiumLevel(context: context)
    level2.level = 2
    level2.bab = 1
    level2.fort = 0
    level2.ref = 3
    level2.will = 3
    let feature21 = Feature(context: context)
    feature21.name = "New Improvisation"
    feature21.addToFeatureOptions(option0)
    feature21.addToFeatureOptions(option1)
    feature21.addToFeatureOptions(option2)
    feature21.addToFeatureOptions(option3)
    feature21.addToFeatureOptions(option4)
    feature21.addToFeatureOptions(option5)
    feature21.addToFeatureOptions(option6)
    feature21.addToFeatureOptions(option7)
    feature21.addToFeatureOptions(option8)
    feature21.addToFeatureOptions(option9)
    envoy.addToClassLevel(level2)
    
    let level3 = CompendiumLevel(context: context)
    level3.level = 3
    level3.bab = 2
    level3.fort = 1
    level3.ref = 3
    level3.will = 3
    let feature31 = Feature(context: context)
    feature31.name = "Expertise Talent"
    feature31.content = "At 3rd level and every 4 levels thereafter, you choose an expertise talent, which gives you an extra option when using a skill with which you have expertise.\n\nYou gain an expertise talent at 3rd level and every 4 levels thereafter. With the exception of additional skill expertise, these talents require you to have expertise in the skills they affect, as indicated in parentheses after the talent’s name."
    let optionB0 = Option(context: context)
    optionB0.name = "Additional Skill Expertise (Ex)"
    optionB0.content = "Choose another skill in which you have at least 1 rank from the list of skills you can choose with the expertise class feature; you can use expertise with that skill. You can choose this talent up to three times, choosing a different skill each time."
    feature31.addToFeatureOptions(optionB0)
    
    let optionB1 = Option(context: context)
    optionB1.name = "Altered Bearing (Ex; Disguise)"
    optionB1.content = "You can quickly adjust your posture, your stride, your demeanor, and the way your clothes and gear fit, causing casual observers to fail to recognize your true appearance. When you attempt a Disguise check to alter minor details of your appearance, you can forgo your expertise die to attempt the check as a move action. You don’t reduce the DC by 5 for attempting to alter only minor details, and if an observer succeeds at an opposed Perception check that pierces your disguise, he also realizes your true race and what features you have disguised. You can’t use this ability for more complex disguises."
    feature31.addToFeatureOptions(optionB1)
    
    let optionB2 = Option(context: context)
    optionB2.name = "Analyst (Ex; Sense Motive)"
    optionB2.content = "You have been taught to carefully consider your own assumptions, making it much less likely you assign false motives to other creatures. When using Sense Motive to detect deception or discern a secret message, as long as your expertise die roll result is not a 1, you don’t think a truthful statement contains deceptions or infer false information from a secret message even if you fail your check by 5 or more."
    feature31.addToFeatureOptions(optionB2)
    
    let optionB3 = Option(context: context)
    optionB3.name = "Cautious Expertise (Ex; see below)"
    optionB3.content = "Choose a skill you have selected with the skill expertise class feature. When you take 20 with this skill, you can roll your expertise die twice and take the better result.\n\nYou can choose this talent up to three times, choosing a different skill selected with the skill expertise class feature each time."
    feature31.addToFeatureOptions(optionB3)
    
    let optionB4 = Option(context: context)
    optionB4.name = "Convincing Liar (Ex; Bluff)"
    optionB4.content = "When you attempt a Bluff check, you can choose not to roll your expertise die until later. After you determine what the check’s result would be, you can choose to either roll your expertise die and add the result to the total or forgo the expertise die and reroll the check. At 9th level, you can spend 1 Resolve Point to reroll the check and add the result of your expertise die."
    feature31.addToFeatureOptions(optionB4)
    
    let optionB5 = Option(context: context)
    optionB5.name = "Cultural Savant (Ex; Culture)"
    optionB5.content = "As long as you have enough time, you can take 20 on Culture checks to recall knowledge, even if you don’t have access to a computer terminal or other means of research."
    feature31.addToFeatureOptions(optionB5)
    
    let optionB6 = Option(context: context)
    optionB6.name = "Cunning Disguise (Ex; Disguise)"
    optionB6.content = "When you attempt an initial Disguise check, you can forgo rolling your expertise die. Instead, the first time a creature would pierce your disguise with a Perception check, treat its result as if it had rolled a natural 1 on its Perception check. This benefit applies only once per disguise. At 9th level, this ability also applies against the second creature who pierces your disguise."
    feature31.addToFeatureOptions(optionB6)
    
    let optionB7 = Option(context: context)
    optionB7.name = "Engineering Adept (Ex; Engineering)"
    optionB7.content = "When you attempt an Engineering check to disable or repair a device, you can forgo rolling your expertise die to instead halve the time it takes to make the attempt."
    feature31.addToFeatureOptions(optionB7)
    
    let optionB8 = Option(context: context)
    optionB8.name = "Expert Forger (Ex; Computers)"
    optionB8.content = "You have a database of electronic seals and predesigned templates that allow you forge an official document in a matter of moments. When you attempt a Computers check to create a forgery, as long as you have access to a computer, you can forgo your expertise die to attempt the check as a full action (rather than the normal required time of 1d4 minutes)."
    feature31.addToFeatureOptions(optionB8)
    
    let optionB9 = Option(context: context)
    optionB9.name = "Fast Hack (Ex; Computers)"
    optionB9.content = "When you attempt a Computers check to hack into a computer system, you can forgo rolling your expertise die to instead halve the time it takes to make the attempt (to a minimum of 1 round). At 9th level, if you successfully hack the system, you can also negate a single countermeasure protecting that computer system. You cannot use this talent to negate a countermeasure from the same computer again for 24 hours."
    feature31.addToFeatureOptions(optionB9)
    
    let optionB10 = Option(context: context)
    optionB10.name = "Inspired Medic (Ex; Medicine)"
    optionB10.content = "When you attempt a Medicine check, you can choose not to roll your expertise die until later. After you determine what the check’s result would be, you can choose to either roll your expertise die and add it to the total or forgo the expertise die and reroll the check. At 9th level, you can spend 1 Resolve Point to both reroll the check and add the result of your expertise die."
    feature31.addToFeatureOptions(optionB10)
    
    let optionB11 = Option(context: context)
    optionB11.name = "Keen Observer (Ex; Sense Motive)"
    optionB11.content = "Whenever you interact with a creature under a mental effect for at least 1 minute, the GM attempts an automatic secret Sense Motive check for you without your expertise die. On a success, you learn about the mental effect. If you specifically request a Sense Motive check to sense mental effects, you can attempt a Sense Motive check as normal, including your expertise die, in addition to this automatic check."
    feature31.addToFeatureOptions(optionB11)
    
    let optionB12 = Option(context: context)
    optionB12.name = "Menacing Gaze (Ex; Intimidate)"
    optionB12.content = "When you attempt an Intimidate check to demoralize foes, you can forgo your expertise die to attempt to briefly demoralize a small group as a full action. You attempt an Intimidate check against foes within 60 feet, no two of which can be more than 20 feet apart. The DC of this check is equal to the highest DC to demoralize any one of the foes. If you are successful, the targets gain the shaken condition for 1 round (even if your result exceeded the DC by 5 or more). Once you use this ability against a creature, it is immune to this talent for 24 hours."
    feature31.addToFeatureOptions(optionB12)
    
    let optionB13 = Option(context: context)
    optionB13.name = "Rattling Presence (Ex; Intimidate)"
    optionB13.content = "When you attempt an Intimidate check to demoralize an opponent, you can forgo rolling your expertise die to automatically increase the duration of the shaken condition by 1 round on a successful check. At 9th level, you instead increase the duration by 2 rounds on a success when using this talent."
    feature31.addToFeatureOptions(optionB13)
    
    let optionB14 = Option(context: context)
    optionB14.name = "Skilled Linguist (Ex; Culture)"
    optionB14.content = "You can speak and read a number of bonus languages equal to your ranks in Culture. Additionally, when you attempt a Culture check to decipher writing, you can forgo your expertise die to attempt the check as a full action (rather than the normal 1 minute) per approximately 250 words of writing or fewer."
    feature31.addToFeatureOptions(optionB14)
    
    let optionB15 = Option(context: context)
    optionB15.name = "Slick Customer (Ex; Diplomacy)"
    optionB15.content = "When you attempt a Diplomacy check, you can choose not to roll your expertise die until later. After you determine what the check’s result would be, you can choose to either roll your expertise die and add it to the total or forgo the expertise die and reroll the check. At 9th level, you can spend 1 Resolve Point to both reroll the check and add the result of your expertise die."
    feature31.addToFeatureOptions(optionB15)
    
    let optionB16 = Option(context: context)
    optionB16.name = "Student of Technology (Ex; Engineering)"
    optionB16.content = "As long as you have the time to do so, you can take 20 on Engineering checks to identify creatures and technology, even if you do not have access to a computer terminal or other means of research. If the creature or technology was created by a group or individual you are familiar with (normally including any major corporation or military), on a successful check you also identify what group created the object identified."
    feature31.addToFeatureOptions(optionB16)
    
    let optionB17 = Option(context: context)
    optionB17.name = "Surgeon (Ex; Medicine)"
    optionB17.content = "You can use Medicine to treat deadly wounds on a patient once each day in addition to the normal allowances for the medical equipment you are using. Because performing this level of advanced medicine is difficult and time consuming, the DC for this additional treatment increases by 5 and the skill check takes 1 hour."
    feature31.addToFeatureOptions(optionB17)
    
    let optionB18 = Option(context: context)
    optionB18.name = "Well Informed (Ex; Diplomacy)"
    optionB18.content = "You keep yourself as up to date as possible about the events and major figures of any region you are in. Once you have been in a settlement or region for at least 24 hours, when you attempt a Diplomacy check to gather information, you can forgo your expertise die to attempt the check as a swift action (rather than the normal 1d4 hours)."
    feature31.addToFeatureOptions(optionB18)
    level3.addToCompendiumClassFeature(feature31)
    let feature32 = Feature(context: context)
    feature32.name = "Weapon Specialization (Ex)"
    feature32.content = "You gain the Weapon Specialization feat as a bonus feat for each weapon type with which this class grants you proficiency."
    level3.addToCompendiumClassFeature(feature32)
    envoy.addToClassLevel(level3)
    
    let level4 = CompendiumLevel(context: context)
    level4.level = 4
    level4.bab = 3
    level4.fort = 1
    level4.ref = 4
    level4.will = 4
    let feature41 = Feature(context: context)
    feature41.name = "New Improvisation"
    
    feature41.addToFeatureOptions(option0)
    feature41.addToFeatureOptions(option1)
    feature41.addToFeatureOptions(option2)
    feature41.addToFeatureOptions(option3)
    feature41.addToFeatureOptions(option4)
    feature41.addToFeatureOptions(option5)
    feature41.addToFeatureOptions(option6)
    feature41.addToFeatureOptions(option7)
    feature41.addToFeatureOptions(option8)
    feature41.addToFeatureOptions(option9)
    
    let option10 = Option(context: context)
    option10.name = "Clever Attack (Ex)"
    option10.content = "You can make an attack that throws your enemy off-balance.\n\nAs a standard action, you can make a single attack against a target within 60 feet and gain the benefits of clever feint (attempting a Bluff check against the target as normal). Apply the effects of clever feint before resolving your attack. You must have the clever feint envoy improvisation to choose this improvisation."
    feature41.addToFeatureOptions(option10)
    
    let option11 = Option(context: context)
    option11.name = "Duck Under (Ex)"
    option11.content = "You can duck under a foe’s melee attack, causing it to overextend and move into a position more favorable to you. You must take the total defense action to use this ability. If, before the start of your next turn, a foe misses you with a melee attack, as a reaction you can attempt a reposition combat maneuver with a +8 bonus to your attack roll against that foe."
    feature41.addToFeatureOptions(option11)
    
    let option12 = Option(context: context)
    option12.name = "Focus (Ex)"
    option12.content = "[mind-affecting, sense-dependent]\nAs a standard action, you can encourage a single ally within 60 feet to Focus on the danger at hand. If that ally is flat-footed or off-target, you end that condition. If circumstances would cause the ally to immediately become flat-footed or off-target again, you instead suppress that condition for 1 round."
    feature41.addToFeatureOptions(option12)
    
    let option13 = Option(context: context)
    option13.name = "Hurry (Ex)"
    option13.content = "[mind-affecting, sense-dependent]\nAs a standard action, you can grant a single move action to an ally within 60 feet. The ally can use that move action during her next turn to take a guarded step, move up to her speed, or draw or sheathe a weapon. The ally can use her extra move action in between her other actions, and she can even use it before or after a full action. A character can use no more than one extra action from hurry in a single round."
    feature41.addToFeatureOptions(option13)
    
    let option14 = Option(context: context)
    option14.name = "Quick Dispiriting Taunt (Ex)"
    option14.content = "You can use dispiriting taunt as a move action instead of a standard action. You must have the dispiriting taunt envoy improvisation to choose this improvisation."
    feature41.addToFeatureOptions(option14)
    
    let option15 = Option(context: context)
    option15.name = "Quick Inspiring Boost (Ex)"
    option15.content = "You can use inspiring boost as a move action instead of a standard action, though when you do so, the number of Stamina Points your ally recovers is reduced by your envoy level. You must have the inspiring boost envoy improvisation to choose this improvisation."
    feature41.addToFeatureOptions(option15)
    
    let option16 = Option(context: context)
    option16.name = "Long-Range Improvisation (Ex)"
    option16.content = "Double the range of your improvisations with ranges of at least 30 feet."
    feature41.addToFeatureOptions(option16)
    
    let option17 = Option(context: context)
    option17.name = "Watch Out (Ex)"
    option17.content = "[language-dependent, mind-affecting, sense-dependent]\nAs a reaction, when an enemy makes a ranged attack against an ally within 60 feet of you, you can warn that ally of the danger. You must spend your reaction when the enemy declares the attack but before it makes the attack roll. Your ally can spend a reaction to gain a +4 to AC against the triggering attack. Once the triggering attack is resolved, the ally falls prone.\n\nAt 8th level, you can spend 1 Resolve Point to prevent your ally from falling prone after the attack."
    feature41.addToFeatureOptions(option17)
    
    level4.addToCompendiumClassFeature(feature41)
    envoy.addToClassLevel(level4)
    
    let level5 = CompendiumLevel(context: context)
    level5.level = 5
    level5.bab = 3
    level5.fort = 1
    level5.ref = 4
    level5.will = 4
    let feature51 = Feature(context: context)
    feature51.name = "Skill Expertise"
    feature51.addToFeatureOptions(optionC0)
    feature51.addToFeatureOptions(optionC1)
    feature51.addToFeatureOptions(optionC2)
    feature51.addToFeatureOptions(optionC3)
    feature51.addToFeatureOptions(optionC4)
    feature51.addToFeatureOptions(optionC5)
    feature51.addToFeatureOptions(optionC6)
    feature51.addToFeatureOptions(optionC7)
    level5.addToCompendiumClassFeature(feature51)
    envoy.addToClassLevel(level5)
    
    let level6 = CompendiumLevel(context: context)
    level6.level = 6
    level6.bab = 4
    level6.fort = 2
    level6.ref = 5
    level6.will = 5
    
    let feature61 = Feature(context: context)
    feature61.name = "New Improvisation"
    
    feature61.addToFeatureOptions(option0)
    feature61.addToFeatureOptions(option1)
    feature61.addToFeatureOptions(option2)
    feature61.addToFeatureOptions(option3)
    feature61.addToFeatureOptions(option4)
    feature61.addToFeatureOptions(option5)
    feature61.addToFeatureOptions(option6)
    feature61.addToFeatureOptions(option7)
    feature61.addToFeatureOptions(option8)
    feature61.addToFeatureOptions(option9)
    feature61.addToFeatureOptions(option10)
    feature61.addToFeatureOptions(option11)
    feature61.addToFeatureOptions(option12)
    feature61.addToFeatureOptions(option13)
    feature61.addToFeatureOptions(option14)
    feature61.addToFeatureOptions(option15)
    feature61.addToFeatureOptions(option16)
    feature61.addToFeatureOptions(option17)
    
    let option18 = Option(context: context)
    option18.name = "Clever Improvisations (Ex)"
    option18.content = "The first time you would spend Resolve Points on one of your envoy improvisations, reduce the cost by 1 Resolve Point (minimum 0). This ability refreshes whenever you take a 10-minute rest to recover Stamina Points and after an 8-hour rest to recover Resolve Points, reducing the Resolve Point cost of your next envoy improvisation after the rest."
    feature61.addToFeatureOptions(option18)
    
    let option19 = Option(context: context)
    option19.name = "Draw Fire (Ex)"
    option19.content = "[sense-dependent]\nAs a standard action, you can spend 1 Resolve Point to make all enemies within 100 feet take a –4 penalty to all ranged attacks they make that don’t target you until the end of your next turn. This penalty remains even if you and an enemy move more than 100 feet away from each other, and enemies that weren’t within 100 feet when you used draw fire don’t take the penalty if they later come within range."
    feature61.addToFeatureOptions(option19)
    
    let option20 = Option(context: context)
    option20.name = "Heads Up (Ex)"
    option20.content = "[language-dependent, sense-dependent]\nWhen you succeed at a Perception check, as a reaction, you can signal a single ally within 60 feet. That ally can act as if he had also succeeded at the Perception check with the same result."
    feature61.addToFeatureOptions(option20)
    
    let option21 = Option(context: context)
    option21.name = "Improved Get ’Em (Ex)"
    option21.content = "Your morale bonus from get ’em increases to +2. As a standard action, you can make a single attack against a target within 60 feet. You and your allies within 60 feet gain the benefits of get ’em against that target (applying these effects before making the attack roll). As with get ’em, you can spend 1 Resolve Point to grant the benefits against all enemies within 60 feet. You must have the get ’em envoy improvisation to choose this improvisation."
    feature61.addToFeatureOptions(option21)
    
    level6.addToCompendiumClassFeature(feature61)
    
    envoy.addToClassLevel(level6)
    
    let level7 = CompendiumLevel(context: context)
    level7.level = 7
    level7.bab = 5
    level7.fort = 2
    level7.ref = 5
    level7.will = 5
    let feature71 = Feature(context: context)
    feature71.name = "New Expertise Talent"
    feature71.addToFeatureOptions(optionB0)
    feature71.addToFeatureOptions(optionB1)
    feature71.addToFeatureOptions(optionB2)
    feature71.addToFeatureOptions(optionB3)
    feature71.addToFeatureOptions(optionB4)
    feature71.addToFeatureOptions(optionB5)
    feature71.addToFeatureOptions(optionB6)
    feature71.addToFeatureOptions(optionB7)
    feature71.addToFeatureOptions(optionB8)
    feature71.addToFeatureOptions(optionB9)
    feature71.addToFeatureOptions(optionB10)
    feature71.addToFeatureOptions(optionB11)
    feature71.addToFeatureOptions(optionB12)
    feature71.addToFeatureOptions(optionB13)
    feature71.addToFeatureOptions(optionB14)
    feature71.addToFeatureOptions(optionB15)
    feature71.addToFeatureOptions(optionB16)
    feature71.addToFeatureOptions(optionB17)
    feature71.addToFeatureOptions(optionB18)
    level7.addToCompendiumClassFeature(feature71)
    envoy.addToClassLevel(level7)
    
    let level8 = CompendiumLevel(context: context)
    level8.level = 8
    level8.bab = 6
    level8.fort = 2
    level8.ref = 6
    level8.will = 6
    let feature81 = Feature(context: context)
    feature81.name = "New Improvisation"
    
    feature81.addToFeatureOptions(option0)
    feature81.addToFeatureOptions(option1)
    feature81.addToFeatureOptions(option2)
    feature81.addToFeatureOptions(option3)
    feature81.addToFeatureOptions(option4)
    feature81.addToFeatureOptions(option5)
    feature81.addToFeatureOptions(option6)
    feature81.addToFeatureOptions(option7)
    feature81.addToFeatureOptions(option8)
    feature81.addToFeatureOptions(option9)
    feature81.addToFeatureOptions(option10)
    feature81.addToFeatureOptions(option11)
    feature81.addToFeatureOptions(option12)
    feature81.addToFeatureOptions(option13)
    feature81.addToFeatureOptions(option14)
    feature81.addToFeatureOptions(option15)
    feature81.addToFeatureOptions(option16)
    feature81.addToFeatureOptions(option17)
    feature81.addToFeatureOptions(option18)
    feature81.addToFeatureOptions(option19)
    feature81.addToFeatureOptions(option20)
    feature81.addToFeatureOptions(option21)
    
    let option22 = Option(context: context)
    option22.name = "Desperate Defense (Ex)"
    option22.content = "As a move action, you can cause one ally adjacent to you to not be considered helpless for the purpose of actions that can be used only against helpless creatures (such as a coup de grace). This effect ends if the creature ceases to be adjacent to you or at the beginning of your next turn, whichever comes first."
    feature81.addToFeatureOptions(option22)
    
    let option23 = Option(context: context)
    option23.name = "Expert Attack (Ex)"
    option23.content = "As a move action, you can spend 2 Resolve Points to add your bonus from expertise to your next attack roll before the end of your turn."
    feature81.addToFeatureOptions(option23)
    
    let option24 = Option(context: context)
    option24.name = "Hidden Agenda (Ex)"
    option24.content = "You’re an expert at veiling your true thoughts and goals.\n\nWhenever a creature attempts a Sense Motive check to detect a deception of yours, the creature must roll twice and take the worse of the two results. When you attempt a saving throw against an effect or ability that would read your thoughts or reveal your motives, you can roll twice and take the better of the two results."
    feature81.addToFeatureOptions(option24)
    
    let option25 = Option(context: context)
    option25.name = "Improved Hurry (Ex)"
    option25.content = "You can use the hurry envoy improvisation as a move action instead of a standard action. You must have the hurry envoy improvisation to choose this improvisation.\n\nAt 12th level, you can use hurry as a standard action and spend 1 Resolve Point to grant a standard action instead of a move action."
    feature81.addToFeatureOptions(option25)
    
    let option26 = Option(context: context)
    option26.name = "Situational Awareness (Ex)"
    option26.content = "If you ready an action, once before the trigger you selected occurs, you can spend 1 Resolve Point to change both the trigger and the action you have ready. You must ready an action that takes the same kind of action as your originally readied action, or you must ready a lesser action. (For example, if you readied a standard action, you could switch to another standard action, a move action, or a swift action, and if you readied a move action, you could switch to another move action or a swift action.)"
    feature81.addToFeatureOptions(option26)
    
    let option27 = Option(context: context)
    option27.name = "Sustained Determination (Ex)"
    option27.content = "[language-dependent, mind-affecting, sense-dependent]\nAs a move action, you can spend 2 Resolve Points to grant an ally within 60 feet 1 Resolve Point that he can spend to empower one of his abilities, even if he has spent all of his own Resolve Points. The ally must spend the Resolve Point before the start of your next turn; if he does not do so, he loses the Resolve Point and you still lose the Resolve Points you spent. You can’t grant the same ally the benefits of this ability again until both you and your ally have recovered your Resolve Points after an 8-hour rest or its equivalent."
    feature81.addToFeatureOptions(option27)
    
    level8.addToCompendiumClassFeature(feature81)
    envoy.addToClassLevel(level8)
    
    let level9 = CompendiumLevel(context: context)
    level9.level = 9
    level9.bab = 6
    level9.fort = 3
    level9.ref = 6
    level9.will = 6
    let feature91 = Feature(context: context)
    feature91.name = "Skill Expertise"
    feature91.addToFeatureOptions(optionC0)
    feature91.addToFeatureOptions(optionC1)
    feature91.addToFeatureOptions(optionC2)
    feature91.addToFeatureOptions(optionC3)
    feature91.addToFeatureOptions(optionC4)
    feature91.addToFeatureOptions(optionC5)
    feature91.addToFeatureOptions(optionC6)
    feature91.addToFeatureOptions(optionC7)
    level9.addToCompendiumClassFeature(feature91)
    envoy.addToClassLevel(level9)
    
    let level10 = CompendiumLevel(context: context)
    level10.level = 10
    level10.bab = 7
    level10.fort = 3
    level10.ref = 7
    level10.will = 7
    let feature101 = Feature(context: context)
    feature101.name = "New Expertise Talent"
    feature101.addToFeatureOptions(option0)
    feature101.addToFeatureOptions(option1)
    feature101.addToFeatureOptions(option2)
    feature101.addToFeatureOptions(option3)
    feature101.addToFeatureOptions(option4)
    feature101.addToFeatureOptions(option5)
    feature101.addToFeatureOptions(option6)
    feature101.addToFeatureOptions(option7)
    feature101.addToFeatureOptions(option8)
    feature101.addToFeatureOptions(option9)
    feature101.addToFeatureOptions(option10)
    feature101.addToFeatureOptions(option11)
    feature101.addToFeatureOptions(option12)
    feature101.addToFeatureOptions(option13)
    feature101.addToFeatureOptions(option14)
    feature101.addToFeatureOptions(option15)
    feature101.addToFeatureOptions(option16)
    feature101.addToFeatureOptions(option17)
    feature101.addToFeatureOptions(option18)
    feature101.addToFeatureOptions(option19)
    feature101.addToFeatureOptions(option20)
    feature101.addToFeatureOptions(option21)
    feature101.addToFeatureOptions(option22)
    feature101.addToFeatureOptions(option23)
    feature101.addToFeatureOptions(option24)
    feature101.addToFeatureOptions(option25)
    feature101.addToFeatureOptions(option26)
    feature101.addToFeatureOptions(option27)
    level10.addToCompendiumClassFeature(feature101)
    envoy.addToClassLevel(level10)
    
    let level11 = CompendiumLevel(context: context)
    level11.level = 11
    level11.bab = 8
    level11.fort = 3
    level11.ref = 7
    level11.will = 7
    let feature111 = Feature(context: context)
    feature111.name = "New Expertise Talent"
    feature111.addToFeatureOptions(optionB0)
    feature111.addToFeatureOptions(optionB1)
    feature111.addToFeatureOptions(optionB2)
    feature111.addToFeatureOptions(optionB3)
    feature111.addToFeatureOptions(optionB4)
    feature111.addToFeatureOptions(optionB5)
    feature111.addToFeatureOptions(optionB6)
    feature111.addToFeatureOptions(optionB7)
    feature111.addToFeatureOptions(optionB8)
    feature111.addToFeatureOptions(optionB9)
    feature111.addToFeatureOptions(optionB10)
    feature111.addToFeatureOptions(optionB11)
    feature111.addToFeatureOptions(optionB12)
    feature111.addToFeatureOptions(optionB13)
    feature111.addToFeatureOptions(optionB14)
    feature111.addToFeatureOptions(optionB15)
    feature111.addToFeatureOptions(optionB16)
    feature111.addToFeatureOptions(optionB17)
    feature111.addToFeatureOptions(optionB18)
    level11.addToCompendiumClassFeature(feature111)
    envoy.addToClassLevel(level11)
    
    let level12 = CompendiumLevel(context: context)
    level12.level = 12
    level12.bab = 9
    level12.fort = 4
    level12.ref = 8
    level12.will = 8
    let feature121 = Feature(context: context)
    feature121.name = "New Improvisation"
    feature121.addToFeatureOptions(option0)
    feature121.addToFeatureOptions(option1)
    feature121.addToFeatureOptions(option2)
    feature121.addToFeatureOptions(option3)
    feature121.addToFeatureOptions(option4)
    feature121.addToFeatureOptions(option5)
    feature121.addToFeatureOptions(option6)
    feature121.addToFeatureOptions(option7)
    feature121.addToFeatureOptions(option8)
    feature121.addToFeatureOptions(option9)
    feature121.addToFeatureOptions(option10)
    feature121.addToFeatureOptions(option11)
    feature121.addToFeatureOptions(option12)
    feature121.addToFeatureOptions(option13)
    feature121.addToFeatureOptions(option14)
    feature121.addToFeatureOptions(option15)
    feature121.addToFeatureOptions(option16)
    feature121.addToFeatureOptions(option17)
    feature121.addToFeatureOptions(option18)
    feature121.addToFeatureOptions(option19)
    feature121.addToFeatureOptions(option20)
    feature121.addToFeatureOptions(option21)
    feature121.addToFeatureOptions(option22)
    feature121.addToFeatureOptions(option23)
    feature121.addToFeatureOptions(option24)
    feature121.addToFeatureOptions(option25)
    feature121.addToFeatureOptions(option26)
    feature121.addToFeatureOptions(option27)
    level12.addToCompendiumClassFeature(feature121)
    envoy.addToClassLevel(level12)
    
    let level13 = CompendiumLevel(context: context)
    level13.level = 13
    level13.bab = 9
    level13.fort = 4
    level13.ref = 8
    level13.will = 8
    let feature131 = Feature(context: context)
    feature131.name = "Skill Expertise"
    feature131.addToFeatureOptions(optionC0)
    feature131.addToFeatureOptions(optionC1)
    feature131.addToFeatureOptions(optionC2)
    feature131.addToFeatureOptions(optionC3)
    feature131.addToFeatureOptions(optionC4)
    feature131.addToFeatureOptions(optionC5)
    feature131.addToFeatureOptions(optionC6)
    feature131.addToFeatureOptions(optionC7)
    level13.addToCompendiumClassFeature(feature131)
    envoy.addToClassLevel(level13)
    
    let level14 = CompendiumLevel(context: context)
    level14.level = 14
    level14.bab = 10
    level14.fort = 4
    level14.ref = 9
    level14.will = 9
    let feature141 = Feature(context: context)
    feature141.name = "New Improvisation"
    feature141.addToFeatureOptions(option0)
    feature141.addToFeatureOptions(option1)
    feature141.addToFeatureOptions(option2)
    feature141.addToFeatureOptions(option3)
    feature141.addToFeatureOptions(option4)
    feature141.addToFeatureOptions(option5)
    feature141.addToFeatureOptions(option6)
    feature141.addToFeatureOptions(option7)
    feature141.addToFeatureOptions(option8)
    feature141.addToFeatureOptions(option9)
    feature141.addToFeatureOptions(option10)
    feature141.addToFeatureOptions(option11)
    feature141.addToFeatureOptions(option12)
    feature141.addToFeatureOptions(option13)
    feature141.addToFeatureOptions(option14)
    feature141.addToFeatureOptions(option15)
    feature141.addToFeatureOptions(option16)
    feature141.addToFeatureOptions(option17)
    feature141.addToFeatureOptions(option18)
    feature141.addToFeatureOptions(option19)
    feature141.addToFeatureOptions(option20)
    feature141.addToFeatureOptions(option21)
    feature141.addToFeatureOptions(option22)
    feature141.addToFeatureOptions(option23)
    feature141.addToFeatureOptions(option24)
    feature141.addToFeatureOptions(option25)
    feature141.addToFeatureOptions(option26)
    feature141.addToFeatureOptions(option27)
    level14.addToCompendiumClassFeature(feature141)
    envoy.addToClassLevel(level14)
    
    let level15 = CompendiumLevel(context: context)
    level15.level = 15
    level15.bab = 11
    level15.fort = 5
    level15.ref = 9
    level15.will = 9
    let feature151 = Feature(context: context)
    feature151.name = "New Expertise Talent"
    feature151.addToFeatureOptions(optionB0)
    feature151.addToFeatureOptions(optionB1)
    feature151.addToFeatureOptions(optionB2)
    feature151.addToFeatureOptions(optionB3)
    feature151.addToFeatureOptions(optionB4)
    feature151.addToFeatureOptions(optionB5)
    feature151.addToFeatureOptions(optionB6)
    feature151.addToFeatureOptions(optionB7)
    feature151.addToFeatureOptions(optionB8)
    feature151.addToFeatureOptions(optionB9)
    feature151.addToFeatureOptions(optionB10)
    feature151.addToFeatureOptions(optionB11)
    feature151.addToFeatureOptions(optionB12)
    feature151.addToFeatureOptions(optionB13)
    feature151.addToFeatureOptions(optionB14)
    feature151.addToFeatureOptions(optionB15)
    feature151.addToFeatureOptions(optionB16)
    feature151.addToFeatureOptions(optionB17)
    feature151.addToFeatureOptions(optionB18)
    level15.addToCompendiumClassFeature(feature151)
    envoy.addToClassLevel(level15)
    
    let level16 = CompendiumLevel(context: context)
    level16.level = 16
    level16.bab = 12
    level16.fort = 5
    level16.ref = 10
    level16.will = 10
    let feature161 = Feature(context: context)
    feature161.name = "New Improvisation"
    feature161.addToFeatureOptions(option0)
    feature161.addToFeatureOptions(option1)
    feature161.addToFeatureOptions(option2)
    feature161.addToFeatureOptions(option3)
    feature161.addToFeatureOptions(option4)
    feature161.addToFeatureOptions(option5)
    feature161.addToFeatureOptions(option6)
    feature161.addToFeatureOptions(option7)
    feature161.addToFeatureOptions(option8)
    feature161.addToFeatureOptions(option9)
    feature161.addToFeatureOptions(option10)
    feature161.addToFeatureOptions(option11)
    feature161.addToFeatureOptions(option12)
    feature161.addToFeatureOptions(option13)
    feature161.addToFeatureOptions(option14)
    feature161.addToFeatureOptions(option15)
    feature161.addToFeatureOptions(option16)
    feature161.addToFeatureOptions(option17)
    feature161.addToFeatureOptions(option18)
    feature161.addToFeatureOptions(option19)
    feature161.addToFeatureOptions(option20)
    feature161.addToFeatureOptions(option21)
    feature161.addToFeatureOptions(option22)
    feature161.addToFeatureOptions(option23)
    feature161.addToFeatureOptions(option24)
    feature161.addToFeatureOptions(option25)
    feature161.addToFeatureOptions(option26)
    feature161.addToFeatureOptions(option27)
    level16.addToCompendiumClassFeature(feature161)
    envoy.addToClassLevel(level16)
    
    let level17 = CompendiumLevel(context: context)
    level17.level = 17
    level17.bab = 12
    level17.fort = 5
    level17.ref = 10
    level17.will = 10
    let feature171 = Feature(context: context)
    feature171.name = "Skill Expertise"
    feature171.addToFeatureOptions(optionC0)
    feature171.addToFeatureOptions(optionC1)
    feature171.addToFeatureOptions(optionC2)
    feature171.addToFeatureOptions(optionC3)
    feature171.addToFeatureOptions(optionC4)
    feature171.addToFeatureOptions(optionC5)
    feature171.addToFeatureOptions(optionC6)
    feature171.addToFeatureOptions(optionC7)
    level17.addToCompendiumClassFeature(feature171)

    envoy.addToClassLevel(level17)
    
    let level18 = CompendiumLevel(context: context)
    level18.level = 18
    level18.bab = 13
    level18.fort = 6
    level18.ref = 11
    level18.will = 11
    let feature181 = Feature(context: context)
    feature181.name = "New Improvisation"
    feature181.addToFeatureOptions(option0)
    feature181.addToFeatureOptions(option1)
    feature181.addToFeatureOptions(option2)
    feature181.addToFeatureOptions(option3)
    feature181.addToFeatureOptions(option4)
    feature181.addToFeatureOptions(option5)
    feature181.addToFeatureOptions(option6)
    feature181.addToFeatureOptions(option7)
    feature181.addToFeatureOptions(option8)
    feature181.addToFeatureOptions(option9)
    feature181.addToFeatureOptions(option10)
    feature181.addToFeatureOptions(option11)
    feature181.addToFeatureOptions(option12)
    feature181.addToFeatureOptions(option13)
    feature181.addToFeatureOptions(option14)
    feature181.addToFeatureOptions(option15)
    feature181.addToFeatureOptions(option16)
    feature181.addToFeatureOptions(option17)
    feature181.addToFeatureOptions(option18)
    feature181.addToFeatureOptions(option19)
    feature181.addToFeatureOptions(option20)
    feature181.addToFeatureOptions(option21)
    feature181.addToFeatureOptions(option22)
    feature181.addToFeatureOptions(option23)
    feature181.addToFeatureOptions(option24)
    feature181.addToFeatureOptions(option25)
    feature181.addToFeatureOptions(option26)
    feature181.addToFeatureOptions(option27)
    level18.addToCompendiumClassFeature(feature181)
    envoy.addToClassLevel(level18)
    
    let level19 = CompendiumLevel(context: context)
    level19.level = 19
    level19.bab = 14
    level19.fort = 6
    level19.ref = 11
    level19.will = 11
    let feature191 = Feature(context: context)
    feature191.name = "New Expertise Talent"
    feature191.addToFeatureOptions(optionB0)
    feature191.addToFeatureOptions(optionB1)
    feature191.addToFeatureOptions(optionB2)
    feature191.addToFeatureOptions(optionB3)
    feature191.addToFeatureOptions(optionB4)
    feature191.addToFeatureOptions(optionB5)
    feature191.addToFeatureOptions(optionB6)
    feature191.addToFeatureOptions(optionB7)
    feature191.addToFeatureOptions(optionB8)
    feature191.addToFeatureOptions(optionB9)
    feature191.addToFeatureOptions(optionB10)
    feature191.addToFeatureOptions(optionB11)
    feature191.addToFeatureOptions(optionB12)
    feature191.addToFeatureOptions(optionB13)
    feature191.addToFeatureOptions(optionB14)
    feature191.addToFeatureOptions(optionB15)
    feature191.addToFeatureOptions(optionB16)
    feature191.addToFeatureOptions(optionB17)
    feature191.addToFeatureOptions(optionB18)
    level19.addToCompendiumClassFeature(feature191)
    envoy.addToClassLevel(level19)
    
    let level20 = CompendiumLevel(context: context)
    level20.level = 20
    level20.bab = 15
    level20.fort = 6
    level20.ref = 12
    level20.will = 12
    let feature201 = Feature(context: context)
    feature201.name = "True Expertise (Ex)"
    feature201.content = "You gain total mastery over one of your envoy improvisations and can use it with but a thought. When you gain this ability, choose one improvisation you know that has an effect when you spend 1 Resolve Point.\n\nAs long as you have at least 1 Resolve Point remaining, you can gain the improvisation’s effect without spending the Resolve Point. This ability has no benefit if the improvisation requires more than 1 Resolve Point.\n\nIn addition, when you roll your expertise die, you can add 2d8 rather than 1d8+4 to the result of your skill check. If, for some reason, your bonus gained from expertise isn’t 1d8+4, you can’t use this option."
    level20.addToCompendiumClassFeature(feature201)
    let feature202 = Feature(context: context)
    feature202.name = "New Improvisation"
    feature202.addToFeatureOptions(option0)
    feature202.addToFeatureOptions(option1)
    feature202.addToFeatureOptions(option2)
    feature202.addToFeatureOptions(option3)
    feature202.addToFeatureOptions(option4)
    feature202.addToFeatureOptions(option5)
    feature202.addToFeatureOptions(option6)
    feature202.addToFeatureOptions(option7)
    feature202.addToFeatureOptions(option8)
    feature202.addToFeatureOptions(option9)
    feature202.addToFeatureOptions(option10)
    feature202.addToFeatureOptions(option11)
    feature202.addToFeatureOptions(option12)
    feature202.addToFeatureOptions(option13)
    feature202.addToFeatureOptions(option14)
    feature202.addToFeatureOptions(option15)
    feature202.addToFeatureOptions(option16)
    feature202.addToFeatureOptions(option17)
    feature202.addToFeatureOptions(option18)
    feature202.addToFeatureOptions(option19)
    feature202.addToFeatureOptions(option20)
    feature202.addToFeatureOptions(option21)
    feature202.addToFeatureOptions(option22)
    feature202.addToFeatureOptions(option23)
    feature202.addToFeatureOptions(option24)
    feature202.addToFeatureOptions(option25)
    feature202.addToFeatureOptions(option26)
    feature202.addToFeatureOptions(option27)
    level20.addToCompendiumClassFeature(feature202)
    envoy.addToClassLevel(level20)
}

//Mechanic  ################################################################################################################

func loadMechanic() {
    
    let mechanic = CompendiumClass(context: context)
    mechanic.name = "Mechanic"
    mechanic.hitPoints = 6
    mechanic.staminaPoints = 6
    mechanic.skillRanks = 4
    mechanic.classSkills = "Athletics, Computers, Engineering, Medicine, Perception, Physical Science, Piloting, Profession"
    
    let level1 = CompendiumLevel(context: context)
    level1.level = 1
    level1.bab = 0
    level1.fort = 2
    level1.ref = 2
    level1.will = 0
    let feature10 = Feature(context: context)
    feature10.name = "Proficiencies"
    feature10.content = "Armor-light; Weapons– basic melee weapons, grenades, small arms"
    level1.addToCompendiumClassFeature(feature10)
    let feature11 = Feature(context: context)
    feature11.name = "Artificial Intelligence (Ex)"
    feature11.content = "You construct an Artificial intelligence (or AI), a sophisticated program of self-motivated code that you can access for help in a variety of endeavors. This AI is the product of your own genius, far more advanced and complicated than any available for sale to consumers (though it falls short of being truly self-aware), and only you know the secrets of its creation and operation. Your AI can take one of two forms: a drone or an exocortex. You must pick one of these forms upon taking your first level of mechanic, and once this choice is made, it cannot be changed."
    let option111 = Option(context: context)
    option111.name = "Drone"
    option111.content = "You begin play with a powerful robotic drone to house your AI. You build and control this drone, which accompanies you on your adventures and is capable of combat, espionage, and other specialized tasks. As you gain levels, your drone advances in sophistication and gain additional abilities. While the value of your drone is immense, only you, with your extensive knowledge of its quirks and security measures, can ever hope to operate or repair it. Drones are detailed in Drones."
    feature11.addToFeatureOptions(option111)
    let option112 = Option(context: context)
    option112.name = "Exocortex"
    option112.content = "You begin play with an exocortex, an Artificial processor that interacts with and augments your biological brain’s cognitive functions, which can aid you in a variety of tasks, from combat to digital infiltration. Your exocortex is implanted within your physical body or brain, similar to a piece of cybernetic hardware, allowing your AI to access your mind and feed you information. As you gain levels, your exocortex advances in sophistication and processing power—see Exocortex. Only you can access or interact with your exocortex."
    feature11.addToFeatureOptions(option112)
    level1.addToCompendiumClassFeature(feature11)
    let feature12 = Feature(context: context)
    feature12.name = "Bypass (Ex)"
    feature12.content = "You are skilled at getting inside computer systems and electronic devices. At 1st level, you gain a +1 insight bonus to Computers and Engineering skill checks. At 5th level, every 4 levels thereafter, and at 20th level, this bonus increases by 1."
    level1.addToCompendiumClassFeature(feature12)
    let feature13 = Feature(context: context)
    feature13.name = "Custom Rig (Ex)"
    feature13.content = "You have created a customized toolkit you can use to hack systems and items. Your custom rig can be configured to take up an upgrade slot on your armor or can be installed as a cybernetic augmentation system in your brain (though it can be combined with a datajack for the same price as installing a datajack normally), your eyes, or an arm. For more information on augmentations, see Equipment. Alternatively, you can configure it to be a handheld device, meaning that you must retrieve it and hold it to use it effectively. While using this rig, you always count as having the appropriate tool or basic kit for any Computers or Engineering skill check you attempt. Some mechanic tricks and drone mods require the use of a custom rig. In addition, you can use your custom rig as a Mk I comm unit (see Equipment). Finally, if you have a drone, you can use your custom rig to communicate over an encrypted channel with your drone to issue commands to its AI or directly control it at a range of 2,500 feet.\n\nIf your custom rig is damaged, destroyed, lost, or stolen, you can kitbash a new one from any engineering kit, hacking kit, or other technological toolkit, reconfiguring the materials into a new custom rig with 1 hour of work. You can have only one custom rig at a time. If you create a new custom rig, your old one functions as a normal toolkit of whatever type you made it from and can no longer be used with your mechanic tricks."
    level1.addToCompendiumClassFeature(feature13)
    mechanic.addToClassLevel(level1)
    
    let level2 = CompendiumLevel(context: context)
    level2.level = 2
    level2.bab = 1
    level2.fort = 3
    level2.ref = 3
    level2.will = 0
    let feature21 = Feature(context: context)
    feature21.name = "Mechanic Trick"
    feature21.content = "As you gain experience, you learn Tricks that allow you to perform wonders of engineering, aid in electronic infiltrations, and optimize gear. While some of these are things you learn, others are small cybernetic enhancements you make to yourself (none of which have a price or count against your augmentation limits). Some Tricks require the use of a custom rig or other gear.\n\nYou learn your first mechanic trick at 2nd level, and you learn an additional mechanic trick at 4th level and every 2 levels thereafter. If a mechanic trick allows an opponent a saving throw to resist its effects, the DC is equal to 10 + half your mechanic level + your Intelligence modifier. If a mechanic trick requires an opponent to attempt a skill check, the DC is equal to 10 + 1-1/2 × your class level + your Intelligence modifier.\n\nUnless otherwise specified, you can’t learn mechanic tricks more than once."
    let option0 = Option(context: context)
    option0.name = "Distracting Hack (Ex)"
    option0.content = "You can hack a computer within 30 feet of a foe to distract that foe, such as with a sudden noise or an image. You must be able to access the computer (whether it is your own computer or you are within range to access one manually or via remote hack). This functions as a feint action except that it uses your Computers skill instead of Bluff, so you can apply the benefits of Improved Feint and Greater Feint if you have them."
    feature21.addToFeatureOptions(option0)
    
    let option1 = Option(context: context)
    option1.name = "Energy Shield (Ex)"
    option1.content = "As a standard action, you can use your custom rig to activate an energy shield around yourself. This shield provides you with a number of temporary Hit Points equal to your Intelligence modifier plus your mechanic level. The shield remains active for 1 minute per mechanic level or until all of its temporary Hit Points are depleted, whichever comes first. Once used, you cannot use this ability again until you spend 1 Resolve Point to regain Stamina Points after a 10-minute rest; your shield automatically shuts off during this period of rest."
    feature21.addToFeatureOptions(option1)
    
    let option2 = Option(context: context)
    option2.name = "Hack Directory (Ex)"
    option2.content = "Whenever you attempt to hack a system and fail the check, you immediately become aware of any countermeasures that were activated due to your failure. You can then select one of these countermeasures and attempt another Computers check (with the same DC as the original). If you succeed at this second check, you can prevent that countermeasure from activating, as if you had not attempted to access the system at all. Any other countermeasures have their normal effect."
    feature21.addToFeatureOptions(option2)
    
    let option3 = Option(context: context)
    option3.name = "Neural Shunt (Ex)"
    option3.content = "Once per day, as a reaction when you fail a saving throw against a mind-affecting effect, you can shunt that effect into your exocortex instead. When you do so, you are not affected by the mind-affecting effect, but for the normal duration of that effect, you lose the Skill Focus feat granted by your exocortex’s memory module and cannot use any of the exocortex’s abilities in any way (including any proficiencies and mods it grants you). When a mind-affecting effect is shunted into the exocortex, spells such as dispel magic or break enchantment can be cast on you to end the effect as if you were affected by it. Once the duration of the mind-affecting effect has ended, your exocortex resumes its normal functions. You must have an exocortex to learn this trick."
    feature21.addToFeatureOptions(option3)
    
    let option4 = Option(context: context)
    option4.name = "Nightvision Processor (Ex)"
    option4.content = "Your visual data processor allows you to see better in conditions of poor lighting, granting you low-light vision and darkvision to a range of 60 feet. You must have the visual data processor mechanic trick to learn this trick."
    feature21.addToFeatureOptions(option4)
    
    let option5 = Option(context: context)
    option5.name = "Overcharge (Ex)"
    option5.content = "As a standard action, you can use your custom rig to overcharge and attack with a ranged energy weapon or a melee weapon with the powered special property that you’re holding. If you hit, you deal 1d6 additional damage of the same type the weapon normally deals. This attack uses three times as many charges from the battery or power cell as normal and can’t be used if the weapon doesn’t have enough charges. This trick has no effect on a weapon without a battery or power cell. You can instead use this ability as a move action on a touched powered weapon that is unattended or attended by an ally to grant the same effect to that weapon’s next attack before the beginning of your next turn."
    feature21.addToFeatureOptions(option5)
    
    let option6 = Option(context: context)
    option6.name = "Overclocking (Ex)"
    option6.content = "You have augmented the performance of your AI for maximum response timing. You gain a +2 insight bonus to initiative checks, and either you (if you have an exocortex) or your drone (if you have a drone) gains a +2 insight bonus to Reflex saves."
    feature21.addToFeatureOptions(option6)
    
    let option7 = Option(context: context)
    option7.name = "Overload Weapon (Ex)"
    option7.content = "As a full action or as a move action by spending 1 Resolve Point, you can cause a powered weapon (either a ranged energy weapon or a melee weapon with the powered special property) in your possession to explode. You can use the weapon as if it were a grenade of the weapon’s item level or lower dealing the weapon’s normal damage type, except the weapon has a range increment of only 10 feet unless it is a thrown weapon. If someone tries to attack with the weapon, it explodes as a grenade would instead, centered on the user, and the user doesn’t receive a Reflex save to negate the grenade’s effect (if any). Once you’ve primed a weapon to explode in this way, it’s difficult to reverse the effect, requiring 8 hours of work and a successful Engineering check (DC = 15 + your engineering bonus); failing the check by 5 or more detonates the weapon. Once detonated, the weapon is destroyed, just like a grenade."
    feature21.addToFeatureOptions(option7)
    
    let option8 = Option(context: context)
    option8.name = "Portable Power (Ex)"
    option8.content = "You can use your custom rig to supply limited power for up to 1 minute to a computer or starship system that lacks power. If this system is part of a much larger network, this trick does not supply power to the entire network, just to a limited point of access (typically a terminal), which might greatly limit functionality. Once you have used portable power on a system, you cannot do so again on that system for 24 hours."
    feature21.addToFeatureOptions(option8)
    
    let option9 = Option(context: context)
    option9.name = "Quick Patch (Ex)"
    option9.content = "When you attempt to patch a system on a starship, you reduce the number of actions required to do so by one. This does not reduce the time needed to patch a glitching system, but you can patch two systems with one action."
    feature21.addToFeatureOptions(option9)
    
    let option10 = Option(context: context)
    option10.name = "Quick Repair (Ex)"
    option10.content = "When you attempt to repair an item, you can do so in half the time normally required (to a minimum of a full action)."
    feature21.addToFeatureOptions(option10)
    
    let option11 = Option(context: context)
    option11.name = "Repair Drone (Ex)"
    option11.content = "When you spend 10 minutes to repair your drone, you repair 25% of its maximum Hit Points instead of 10%. You must have a drone to learn this trick."
    feature21.addToFeatureOptions(option11)
    
    let option12 = Option(context: context)
    option12.name = "Visual Data Processor (Ex)"
    option12.content = "You notice even the smallest shifts in movement, temperature, and vibration, gaining the insight bonus from your bypass class feature to Perception skill checks."
    feature21.addToFeatureOptions(option12)
    level2.addToCompendiumClassFeature(feature21)
    mechanic.addToClassLevel(level2)
    
    let level3 = CompendiumLevel(context: context)
    level3.level = 3
    level3.bab = 2
    level3.fort = 3
    level3.ref = 3
    level3.will = 1
    let feature31 = Feature(context: context)
    feature31.name = "Overload (Ex)"
    feature31.content = "As a standard action, you can cause a short in an electronic device, including most ranged energy weapons, melee weapons with the powered special property, or a single armor upgrade. This makes the device nonfunctional for 1 round. Overload doesn’t cause a locked door, safe, or other device to open, but it prevents anyone from opening it for 1 round. You must be adjacent to the device to use this ability. If you have a drone, you can instead use this ability on an electronic device adjacent to your drone. If you have an exocortex with the wireless hack ability, you can instead use this ability on any electronic device within range of your exocortex’s wireless hack. If you use overload on an item or armor upgrade in someone’s possession, the owner can attempt a Reflex saving throw to negate the effect (DC = 10 + half your mechanic level + your Intelligence modifier). Overload doesn’t affect androids, cybernetics, drones, powered armor, robots, or creatures with the technological subtype (all of which have shielding against this sort of attack), or items larger than Medium. Once a device has been successfully overloaded, a residual static charge prevents that device from being overloaded again for 1 minute."
    level3.addToCompendiumClassFeature(feature31)
    let feature32 = Feature(context: context)
    feature32.name = "Weapon Specialization (Ex)"
    feature32.content = "You gain the Weapon Specialization feat as a bonus feat for each weapon type this class grants you proficiency with."
    level3.addToCompendiumClassFeature(feature32)
    mechanic.addToClassLevel(level3)
    
    let level4 = CompendiumLevel(context: context)
    level4.level = 4
    level4.bab = 3
    level4.fort = 4
    level4.ref = 4
    level4.will = 1
    let feature41 = Feature(context: context)
    feature41.name = "Mechanic Tricks"
    feature41.addToFeatureOptions(option0)
    feature41.addToFeatureOptions(option1)
    feature41.addToFeatureOptions(option2)
    feature41.addToFeatureOptions(option3)
    feature41.addToFeatureOptions(option4)
    feature41.addToFeatureOptions(option5)
    feature41.addToFeatureOptions(option6)
    feature41.addToFeatureOptions(option7)
    feature41.addToFeatureOptions(option8)
    feature41.addToFeatureOptions(option9)
    feature41.addToFeatureOptions(option10)
    feature41.addToFeatureOptions(option11)
    feature41.addToFeatureOptions(option12)
    level4.addToCompendiumClassFeature(feature41)
    mechanic.addToClassLevel(level4)
    
    let level5 = CompendiumLevel(context: context)
    level5.level = 5
    level5.bab = 3
    level5.fort = 4
    level5.ref = 4
    level5.will = 1
    let feature51 = Feature(context: context)
    feature51.name = "Remote Hack (Ex)"
    feature51.content = "You can use your custom rig to attempt Computers and Engineering skill checks at a range of 20 feet. At 7th level and every 2 levels thereafter, this range increases by 10 feet. A target of this ability (or a creature attending or observing your target) can attempt a Perception or Sense Motive check (DC = 10 + 1-1/2 × your mechanic level + your Intelligence modifier) to determine that you are the origin of this activity."
    level5.addToCompendiumClassFeature(feature51)
    mechanic.addToClassLevel(level5)
    
    let level6 = CompendiumLevel(context: context)
    level6.level = 6
    level6.bab = 4
    level6.fort = 5
    level6.ref = 5
    level6.will = 2
    let feature61 = Feature(context: context)
    feature61.name = "Mechanic Tricks"
    feature61.addToFeatureOptions(option0)
    feature61.addToFeatureOptions(option1)
    feature61.addToFeatureOptions(option2)
    feature61.addToFeatureOptions(option3)
    feature61.addToFeatureOptions(option4)
    feature61.addToFeatureOptions(option5)
    feature61.addToFeatureOptions(option6)
    feature61.addToFeatureOptions(option7)
    feature61.addToFeatureOptions(option8)
    feature61.addToFeatureOptions(option9)
    feature61.addToFeatureOptions(option10)
    feature61.addToFeatureOptions(option11)
    feature61.addToFeatureOptions(option12)
    level6.addToCompendiumClassFeature(feature61)
    mechanic.addToClassLevel(level6)
    
    let level7 = CompendiumLevel(context: context)
    level7.level = 7
    level7.bab = 5
    level7.fort = 5
    level7.ref = 5
    level7.will = 2
    let feature71 = Feature(context: context)
    feature71.name = "Expert Rig (Ex)"
    feature71.content = "Your custom rig has improved. Whenever you use your custom rig to successfully hack into a computer, you can also disable one countermeasure installed in the system (except firewalls). In addition, your custom rig can now be used as any engineering or hacking specialty kit of item level 6th or lower, and it has the features of a computer with a tier equal to half your level with the Artificial personality, hardened, or security I upgrade module. It also has an audio/video recorder. You can add extra modules or countermeasures to your custom rig at the normal prices.\n\nYou can also use your custom rig to communicate over an encrypted channel with your ship, allowing you to access your ship’s downloaded data sets and transponder at a range of 5 miles. If you have a drone, you can issue commands to or directly control your drone at the same range."
    level7.addToCompendiumClassFeature(feature71)
    let feature72 = Feature(context: context)
    feature72.name = "Miracle Worker (Ex)"
    feature72.content = "As a move action, you can repair damage to a starship’s systems or modify a suit of armor or weapon to function more efficiently. To use this ability, you must be able to handle the item affected without impediment. You can use this ability once per day at 7th level, plus one additional time per day for every 4 mechanic levels you have beyond 7th. The exact effect of this ability depends on the object or system you are modifying.\n\nArmor: You grant a +2 enhancement bonus to a suit of armor’s EAC and KAC for 1 minute.\n\nWeapon: You grant a +2 enhancement bonus to a weapon’s attack and damage rolls for 1 minute.\n\nDamaged Ship: You restore a number of Hull Points equal to the starship’s base frame HP increment. If this raises the ship’s HP over a multiple of its Critical Threshold, you can repair critical damage to one system per multiple, reducing its severity by one step. For example, if your starship’s Critical Threshold is 8 and you restore 10 HP, reducing the damage to the hull from 17 HP to 7 HP, you could restore one system from wrecked to glitching. Using this ability during starship combat is your action for the turn, and you can do it only during the engineering phase."
    level7.addToCompendiumClassFeature(feature72)
    mechanic.addToClassLevel(level7)
    
    let level8 = CompendiumLevel(context: context)
    level8.level = 8
    level8.bab = 6
    level8.fort = 6
    level8.ref = 6
    level8.will = 2
    let feature81 = Feature(context: context)
    feature81.name = "Mechanic Tricks"
    feature81.addToFeatureOptions(option0)
    feature81.addToFeatureOptions(option1)
    feature81.addToFeatureOptions(option2)
    feature81.addToFeatureOptions(option3)
    feature81.addToFeatureOptions(option4)
    feature81.addToFeatureOptions(option5)
    feature81.addToFeatureOptions(option6)
    feature81.addToFeatureOptions(option7)
    feature81.addToFeatureOptions(option8)
    feature81.addToFeatureOptions(option9)
    feature81.addToFeatureOptions(option10)
    feature81.addToFeatureOptions(option11)
    feature81.addToFeatureOptions(option12)
    
    let option13 = Option(context: context)
    option13.name = "Boost Shield (Ex)"
    option13.content = "Your energy shield grants you a number of temporary Hit Points equal to your Intelligence modifier + double your mechanic level. In addition, if you have already used your shield, you can spend 1 Resolve Point to use it again without having to regain Stamina Points first. This replenishes your shield’s temporary Hit Points to full. You must have the energy shield mechanic trick to learn this trick."
    feature81.addToFeatureOptions(option13)
    
    let option14 = Option(context: context)
    option14.name = "Drone Meld (Ex)"
    option14.content = "As a full action while in contact with your drone, you can reconfigure it into a mechanical drone suit (or a backpack-like apparatus, for the Tiny hover drone) that you can wear. While in this form, the drone can’t take any actions or use any of its abilities, but you gain either the drone’s flight system mods if you have a hover drone, reactive camouflage (and an invisibility field if your drone has it) if you have a stealth drone, or reductive plating if you have a combat drone. You can end the meld and return the drone to its normal form as a full action. Though it normally acts on your turn just after you, the drone can take no actions on that turn other than transforming back."
    feature81.addToFeatureOptions(option14)
    
    let option15 = Option(context: context)
    option15.name = "Engineer’s Eye (Ex)"
    option15.content = "When you are within 10 feet of a trapped or malfunctioning machine or computer, you receive a free Computers, Engineering, or Perception check (as decided by the GM) to notice the trap or defect, whether or not you are actively looking. In addition, due to your intimate knowledge of your ship, you receive one of these checks whenever you board your ship to notice if anything is wrong with the ship’s systems."
    feature81.addToFeatureOptions(option15)
    
    let option16 = Option(context: context)
    option16.name = "Ghost Intrusion (Ex)"
    option16.content = "Whenever you use the Computers skill to access a system and you fail to overcome its defenses by 4 or less, you do not trigger any countermeasures and there is no log of your attempt. If you fail by 5 or more, any countermeasures take effect against you as normal."
    feature81.addToFeatureOptions(option16)
    
    let option17 = Option(context: context)
    option17.name = "Holographic Projector (Ex)"
    option17.content = "Your custom rig can project holographic images as a standard action as often as you like, as per 2nd-level holographic image except it can create speech and has a range of only 120 feet."
    feature81.addToFeatureOptions(option17)
    
    let option18 = Option(context: context)
    option18.name = "Hyperclocking (Ex)"
    option18.content = "You further improve the response time of your AI. If you have a drone, your drone gains a +1 insight bonus to AC. In addition, if your drone is subjected to an attack that normally allows a Reflex save for half damage, it takes no damage if it succeeds at its saving throw. If you have an exocortex, you gain a +1 insight bonus to AC. In addition, whenever you fail a Reflex saving throw, you can spend 1 Resolve Point to reroll the saving throw and take the higher result. You must have the overclocking mechanic trick to learn this trick."
    feature81.addToFeatureOptions(option18)
    
    let option19 = Option(context: context)
    option19.name = "Improved Overcharge (Ex)"
    option19.content = "The additional damage of the overcharge mechanic trick increases to 2d6. You must have the overcharge mechanic trick to learn this trick."
    feature81.addToFeatureOptions(option19)
    
    let option20 = Option(context: context)
    option20.name = "Invisibility Bypass Processor (Ex)"
    option20.content = "Your visual data processor now allows you to see invisible creatures as per see invisibility. You must have the visual data processor mechanic trick to learn this trick."
    feature81.addToFeatureOptions(option20)
    
    let option21 = Option(context: context)
    option21.name = "Resistant Energy (Ex)"
    option21.content = "Even when your energy shield is inactive, the ambient energy protects you from a particular type of energy attack. Choose acid, cold, electricity, fire, or sonic. You gain resistance 5 against that energy type. You must have the energy shield mechanic trick to learn this trick."
    feature81.addToFeatureOptions(option21)
    
    let option22 = Option(context: context)
    option22.name = "Scoutbot (Ex)"
    option22.content = "You’re always crafting rudimentary bots in your spare time, and can use them to scout. It takes you 10 minutes and 1 Resolve Point to create a scoutbot. A scoutbot is a Small technological construct, its EAC and KAC are equal to 10 + your mechanic level, and it has 1 Hit Point per mechanic level you have (and no Stamina Points). It has a land speed of 30 feet, and you can control its movements with your custom rig as a move action. It has a camera that streams visual and auditory data back to your rig. The scoutbot uses your saving throw bonuses if necessary. It is untrained in all skills and has a +0 bonus in all of them, though you can use your own Perception skill when examining the feed from its stream. Once created, the scoutbot lasts for 1 minute per mechanic level you have before falling apart unless otherwise destroyed."
    feature81.addToFeatureOptions(option22)
    
    level8.addToCompendiumClassFeature(feature81)
    mechanic.addToClassLevel(level8)
    
    let level9 = CompendiumLevel(context: context)
    level9.level = 9
    level9.bab = 6
    level9.fort = 6
    level9.ref = 6
    level9.will = 3
    let feature91 = Feature(context: context)
    feature91.name = "Override (Ex)"
    feature91.content = "Your overload class feature now affects androids, drones, robots, and creatures with the technological subtype, which must succeed at a Will saving throw (DC = 10 + half your mechanic level + your Intelligence modifier) or be dazed for 1 round. If the target fails its saving throw by 10 or more, it is not dazed and you can dictate its actions for 1 round, though these actions can’t be obviously self-destructive. Once a creature has attempted a saving throw against this attack (regardless of the result), it is immune to this attack for 24 hours."
    level9.addToCompendiumClassFeature(feature91)
    mechanic.addToClassLevel(level9)
    
    let level10 = CompendiumLevel(context: context)
    level10.level = 10
    level10.bab = 7
    level10.fort = 7
    level10.ref = 7
    level10.will = 3
    let feature101 = Feature(context: context)
    feature101.name = "Mechanic Tricks"
    feature101.addToFeatureOptions(option0)
    feature101.addToFeatureOptions(option1)
    feature101.addToFeatureOptions(option2)
    feature101.addToFeatureOptions(option3)
    feature101.addToFeatureOptions(option4)
    feature101.addToFeatureOptions(option5)
    feature101.addToFeatureOptions(option6)
    feature101.addToFeatureOptions(option7)
    feature101.addToFeatureOptions(option8)
    feature101.addToFeatureOptions(option9)
    feature101.addToFeatureOptions(option10)
    feature101.addToFeatureOptions(option11)
    feature101.addToFeatureOptions(option12)
    feature101.addToFeatureOptions(option13)
    feature101.addToFeatureOptions(option14)
    feature101.addToFeatureOptions(option15)
    feature101.addToFeatureOptions(option16)
    feature101.addToFeatureOptions(option17)
    feature101.addToFeatureOptions(option18)
    feature101.addToFeatureOptions(option19)
    feature101.addToFeatureOptions(option20)
    feature101.addToFeatureOptions(option21)
    feature101.addToFeatureOptions(option22)
    level10.addToCompendiumClassFeature(feature101)
    mechanic.addToClassLevel(level10)
    
    let level11 = CompendiumLevel(context: context)
    level11.level = 11
    level11.bab = 8
    level11.fort = 7
    level11.ref = 7
    level11.will = 3
    let feature111 = Feature(context: context)
    feature111.name = "Coordinated Assault (Ex)"
    feature111.content = "If you have a drone, whenever both you and your drone make attacks against the same target, you each receive a +1 circumstance bonus to your attack rolls. If you have an exocortex instead, whenever you and your exocortex are both attempting to hack a system, you each receive a +1 circumstance bonus to the checks to gain access. In either case, these bonuses increase to +2 at 17th level."
    level11.addToCompendiumClassFeature(feature111)
    mechanic.addToClassLevel(level11)
    
    let level12 = CompendiumLevel(context: context)
    level12.level = 12
    level12.bab = 9
    level12.fort = 8
    level12.ref = 8
    level12.will = 4
    let feature121 = Feature(context: context)
    feature121.name = "Mechanic Tricks"
    feature121.addToFeatureOptions(option0)
    feature121.addToFeatureOptions(option1)
    feature121.addToFeatureOptions(option2)
    feature121.addToFeatureOptions(option3)
    feature121.addToFeatureOptions(option4)
    feature121.addToFeatureOptions(option5)
    feature121.addToFeatureOptions(option6)
    feature121.addToFeatureOptions(option7)
    feature121.addToFeatureOptions(option8)
    feature121.addToFeatureOptions(option9)
    feature121.addToFeatureOptions(option10)
    feature121.addToFeatureOptions(option11)
    feature121.addToFeatureOptions(option12)
    feature121.addToFeatureOptions(option13)
    feature121.addToFeatureOptions(option14)
    feature121.addToFeatureOptions(option15)
    feature121.addToFeatureOptions(option16)
    feature121.addToFeatureOptions(option17)
    feature121.addToFeatureOptions(option18)
    feature121.addToFeatureOptions(option19)
    feature121.addToFeatureOptions(option20)
    feature121.addToFeatureOptions(option21)
    feature121.addToFeatureOptions(option22)
    level12.addToCompendiumClassFeature(feature121)
    mechanic.addToClassLevel(level12)
    
    let level13 = CompendiumLevel(context: context)
    level13.level = 13
    level13.bab = 9
    level13.fort = 8
    level13.ref = 8
    level13.will = 4
    mechanic.addToClassLevel(level13)
    
    let level14 = CompendiumLevel(context: context)
    level14.level = 14
    level14.bab = 10
    level14.fort = 9
    level14.ref = 9
    level14.will = 4
    let feature141 = Feature(context: context)
    feature141.name = "Mechanic Tricks"
    feature141.addToFeatureOptions(option0)
    feature141.addToFeatureOptions(option1)
    feature141.addToFeatureOptions(option2)
    feature141.addToFeatureOptions(option3)
    feature141.addToFeatureOptions(option4)
    feature141.addToFeatureOptions(option5)
    feature141.addToFeatureOptions(option6)
    feature141.addToFeatureOptions(option7)
    feature141.addToFeatureOptions(option8)
    feature141.addToFeatureOptions(option9)
    feature141.addToFeatureOptions(option10)
    feature141.addToFeatureOptions(option11)
    feature141.addToFeatureOptions(option12)
    feature141.addToFeatureOptions(option13)
    feature141.addToFeatureOptions(option14)
    feature141.addToFeatureOptions(option15)
    feature141.addToFeatureOptions(option16)
    feature141.addToFeatureOptions(option17)
    feature141.addToFeatureOptions(option18)
    feature141.addToFeatureOptions(option19)
    feature141.addToFeatureOptions(option20)
    feature141.addToFeatureOptions(option21)
    feature141.addToFeatureOptions(option22)
    let option23 = Option(context: context)
    option23.name = "Extra Mod (Ex)"
    option23.content = "If you have a drone, your drone gains an additional basic mod. If you have an exocortex, you gain an additional basic mod. It can’t be a basic mod taken a second time as an advanced mod. You can rebuild this extra mod when you gain a mechanic level as with any other mod, but you can’t rebuild this mod to convert it into the advanced version of the mod."
    feature141.addToFeatureOptions(option23)
    
    let option24 = Option(context: context)
    option24.name = "Improved Resistant Energy (Ex)"
    option24.content = "Choose an additional energy type from resistant energy. You gain resistance 15 against both this and your original energy type. You must have the energy shield and resistant energy mechanic tricks to learn this trick."
    feature141.addToFeatureOptions(option24)
    
    let option25 = Option(context: context)
    option25.name = "Invisibility-Hampering Projector (Ex)"
    option25.content = "As a move action, you can use your custom rig’s holographic projector to project a holographic image in a direct overlay over an invisible creature within 120 feet, and your custom rig’s computer moves the image to follow the invisible creature, effectively negating the creature’s invisibility as long as it remains within 120 feet of you. If it moves beyond that range, it breaks the effect until you use this ability again. You must have the holographic projector, invisibility bypass processor, and visual data processor mechanic tricks to learn this trick."
    feature141.addToFeatureOptions(option25)
    
    let option26 = Option(context: context)
    option26.name = "Mod Tinkerer (Ex)"
    option26.content = "You can spend 24 hours of uninterrupted work to exchange all your drone or exocortex mods at any time, even if you haven’t gained a level. Any other drone features (such as its chassis or bonus feats) can still be exchanged only when you gain a level."
    feature141.addToFeatureOptions(option26)
    
    let option27 = Option(context: context)
    option27.name = "Saboteur (Ex)"
    option27.content = "Whenever you use the Engineering skill to sabotage or disable a device, you can roll twice and take the better result. In addition, if you have the appropriate tools (including your custom rig), performing these tasks takes half the normal amount of time, to a minimum of 1 move action."
    feature141.addToFeatureOptions(option27)
    
    let option28 = Option(context: context)
    option28.name = "Superior Overcharge (Ex)"
    option28.content = "The additional damage of the overcharge mechanic trick increases to 4d6. You must have the overcharge and improved overcharge mechanic tricks to learn this trick. You can select this trick multiple times. Each time you do after the first, increase the damage by 1d6 (to a maximum of 7d6 if you select it all four times)."
    feature141.addToFeatureOptions(option28)
    
    let option29 = Option(context: context)
    option29.name = "Ultraclocking (Ex)"
    option29.content = "If you have a drone, you can grant the effects of haste to your drone for 1 minute as a move action. If you have an exocortex, you can gain the effects of haste for 1 minute as a move action. Once you or your drone has used this ability, you cannot use it again until you spend 1 Resolve Point to regain Stamina Points from a 10-minute rest. You must have the overclocking and hyperclocking mechanic tricks to learn this trick."
    feature141.addToFeatureOptions(option29)
    level14.addToCompendiumClassFeature(feature141)
    mechanic.addToClassLevel(level14)
    
    let level15 = CompendiumLevel(context: context)
    level15.level = 15
    level15.bab = 11
    level15.fort = 9
    level15.ref = 9
    level15.will = 5
    mechanic.addToClassLevel(level15)
    
    let level16 = CompendiumLevel(context: context)
    level16.level = 16
    level16.bab = 12
    level16.fort = 10
    level16.ref = 10
    level16.will = 5
    let feature161 = Feature(context: context)
    feature161.name = "Mechanic Tricks"
    feature161.addToFeatureOptions(option0)
    feature161.addToFeatureOptions(option1)
    feature161.addToFeatureOptions(option2)
    feature161.addToFeatureOptions(option3)
    feature161.addToFeatureOptions(option4)
    feature161.addToFeatureOptions(option5)
    feature161.addToFeatureOptions(option6)
    feature161.addToFeatureOptions(option7)
    feature161.addToFeatureOptions(option8)
    feature161.addToFeatureOptions(option9)
    feature161.addToFeatureOptions(option10)
    feature161.addToFeatureOptions(option11)
    feature161.addToFeatureOptions(option12)
    feature161.addToFeatureOptions(option13)
    feature161.addToFeatureOptions(option14)
    feature161.addToFeatureOptions(option15)
    feature161.addToFeatureOptions(option16)
    feature161.addToFeatureOptions(option17)
    feature161.addToFeatureOptions(option18)
    feature161.addToFeatureOptions(option19)
    feature161.addToFeatureOptions(option20)
    feature161.addToFeatureOptions(option21)
    feature161.addToFeatureOptions(option22)
    feature161.addToFeatureOptions(option23)
    feature161.addToFeatureOptions(option24)
    feature161.addToFeatureOptions(option25)
    feature161.addToFeatureOptions(option26)
    feature161.addToFeatureOptions(option27)
    feature161.addToFeatureOptions(option28)
    feature161.addToFeatureOptions(option29)
    level16.addToCompendiumClassFeature(feature161)
    mechanic.addToClassLevel(level16)
    
    let level17 = CompendiumLevel(context: context)
    level17.level = 17
    level17.bab = 12
    level17.fort = 10
    level17.ref = 10
    level17.will = 5
    let feature171 = Feature(context: context)
    feature171.name = "Control Net (Ex)"
    feature171.content = "You are capable of operating multiple AIs, one in a drone and one in an exocortex. You must divide up your mechanic level between these different AIs, and each gains abilities based on the number of levels you assign to it. Every time you gain a level in mechanic, you can change the distribution of levels between these AIs using your custom rig after 24 hours of uninterrupted work. While each AI can act independently to the limits of its ability, you can control them as normal (although you can directly control only one AI at a time). If the number of levels assigned to your exocortex is less than your mechanic level, your exocortex grants a smaller increase to your base attack bonus when using combat tracking, as noted in the table below. You gain additional exocortex abilities, such as wireless hack and multitasking, based upon the level you assign to it as normal.\n\nIncrease To BAB:    Levels Assigned\n1–4                 +1\n5–8                 +2\n9–12                +3\n13–16               +4\n17–20               +5"
    level17.addToCompendiumClassFeature(feature171)
    mechanic.addToClassLevel(level17)
    
    let level18 = CompendiumLevel(context: context)
    level18.level = 18
    level18.bab = 13
    level18.fort = 11
    level18.ref = 11
    level18.will = 6
    let feature181 = Feature(context: context)
    feature181.name = "Mechanic Tricks"
    feature181.addToFeatureOptions(option0)
    feature181.addToFeatureOptions(option1)
    feature181.addToFeatureOptions(option2)
    feature181.addToFeatureOptions(option3)
    feature181.addToFeatureOptions(option4)
    feature181.addToFeatureOptions(option5)
    feature181.addToFeatureOptions(option6)
    feature181.addToFeatureOptions(option7)
    feature181.addToFeatureOptions(option8)
    feature181.addToFeatureOptions(option9)
    feature181.addToFeatureOptions(option10)
    feature181.addToFeatureOptions(option11)
    feature181.addToFeatureOptions(option12)
    feature181.addToFeatureOptions(option13)
    feature181.addToFeatureOptions(option14)
    feature181.addToFeatureOptions(option15)
    feature181.addToFeatureOptions(option16)
    feature181.addToFeatureOptions(option17)
    feature181.addToFeatureOptions(option18)
    feature181.addToFeatureOptions(option19)
    feature181.addToFeatureOptions(option20)
    feature181.addToFeatureOptions(option21)
    feature181.addToFeatureOptions(option22)
    feature181.addToFeatureOptions(option23)
    feature181.addToFeatureOptions(option24)
    feature181.addToFeatureOptions(option25)
    feature181.addToFeatureOptions(option26)
    feature181.addToFeatureOptions(option27)
    feature181.addToFeatureOptions(option28)
    feature181.addToFeatureOptions(option29)
    level18.addToCompendiumClassFeature(feature181)
    mechanic.addToClassLevel(level18)
    
    let level19 = CompendiumLevel(context: context)
    level19.level = 19
    level19.bab = 14
    level19.fort = 11
    level19.ref = 11
    level19.will = 6
    let feature191 = Feature(context: context)
    feature191.name = "Ghost In the Machine (Ex)"
    feature191.content = "When using your override class feature to affect an android, drone, robot, or creature with the technological subtype, a target that fails its saving throw by any amount is not dazed, and you can instead dictate its actions for the next round. These actions can’t be obviously self-destructive. Once a creature has attempted a saving throw against this attack (regardless of the result), it is immune to this attack for 24 hours unless you spend 1 Resolve Point. You can continue to spend Resolve Points in this manner each round to make the creature susceptible to override again."
    level19.addToCompendiumClassFeature(feature191)
    let feature192 = Feature(context: context)
    feature192.name = "Superior Rig (Ex)"
    feature192.content = "Your custom rig’s computer functions now gain bonus lockout and wipe countermeasures. You can use your custom rig normally even when its lockout is active (you have special authorization no one else can access under any circumstances), and while any wiped data cannot be recovered by anyone else (as if the data module were destroyed), you can automatically recover it with 8 hours of work. These countermeasures have no additional cost and do not count against the maximum number of countermeasures your custom rig can have.\n\nAdditionally, you can use your custom rig to communicate over an encrypted channel with your ship at a range encompassing a planet and its close orbit, allowing you to remotely pilot your starship from point to point on the same planet or to and from orbit (as well as use the encrypted communications functions of your expert and advanced rig at the same range). If you have a drone, you can issue commands to or directly control your drone over an encrypted channel at the same range."
    level19.addToCompendiumClassFeature(feature192)
    mechanic.addToClassLevel(level19)
    
    let level20 = CompendiumLevel(context: context)
    level20.level = 20
    level20.bab = 15
    level20.fort = 12
    level20.ref = 12
    level20.will = 6
    let feature201 = Feature(context: context)
    feature201.name = "Tech Master (Ex)"
    feature201.content = "You are a master of technology. You can spend 1 Resolve Point to craft any technological weapon, armor, or item at a rate of 1 minute per item level or spend 1 Resolve Point to convert any existing technological armor or weapon into another suit of armor or another weapon of equal or lesser value at a rate of 1 minute per item level. This uses the normal crafting rules presented, but the item being converted counts as its full value in crafting components. You cannot convert a one-handed weapon into a two-handed weapon. When converting an item into a cheaper item, any excess value is lost and cannot be reclaimed by converting the item back."
    level20.addToCompendiumClassFeature(feature201)
    let feature202 = Feature(context: context)
    feature202.name = "Mechanic Tricks"
    feature202.addToFeatureOptions(option0)
    feature202.addToFeatureOptions(option1)
    feature202.addToFeatureOptions(option2)
    feature202.addToFeatureOptions(option3)
    feature202.addToFeatureOptions(option4)
    feature202.addToFeatureOptions(option5)
    feature202.addToFeatureOptions(option6)
    feature202.addToFeatureOptions(option7)
    feature202.addToFeatureOptions(option8)
    feature202.addToFeatureOptions(option9)
    feature202.addToFeatureOptions(option10)
    feature202.addToFeatureOptions(option11)
    feature202.addToFeatureOptions(option12)
    feature202.addToFeatureOptions(option13)
    feature202.addToFeatureOptions(option14)
    feature202.addToFeatureOptions(option15)
    feature202.addToFeatureOptions(option16)
    feature202.addToFeatureOptions(option17)
    feature202.addToFeatureOptions(option18)
    feature202.addToFeatureOptions(option19)
    feature202.addToFeatureOptions(option20)
    feature202.addToFeatureOptions(option21)
    feature202.addToFeatureOptions(option22)
    feature202.addToFeatureOptions(option23)
    feature202.addToFeatureOptions(option24)
    feature202.addToFeatureOptions(option25)
    feature202.addToFeatureOptions(option26)
    feature202.addToFeatureOptions(option27)
    feature202.addToFeatureOptions(option28)
    feature202.addToFeatureOptions(option29)
    level20.addToCompendiumClassFeature(feature202)
    mechanic.addToClassLevel(level20)

}

//Mystic  ################################################################################################################

func loadMystic() {
    let Mystic = CompendiumClass(context: context)
    Mystic.name = "Mystic"
    Mystic.hitPoints = 6
    Mystic.staminaPoints = 6
    Mystic.skillRanks = 6
    Mystic.classSkills = "Bluff, Culture, Diplomacy, Disguise, Intimidate, Life Science, Medicine, Mysticism, Perception, Profession, Sense Motive, Survival"
    
    let level1 = CompendiumLevel(context: context)
    level1.level = 1
    level1.bab = 0
    level1.fort = 0
    level1.ref = 0
    level1.will = 2
    let slot1x1 = SpellSlot(context: context)
    slot1x1.slots = 2
    level1.addToCompendiumClassSlots(slot1x1)
    let slot1x2 = SpellSlot(context: context)
    slot1x2.slots = 0
    level1.addToCompendiumClassSlots(slot1x2)
    let slot1x3 = SpellSlot(context: context)
    slot1x3.slots = 0
    level1.addToCompendiumClassSlots(slot1x3)
    let slot1x4 = SpellSlot(context: context)
    slot1x4.slots = 0
    level1.addToCompendiumClassSlots(slot1x4)
    let slot1x5 = SpellSlot(context: context)
    slot1x5.slots = 0
    level1.addToCompendiumClassSlots(slot1x5)
    let slot1x6 = SpellSlot(context: context)
    slot1x6.slots = 0
    level1.addToCompendiumClassSlots(slot1x6)
    let feature10 = Feature(context: context)
    feature10.name = "Proficiencies"
    feature10.content = "Armor-light; Weapons– basic melee weapons, grenades, small arms"
    level1.addToCompendiumClassFeature(feature10)
    let feature11 = Feature(context: context)
    feature11.name = "Spells"
    feature11.content = "You cast spells drawn from the mystic spell list. To learn or cast a spell, you must have a Wisdom score equal to at least 10 + the spell’s level. The Difficulty Class for a saving throw against your spell is 10 + the spell’s level + your Wisdom modifier.\n\nYou can cast only a certain number of spells of each spell level per day. Your number of spells per day is given on Table 4–4: Mystic. In addition, you receive bonus spells per day if you have a Wisdom modifier of +1 or higher, as shown on Table 4–5: Mystic Bonus spells—note that you only receive these bonus spells once you can cast spells of that level normally. You can also cast 0-level spells. These spells are cast like any other spell, but there is no limit to how many 0-level spells you can cast each day.\n\nYour selection of spells is limited. You begin play knowing four 0-level spells and two 1st-level spells of your choice. At each new mystic level, you learn one or more new spells, as indicated on Table 4–6: Mystic Spells Known. Unlike spells per day, the number of spells you know isn’t affected by your Wisdom modifier.\n\nEvery time you gain a level, you can swap out one spell you already know and learn a single new spell of the same level in its place. In effect, you lose the old spell in exchange for the new one. You must choose whether or not to swap the spell at the same time you gain new spells known for the level.\n\nYou can cast any mystic spell you know at any time, assuming you have not yet used up your allotment of spells per day for the spell’s level. You can also cast a spell using a higher-level spell slot. For instance, if you want to cast a 1st-level spell but have used up all your 1st-level spells for the day, you can use a spell from a 2nd-level slot instead if you have one.\n\nYou can also decipher magical inscriptions that would otherwise be unintelligible or, as a full action, identify any spells encoded in a spell gem as a full action. This does not normally invoke the magic contained within, although it may do so in the case of a Cursed or trapped spell gem."
    level1.addToCompendiumClassFeature(feature11)
    let feature12 = Feature(context: context)
    feature12.name = "Connection"
    feature12.content = "You have a mysterious connection with some force that grants you magical powers. The exact nature of your connection can vary widely, and even mystics who share the same connection may interpret it differently. You must pick one connection upon taking your first level of mystic—once made, this choice can’t be changed.\n\nMany mystics serve as priests of various gods, and while you can theoretically choose any type of connection with any entity or concept, deities rarely grant connections that don’t fit within their ethos. As such, each connection lists the deities and philosophies commonly associated with it."
    let option121 = Option(context: context)
    option121.name = "Akashic"
    option121.content = "You’re linked to the collective knowledge of every sentient species that ever lived that’s held in the Akashic Record, an Astral library of perfect psychic records of every moment in history. You might be an ancient lorekeeper, an inquisitive student of the occult, an intuitive consulting detective, or a secret-hoarding spy."
    feature12.addToFeatureOptions(option121)
    let option122 = Option(context: context)
    option122.name = "Devastator"
    option122.content = "You have embraced a nihilistic view that values nothing and thus sees only nothingness as having value. You are devoted to destroying the existence of all structure and form, from individual lives to the fabric of societies and even reality itself.\n\nYou’re focused on annihilation through any means, and you draw power from the dissolution of lives."
    feature12.addToFeatureOptions(option122)
    let option123 = Option(context: context)
    option123.name = "Empath"
    option123.content = "Your connection helps you sense emotions and notice details others can’t. You might be a diplomat, an investigator, a mind-reading bodyguard, a ship’s psychologist, or a psychic con artist."
    feature12.addToFeatureOptions(option123)
    let option124 = Option(context: context)
    option124.name = "Healer"
    option124.content = "Your connection channels the life force of all things—as well as its counterpart, death. You’re an expert healer, but not necessarily a selfless one. You might be a traveling doctor, a haunted medium, a military medic, or a tyrannical necromancer."
    feature12.addToFeatureOptions(option124)
    let option125 = Option(context: context)
    option125.name = "Mindbreaker"
    option125.content = "You use your raw will and understanding of the mind’s structure to crush and demoralize your enemies. You might be a special ops assassin, a psychic interrogator, or a righteous military crusader breaking the enemy’s spirit on the battlefield."
    feature12.addToFeatureOptions(option125)
    let option126 = Option(context: context)
    option126.name = "Overlord"
    option126.content = "You realize that not all connections are symmetrical, and seek to be the dominant force in any situation. You aren’t necessarily evil; perhaps you consider yourself a benevolent philosopher-monarch who takes control for the good of your charges. You might also be a cult leader, a criminal mastermind, or a hypnotist."
    feature12.addToFeatureOptions(option126)
    let option127 = Option(context: context)
    option127.name = "Star Shaman"
    option127.content = "Your connection channels the energy of the cosmos, its celestial bodies, and the dark voids between them. You might be a brilliant astronomer, a daredevil starpilot, a Hyperspace explorer, a prophetic astrologer, or a would-be transhuman godling."
    feature12.addToFeatureOptions(option127)
    let option128 = Option(context: context)
    option128.name = "Xenodruid"
    option128.content = "You channel the energy inherent in the ecosystems around you, taking inspiration from the endless cycles of the natural world. You might be a corporate biotech researcher or a hermitic shaman for example."
    feature12.addToFeatureOptions(option128)
    level1.addToCompendiumClassFeature(feature12)
    let feature13 = Feature(context: context)
    feature13.name = "Connection Power"
    feature13.content = "At 1st level, 3rd level, and every 3 levels thereafter, you gain a connection power unique to your connection. If a connection power allows a saving throw to resist its effects, the DC is equal to 10 + half your mystic level + your Wisdom modifier. If the power requires an enemy to attempt a skill check, the DC is equal to 10 + 1-1/2 × your mystic level + your Wisdom modifier."
    let option131 = Option(context: context)
    option131.name = "Akashic - Akashic Knowledge (Ex)"
    option131.content = "You gain the channel skill ability at 1st level (instead of 2nd level). Each day when you recover your spell slots, you can tap into the Akashic Record, enabling you to choose one Profession skill and add that to your list of associated skills for the channel skill class feature."
    feature13.addToFeatureOptions(option131)
    let option132 = Option(context: context)
    option132.name = "Devastator - Blood Mark (Su)"
    option132.content = "Whenever you kill or destroy a creature or reduce a creature to 0 HP, you immediately gain a blood mark on your skin, which manifests as a swirled, blood-red black hole. A blood mark lasts for a number of rounds equal to your Wisdom modifier (minimum 1). The blood mark is attuned to creatures of the same type as the creature you killed, destroyed, or reduced to 0 HP to gain the blood mark, and it grants you one of the following benefits of your choice: a +1 morale bonus to attacks against creatures of the attuned type, a +1 morale bonus to AC against attacks from creatures of the attuned type, a +1 morale bonus to saving throws against attacks and effects created by creatures of the attuned type, or a +1 morale bonus to damage dealt to creatures of the attuned type. You choose this benefit when you gain the blood mark, and it lasts for as long as the mark lasts. You cannot have more than one blood mark active at a time, and gaining a new blood mark ends any previous blood mark you had active."
    feature13.addToFeatureOptions(option132)
    let option133 = Option(context: context)
    option133.name = "Empath - Empathy (Su)"
    option133.content = "As a full action, you can attempt a Sense Motive check to read the emotions of a particular creature (DC = 20 or 10 + its Bluff modifier, whichever is higher). If you succeed, you learn its general disposition and attitude toward creatures within 30 feet of it, and you gain a +2 circumstance bonus to Bluff, Diplomacy, Intimidate, and Sense Motive checks against that creature for 1 hour. Whether you succeed or fail, after opening your mind to read emotions, you take a –2 penalty to saving throws against mind-affecting effects for 1 minute."
    feature13.addToFeatureOptions(option133)
    let option134 = Option(context: context)
    option134.name = "Healer - Healing Channel (Su)"
    option134.content = "You can heal yourself and your allies. You can spend 1 Resolve Point to channel this energy. Healing yourself with channeled energy is a move action, healing an ally you touch is a standard action, and healing all allies within 30 feet is a full action. This energy restores 2d8 Hit Points and increases by 2d8 at 3rd level and every 3 levels thereafter."
    feature13.addToFeatureOptions(option134)
    let option135 = Option(context: context)
    option135.name = "Mindbreaker - Share Pain (Su)"
    option135.content = "Whenever a foe deals damage to you, you can spend 1 Resolve Point as a reaction to shift some of the pain back onto that foe. Unless the foe succeeds at a Will save, reduce the damage you take from the attack by your mystic level (to a maximum of the attack’s damage), and the foe takes an equal amount of damage. This is a mind-affecting pain effect."
    feature13.addToFeatureOptions(option135)
    let option136 = Option(context: context)
    option136.name = "Overlord - Inexplicable Commands (Su)"
    option136.content = "When one of your mind-affecting charm or compulsion spells or spell-like abilities ends, the target loses all memory that it was magically controlled or influenced. That creature still remembers the actions it took, but may be confused by them."
    feature13.addToFeatureOptions(option136)
    let option137 = Option(context: context)
    option137.name = "Star Shaman - Walk the Void (Su)"
    option137.content = "You are immune to the harmful environmental effects of outer space and vacuum. You also gain a fly speed of 20 feet while in space. In addition, whenever you can see the stars, you can determine your precise location. Finally, add Piloting to your list of class skills."
    feature13.addToFeatureOptions(option137)
    let option138 = Option(context: context)
    option138.name = "Xenodruid - Speak with Animals (Su)"
    option138.content = "You can communicate with any creature of the animal type, though this doesn’t make it friendly. If an animal is friendly toward you, it may do you favors. This ability allows you to use Intimidate to bully animals, and you can use any other language-dependent effect against animals."
    feature13.addToFeatureOptions(option138)
    level1.addToCompendiumClassFeature(feature13)
    let feature14 = Feature(context: context)
    feature14.name = "Connection Spell"
    feature14.content = "Your connection grants you additional spells known, one for each level of mystic spell you can cast, starting at 1st level and at any level when you normally gain access to a new spell level. These spells are in addition to the spells known listed on Table 4–6: Mystic Spells Known. These spells can’t be exchanged for different spells at higher levels (except in specific cases; see below). The spell level of each spell is listed in your connection’s entry." + "\n\n" + "If your connection lists a single variable-level spell for all spell levels at the start of its spells entry, you gain that variable-level spell when you first get your connection spell for each level. The next time you gain a connection spell, add the next higher level of the variable-level spell to your list of spells known. You immediately lose the lower-level version of that variable-level spell and replace it with the listed connection spell for that lower level."
    let option141 = Option(context: context)
    option141.name = "Akashic"
    option141.content = "Identify"
    feature14.addToFeatureOptions(option141)
    let option142 = Option(context: context)
    option142.name = "Devastator"
    option142.content = "Carnivorous"
    feature14.addToFeatureOptions(option142)
    let option143 = Option(context: context)
    option143.name = "Empath"
    option143.content = "Detect Thoughts"
    feature14.addToFeatureOptions(option143)
    let option144 = Option(context: context)
    option144.name = "Healer"
    option144.content = "Mystic Cure (replaced by: Lesser Remove Condition)"
    feature14.addToFeatureOptions(option144)
    let option145 = Option(context: context)
    option145.name = "Mindbreaker"
    option145.content = "Mind Thrust (replaced by: Lesser Confusion)"
    feature14.addToFeatureOptions(option145)
    let option146 = Option(context: context)
    option146.name = "Overlord"
    option146.content = "Command"
    feature14.addToFeatureOptions(option146)
    let option147 = Option(context: context)
    option147.name = "Star Shaman"
    option147.content = "Shooting Stars (as Magic Missile)"
    feature14.addToFeatureOptions(option147)
    let option148 = Option(context: context)
    option148.name = "Xenodruid"
    option148.content = "Life Bubble"
    feature14.addToFeatureOptions(option148)
    level1.addToCompendiumClassFeature(feature14)
    let feature15 = Feature(context: context)
    feature15.name = "Healing Touch (Su)"
    feature15.content = "Once per day, you can spend 10 minutes to magically heal an ally up to 5 Hit Points per mystic level"
    level1.addToCompendiumClassFeature(feature15)
    Mystic.addToClassLevel(level1)
    
    let level2 = CompendiumLevel(context: context)
    level2.level = 2
    level2.bab = 1
    level2.fort = 0
    level2.ref = 0
    level2.will = 3
    let slot2x1 = SpellSlot(context: context)
    slot2x1.slots = 2
    level2.addToCompendiumClassSlots(slot2x1)
    let slot2x2 = SpellSlot(context: context)
    slot2x2.slots = 0
    level2.addToCompendiumClassSlots(slot2x2)
    let slot2x3 = SpellSlot(context: context)
    slot2x3.slots = 0
    level2.addToCompendiumClassSlots(slot2x3)
    let slot2x4 = SpellSlot(context: context)
    slot2x4.slots = 0
    level2.addToCompendiumClassSlots(slot2x4)
    let slot2x5 = SpellSlot(context: context)
    slot2x5.slots = 0
    level2.addToCompendiumClassSlots(slot2x5)
    let slot2x6 = SpellSlot(context: context)
    slot2x6.slots = 0
    level2.addToCompendiumClassSlots(slot2x6)
    let feature21 = Feature(context: context)
    feature21.name = "Channel Skill (Su)"
    feature21.content = "You draw strange feelings, instincts, knowledge, and urges from your connection, augmenting your prowess in certain tasks. Each connection has two skills associated with it. You gain a +1 insight bonus to skill checks with your connection’s associated skills. This bonus increases by 1 at 5th level and every 3 levels thereafter."
    let option211 = Option(context: context)
    option211.name = "Akashic"
    option211.content = "Culture and Mysticism"
    feature21.addToFeatureOptions(option211)
    let option212 = Option(context: context)
    option212.name = "Devastator"
    option212.content = "Intimidate and Perception"
    feature21.addToFeatureOptions(option212)
    let option213 = Option(context: context)
    option213.name = "Empath"
    option213.content = "Perception and Sense Motive"
    feature21.addToFeatureOptions(option213)
    let option214 = Option(context: context)
    option214.name = "Healer"
    option214.content = "Medicine and Mysticism"
    feature21.addToFeatureOptions(option214)
    let option215 = Option(context: context)
    option215.name = "Mindbreaker"
    option215.content = "Bluff and Intimidate"
    feature21.addToFeatureOptions(option215)
    let option216 = Option(context: context)
    option216.name = "Overlord"
    option216.content = "Diplomacy and Intimidate"
    feature21.addToFeatureOptions(option216)
    let option217 = Option(context: context)
    option217.name = "Star Shaman"
    option217.content = "Perception and Piloting"
    feature21.addToFeatureOptions(option217)
    let option218 = Option(context: context)
    option218.name = "Xenodruid"
    option218.content = "Life Science and Survival"
    feature21.addToFeatureOptions(option218)
    feature21.compendiumClassFeature = level2
    let feature22 = Feature(context: context)
    feature22.name = "Mindlink (Sp)"
    feature22.content = "You can form a mental link with creatures you touch, communicating information rapidly through it. You can use mindlink at will as a spell-like ability, though only once per day on any given individual."
    feature22.compendiumClassFeature = level2
    Mystic.addToClassLevel(level2)
    
    let level3 = CompendiumLevel(context: context)
    level3.level = 3
    level3.bab = 2
    level3.fort = 1
    level3.ref = 1
    level3.will = 3
    let slot3x1 = SpellSlot(context: context)
    slot3x1.slots = 3
    level3.addToCompendiumClassSlots(slot3x1)
    let slot3x2 = SpellSlot(context: context)
    slot3x2.slots = 0
    level3.addToCompendiumClassSlots(slot3x2)
    let slot3x3 = SpellSlot(context: context)
    slot3x3.slots = 0
    level3.addToCompendiumClassSlots(slot3x3)
    let slot3x4 = SpellSlot(context: context)
    slot3x4.slots = 0
    level3.addToCompendiumClassSlots(slot3x4)
    let slot3x5 = SpellSlot(context: context)
    slot3x5.slots = 0
    level3.addToCompendiumClassSlots(slot3x5)
    let slot3x6 = SpellSlot(context: context)
    slot3x6.slots = 0
    level3.addToCompendiumClassSlots(slot3x6)
    let feature31 = Feature(context: context)
    feature31.name = "Weapon Specialization (Ex)"
    feature31.content = "You gain Weapon Specialization as a bonus feat for each weapon type this class grants you proficiency with."
    feature31.compendiumClassFeature = level3
    let feature32 = Feature(context: context)
    feature32.name = "Connection Power"
    let option321 = Option(context: context)
    option321.name = "Akashic - Access Akashic Record (Su)"
    option321.content = "You can access the Akashic Record to augment your skills. You can spend 1 Resolve Point to attempt a skill check as if you had ranks in that skill equal to your mystic level."
    feature32.addToFeatureOptions(option321)
    let option322 = Option(context: context)
    option322.name = "Devastator - Destructive Frenzy (Sp)"
    option322.content = "You can expend a 1st-level or higher mystic spell slot as a move action to go into a destructive frenzy. This grants you a bonus to attack and damage rolls with basic melee weapons and small arms. The bonus to attacks is equal the level of spell slot expended – 2 (minimum +1 bonus), and the bonus to damage is equal to the level of the spell slot expended. This frenzy lasts for a number of rounds equal to your Wisdom modifier (minimum 1) plus the level of the spell slot expended. You can dismiss your destructive frenzy early as a free action. While your destructive frenzy is active, you can’t cast spells or use any other extraordinary, spell-like, or supernatural ability that requires you to spend an action."
    feature32.addToFeatureOptions(option322)
    let option323 = Option(context: context)
    option323.name = "Empath - Greater Mindlink (Su)"
    option323.content = "You can use your mindlink ability on the same creature as many times per day as you wish, and the communication can be both ways, though the maximum of 10 minutes of communication per round still applies."
    feature32.addToFeatureOptions(option323)
    let option324 = Option(context: context)
    option324.name = "Healer - Lifelink (Su)"
    option324.content = "At the start of each turn, you can choose an ally within 30 feet who has taken Hit Point damage and transfer her wounds to yourself, dealing an amount of damage up to your mystic level to your Hit Points (bypassing any Stamina Points you may have) and healing the ally’s Hit Points an equal amount. This doesn’t require any action on your part. You can’t prevent or reduce the damage you take from lifelink."
    feature32.addToFeatureOptions(option324)
    let option325 = Option(context: context)
    option325.name = "Mindbreaker - Backlash (Su)"
    option325.content = "Whenever a foe succeeds at a Will save against one of your spells and completely negates the effect, that foe takes 1 nonlethal damage for each mystic level you have. This is a mind-affecting pain effect."
    feature32.addToFeatureOptions(option325)
    let option326 = Option(context: context)
    option326.name = "Overlord - Forced Amity (Sp)"
    option326.content = "You can spend 1 Resolve Point as a standard action to shunt positive emotions and thoughts through your connection, forcing a humanoid creature to become friendly to you for a time. This functions as charm person."
    feature32.addToFeatureOptions(option326)
    let option327 = Option(context: context)
    option327.name = "Star Shaman - Starlight Form (Su)"
    option327.content = "You can transform yourself into blazing starlight as a standard action. Your body sheds normal light in a 30-foot radius, and you gain the benefits of concealment (20% miss chance). At 7th level, a creature that ends its turn adjacent to your starlight form must succeed at a Fortitude save or be blinded for 1 round. You can maintain your starlight form for a number of minutes per day equal to your mystic level; this duration does not need to be continuous, but it must be used in 1-minute increments. You can forgo the ability’s concealment and blinding aspects to instead simply shed light, though this still counts against the ability’s duration for the day."
    feature32.addToFeatureOptions(option327)
    let option328 = Option(context: context)
    option328.name = "Xenodruid - Grasping Vines (Su)"
    option328.content = "You can spend 1 Resolve Point as a standard action to cause an area within 100 feet to sprout writhing vines in a 20-foot-radius spread. The target surface must be solid but does not need to be capable of sustaining plants normally. The vines have a reach of 5 feet and attempt to wrap around creatures in the area of effect or those that enter the area; such a creature must succeed at a Reflex save or gain the entangled condition. Creatures that successfully save can move as normal, but those that remain in the area must attempt a new save at the end of your turn each round. Creatures moving into the area must attempt a save immediately; failure ends their movement and they become entangled. An entangled creature can break free as a move action with a successful Acrobatics check or DC 15 Strength check. The vines last for a number of rounds equal to your mystic level, and the entire area is difficult terrain while the effect lasts. At 11th level, the vines can reach 10 feet and sprout thorns that deal 1d6 piercing damage each round to creatures in the area."
    feature32.addToFeatureOptions(option328)
    feature32.compendiumClassFeature = level3
    Mystic.addToClassLevel(level3)
    
    let level4 = CompendiumLevel(context: context)
    level4.level = 4
    level4.bab = 3
    level4.fort = 1
    level4.ref = 1
    level4.will = 4
    let slot4x1 = SpellSlot(context: context)
    slot4x1.slots = 3
    level4.addToCompendiumClassSlots(slot4x1)
    let slot4x2 = SpellSlot(context: context)
    slot4x2.slots = 2
    level4.addToCompendiumClassSlots(slot4x2)
    let slot4x3 = SpellSlot(context: context)
    slot4x3.slots = 0
    level4.addToCompendiumClassSlots(slot4x3)
    let slot4x4 = SpellSlot(context: context)
    slot4x4.slots = 0
    level4.addToCompendiumClassSlots(slot4x4)
    let slot4x5 = SpellSlot(context: context)
    slot4x5.slots = 0
    level4.addToCompendiumClassSlots(slot4x5)
    let slot4x6 = SpellSlot(context: context)
    slot4x6.slots = 0
    level4.addToCompendiumClassSlots(slot4x6)
    let feature41 = Feature(context: context)
    feature41.name = "Connection Spell"
    let option411 = Option(context: context)
    option411.name = "Akashic"
    option411.content = "Augury"
    feature41.addToFeatureOptions(option411)
    let option412 = Option(context: context)
    option412.name = "Devastator"
    option412.content = "Caustic Conversion"
    feature41.addToFeatureOptions(option412)
    let option413 = Option(context: context)
    option413.name = "Empath"
    option413.content = "Zone of Truth"
    feature41.addToFeatureOptions(option413)
    let option414 = Option(context: context)
    option414.name = "Healer"
    option414.content = "Mystic Cure (replaced by: Remove Condition)"
    feature41.addToFeatureOptions(option414)
    let option415 = Option(context: context)
    option415.name = "Mindbreaker"
    option415.content = "Mind Thrust (replaced by: Inflict Pain)"
    feature41.addToFeatureOptions(option415)
    let option416 = Option(context: context)
    option416.name = "Overlord"
    option416.content = "Hold Person"
    feature41.addToFeatureOptions(option416)
    let option417 = Option(context: context)
    option417.name = "Star Shaman"
    option417.content = "Darkvision"
    feature41.addToFeatureOptions(option417)
    let option418 = Option(context: context)
    option418.name = "Xenodruid"
    option418.content = "Fog Cloud"
    feature41.addToFeatureOptions(option418)
    feature41.compendiumClassFeature = level4
    Mystic.addToClassLevel(level4)
    
    let level5 = CompendiumLevel(context: context)
    level5.level = 5
    level5.bab = 3
    level5.fort = 1
    level5.ref = 1
    level5.will = 4
    let slot5x1 = SpellSlot(context: context)
    slot5x1.slots = 4
    level5.addToCompendiumClassSlots(slot5x1)
    let slot5x2 = SpellSlot(context: context)
    slot5x2.slots = 2
    level5.addToCompendiumClassSlots(slot5x2)
    let slot5x3 = SpellSlot(context: context)
    slot5x3.slots = 0
    level5.addToCompendiumClassSlots(slot5x3)
    let slot5x4 = SpellSlot(context: context)
    slot5x4.slots = 0
    level5.addToCompendiumClassSlots(slot5x4)
    let slot5x5 = SpellSlot(context: context)
    slot5x5.slots = 0
    level5.addToCompendiumClassSlots(slot5x5)
    let slot5x6 = SpellSlot(context: context)
    slot5x6.slots = 0
    level5.addToCompendiumClassSlots(slot5x6)
    let feature51 = Feature(context: context)
    feature51.name = "Channel Skill +2"
    feature51.compendiumClassFeature = level5
    Mystic.addToClassLevel(level5)
    
    let level6 = CompendiumLevel(context: context)
    level6.level = 6
    level6.bab = 4
    level6.fort = 2
    level6.ref = 2
    level6.will = 5
    let slot6x1 = SpellSlot(context: context)
    slot6x1.slots = 4
    level6.addToCompendiumClassSlots(slot6x1)
    let slot6x2 = SpellSlot(context: context)
    slot6x2.slots = 3
    level6.addToCompendiumClassSlots(slot6x2)
    let slot6x3 = SpellSlot(context: context)
    slot6x3.slots = 0
    level6.addToCompendiumClassSlots(slot6x3)
    let slot6x4 = SpellSlot(context: context)
    slot6x4.slots = 0
    level6.addToCompendiumClassSlots(slot6x4)
    let slot6x5 = SpellSlot(context: context)
    slot6x5.slots = 0
    level6.addToCompendiumClassSlots(slot6x5)
    let slot6x6 = SpellSlot(context: context)
    slot6x6.slots = 0
    level6.addToCompendiumClassSlots(slot6x6)
    let feature61 = Feature(context: context)
    feature61.name = "Connection Power"
    let option611 = Option(context: context)
    option611.name = "Akashic - Peer into the Future (Su)"
    option611.content = "Once per day, you can spend 10 minutes in uninterrupted meditation to receive visions of possible futures. At any point over the next 24 hours, you can declare that you are using the benefit of this ability before rolling one initiative check, saving throw, or skill check. You gain a +4 insight bonus to that check. At 11th level, you can use this ability twice per day, though you can’t use it again until after you’ve used your first bonus."
    feature61.addToFeatureOptions(option611)
    let option612 = Option(context: context)
    option612.name = "Devastator - Devastating Critical (Su)"
    option612.content = "When you score a critical hit with an attack, you can spend 1 Resolve Point as a swift action to add the wound critical hit effect to the attack, replacing any other critical hit effect the attack has. If the attack would already have the wound critical hit effect, you can instead spend 1 Resolve Point to add the severe wound critical hit effect to the attack in place of other critical hit effects."
    feature61.addToFeatureOptions(option612)
    let option613 = Option(context: context)
    option613.name = "Empath - Emotionsense (Su)"
    option613.content = "You can detect and locate creatures within 60 feet that have emotions, as if you had blindsense (emotion). A creature can keep its emotions calm to avoid detection by this ability by succeeding at a Bluff check with a DC equal to 10 + your Sense Motive modifier, but a creature under the influence of an emotion effect cannot try to avoid detection. Creatures under the effects of nondetection or similar effects automatically avoid detection by this ability. Unless otherwise stated, constructs and creatures with Intelligence scores of 2 or lower don’t have emotions and can’t be sensed this way."
    feature61.addToFeatureOptions(option613)
    let option614 = Option(context: context)
    option614.name = "Healer - Healer’s Bond (Sp)"
    option614.content = "As a standard action, you can form a bond with up to three allies, allowing you to constantly sense their condition as per the status spell. This bond lasts until dispelled or until you create a new healer’s bond, which immediately ends the previous one. At 11th level, when you gain the telepathic bond class feature, you also gain the effects of status on all creatures linked by your telepathic bond."
    feature61.addToFeatureOptions(option614)
    let option615 = Option(context: context)
    option615.name = "Mindbreaker - Sow Doubt (Su)"
    option615.content = "As a standard action, you can spend 1 Resolve Point to create uncertainty in the mind of a foe within 30 feet. You choose whether the target becomes flat-footed, becomes off-target, takes a –2 penalty to saving throws, or takes a –2 penalty to skill checks. The effect lasts for a number of rounds equal to half your mystic level, unless the target succeeds at a Will save to reduce the duration to just 1 round. A creature can be affected only by one sow doubt effect. If you use this ability on the same creature again, the new effect replaces the old effect. This is a mind-affecting effect."
    feature61.addToFeatureOptions(option615)
    let option616 = Option(context: context)
    option616.name = "Overlord - Echoes of Obedience (Su)"
    option616.content = "Even creatures that resist your dominance can’t shake the lingering echoes of your mind. When a creature succeeds at a saving throw against one of your mind-affecting charm or compulsion spells or spell-like abilities and negates the effect, it takes a –1 penalty to AC, attack rolls, and skill checks until the beginning of your next turn. This is a mind-affecting effect."
    feature61.addToFeatureOptions(option616)
    let option617 = Option(context: context)
    option617.name = "Star Shaman - Stargazer (Su)"
    option617.content = "You can study the stars to gain a bit of good luck. Twice per day, if you are outdoors and can see the stars, you can reroll a failed ability check, attack roll, saving throw, or skill check."
    feature61.addToFeatureOptions(option617)
    let option618 = Option(context: context)
    option618.name = "Xenodruid - Animal Adaptation (Su)"
    option618.content = "As a standard action, you can modify your body. Choose one of the following to gain the noted benefit: elongated legs (increase your land speed by 10 feet), fins and webbed digits (granting you a swim speed equal to half your land speed), suckers on wrists and feet (granting you a climb speed equal to half your land speed), or vertical-slit pupils (granting you darkvision 60 feet). This ability lasts for a number of minutes per day equal to your mystic level; this duration doesn’t need to be continuous, but it must be used in 1-minute increments. Your base form and size are largely unchanged, but some of your body parts are altered. Armor and gear you are wearing adjusts to your new shape for the duration of this ability. You can have only one of these adaptations active at a time; choosing a new adaptation is a standard action and the new choice replaces the old. At 12th level, the climb and swim speeds granted by your adaptation are equal to your land speed, and you add wings (granting you a fly speed of 30 feet with average maneuverability) to the list of possible adaptations."
    feature61.addToFeatureOptions(option618)
    feature61.compendiumClassFeature = level6
    Mystic.addToClassLevel(level6)
    
    let level7 = CompendiumLevel(context: context)
    level7.level = 7
    level7.bab = 5
    level7.fort = 2
    level7.ref = 2
    level7.will = 5
    let slot7x1 = SpellSlot(context: context)
    slot7x1.slots = 4
    level7.addToCompendiumClassSlots(slot7x1)
    let slot7x2 = SpellSlot(context: context)
    slot7x2.slots = 3
    level7.addToCompendiumClassSlots(slot7x2)
    let slot7x3 = SpellSlot(context: context)
    slot7x3.slots = 2
    level7.addToCompendiumClassSlots(slot7x3)
    let slot7x4 = SpellSlot(context: context)
    slot7x4.slots = 0
    level7.addToCompendiumClassSlots(slot7x4)
    let slot7x5 = SpellSlot(context: context)
    slot7x5.slots = 0
    level7.addToCompendiumClassSlots(slot7x5)
    let slot7x6 = SpellSlot(context: context)
    slot7x6.slots = 0
    level7.addToCompendiumClassSlots(slot7x6)
    let feature71 = Feature(context: context)
    feature71.name = "Connection Spell"
    let option711 = Option(context: context)
    option711.name = "Akashic"
    option711.content = "Tongues"
    feature71.addToFeatureOptions(option711)
    let option712 = Option(context: context)
    option712.name = "Devastator"
    option712.content = "Viral Destruction"
    feature71.addToFeatureOptions(option712)
    let option713 = Option(context: context)
    option713.name = "Empath"
    option713.content = "Clairaudience/Clairvoyance"
    feature71.addToFeatureOptions(option713)
    let option714 = Option(context: context)
    option714.name = "Healer"
    option714.content = "Mystic Cure (replaced by: Remove Affliction)"
    feature71.addToFeatureOptions(option714)
    let option715 = Option(context: context)
    option715.name = "Mindbreaker"
    option715.content = "Mind Thrust (replaced by: Synaptic Pulse)"
    feature71.addToFeatureOptions(option715)
    let option716 = Option(context: context)
    option716.name = "Overlord"
    option716.content = "Suggestion"
    feature71.addToFeatureOptions(option716)
    let option717 = Option(context: context)
    option717.name = "Star Shaman"
    option717.content = "Irradiate"
    feature71.addToFeatureOptions(option717)
    let option718 = Option(context: context)
    option718.name = "Xenodruid"
    option718.content = "Entropic Grasp"
    feature71.addToFeatureOptions(option718)
    feature71.compendiumClassFeature = level7
    Mystic.addToClassLevel(level7)
    
    let level8 = CompendiumLevel(context: context)
    level8.level = 8
    level8.bab = 6
    level8.fort = 2
    level8.ref = 2
    level8.will = 6
    let slot8x1 = SpellSlot(context: context)
    slot8x1.slots = 4
    level8.addToCompendiumClassSlots(slot8x1)
    let slot8x2 = SpellSlot(context: context)
    slot8x2.slots = 4
    level8.addToCompendiumClassSlots(slot8x2)
    let slot8x3 = SpellSlot(context: context)
    slot8x3.slots = 2
    level8.addToCompendiumClassSlots(slot8x3)
    let slot8x4 = SpellSlot(context: context)
    slot8x4.slots = 0
    level8.addToCompendiumClassSlots(slot8x4)
    let slot8x5 = SpellSlot(context: context)
    slot8x5.slots = 0
    level8.addToCompendiumClassSlots(slot8x5)
    let slot8x6 = SpellSlot(context: context)
    slot8x6.slots = 0
    level8.addToCompendiumClassSlots(slot8x6)
    let feature81 = Feature(context: context)
    feature81.name = "Channel Skill +3"
    feature81.compendiumClassFeature = level8
    Mystic.addToClassLevel(level8)
    
    let level9 = CompendiumLevel(context: context)
    level9.level = 9
    level9.bab = 6
    level9.fort = 3
    level9.ref = 3
    level9.will = 6
    let slot9x1 = SpellSlot(context: context)
    slot9x1.slots = 5
    level9.addToCompendiumClassSlots(slot9x1)
    let slot9x2 = SpellSlot(context: context)
    slot9x2.slots = 4
    level9.addToCompendiumClassSlots(slot9x2)
    let slot9x3 = SpellSlot(context: context)
    slot9x3.slots = 3
    level9.addToCompendiumClassSlots(slot9x3)
    let slot9x4 = SpellSlot(context: context)
    slot9x4.slots = 0
    level9.addToCompendiumClassSlots(slot9x4)
    let slot9x5 = SpellSlot(context: context)
    slot9x5.slots = 0
    level9.addToCompendiumClassSlots(slot9x5)
    let slot9x6 = SpellSlot(context: context)
    slot9x6.slots = 0
    level9.addToCompendiumClassSlots(slot9x6)
    let feature91 = Feature(context: context)
    feature91.name = "Connection Power"
    let option911 = Option(context: context)
    option911.name = "Akashic - Mind Probe (Sp)"
    option911.content = "You can use mind probe as a spell-like ability a number of times per day equal to your mystic level, lasting for 1 round. A creature that successfully saves against your mind probe is immune to further uses of this ability for 24 hours."
    feature91.addToFeatureOptions(option911)
    let option912 = Option(context: context)
    option912.name = "Devastator - Shatter Defenses (Su)"
    option912.content = "You can break a target’s defenses. Once per day as a standard action, you can reduce the DR, energy resistances, and hardness of a single target by an amount equal to your mystic level (to a minimum of 0) for a number of rounds equal to your mystic level. The target can attempt a Fortitude saving throw to resist this effect (DC = 10 + half your mystic level + your Wisdom modifier). This ability can affect objects."
    feature91.addToFeatureOptions(option912)
    let option913 = Option(context: context)
    option913.name = "Empath - Discern Lies (Sp)"
    option913.content = "You can use discern lies as a spell-like ability a number of times per day equal to your mystic level, each time targeting a single creature. This effect lasts 1 round. Once a creature successfully saves against this ability, it becomes immune to further uses of this ability for 24 hours."
    feature91.addToFeatureOptions(option913)
    let option914 = Option(context: context)
    option914.name = "Healer - Steal Life (Su)"
    option914.content = "As a standard action, you can spend 1 Resolve Point to steal part of a creature’s life force and transfer it to yourself or others. You must touch the target (requiring a successful melee attack against its EAC), which deals 1d6 damage for every 2 mystic levels you have (maximum 10d6). Choose an ally within 30 feet; that ally recovers an amount of Hit Points equal to the damage dealt (to a maximum of the foe’s remaining Hit Points). Alternatively, you can heal yourself instead, but you restore only a number of Hit Points equal to half the damage dealt. If this heals the recipient (you or your ally) up to maximum Hit Points, any excess persists for 1 hour as temporary Hit Points. If your attack misses, you don’t lose the Resolve Point."
    feature91.addToFeatureOptions(option914)
    let option915 = Option(context: context)
    option915.name = "Mindbreaker - Mental Anguish (Su)"
    option915.content = "As a standard action, you can tweak the pain centers in the brain of a foe within 60 feet, causing it to suffer intense agony. The target must succeed at a Will save or be nauseated for 1 round. Regardless of the save, the creature becomes immune to this ability for 24 hours. This is a mind-affecting pain effect."
    feature91.addToFeatureOptions(option915)
    let option916 = Option(context: context)
    option916.name = "Overlord - Greater Forced Amity (Sp)"
    option916.content = "Your forced amity ability functions as charm monster."
    feature91.addToFeatureOptions(option916)
    let option917 = Option(context: context)
    option917.name = "Star Shaman - Starflight (Su)"
    option917.content = "While in starlight form, you gain the ability to fly as per the flight spell (spell level 3rd or lower)."
    feature91.addToFeatureOptions(option917)
    let option918 = Option(context: context)
    option918.name = "Xenodruid - Reactive Resistance (Su)"
    option918.content = "The first time each day you would take energy damage, you immediately gain resistance 10 to that energy type for the remainder of the day. (If you are damaged by more than one energy type simultaneously, choose which type you resist.)"
    feature91.addToFeatureOptions(option918)
    feature91.compendiumClassFeature = level9
    Mystic.addToClassLevel(level9)
    
    let level10 = CompendiumLevel(context: context)
    level10.level = 10
    level10.bab = 7
    level10.fort = 3
    level10.ref = 3
    level10.will = 7
    let slot10x1 = SpellSlot(context: context)
    slot10x1.slots = 5
    level10.addToCompendiumClassSlots(slot10x1)
    let slot10x2 = SpellSlot(context: context)
    slot10x2.slots = 4
    level10.addToCompendiumClassSlots(slot10x2)
    let slot10x3 = SpellSlot(context: context)
    slot10x3.slots = 3
    level10.addToCompendiumClassSlots(slot10x3)
    let slot10x4 = SpellSlot(context: context)
    slot10x4.slots = 2
    level10.addToCompendiumClassSlots(slot10x4)
    let slot10x5 = SpellSlot(context: context)
    slot10x5.slots = 0
    level10.addToCompendiumClassSlots(slot10x5)
    let slot10x6 = SpellSlot(context: context)
    slot10x6.slots = 0
    level10.addToCompendiumClassSlots(slot10x6)
    let feature101 = Feature(context: context)
    feature101.name = "Connection Spell"
    let option1011 = Option(context: context)
    option1011.name = "Akashic"
    option1011.content = "Divination"
    feature101.addToFeatureOptions(option1011)
    let option1012 = Option(context: context)
    option1012.name = "Devastator"
    option1012.content = "Enervation"
    feature101.addToFeatureOptions(option1012)
    let option1013 = Option(context: context)
    option1013.name = "Empath"
    option1013.content = "Mind Probe"
    feature101.addToFeatureOptions(option1013)
    let option1014 = Option(context: context)
    option1014.name = "Healer"
    option1014.content = "Mystic Cure (replaced by: Restoration)"
    feature101.addToFeatureOptions(option1014)
    let option1015 = Option(context: context)
    option1015.name = "Mindbreaker"
    option1015.content = "Mind Thrust (replaced by: Confusion)"
    feature101.addToFeatureOptions(option1015)
    let option1016 = Option(context: context)
    option1016.name = "Overlord"
    option1016.content = "Confusion"
    feature101.addToFeatureOptions(option1016)
    let option1017 = Option(context: context)
    option1017.name = "Star Shaman"
    option1017.content = "Remove Radioactivity"
    feature101.addToFeatureOptions(option1017)
    let option1018 = Option(context: context)
    option1018.name = "Xenodruid"
    option1018.content = "Reincarnate"
    feature101.addToFeatureOptions(option1018)
    feature101.compendiumClassFeature = level10
    Mystic.addToClassLevel(level10)
    
    let level11 = CompendiumLevel(context: context)
    level11.level = 11
    level11.bab = 8
    level11.fort = 3
    level11.ref = 3
    level11.will = 7
    let slot11x1 = SpellSlot(context: context)
    slot11x1.slots = 5
    level11.addToCompendiumClassSlots(slot11x1)
    let slot11x2 = SpellSlot(context: context)
    slot11x2.slots = 4
    level11.addToCompendiumClassSlots(slot11x2)
    let slot11x3 = SpellSlot(context: context)
    slot11x3.slots = 4
    level11.addToCompendiumClassSlots(slot11x3)
    let slot11x4 = SpellSlot(context: context)
    slot11x4.slots = 2
    level11.addToCompendiumClassSlots(slot11x4)
    let slot11x5 = SpellSlot(context: context)
    slot11x5.slots = 0
    level11.addToCompendiumClassSlots(slot11x5)
    let slot11x6 = SpellSlot(context: context)
    slot11x6.slots = 0
    level11.addToCompendiumClassSlots(slot11x6)
    let feature111 = Feature(context: context)
    feature111.name = "Channel Skill +4"
    feature111.compendiumClassFeature = level11
    let feature112 = Feature(context: context)
    feature112.name = "Telepathic Bond (Sp)"
    feature112.content = "As a standard action, you can form a telepathic link with up to six other willing creatures, allowing you to communicate telepathically at great distances. This functions as telepathic bond, except the duration is permanent. You can have only one telepathic bond active in this way at any given time; creating a new telepathic bond immediately ends the previous one."
    feature112.compendiumClassFeature = level11
    Mystic.addToClassLevel(level11)
    
    let level12 = CompendiumLevel(context: context)
    level12.level = 12
    level12.bab = 9
    level12.fort = 4
    level12.ref = 4
    level12.will = 8
    let slot12x1 = SpellSlot(context: context)
    slot12x1.slots = 5
    level12.addToCompendiumClassSlots(slot12x1)
    let slot12x2 = SpellSlot(context: context)
    slot12x2.slots = 5
    level12.addToCompendiumClassSlots(slot12x2)
    let slot12x3 = SpellSlot(context: context)
    slot12x3.slots = 4
    level12.addToCompendiumClassSlots(slot12x3)
    let slot12x4 = SpellSlot(context: context)
    slot12x4.slots = 3
    level12.addToCompendiumClassSlots(slot12x4)
    let slot12x5 = SpellSlot(context: context)
    slot12x5.slots = 0
    level12.addToCompendiumClassSlots(slot12x5)
    let slot12x6 = SpellSlot(context: context)
    slot12x6.slots = 0
    level12.addToCompendiumClassSlots(slot12x6)
    let feature121 = Feature(context: context)
    feature121.name = "Connection Power"
    let option1211 = Option(context: context)
    option1211.name = "Akashic - Telepathic Memories (Su)"
    option1211.content = "You can share memories at will with allies linked by your telepathic bond class feature. As a full action, you or a linked ally can send a memory of up to 1 minute to as many others in the bond as they choose. Sending a relevant memory counts as a successful aid another attempt for a skill check, even if you wouldn’t otherwise be able to use aid another (to a limit of one such memory per skill check)."
    feature121.addToFeatureOptions(option1211)
    let option1212 = Option(context: context)
    option1212.name = "Devastator - Greater Blood Mark (Su)"
    option1212.content = "At 12th level, whenever an ally linked by your telepathic bond class feature kills or destroys a creature or reduces a creature to 0 HP, you can grant yourself or one other ally linked by your telepathic bond a greater blood mark. This functions as the blood mark connection ability (see above), but the bonus is +2 and the subject that gains the blood mark decides which of the benefits to gain. You cannot have more than one greater blood mark active at a time, and granting a new greater blood mark ends any previous greater blood mark you had active. A creature cannot benefit from more than one greater blood mark at a time or from a blood mark as well as a greater blood mark, though you can benefit from both your own blood mark and a greater blood mark."
    feature121.addToFeatureOptions(option1212)
    let option1213 = Option(context: context)
    option1213.name = "Empath - Greater Emotionsense (Su)"
    option1213.content = "Your emotionsense is far more discerning, as if you had blindsight (emotion)."
    feature121.addToFeatureOptions(option1213)
    let option1214 = Option(context: context)
    option1214.name = "Healer - Channel Bond (Su)"
    option1214.content = "When you use healing channel as a standard action, you can heal an ally linked by your telepathic bond class feature as if you were touching that ally, as long as the ally is within 120 feet. When you use healing channel as a full action, it heals all allies linked by your telepathic bond class feature within 120 feet (as well as all other allies within 30 feet)."
    feature121.addToFeatureOptions(option1214)
    let option1215 = Option(context: context)
    option1215.name = "Mindbreaker - Mindbreaking Link (Su)"
    option1215.content = "Whenever you or an ally linked by your telepathic bond class feature scores a critical hit against a foe, you can spend 1 Resolve Point as a reaction to confuse that foe. The foe must succeed at a Will save or become confused for 1 round. Whether or not it succeeds at this save, the target is affected by your sow doubt ability for 1 round. This is a mind-affecting effect."
    feature121.addToFeatureOptions(option1215)
    let option1216 = Option(context: context)
    option1216.name = "Overlord - Jealous Overlord (Su)"
    option1216.content = "When an ally linked by your telepathic bond class feature is subject to mind-affecting effect that issues commands, as a reaction you can issue a countermand allowing the linked ally to act normally. When you do, attempt an opposed Charisma check against the originator of the mind-affecting effect; if you succeed, your ally can act normally."
    feature121.addToFeatureOptions(option1216)
    let option1217 = Option(context: context)
    option1217.name = "Star Shaman - Starry Bond (Su)"
    option1217.content = "You can share the good fortune of your stargazer class feature with your allies. Whenever an ally linked by your telepathic bond class feature fails an ability check, attack roll, saving throw, or skill check, you can spend 1 Resolve Point as a reaction to enable your ally to reroll the failed check. This ability otherwise functions as the stargazer class feature."
    feature121.addToFeatureOptions(option1217)
    let option1218 = Option(context: context)
    option1218.name = "Xenodruid - Share Resistance (Su)"
    option1218.content = "As a standard action, you can spend 1 Resolve Point to grant allies linked by your telepathic bond class feature resistance 5 to the same energy type that you can resist through your reactive resistance class feature for 1 minute. You can’t use this ability if your reactive resistance class feature has not yet been activated for the day."
    feature121.addToFeatureOptions(option1218)
    feature121.compendiumClassFeature = level12
    Mystic.addToClassLevel(level12)
    
    let level13 = CompendiumLevel(context: context)
    level13.level = 13
    level13.bab = 9
    level13.fort = 4
    level13.ref = 4
    level13.will = 8
    let slot13x1 = SpellSlot(context: context)
    slot13x1.slots = 5
    level13.addToCompendiumClassSlots(slot13x1)
    let slot13x2 = SpellSlot(context: context)
    slot13x2.slots = 5
    level13.addToCompendiumClassSlots(slot13x2)
    let slot13x3 = SpellSlot(context: context)
    slot13x3.slots = 4
    level13.addToCompendiumClassSlots(slot13x3)
    let slot13x4 = SpellSlot(context: context)
    slot13x4.slots = 3
    level13.addToCompendiumClassSlots(slot13x4)
    let slot13x5 = SpellSlot(context: context)
    slot13x5.slots = 2
    level13.addToCompendiumClassSlots(slot13x5)
    let slot13x6 = SpellSlot(context: context)
    slot13x6.slots = 0
    level13.addToCompendiumClassSlots(slot13x6)
    let feature131 = Feature(context: context)
    feature131.name = "Connection Spell"
    let option1311 = Option(context: context)
    option1311.name = "Akashic"
    option1311.content = "Contact"
    feature131.addToFeatureOptions(option1311)
    let option1312 = Option(context: context)
    option1312.name = "Devastator"
    option1312.content = "Crush Skull"
    feature131.addToFeatureOptions(option1312)
    let option1313 = Option(context: context)
    option1313.name = "Empath"
    option1313.content = "Telepathy"
    feature131.addToFeatureOptions(option1313)
    let option1314 = Option(context: context)
    option1314.name = "Healer"
    option1314.content = "Mystic Cure (replaced by: Greater Remove Condition"
    feature131.addToFeatureOptions(option1314)
    let option1315 = Option(context: context)
    option1315.name = "Mindbreaker"
    option1315.content = "Mind Thrust (replaced by: Feeblemind)"
    feature131.addToFeatureOptions(option1315)
    let option1316 = Option(context: context)
    option1316.name = "Overlord"
    option1316.content = "Dominate Person"
    feature131.addToFeatureOptions(option1316)
    let option1317 = Option(context: context)
    option1317.name = "Star Shaman"
    option1317.content = "Telekinesis"
    feature131.addToFeatureOptions(option1317)
    let option1318 = Option(context: context)
    option1318.name = "Xenodruid"
    option1318.content = "Commune With Nature"
    feature131.addToFeatureOptions(option1318)
    feature131.compendiumClassFeature = level13
    Mystic.addToClassLevel(level13)
    
    let level14 = CompendiumLevel(context: context)
    level14.level = 14
    level14.bab = 10
    level14.fort = 4
    level14.ref = 4
    level14.will = 9
    let slot14x1 = SpellSlot(context: context)
    slot14x1.slots = 5
    level14.addToCompendiumClassSlots(slot14x1)
    let slot14x2 = SpellSlot(context: context)
    slot14x2.slots = 5
    level14.addToCompendiumClassSlots(slot14x2)
    let slot14x3 = SpellSlot(context: context)
    slot14x3.slots = 4
    level14.addToCompendiumClassSlots(slot14x3)
    let slot14x4 = SpellSlot(context: context)
    slot14x4.slots = 4
    level14.addToCompendiumClassSlots(slot14x4)
    let slot14x5 = SpellSlot(context: context)
    slot14x5.slots = 2
    level14.addToCompendiumClassSlots(slot14x5)
    let slot14x6 = SpellSlot(context: context)
    slot14x6.slots = 0
    level14.addToCompendiumClassSlots(slot14x6)
    let feature141 = Feature(context: context)
    feature141.name = "Channel Skill +5"
    feature141.compendiumClassFeature = level14
    Mystic.addToClassLevel(level14)
    
    let level15 = CompendiumLevel(context: context)
    level15.level = 15
    level15.bab = 11
    level15.fort = 5
    level15.ref = 5
    level15.will = 9
    let slot15x1 = SpellSlot(context: context)
    slot15x1.slots = 5
    level15.addToCompendiumClassSlots(slot15x1)
    let slot15x2 = SpellSlot(context: context)
    slot15x2.slots = 5
    level15.addToCompendiumClassSlots(slot15x2)
    let slot15x3 = SpellSlot(context: context)
    slot15x3.slots = 5
    level15.addToCompendiumClassSlots(slot15x3)
    let slot15x4 = SpellSlot(context: context)
    slot15x4.slots = 4
    level15.addToCompendiumClassSlots(slot15x4)
    let slot15x5 = SpellSlot(context: context)
    slot15x5.slots = 3
    level15.addToCompendiumClassSlots(slot15x5)
    let slot15x6 = SpellSlot(context: context)
    slot15x6.slots = 0
    level15.addToCompendiumClassSlots(slot15x6)
    let feature151 = Feature(context: context)
    feature151.name = "Connection Power"
    let option1511 = Option(context: context)
    option1511.name = "Akashic - Memory Palace (Su)"
    option1511.content = "You assemble an extradimensional library to house mental constructs representing your accumulated knowledge. This memory palace has a single shimmering entrance. You can access your memory palace once per day; when you do, the entrance appears within close range. If any creatures or objects that were not part of the memory palace when it was created remain inside it, the entrance remains where it first appeared. Only those you designate can enter the memory palace, and the entrance closes and becomes invisible behind you when you enter. Anyone inside can open the entrance and exit the memory palace at will. The only way to enter and exit the memory palace is via the entrance; even plane shift and similar magic do not access it.\n\nYou can create any floor plan you desire for your memory palace, up to a number of 10-foot cubes equal to your mystic level. Inside, the atmosphere is clean, fresh, and warm; outside conditions don’t affect the memory palace, nor do conditions inside it pass beyond. There is no furniture other than bookcases, computers, and a few desks and sofas. A number of unseen servants (as per the spell of the same name) equal to half your mystic level serve as librarians. The library keeps the same layout each time you access it, though you can alter its appearance each time you gain a level or by spending 15 minutes concentrating—you don’t need to be inside it to alter it.\n\nWhen you gain this ability, choose one skill that can be used with the recall knowledge task. Consulting your memory palace gives anyone who studies within—including you—a +4 enhancement bonus to skill checks to recall knowledge of that type, and creatures inside the memory palace can attempt checks of that type untrained. At 16th level, and at each level thereafter, choose another skill that can be used with the recall knowledge task to which your memory palace’s skill bonus applies."
    feature151.addToFeatureOptions(option1511)
    let option1512 = Option(context: context)
    option1512.name = "Devastator - Mystic Bloodlust (Ex)"
    option1512.content = "At 15th level, you gain renewed vigor when one of your foes is brought low. When you or an ally linked by your telepathic bond class feature scores a critical hit against a foe, as a reaction you can spend 1 Resolve Point to regain a number of Stamina Points equal to three times your mystic level, plus your Wisdom modifier (up to your maximum number of Stamina Points). Once you have benefited from mystic bloodlust, you can’t gain the benefits from this ability again until you rest to recover Stamina."
    feature151.addToFeatureOptions(option1512)
    let option1513 = Option(context: context)
    option1513.name = "Empath - Retrocognition (Sp)"
    option1513.content = "You can use retrocognition as a spell-like ability at will. When doing so, you take a –2 penalty to saving throws against mind-affecting effects for as long as you concentrate on retrocognition and an equal amount of time afterward. You can spend 1 Resolve Point to negate this penalty."
    feature151.addToFeatureOptions(option1513)
    let option1514 = Option(context: context)
    option1514.name = "Healer - Channel Life (Su)"
    option1514.content = "If you use healing channel on a creature that has died within 1 round, you can bring it back to life as per a 5th-level mystic cure spell."
    feature151.addToFeatureOptions(option1514)
    let option1515 = Option(context: context)
    option1515.name = "Mindbreaker - Mindkiller (Su)"
    option1515.content = "As a standard action, you can mold the subconscious fear of a foe within 60 feet into a psychic image of the most disturbing creature imaginable to the target. Only the target can see the mindkiller, and if the target succeeds at a Will save to recognize the image as unreal, the mindkiller has no effect. If the target fails this Will save, the mindkiller touches the target, which must then succeed at a Fortitude save or die from fear. On a successful Fortitude save, the target instead takes 3d6 damage. Once a creature succeeds at either save against this ability, it becomes immune to this ability for 24 hours. This is a mind-affecting fear effect."
    feature151.addToFeatureOptions(option1515)
    let option1516 = Option(context: context)
    option1516.name = "Overlord - Forceful Commands (Su)"
    option1516.content = "When you use a mind-affecting charm or compulsion spell or spell-like ability against a target benefiting from an active spell that protects against your attack, you automatically become aware of the presence of such defenses, and can spend 1 Resolve Point as part of casting the spell to attempt a caster level check to dispel the highest-level such spell, as if you had cast dispel magic."
    feature151.addToFeatureOptions(option1516)
    let option1517 = Option(context: context)
    option1517.name = "Star Shaman - Meteor Shower (Su)"
    option1517.content = "You can spend 1 Resolve Point as a full action to call down a rain of meteorites in a 10-foot-radius vertical cylinder, 40 feet high, at a range of up to 250 feet. The meteorites deal 12d6 damage to every creature in the area (Reflex half). Half the damage is bludgeoning damage; the other half is fire damage. If you are outdoors and can see stars, the meteorites instead deal 12d10 damage."
    feature151.addToFeatureOptions(option1517)
    let option1518 = Option(context: context)
    option1518.name = "Xenodruid - Plant Transport (Su)"
    option1518.content = "Once per day as a full action, you can enter any living plant equal to your size or larger and exit from another plant of the same kind in the same Solar system, regardless of the distance separating the two. The destination plant does not need to be familiar to you. If you are uncertain of the location of a particular kind of destination plant, you merely designate direction and distance and this ability moves you as close as possible to the desired location. If a particular destination plant is desired but the plant is not living, this ability fails and you are ejected from the entry plant. You cannot travel through plant creatures. You can bring along objects as long as their bulk doesn’t exceed your Strength score. You can also bring up to five willing Medium or smaller creatures (each carrying no more bulk than their Strength scores) with you, provided they are linked to you with joined hands."
    feature151.addToFeatureOptions(option1518)
    feature151.compendiumClassFeature = level15
    Mystic.addToClassLevel(level15)
    
    let level16 = CompendiumLevel(context: context)
    level16.level = 16
    level16.bab = 12
    level16.fort = 5
    level16.ref = 5
    level16.will = 10
    let slot16x1 = SpellSlot(context: context)
    slot16x1.slots = 5
    level16.addToCompendiumClassSlots(slot16x1)
    let slot16x2 = SpellSlot(context: context)
    slot16x2.slots = 5
    level16.addToCompendiumClassSlots(slot16x2)
    let slot16x3 = SpellSlot(context: context)
    slot16x3.slots = 5
    level16.addToCompendiumClassSlots(slot16x3)
    let slot16x4 = SpellSlot(context: context)
    slot16x4.slots = 4
    level16.addToCompendiumClassSlots(slot16x4)
    let slot16x5 = SpellSlot(context: context)
    slot16x5.slots = 3
    level16.addToCompendiumClassSlots(slot16x5)
    let slot16x6 = SpellSlot(context: context)
    slot16x6.slots = 2
    level16.addToCompendiumClassSlots(slot16x6)
    let feature161 = Feature(context: context)
    feature161.name = "Connection Spell"
    let option1611 = Option(context: context)
    option1611.name = "Akashic"
    option1611.content = "Vision"
    feature161.addToFeatureOptions(option1611)
    let option1612 = Option(context: context)
    option1612.name = "Devastator"
    option1612.content = "Gravitational Singularity"
    feature161.addToFeatureOptions(option1612)
    let option1613 = Option(context: context)
    option1613.name = "Empath"
    option1613.content = "True Seeing"
    feature161.addToFeatureOptions(option1613)
    let option1614 = Option(context: context)
    option1614.name = "Healer"
    option1614.content = "Mystic Cure"
    feature161.addToFeatureOptions(option1614)
    let option1615 = Option(context: context)
    option1615.name = "Mindbreaker"
    option1615.content = "Mind Thrust"
    feature161.addToFeatureOptions(option1615)
    let option1616 = Option(context: context)
    option1616.name = "Overlord"
    option1616.content = "Mass Suggestion"
    feature161.addToFeatureOptions(option1616)
    let option1617 = Option(context: context)
    option1617.name = "Star Shaman"
    option1617.content = "Control Gravity"
    feature161.addToFeatureOptions(option1617)
    let option1618 = Option(context: context)
    option1618.name = "Xenodruid"
    option1618.content = "Terraform"
    feature161.addToFeatureOptions(option1618)
    feature161.compendiumClassFeature = level16
    Mystic.addToClassLevel(level16)
    
    let level17 = CompendiumLevel(context: context)
    level17.level = 17
    level17.bab = 12
    level17.fort = 5
    level17.ref = 5
    level17.will = 10
    let slot17x1 = SpellSlot(context: context)
    slot17x1.slots = 5
    level17.addToCompendiumClassSlots(slot17x1)
    let slot17x2 = SpellSlot(context: context)
    slot17x2.slots = 5
    level17.addToCompendiumClassSlots(slot17x2)
    let slot17x3 = SpellSlot(context: context)
    slot17x3.slots = 5
    level17.addToCompendiumClassSlots(slot17x3)
    let slot17x4 = SpellSlot(context: context)
    slot17x4.slots = 4
    level17.addToCompendiumClassSlots(slot17x4)
    let slot17x5 = SpellSlot(context: context)
    slot17x5.slots = 4
    level17.addToCompendiumClassSlots(slot17x5)
    let slot17x6 = SpellSlot(context: context)
    slot17x6.slots = 2
    level17.addToCompendiumClassSlots(slot17x6)
    let feature171 = Feature(context: context)
    feature171.name = "Channel Skill +6"
    feature171.compendiumClassFeature = level17
    Mystic.addToClassLevel(level17)
    
    let level18 = CompendiumLevel(context: context)
     level18.level = 18
    level18.bab = 13
    level18.fort = 6
    level18.ref = 6
    level18.will = 11
    let slot18x1 = SpellSlot(context: context)
    slot18x1.slots = 5
    level18.addToCompendiumClassSlots(slot18x1)
    let slot18x2 = SpellSlot(context: context)
    slot18x2.slots = 5
    level18.addToCompendiumClassSlots(slot18x2)
    let slot18x3 = SpellSlot(context: context)
    slot18x3.slots = 5
    level18.addToCompendiumClassSlots(slot18x3)
    let slot18x4 = SpellSlot(context: context)
    slot18x4.slots = 5
    level18.addToCompendiumClassSlots(slot18x4)
    let slot18x5 = SpellSlot(context: context)
    slot18x5.slots = 4
    level18.addToCompendiumClassSlots(slot18x5)
    let slot18x6 = SpellSlot(context: context)
    slot18x6.slots = 3
    level18.addToCompendiumClassSlots(slot18x6)
    let feature181 = Feature(context: context)
    feature181.name = "Connection Power"
    let option1811 = Option(context: context)
    option1811.name = "Akashic - Glean Spell (Su)"
    option1811.content = "Once per day, you can delve into the Akashic Record to cast a spell from either the mystic or technomancer spell list as if it were on your list of spells known. The spell consumes a spell slot 1 level higher than the level of the spell."
    feature181.addToFeatureOptions(option1811)
    let option1812 = Option(context: context)
    option1812.name = "Devastator - Circle of Devastation (Su)"
    option1812.content = "At 18th level, you can channel your destructive energies into a sphere of devastation around you. As a standard action, you can spend 1 Resolve Point to create a burst of energy in a 30-foot radius around you, dealing 12d10 force damage (Reflex half) to all creatures and objects in the area. Crackling residual energies turn the area into difficult terrain (even empty spaces in the air or vacuum around you) for 1 round per mystic level. You are not affected by this difficult terrain. You can use this ability a number of times per day equal to your Wisdom modifier."
    feature181.addToFeatureOptions(option1812)
    let option1813 = Option(context: context)
    option1813.name = "Empath - Empathic Mastery (Sp)"
    option1813.content = "You can spend 1 Resolve Point to use psychic surgery as a spell-like ability. If you are incapacitated by an effect that psychic surgery could remove and have at least 1 Resolve Point remaining, you can spend 1 Resolve Point to use this ability on yourself, even without being able to take any actions."
    feature181.addToFeatureOptions(option1813)
    let option1814 = Option(context: context)
    option1814.name = "Healer - Deny Death (Su)"
    option1814.content = "You are immune to death effects and negative levels. If you would normally die from damage, as long as you have at least 1 Resolve Point remaining, you can immediately spend all of your remaining Resolve Points to instead stay alive. If your Hit Points would have been reduced to 0, you now have 1 Hit Point instead. Once you use this ability, you can’t regain Resolve Points again until you rest for 8 hours, even if you have another means to do so."
    feature181.addToFeatureOptions(option1814)
    let option1815 = Option(context: context)
    option1815.name = "Mindbreaker - Explode Head (Su)"
    option1815.content = "You can spend 1 Resolve Point as a standard action to psychically assault the brain of a foe within 60 feet, causing incredible pressure to build in its head. If the target has 20 Hit Points or fewer, its head explodes, instantly killing the target and spreading debris in a 10-foot radius. Each creature in the area must succeed at a Reflex saving throw or take 2d6 slashing damage from the flying debris. A target with more than 20 Hit Points takes 1d6 damage per mystic level you have (maximum 20d6), but can attempt a Fortitude save to take only half damage. If this damage would reduce the target to 0 HP, the target’s head explodes as described above. This ability works only on a creature that has a head and would die from the loss of a head."
    feature181.addToFeatureOptions(option1815)
    let option1816 = Option(context: context)
    option1816.name = "Overlord - Absolute Control (Su)"
    option1816.content = "When you issue a command to a dominated creature that would force it to act against its nature, you can spend 1 Resolve Point to deny it a new saving throw against your domination. The dominated creature still won’t carry out an obviously self-destructive order."
    feature181.addToFeatureOptions(option1816)
    let option1817 = Option(context: context)
    option1817.name = "Star Shaman - Interplanetary Teleport (Sp)"
    option1817.content = "At 18th level, once per day, you can spend 1 Resolve Point as a full action to use interplanetary teleport as a spell-like ability. If you have been to a location in another star system before, you can spend 2 Resolve Points to use interplanetary teleport to travel there, even though it exceeds the spell’s normal range."
    feature181.addToFeatureOptions(option1817)
    let option1818 = Option(context: context)
    option1818.name = "Xenodruid - Guided Rebirth (Su)"
    option1818.content = "As long as you have at least 1 Resolve Point remaining, you can spend all your remaining Resolve Points as a full action to surround yourself with an organic cocoon. While enclosed in the cocoon, you are considered helpless. Eight hours later, you emerge having changed your type to animal, humanoid (of any subtype), or your original type, gaining superficial physical characteristics as appropriate. This change does not alter your ability scores, Hit Points, Stamina Points, saving throws, skill points, class skills, or proficiencies. Each time you make this transformation, you are cleansed of all poisons and diseases, are restored to full Hit Points and Stamina Points, and heal all ability damage. You must select a type other than your current type every time you make the transformation. You can use this ability once per day. Once you use this ability, you can’t regain Resolve Points until you rest for 8 hours, even if you have another means to do so."
    feature181.addToFeatureOptions(option1818)
    feature181.compendiumClassFeature = level18
    Mystic.addToClassLevel(level18)
    
    let level19 = CompendiumLevel(context: context)
    level19.level = 19
    level19.bab = 14
    level19.fort = 6
    level19.ref = 6
    level19.will = 11
    let slot19x1 = SpellSlot(context: context)
    slot19x1.slots = 5
    level19.addToCompendiumClassSlots(slot19x1)
    let slot19x2 = SpellSlot(context: context)
    slot19x2.slots = 5
    level19.addToCompendiumClassSlots(slot19x2)
    let slot19x3 = SpellSlot(context: context)
    slot19x3.slots = 5
    level19.addToCompendiumClassSlots(slot19x3)
    let slot19x4 = SpellSlot(context: context)
    slot19x4.slots = 5
    level19.addToCompendiumClassSlots(slot19x4)
    let slot19x5 = SpellSlot(context: context)
    slot19x5.slots = 5
    level19.addToCompendiumClassSlots(slot19x5)
    let slot19x6 = SpellSlot(context: context)
    slot19x6.slots = 4
    level19.addToCompendiumClassSlots(slot19x6)
    let feature191 = Feature(context: context)
    feature191.name = "Transcendence (Sp)"
    feature191.content = "You are close to becoming one with your connection. You can cast each of your connection spells once per day without consuming a spell slot. In addition, you learn how to temporarily transcend your physical form. Once per day, you can spend 1 Resolve Point to project your consciousness outside of your physical body in the form of an intangible psychic image of yourself. This counts as a 6th-level illusion effect and lasts for a number of rounds equal to your mystic level. While your consciousness is projected, your physical body is considered blind, deaf, and helpless, but you can return to your body as a swift action. You control your psychic image as though it was your own body, and your senses perceive only what the image can see and hear. You move with a fly speed of 60 feet and perfect maneuverability. You can pass through solid objects as though you were incorporeal, but you can’t go farther into a solid object than your space (5 feet for a Medium creature). You can’t directly affect physical objects. Your projected consciousness is immune to most attacks or effects, whether or not they affect incorporeal creatures, but mind-affecting effects have their full effect on you. You can cast any mystic spell or spell-like ability with a range of touch or greater from your projected consciousness. The spells affect other targets normally. You can’t cast any spells on your projected consciousness except for illusion spells. You need not maintain line of effect to your projected consciousness, but if you cross into another plane, even momentarily (including via Hyperspace travel), your mind immediately returns to your physical body."
    feature191.compendiumClassFeature = level19
    Mystic.addToClassLevel(level19)
    
    let level20 = CompendiumLevel(context: context)
    level20.level = 20
    level20.bab = 15
    level20.fort = 6
    level20.ref = 6
    level20.will = 12
    let slot20x1 = SpellSlot(context: context)
    slot20x1.slots = 5
    level20.addToCompendiumClassSlots(slot20x1)
    let slot20x2 = SpellSlot(context: context)
    slot20x2.slots = 5
    level20.addToCompendiumClassSlots(slot20x2)
    let slot20x3 = SpellSlot(context: context)
    slot20x3.slots = 5
    level20.addToCompendiumClassSlots(slot20x3)
    let slot20x4 = SpellSlot(context: context)
    slot20x4.slots = 5
    level20.addToCompendiumClassSlots(slot20x4)
    let slot20x5 = SpellSlot(context: context)
    slot20x5.slots = 5
    level20.addToCompendiumClassSlots(slot20x5)
    let slot20x6 = SpellSlot(context: context)
    slot20x6.slots = 5
    level20.addToCompendiumClassSlots(slot20x6)
    let feature201 = Feature(context: context)
    feature201.name = "Channel Skill +7"
    feature201.compendiumClassFeature = level20
    let feature202 = Feature(context: context)
    feature202.name = "Enlightenment (Su)"
    feature202.content = "You achieve enlightenment, becoming a living incarnation of your connection. You no longer age, nor do you die of old age. Once per day as a move action, you can enter a state of total communion with your connection that lasts for 1 minute. During this time, you gain a +4 insight bonus to attack rolls, saving throws, and skill checks, and you gain 20 temporary Resolve Points that you can use only on connection powers. Any unspent temporary Resolve Points disappear at the end of this minute. In addition, once per week, you can cast miracle as a spell-like ability."
    feature202.compendiumClassFeature = level20
    Mystic.addToClassLevel(level20)
}

//Operative  ################################################################################################################

func loadOperative() {
    let Operative = CompendiumClass(context: context)
    Operative.name = "Operative"
    Operative.hitPoints = 6
    Operative.staminaPoints = 6
    Operative.skillRanks = 8
    Operative.classSkills = "Acrobatics, Athletics, Bluff, Computers, Culture, Disguise, Engineering, Intimidate, Medicine, Perception, Piloting, Profession, Sense Motive, Sleight of Hand, Stealth, Survival"
    
    let level1 = CompendiumLevel(context: context)
    level1.level = 1
    level1.bab = 0
    level1.fort = 0
    level1.ref = 2
    level1.will = 2
    let feature10 = Feature(context: context)
    feature10.name = "Proficiencies"
    feature10.content = "Armor-light; Weapons– basic melee weapons, grenades, small arms"
    level1.addToCompendiumClassFeature(feature10)
    let feature11 = Feature(context: context)
    feature11.name = "Operative’s Edge (Ex)"
    feature11.content = "Your diverse training as an operative grants you a +1 insight bonus to initiative checks and to skill checks. This bonus increases by 1 at 3rd level and every 4 levels thereafter."
    let bonus111 = Bonus(context: context)
    bonus111.type = "Initiative"
    bonus111.bonus = 1
    bonus111.featureBonus = feature11
    let bonus112 = Bonus(context: context)
    bonus112.type = "Skills"
    bonus112.bonus = 1
    bonus112.featureBonus = feature11
    feature11.compendiumClassFeature = level1
    let feature12 = Feature(context: context)
    feature12.name = "Specialization"
    feature12.content = "Your specialization represents your primary area of expertise. Pick one specialization upon taking your 1st level of the operative class. Once made, this choice cannot be changed. Your specialization grants you the Skill Focus feat in your specialization’s associated skills, and you gain a free skill rank in each of those skills at each operative level (this does not allow you to exceed the maximum number of skill ranks in a single skill)."
    let option121 = Option(context: context)
    option121.name = "Daredevil"
    option121.content = "You specialize in missions requiring courage and athleticism.\n\nAssociated Skills: Acrobatics and Athletics. You can attempt an Acrobaticscheck to make a trick attack."
    feature12.addToFeatureOptions(option121)
    let option122 = Option(context: context)
    option122.name = "Detective"
    option122.content = "Your ability to read people and make deductions helps you ferret out the truth in any situation.\n\nAssociated Skills: Culture and Sense Motive. You can attempt a Sense Motive check with a +4 bonus to make a trick attack by reading your foe."
    feature12.addToFeatureOptions(option122)
    let option123 = Option(context: context)
    option123.name = "Explorer"
    option123.content = "You’re an expert in scouting out dangerous locations using your knowledge and survival skills.\n\nAssociated Skills: Culture and Survival. You can attempt a Survival check with a +4 bonus to make a trick attack by using your surroundings to your advantage."
    feature12.addToFeatureOptions(option123)
    let option124 = Option(context: context)
    option124.name = "Ghost"
    option124.content = "You can move from place to place without being noticed.\n\nAssociated Skills: Acrobatics and Stealth. When you use Stealth to make a trick attack, you gain a +4 bonus to the skill check."
    feature12.addToFeatureOptions(option124)
    let option125 = Option(context: context)
    option125.name = "Hacker"
    option125.content = "Whether it’s a computer system or a mechanical device, you can hack it.\n\nAssociated Skills: Computers and Engineering. You can attempt a Computers check with a +4 bonus to make a trick attack by creating a computerized distraction (you can’t use this option if stripped of all computerized gear in an area with no computers)."
    feature12.addToFeatureOptions(option125)
    let option126 = Option(context: context)
    option126.name = "Spy"
    option126.content = "You can steal or adopt new identities as easily as most people change clothes, allowing you to infiltrate nearly any circle.\n\nAssociated Skills: Bluff and Disguise. When you use Bluff to make a trick attack, you gain a +4 bonus to the skill check."
    feature12.addToFeatureOptions(option126)
    let option127 = Option(context: context)
    option127.name = "Thief"
    option127.content = "You specialize in acquisition, from quick swipes to complex heists.\n\nAssociated Skills: Perception and Sleight of Hand. You can use Sleight of Hand to make a trick attack by concealing your weapons and motions."
    feature12.addToFeatureOptions(option127)
    feature12.compendiumClassFeature = level1
    let feature13 = Feature(context: context)
    feature13.name = "Trick Attack (Ex)"
    feature13.content = "You can trick or startle a foe and then attack when she drops her guard. As a full action, you can move up to your speed. Whether or not you moved, you can then make an attack with a melee weapon with the operative special property or with any small arm. Just before making your attack, attempt a Bluff, Intimidate, or Stealth check (or a check associated with your specialization) with a DC equal to 20 + your target’s CR. If you succeed at the check, you deal 1d4 additional damage and the target is flat-footed. This damage increases to 1d8 at 3rd level, to 3d8 at 5th level, and by an additional 1d8 every 2 levels thereafter. You can’t use this ability with a weapon that has the unwieldy special property or that requires a full action to make a single attack."
    feature13.compendiumClassFeature = level1
    Operative.addToClassLevel(level1)
    
    let level2 = CompendiumLevel(context: context)
    level2.level = 2
    level2.bab = 1
    level2.fort = 0
    level2.ref = 3
    level2.will = 3
    let feature21 = Feature(context: context)
    feature21.name = "Evasion (Ex)"
    feature21.content = "If you succeed at a Reflex save against an effect that normally has a partial effect on a successful save, you instead suffer no effect. You gain this benefit only when unencumbered and wearing light armor or no armor, and you lose the benefit when you are helpless or otherwise unable to move."
    feature21.compendiumClassFeature = level2
    let feature22 = Feature(context: context)
    feature22.name = "Operative Exploit"
    feature22.content = "As you gain experience, you learn special tricks called operative exploits. You learn your first operative exploit at 2nd level, and you learn an additional exploit every 2 levels thereafter. If an operative exploit allows a saving throw to resist its effects, the DC is equal to 10 + half your operative level + your Dexterity modifier. If it requires an enemy to attempt a skill check, the DC is equal to 10 + 1-1/2 × your operative level + your Dexterity modifier. You cannot learn the same exploit more than once unless it specially says otherwise."
    let option221 = Option(context: context)
    option221.name = "Alien Archive (Ex)"
    option221.content = "Your vast experience makes identifying new creatures easier for you. Double your operative’s edge bonus to your skill checks when identifying a creature and its abilities.\n\nIf you successfully identify a creature, you gain a +2 enhancement bonus to your skill check when you make a trick attack against that creature."
    feature22.addToFeatureOptions(option221)
    let option222 = Option(context: context)
    option222.name = "Combat Trick (Ex)"
    option222.content = "You gain a bonus combat feat. You must meet all of that feat’s prerequisites."
    feature22.addToFeatureOptions(option222)
    let option223 = Option(context: context)
    option223.name = "Field Treatment (Ex)"
    option223.content = "You can take 1 minute to tend your wounds and spend 1 Resolve Point to recover a number of Hit Points equal to three times your operative level."
    feature22.addToFeatureOptions(option223)
    let option224 = Option(context: context)
    option224.name = "Holographic Clone (Ex)"
    option224.content = "You can create holographic duplicates or psychic projections of yourself that conceal your true location. Once per day as a standard action, you can create 1d4 images of yourself that last for 1 minute per operative level. This ability otherwise functions as mirror image. You can use this exploit an additional time per day at 6th level, and again at 10th level."
    feature22.addToFeatureOptions(option224)
    let option225 = Option(context: context)
    option225.name = "Inoculation (Ex)"
    option225.content = "You’ve trained to resist various chemical and biological weapons, toxins, and pathogens you come across in the course of your missions. You add your operative’s edge bonus to Fortitude saves against poison and disease."
    feature22.addToFeatureOptions(option225)
    let option226 = Option(context: context)
    option226.name = "Jack Of All Trades (Ex)"
    option226.content = "You’ve learned how to handle any situation. You can use all skills untrained, and you double your operative’s edge bonus when using a skill in which you have no ranks."
    feature22.addToFeatureOptions(option226)
    let option227 = Option(context: context)
    option227.name = "Nightvision (Ex)"
    option227.content = "You can see in the dark as if you had low-light vision and darkvision with a range of 60 feet."
    feature22.addToFeatureOptions(option227)
    let option228 = Option(context: context)
    option228.name = "Quick Disguise (Ex)"
    option228.content = "Once per day as a standard action, you can quickly change your appearance. This functions as disguise self and lasts for 1 minute per operative level. You can use this exploit an additional time per day at 6th level, and again at 10th level."
    feature22.addToFeatureOptions(option228)
    let option229 = Option(context: context)
    option229.name = "Uncanny Mobility (Ex)"
    option229.content = "When you make a trick attack, if you choose the target of your attack before you move, your movement doesn’t provoke attacks of opportunity from that target. When you use your standard action to move, you can choose one creature; you don’t provoke attacks of opportunity from that creature for this movement."
    feature22.addToFeatureOptions(option229)
    let option2210 = Option(context: context)
    option2210.name = "Uncanny Pilot (Ex)"
    option2210.content = "When you attack while you’re driving a vehicle, you halve the vehicle’s penalty to your attack roll (to a minimum of no penalty if the vehicle normally imposes a –1 penalty). When you’re in a chase, you gain a +2 bonus to skill checks you attempt when taking the evade or trick pilot actions."
    feature22.addToFeatureOptions(option2210)
    feature22.compendiumClassFeature = level2
    Operative.addToClassLevel(level2)
    
    let level3 = CompendiumLevel(context: context)
    level3.level = 3
    level3.bab = 2
    level3.fort = 1
    level3.ref = 3
    level3.will = 3
    let feature31 = Feature(context: context)
    feature31.name = "Operative’s Edge +2"
    let bonus311 = Bonus(context: context)
    bonus311.type = "Initiative"
    bonus311.bonus = 1
    bonus311.featureBonus = feature31
    let bonus312 = Bonus(context: context)
    bonus312.type = "Skills"
    bonus312.bonus = 1
    bonus312.featureBonus = feature31
    feature31.compendiumClassFeature = level3
    let feature32 = Feature(context: context)
    feature32.name = "Quick Movement (Ex)"
    feature32.content = "As long as you are unencumbered and wearing light armor or no armor, your land speed increases by 10 feet. At 9th level, your land speed instead increases by 20 feet, and at 15th level, your land speed instead increases by 30 feet."
    feature32.compendiumClassFeature = level3
    let feature33 = Feature(context: context)
    feature33.name = "Weapon Specialization (Ex)"
    feature33.content = "You gain the Weapon Specialization feat as a bonus feat for each weapon type with which this class grants you proficiency."
    feature33.compendiumClassFeature = level3
    Operative.addToClassLevel(level3)
    
    let level4 = CompendiumLevel(context: context)
    level4.level = 4
    level4.bab = 3
    level4.fort = 1
    level4.ref = 4
    level4.will = 4
    let feature41 = Feature(context: context)
    feature41.name = "Operative Exploit"
    feature41.addToFeatureOptions([option221, option222, option223, option224, option225, option226, option227, option228, option229, option2210])
    feature41.compendiumClassFeature = level4
    let feature42 = Feature(context: context)
    feature42.name = "Debilitating Trick (Ex)"
    feature42.content = "When you hit an enemy with a trick attack, you can make the creature flat-footed or off-target until the beginning of your next turn. You might learn exploits that grant you additional options for your debilitating trick, but you can select only one option each time you hit with a trick attack."
    feature42.compendiumClassFeature = level4
    Operative.addToClassLevel(level4)
    
    let level5 = CompendiumLevel(context: context)
    level5.level = 5
    level5.bab = 3
    level5.fort = 1
    level5.ref = 4
    level5.will = 4
    let feature51 = Feature(context: context)
    feature51.name = "Specialization Exploit"
    feature51.content = "You gain your specialization’s listed exploit as a bonus operative exploit, even if you don’t meet the prerequisites.\n\n\tDaredevil\tVersatile Movement\n\tDetective\tGlimpse the Truth\n\tExplorer\tEver Vigilant\n\tGhost\t\tCloaking Field\n\tHacker\t\tElusive Hacker\n\tSpy\t\tMaster of Disguise\n\tThief\t\tHolographic Distraction"
    feature51.compendiumClassFeature = level5
    Operative.addToClassLevel(level5)
    
    let level6 = CompendiumLevel(context: context)
    level6.level = 6
    level6.bab = 4
    level6.fort = 2
    level6.ref = 5
    level6.will = 5
    let feature61 = Feature(context: context)
    feature61.name = "Operative Exploit"
    feature61.addToFeatureOptions([option221, option222, option223, option224, option225, option226, option227, option228, option229, option2210])
    let option611 = Option(context: context)
    option611.name = "Bleeding Shot (Ex)"
    option611.content = "For your debilitating trick, you can afflict your target with an amount of bleed damage equal to your operative level."
    feature61.addToFeatureOptions(option611)
    let option612 = Option(context: context)
    option612.name = "Certainty (Ex)"
    option612.content = "You can spend 1 Resolve Point as a reaction to reroll one of your specialization’s associated skill checks."
    feature61.addToFeatureOptions(option612)
    let option613 = Option(context: context)
    option613.name = "Debilitating Sniper (Ex)"
    option613.content = "You can use trick attack with sniper weapons. You do not add trick attack damage to your attack, but the target is still flat-footed, and you can use debilitating Tricks."
    feature61.addToFeatureOptions(option613)
    let option614 = Option(context: context)
    option614.name = "Enhanced Senses (Ex)"
    option614.content = "You can sense your surroundings without needing to see them.\n\nYou gain blindsense with a range of 60 feet. You must have darkvision and low-light vision, or the nightvision exploit, to learn this exploit."
    feature61.addToFeatureOptions(option614)
    let option615 = Option(context: context)
    option615.name = "Hampering Shot (Ex)"
    option615.content = "For your debilitating trick, you can reduce your target’s speeds by half and prevent it from using the guarded step action until the beginning of your next turn."
    feature61.addToFeatureOptions(option615)
    let option616 = Option(context: context)
    option616.name = "Improved Quick Movement (Ex)"
    option616.content = "You can move even faster than other operatives. You gain double the benefits of your quick movement ability, up to a maximum additional increase of +20 feet. You must have quick movement to learn this exploit."
    feature61.addToFeatureOptions(option616)
    let option617 = Option(context: context)
    option617.name = "Interfering Shot (Ex)"
    option617.content = "For your debilitating trick, you can prevent your target from using reactions until the end of your next turn."
    feature61.addToFeatureOptions(option617)
    let option618 = Option(context: context)
    option618.name = "Mentalist's Bane (Ex)"
    option618.content = "If you fail your Will saving throw against a mind-affecting effect with a duration of 1 round or more, you can attempt another saving throw against the effect 1 round later at the same DC. You get only one extra chance to save per effect.\n\nIf you succeed at a saving throw against a charm or compulsion effect, you can prevent the effect’s originator from knowing you succeeded. You gain basic knowledge of what the mental effect would have made you do or feel, and you can attempt a Bluff check to pretend you are under that effect. If the mental effect would provide a link between you and the originator (like the dominate person spell), you can choose to allow the link without the control."
    feature61.addToFeatureOptions(option618)
    let option619 = Option(context: context)
    option619.name = "Speed Hacker (Ex)"
    option619.content = "You can disable mechanical devices with Engineering and computer systems with Computers in half the usual time. In the rare cases when disabling a system or device would normally be a full action, you can do it as a standard action, and if it would normally be a standard action, you can do it as a move action."
    feature61.addToFeatureOptions(option619)
    let option6110 = Option(context: context)
    option6110.name = "Staggering Shot (Ex)"
    option6110.content = "For your debilitating trick, you can attempt to stagger your target. The target must succeed at a Fortitude save or be staggered until the beginning of your next turn. Once you’ve used this ability to attempt to stagger a creature, that creature is immune to your staggering shot for 24 hours."
    feature61.addToFeatureOptions(option6110)
    let option6111 = Option(context: context)
    option6111.name = "Stalwart (Ex)"
    option6111.content = "If you succeed at a Fortitude save against an effect that normally requires multiples successful saves to cure (such as a disease or poison), that effect immediately ends and is cured with a single successful save."
    feature61.addToFeatureOptions(option6111)
    let option6112 = Option(context: context)
    option6112.name = "Sure-Footed (Ex)"
    option6112.content = "You move at your full speed when moving over difficult terrain, and without penalty when using Acrobatics or Stealth at your full speed."
    feature61.addToFeatureOptions(option6112)
    let option6113 = Option(context: context)
    option6113.name = "Uncanny Shooter (Ex)"
    option6113.content = "Your ranged attacks with small arms do not provoke attacks of opportunity."
    feature61.addToFeatureOptions(option6113)
    feature61.compendiumClassFeature = level6
    Operative.addToClassLevel(level6)
    
    let level7 = CompendiumLevel(context: context)
    level7.level = 7
    level7.bab = 5
    level7.fort = 2
    level7.ref = 5
    level7.will = 5
    let feature71 = Feature(context: context)
    feature71.name = "Operative’s Edge +3"
    let bonus711 = Bonus(context: context)
    bonus711.type = "Initiative"
    bonus711.bonus = 1
    bonus711.featureBonus = feature71
    let bonus712 = Bonus(context: context)
    bonus712.type = "Skills"
    bonus712.bonus = 1
    bonus712.featureBonus = feature71
    feature71.compendiumClassFeature = level7
    let feature72 = Feature(context: context)
    feature72.name = "Uncanny Agility (Ex)"
    feature72.content = "You are immune to the flat-footed condition, and your opponent doesn’t gain any bonuses to attack rolls against you from flanking you or attacking you when you’re prone. Furthermore, covering fire and harrying fire don’t provide any advantage against you."
    feature72.compendiumClassFeature = level7
    let feature73 = Feature(context: context)
    feature73.name = "Specialization Skill Mastery"
    feature73.content = "You become so confident in certain skills that you can use them reliably even under adverse conditions. When attempting a skill check with a skill in which you have the Skill Focus feat, you can take 10 even if stress or distractions would normally prevent you from doing so."
    feature73.compendiumClassFeature = level7
    Operative.addToClassLevel(level7)
    
    let level8 = CompendiumLevel(context: context)
    level8.level = 8
    level8.bab = 6
    level8.fort = 2
    level8.ref = 6
    level8.will = 6
    let feature81 = Feature(context: context)
    feature81.name = "Operative Exploit"
    feature81.addToFeatureOptions([option221, option222, option223, option224, option225, option226, option227, option228, option229, option2210, option611, option612, option613, option614, option615, option616, option617, option618, option619, option6110, option6111, option6112, option6113])
    feature81.compendiumClassFeature = level8
    let feature82 = Feature(context: context)
    feature82.name = "Triple Attack (Ex)"
    feature82.content = "When making a full attack using only melee weapons with the operative special property or small arms, you can make up to three attacks instead of two."
    feature82.compendiumClassFeature = level8
    Operative.addToClassLevel(level8)
    
    let level9 = CompendiumLevel(context: context)
    level9.level = 9
    level9.bab = 6
    level9.fort = 3
    level9.ref = 6
    level9.will = 6
    Operative.addToClassLevel(level9)
    
    let level10 = CompendiumLevel(context: context)
    level10.level = 10
    level10.bab = 7
    level10.fort = 3
    level10.ref = 7
    level10.will = 7
    let feature101 = Feature(context: context)
    feature101.name = "Operative Exploit"
    feature101.addToFeatureOptions([option221, option222, option223, option224, option225, option226, option227, option228, option229, option2210, option611, option612, option613, option614, option615, option616, option617, option618, option619, option6110, option6111, option6112, option6113])
    let option1011 = Option(context: context)
    option1011.name = "Cloaking Field (Ex)"
    option1011.content = "You can bend light around yourself and muffle any minor sounds you make, allowing you to nearly vanish when not moving. Even when you move, you appear only as an outline with blurry features. This cloaking field doesn’t make you invisible, but it does make it easier to sneak around. Activating the cloaking field is a move action. While the cloaking field is active, you can use Stealth to hide, even while being directly observed and with no place to hide. Attacking doesn’t end the cloaking field, but it does end that particular attempt to hide. If you remain perfectly still for at least 1 round, you gain a +10 bonus to Stealth checks (which doesn’t stack with invisibility) until you move.\n\nYour cloaking field lasts for up to 10 rounds before it becomes inactive. While inactive, the cloaking field recharges automatically at the rate of 1 round of cloaking per minute."
    feature101.addToFeatureOptions(option1011)
    let option1012 = Option(context: context)
    option1012.name = "Deactivating Shot (Su)"
    option1012.content = "For your debilitating trick, you can attempt to temporarily suppress one magic item or deactivate one weapon, piece of equipment, or armor upgrade worn or carried by the target. Roll 1d20 + your operative level; the DC is equal to 10 + the item level. If you succeed, you deactivate the device (or suppress the item’s magical properties) until the beginning of your next turn. The device’s owner can spend a move action and attempt an Engineeringcheck (for technological devices) or a Mysticism check (for magic items) against your operative exploit DC to try to reactivate the device.\n\nYou can instead use this debilitating trick to temporarily deactivate a construct that has either the magical subtype (such as a golem) or the technological subtype (such as a robot). You don’t need to attempt a check, but the creature can attempt a Fortitudesave to negate the debilitating effect. If it fails, it’s stunned until the beginning of your next turn. Once you’ve used this ability to attempt to deactivate a construct, that creature is immune to your deactivating shot for 24 hours."
    feature101.addToFeatureOptions(option1012)
    let option1013 = Option(context: context)
    option1013.name = "Elusive Hacker (Ex)"
    option1013.content = "Your hacking skills make your code incredibly difficult for countermeasures to pin down. Whenever you would trigger a system’s countermeasure while hacking the system, there is a 50% chance that you manage to elude the countermeasure and it doesn’t trigger. You still haven’t disarmed the countermeasure, and it might trigger in the future."
    feature101.addToFeatureOptions(option1013)
    let option1014 = Option(context: context)
    option1014.name = "Ever Vigilant (Ex)"
    option1014.content = "You’ve been on enough solo missions to know that you can’t let your guard down, even while sleeping. You take no penalties to Perception checks for being asleep, though you still can’t succeed at purely visual Perception checks while asleep. You can always act on the surprise round, though if you choose to do so when you would otherwise be surprised, you use your initiative result or the initiative result of the first creature that would have surprised you – 1, whichever is lower."
    feature101.addToFeatureOptions(option1014)
    let option1015 = Option(context: context)
    option1015.name = "Glimpse The Truth (Ex)"
    option1015.content = "By picking up on subtle clues and hidden traces in your immediate surroundings, you can see things as they really are. As a full action, you can spend 1 Resolve Point to gain the effects of true seeing for 1 round with a range of 60 feet."
    feature101.addToFeatureOptions(option1015)
    let option1016 = Option(context: context)
    option1016.name = "Holographic Distraction (Ex)"
    option1016.content = "As a standard action, you can spend 1 Resolve Point to create a single holographic duplicate or psychic projection of yourself that moves away from you for 1 round per operative level. The double climbs walls, jumps across pits, or simply passes through obstacles, moving at twice your speed in one direction indicated by you when the ability is activated. Its course cannot be changed. Those who interact with the double can attempt a Will save to recognize that it is not real. You must have the holographic clone exploit to learn this exploit."
    feature101.addToFeatureOptions(option1016)
    let option1017 = Option(context: context)
    option1017.name = "Improved Evasion (Ex)"
    option1017.content = "When you fail a Reflex save against an effect that has a partial effect on a successful save, you take the partial effect instead of the full effect. You must have evasion to learn this exploit."
    feature101.addToFeatureOptions(option1017)
    let option1018 = Option(context: context)
    option1018.name = "Improved Uncanny Mobility (Ex)"
    option1018.content = "When you use the trick attack action or take a standard action to move up to your speed, your movement doesn’t provoke attacks of opportunity. You still provoke attacks of opportunity normally when making ranged attacks or casting spells. You must have the uncanny mobility exploit to learn this exploit."
    feature101.addToFeatureOptions(option1018)
    let option1019 = Option(context: context)
    option1019.name = "Master Of Disguise (Ex)"
    option1019.content = "You can take on the appearances of other creatures and even specific individuals. This functions as the quick disguise exploit, but the duration increases to 10 minutes per operative level. Alternatively, for 1 minute per operative level, you can take on the appearance of a specific individual that you have seen before. If you have heard the individual talk and can speak her language, you can also modulate your speech to match hers. This disguise is so convincing that creatures familiar with the individual must succeed at a Will saving throw before they can attempt a Perception check to pierce the disguise. You must have the quick disguise exploit to learn this exploit."
    feature101.addToFeatureOptions(option1019)
    let option10110 = Option(context: context)
    option10110.name = "Stunning Shot (Ex)"
    option10110.content = "For your debilitating trick, you can try to stun your target. The target must succeed at a Fortitude save or be stunned until the start of your next turn. Once you’ve used this ability to try to stun a creature, it’s immune to your stunning shot for 24 hours. You must have the staggering shot exploit to learn this exploit."
    feature101.addToFeatureOptions(option10110)
    let option10111 = Option(context: context)
    option10111.name = "Versatile Movement (Ex)"
    option10111.content = "You gain a climb speed and a swim speed equal to your land speed. This speed is not increased by the quick movement class feature or improved quick movement exploit."
    feature101.addToFeatureOptions(option10111)
    feature101.compendiumClassFeature = level10
    Operative.addToClassLevel(level10)
    
    feature51.addToFeatureOptions([option10111, option1015, option1014, option1011, option1013, option1019, option1016])
    
    let level11 = CompendiumLevel(context: context)
    level11.level = 11
    level11.bab = 8
    level11.fort = 3
    level11.ref = 7
    level11.will = 7
    let feature111 = Feature(context: context)
    feature111.name = "Operative’s Edge +4"
    let bonus1111 = Bonus(context: context)
    bonus1111.type = "Initiative"
    bonus1111.bonus = 1
    bonus1111.featureBonus = feature111
    let bonus1112 = Bonus(context: context)
    bonus1112.type = "Skills"
    bonus1112.bonus = 1
    bonus1112.featureBonus = feature111
    feature111.compendiumClassFeature = level11
    let feature112 = Feature(context: context)
    feature112.name = "Specialization Power"
    feature112.content = "You gain a special power depending on the specialization you chose at 1st level."
    let option1121 = Option(context: context)
    option1121.name = "Daredevil - Terrain Attack (Ex)"
    option1121.content = "At 11th level, when you and a foe are both balancing, climbing, flying, or swimming, you automatically succeed at any Bluff check required to make a trick attack against that foe."
    feature112.addToFeatureOptions(option1121)
    let option1122 = Option(context: context)
    option1122.name = "Detective - Detective's Insight (Ex)"
    option1122.content = "At 11th level, your incredible insights help you move investigations forward where mundane inquiries fail. Once per day, you can spend 1 Resolve Point and take 10 minutes pondering a mystery or quandary to gain an enigmatic insight as if you had cast divination (though the result is often presented as a cryptic clue)."
    feature112.addToFeatureOptions(option1122)
    let option1123 = Option(context: context)
    option1123.name = "Explorer - Into the Unknown (Ex)"
    option1123.content = "At 11th level, you gain a +4 bonus to Culture and Survival checks. While you’re outside both the Core Worlds and your home star system (if different), you gain a +2 bonus to initiative checks. At the GM’s discretion, in games centered around a different star system than the Core Worlds, replace the Core Worlds with that star system."
    feature112.addToFeatureOptions(option1123)
    let option1124 = Option(context: context)
    option1124.name = "Ghost - Phase Shift Escape (Ex)"
    option1124.content = "At 11th level, you can move through solid matter by taking your body’s matter out of phase for just a moment. As a full action, you can spend 1 Resolve Point to phase through up to 5 feet of solid matter. If you attempt to phase through something that is too thick, you spend the Resolve Point and take the action but the attempt fails. You cannot phase through force effects such as force fields or the barrier created by wall of force. After using phase shift escape, you can’t use it again until after you’ve taken a full 8-hour rest."
    feature112.addToFeatureOptions(option1124)
    let option1125 = Option(context: context)
    option1125.name = "Hacker - Control Hack (Ex)"
    option1125.content = "At 11th level, when you exceed the DC of a Computers or Engineering check to disable a device or computer system by 5 or more, you can instead take control of the device or system. For every 5 by which you exceed the DC, you can typically make the device or system perform one task, at the GM’s discretion. Once the device or system has done what you commanded, you choose whether the device deactivates or returns to normal."
    feature112.addToFeatureOptions(option1125)
    let option1126 = Option(context: context)
    option1126.name = "Spy - Fool Detection (Ex)"
    option1126.content = "At 11th level, whenever you succeed at a saving throw against a spell, technological device, or ability that would provide information about you (such as detect thoughts), instead of negating the effect, you can provide false information that matches your cover identity. If such an effect has no saving throw, you can attempt a Bluff check opposed by the Sense Motive check of the caster or user, and provide similar false information on a success."
    feature112.addToFeatureOptions(option1126)
    let option1127 = Option(context: context)
    option1127.name = "Thief - Contingency Plan (Ex)"
    option1127.content = "At 11th level, you’ve performed enough heists to realize that things never go exactly as you had planned. When something unexpected happens during a heist or infiltration, you can spend 2 Resolve Points and specify a contingency plan that you had set up in advance for this eventuality, either having the right prop (such as an ID or a computer file, but not a particularly valuable item), having the right information, or having hired a confederate to perform a single task at the right time. You then attempt a skill check. The appropriate skill and the DC are at the GM’s discretion, with a higher DC for a more elaborate or unlikely contingency (see Skill DCs for more information on setting skill DCs). If you succeed, you have the item or knowledge, or the confederate performs the task as specified. If you fail, either you don’t have what you need or your plan fails."
    feature112.addToFeatureOptions(option1127)
    Operative.addToClassLevel(level11)
    
    let level12 = CompendiumLevel(context: context)
    level12.level = 12
    level12.bab = 9
    level12.fort = 4
    level12.ref = 8
    level12.will = 8
    let feature121 = Feature(context: context)
    feature121.name = "Operative Exploit"
    feature121.addToFeatureOptions([option221, option222, option223, option224, option225, option226, option227, option228, option229, option2210, option611, option612, option613, option614, option615, option616, option617, option618, option619, option6110, option6111, option6112, option6113, option1011, option1012, option1013, option1014, option1015, option1016, option1017, option1018, option1019, option10110, option10111])
    feature121.compendiumClassFeature = level12
    Operative.addToClassLevel(level12)
    
    let level13 = CompendiumLevel(context: context)
    level13.level = 13
    level13.bab = 9
    level13.fort = 4
    level13.ref = 8
    level13.will = 8
    let feature131 = Feature(context: context)
    feature131.name = "Quad Attack (Ex)"
    feature131.content = "When making a full attack using only melee weapons with the operative special property or small arms, you can make up to four attacks instead of two."
    feature131.compendiumClassFeature = level13
    Operative.addToClassLevel(level13)
    
    let level14 = CompendiumLevel(context: context)
    level14.level = 14
    level14.bab = 10
    level14.fort = 4
    level14.ref = 9
    level14.will = 9
    let feature141 = Feature(context: context)
    feature141.name = "Operative Exploit"
    feature141.addToFeatureOptions([option221, option222, option223, option224, option225, option226, option227, option228, option229, option2210, option611, option612, option613, option614, option615, option616, option617, option618, option619, option6110, option6111, option6112, option6113, option1011, option1012, option1013, option1014, option1015, option1016, option1017, option1018, option1019, option10110, option10111])
    let option1411 = Option(context: context)
    option1411.name = "Efficient Cloaking Field (Ex)"
    option1411.content = "Your cloaking field lasts for up to 100 rounds (10 minutes), and it recharges at the rate of 2 rounds of cloaking per minute while inactive. You can spend 1 Resolve Point as a move action to recharge 20 rounds immediately, and you can do this even while the cloaking field is active. You must have the cloaking field exploit to learn this exploit."
    feature141.addToFeatureOptions(option1411)
    let option1412 = Option(context: context)
    option1412.name = "Knockout Shot (Ex)"
    option1412.content = "For your debilitating trick, you can attempt to knock the target out in one blow. The target must succeed at a Fortitude save or fall unconscious for 1 minute. Once you’ve used this ability to attempt to knock a creature out, that creature is immune to your knockout shot for 24 hours. You must have the staggering shot and stunning shot exploits to learn this exploit."
    feature141.addToFeatureOptions(option1412)
    let option1413 = Option(context: context)
    option1413.name = "Multiattack Mastery (Ex)"
    option1413.content = "When you use triple attack or quad attack to attack the same target with all of your attacks, after your full attack is complete, if at least two of your attacks hit, you can apply a debilitating trick to the target."
    feature141.addToFeatureOptions(option1413)
    let option1414 = Option(context: context)
    option1414.name = "Uncanny Senses (Ex)"
    option1414.content = "Your enhanced senses grow even more discerning. Your blindsense becomes blindsight with a range of 60 feet. If you have darkvision, its range increases by 30 feet. You must have the enhanced senses exploit to learn this exploit."
    feature141.addToFeatureOptions(option1414)
    feature141.compendiumClassFeature = level14
    Operative.addToClassLevel(level14)
    
    let level15 = CompendiumLevel(context: context)
    level15.level = 15
    level15.bab = 11
    level15.fort = 5
    level15.ref = 9
    level15.will = 9
    let feature151 = Feature(context: context)
    feature151.name = "Operative’s Edge +5"
    let bonus1511 = Bonus(context: context)
    bonus1511.type = "Initiative"
    bonus1511.bonus = 1
    bonus1511.featureBonus = feature151
    let bonus1512 = Bonus(context: context)
    bonus1512.type = "Skills"
    bonus1512.bonus = 1
    bonus1512.featureBonus = feature151
    feature151.compendiumClassFeature = level15
    Operative.addToClassLevel(level15)
    
    let level16 = CompendiumLevel(context: context)
    level16.level = 16
    level16.bab = 12
    level16.fort = 5
    level16.ref = 10
    level16.will = 10
    let feature161 = Feature(context: context)
    feature161.name = "Operative Exploit"
    feature161.addToFeatureOptions([option221, option222, option223, option224, option225, option226, option227, option228, option229, option2210, option611, option612, option613, option614, option615, option616, option617, option618, option619, option6110, option6111, option6112, option6113, option1011, option1012, option1013, option1014, option1015, option1016, option1017, option1018, option1019, option10110, option10111, option1411, option1412, option1413, option1414])
    feature161.compendiumClassFeature = level16
    Operative.addToClassLevel(level16)
    
    let level17 = CompendiumLevel(context: context)
    level17.level = 17
    level17.bab = 12
    level17.fort = 5
    level17.ref = 10
    level17.will = 10
    let feature171 = Feature(context: context)
    feature171.name = "Double Debilitation (Ex)"
    feature171.content = "When you hit an enemy with a trick attack, you can apply two of the effects from your debilitating trick."
    feature131.compendiumClassFeature = level17
    Operative.addToClassLevel(level17)
    
    let level18 = CompendiumLevel(context: context)
    level18.level = 18
    level18.bab = 13
    level18.fort = 6
    level18.ref = 11
    level18.will = 11
    let feature181 = Feature(context: context)
    feature181.name = "Operative Exploit"
    feature181.addToFeatureOptions([option221, option222, option223, option224, option225, option226, option227, option228, option229, option2210, option611, option612, option613, option614, option615, option616, option617, option618, option619, option6110, option6111, option6112, option6113, option1011, option1012, option1013, option1014, option1015, option1016, option1017, option1018, option1019, option10110, option10111, option1411, option1412, option1413, option1414])
    feature181.compendiumClassFeature = level18
    Operative.addToClassLevel(level18)
    
    let level19 = CompendiumLevel(context: context)
    level19.level = 19
    level19.bab = 14
    level19.fort = 6
    level19.ref = 11
    level19.will = 11
    let feature191 = Feature(context: context)
    feature191.name = "Operative’s Edge +6"
    let bonus1911 = Bonus(context: context)
    bonus1911.type = "Initiative"
    bonus1911.bonus = 1
    bonus1911.featureBonus = feature191
    let bonus1912 = Bonus(context: context)
    bonus1912.type = "Skills"
    bonus1912.bonus = 1
    bonus1912.featureBonus = feature191
    feature191.compendiumClassFeature = level19
    Operative.addToClassLevel(level19)
    
    let level20 = CompendiumLevel(context: context)
    level20.level = 20
    level20.bab = 15
    level20.fort = 6
    level20.ref = 12
    level20.will = 12
    let feature201 = Feature(context: context)
    feature201.name = "Supreme Operative (Ex)"
    feature201.content = "Whenever you attempt a skill check with your specialization’s associated skills, you can roll twice and take the higher result. Once per day as a move action, you can temporarily trade out one of your operative exploits for another operative exploit requiring the same level or lower. This trade lasts 24 hours. If the exploit you trade away is a prerequisite for any of your other abilities, you lose all abilities that require it as a prerequisite for the duration."
    feature201.compendiumClassFeature = level20
    let feature202 = Feature(context: context)
    feature202.name = "Operative Exploit"
    feature202.addToFeatureOptions([option221, option222, option223, option224, option225, option226, option227, option228, option229, option2210, option611, option612, option613, option614, option615, option616, option617, option618, option619, option6110, option6111, option6112, option6113, option1011, option1012, option1013, option1014, option1015, option1016, option1017, option1018, option1019, option10110, option10111, option1411, option1412, option1413, option1414])
    feature202.compendiumClassFeature = level20
    Operative.addToClassLevel(level20)
    
}

//Solarian  ################################################################################################################

func loadSolarian() {
    let Solarian = CompendiumClass(context: context)
    Solarian.name = "Solarian"
    Solarian.hitPoints = 7
    Solarian.staminaPoints = 7
    Solarian.skillRanks = 4
    Solarian.classSkills = "Acrobatics, Athletics, Diplomacy, Intimidate, Mysticism, Perception, Physical Science, Profession, Sense Motive, Stealth"
    
    let level1 = CompendiumLevel(context: context)
    level1.level = 1
    level1.bab = 1
    level1.fort = 2
    level1.ref = 0
    level1.will = 2
    let feature10 = Feature(context: context)
    feature10.name = "Proficiencies"
    feature10.content = "Armor-light; Weapons-basic and advanced melee weapons and small arms"
    feature10.compendiumClassFeature = level1
    let feature11 = Feature(context: context)
    feature11.name = "Skill Adept"
    feature11.content = "As part of the process that led you to become a solarian, you gained additional insight and training. Choose two additional skills and add them to your list of class skills."
    feature11.compendiumClassFeature = level1
    let feature12 = Feature(context: context)
    feature12.name = "Solar Manifestation (Su)"
    feature12.content = "At 1st level, you gain a physical manifestation of your stellar power. The base form of your Solar Manifestation, when not actively in use, is a mote of stellar energy slightly smaller than your fist that hovers near your head. Beyond the solar mote, your manifestation can take one of two additional forms: armor or a weapon. You must pick one Solar Manifestation (either armor or a weapon) upon taking your first level of solarian. You also choose whether your Solar Manifestation (in any form) either glows brightly with one color common to stars (including blue, red, white, or yellow) or is the perfect darkness of a black hole. A glowing Solar Manifestation, regardless of its form, sheds dim light in a 20-foot radius. You can shut off the light or darkness as a standard action in order to blend in or assist in stealth, but whenever you enter a stellar mode, the glow or darkness returns immediately. Once made, these choices cannot be changed.\n\nOnly you can interact with your solar manifestation, whether in mote, armor, or weapon form. No other creature or effect can affect your Solar Manifestation in any way, including disarming or sundering it."
    let option121 = Option(context: context)
    option121.name = "Solar Armor"
    option121.content = "You can form your solar mote into a suit of armor made out of stellar energy that outlines your body. This armor appears to be made out of glowing light or solid darkness, as determined by the appearance of your Solar Manifestation, but it can take whatever general shape you choose, whether glowing armored plates of solidified stellar energy, a form-fitting suit of crackling energy, or an aura of stellar plasma. Your Solar armor’s general design has no impact on its function and doesn’t give the armor any special abilities. Once you’ve selected the general design, you can’t change it until you gain a new solarian level.\n\nYour solar armor grants you a +1 enhancement bonus to both your Kinetic Armor Class and your Energy Armor Class. This bonus increases to +2 at 10th level. It is compatible with light armor, but it gives you no benefit if you’re wearing heavy armor. At 5th level, you also gain energy resistance 5 while your solar armor is active. You can choose either cold resistance or fire resistance when you activate the armor, and can switch energy types as a move action. This energy resistance increases by 5 at 10th level and every 5 levels thereafter.\n\nForming or dismissing solar armor is a move action."
    feature12.addToFeatureOptions(option121)
    let option122 = Option(context: context)
    option122.name = "Solar Weapon"
    option122.content = "You can seize your solar mote in one hand to form a melee weapon out of stellar energy. This weapon appears to be made out of glowing light or solid darkness, as determined by the appearance of your Solar Manifestation, but it can be whatever general shape you choose. Normal melee weapons like axes, swords, and spears are most common, but other shapes, such as a large rune of stellar energy, a mass of writhing energy tendrils, or an energized fist that fits over your own hand, are possible as well. Your Solar weapon’s general design has no impact on its function, and doesn’t give the weapon any special abilities such as reach. Once you’ve selected the general design, you can’t change it until you gain a new solarian level.\n\nYour Solar weapon functions as a one-handed kinetic advanced melee weapon, and you’re automatically proficient with it. At 1st level, choose whether your Solar weapon deals bludgeoning, piercing, or slashing damage. You can change the damage type each time you gain a new solarian level. Your Solar weapon deals damage equal to 1d6 + your Strength modifier. This damage increases by 1d6 at 6th level, 9th level, 12th level, and every level thereafter. Solarian weapon crystals can increase your Solar weapon’s damage.\n\nForming or dismissing a solar weapon is a move action that takes the same amount of effort as drawing or sheathing a weapon (and can be combined with a move as a single move action or used with the Quick Draw feat). Your Solar weapon is automatically dismissed if it ever leaves your hand."
    feature12.addToFeatureOptions(option122)
    feature12.compendiumClassFeature = level1
    let feature13 = Feature(context: context)
    feature13.name = "Stellar Mode (Su)"
    feature13.content = "The stellar forces you call on are attuned to either photons (representing the power of stars to emit heat, light, and plasma) or gravitons (representing the power of stars to attract and imprison objects through gravity). The ultimate expression of photon power is the supernova, when all of a star’s energy is exerted outward, while the ultimate expression of graviton power is the black hole, where gravity is so strong that nothing, not even light, can escape it. The balance between these two opposing cosmic forces is the source of your power, and your stellar mode represents the strength of your connection with one or both of these forces—a relationship that shifts from one moment to the next as you use your stellar revelations.\n\nWhen in battle, you enter a state of metaphysical alignment with cosmic forces. At the start of your first turn in combat, if you are conscious, you must choose one of three stellar modes: graviton, photon, or unattuned (see below).\n\nAt the start of each subsequent turn of combat, you must choose to either stay in your current stellar mode or to become unattuned. If you choose to stay in your mode, you gain another attunement point for that mode. As long as you have 1 or 2 attunement points in a mode, you are attuned to that mode. Once you reach 3 attunement points in a mode, you become fully attuned to that mode. Some of your stellar revelations are zenith Revelations, which can be used only when you’re fully attuned to one mode or the other. When you are fully attuned, you cannot gain more points in your mode, but you stay fully attuned until combat ends, your stellar mode ends, or you become unattuned. If you choose to become unattuned, you lose all attunement points you’ve accrued so far. At the start of your next turn, you can enter a new stellar mode or stay unattuned.\n\nAt the end of combat, your stellar mode ends. If you fall unconscious during an encounter, you become unattuned. If you regain consciousness while still under threat, you can enter a stellar mode on your first turn after regaining consciousness, as if it were the first round of combat; if combat ends before you regain consciousness, your stellar mode ends. If you are not in a stellar mode, for any reason, you are considered unattuned for the purposes of your stellar revelations.\n\nWhen you’re not in combat, you can’t enter a stellar mode. This ability manifests only in high-stakes situations, when your training takes over and connects your mind to the universe. There needs to be some risk to you for your stellar mode to activate, so you must be facing a significant enemy. If there’s any doubt about whether you’re in combat or able to access your stellar mode, the GM decides. This also means that your stellar mode might end before what was previously a dangerous battle is over, once all that remains are dregs that don’t pose a real threat to you.\n\nGraviton Mode\nWhen you enter graviton mode, you gain 1 graviton attunement point and become graviton-attuned. Some of your stellar revelations are graviton powers and get stronger if you’re graviton-attuned. While graviton-attuned, you gain a +1 insight bonus to Reflex saves. This bonus increases by 1 for every 9 solarian levels you have.\n\nPhoton Mode\nWhen you enter photon mode, you gain 1 photon attunement point and become photon-attuned. Some of your stellar revelations are photon powers and get stronger if you’re photon-attuned. While photon-attuned, you gain a +1 insight bonus to damage rolls (including damage rolls for your stellar powers). This bonus increases by 1 for every 6 solarian levels you have.\n\nUnattuned\nWhile unattuned, you gain no attunement points and you are neither photon-attuned nor graviton-attuned. You gain no benefits while unattuned."
    feature13.compendiumClassFeature = level1
    let feature14 = Feature(context: context)
    feature14.name = "Stellar Revelation"
    feature14.content = "As you gain experience, you uncover new secrets about the powers of energy, gravity, stars, and other fundamental sources of cosmic power that grant you the ability to channel these forces and manifest potent preternatural powers. At 1st level, you automatically learn the black hole and supernova stellar revelations. At 2nd level and every 2 levels thereafter, you learn an additional stellar revelation. You cannot select the same stellar revelation more than once unless it says otherwise. You can choose any stellar revelations you wish, but if you have more photon revelations than graviton revelations, or vice versa, it is more difficult to become fully attuned in either mode. If you devote yourself too strongly to one type of Revelation, you fall out of harmonic alignment with the cosmic forces you access. You can have one more Revelation of one type (either graviton or photon) than of the other type without penalty. If your Revelations of one type outnumber those of the other type by two or more, you are considered attuned while you have from 1 to 3 attunement points in a stellar mode, and you do not become fully attuned to either stellar mode until you have accrued 4 attunement points in that stellar mode. For example, if you have three photon revelations and one graviton revelation, you would need 4 photon attunement points to be fully photon-attuned and 4 graviton attunement points to be fully graviton-attuned.\n\nStellar revelations normally note what kind of action they require. If a stellar revelation does not note the kind of action it takes and it modifies some other action (such as an attack or skill check), it can be used as part of that action. If a stellar revelation allows a saving throw to resist its effects, the DC is equal to 10 + half your solarian level + your Charisma modifier. A Revelation that says it lasts for 1 round or until you leave the associated mode lasts for whichever of these durations is longer. You can use stellar revelations both in and out of combat, but since you can’t enter a stellar mode outside of battle, any Revelation that lasts for 1 round or as long as you’re in a stellar mode lasts only 1 round if you’re not in combat.\n\nBlack Hole (Su) [Gravitaton Mode]\nWhen you’re fully graviton-attuned, as a standard action, you can pull any number of creatures within 20 feet of you closer. You choose which creatures are affected and which ones aren’t. Each target must succeed at a Fortitude save or be pulled 10 feet toward you. The range of this Revelation and the distance pulled increase by 5 feet at 5th level and every 4 levels thereafter. Solid objects do not block this ability, but any creature that runs into a solid object ceases moving closer to you. Creatures moved by this ability do not provoke attacks of opportunity from this movement. After you use this Revelation, you immediately become unattuned. Black hole functions as a zenith Revelation for the purposes of abilities that reference them.\n\nSupernova (Su) [Photon Mode]\nWhen you’re fully photon-attuned, as a standard action, you can deal 1d6 fire damage plus 1d6 additional fire damage per solarian level to all creatures within 10 feet of you. A creature that succeeds at a Reflex save takes half damage. At 9th level, you can increase the radius to 15 feet, and at 17th level, you can increase the radius to 20 feet. After you use this Revelation, you immediately become unattuned. Supernova functions as a zenith Revelation for the purposes of abilities that reference them."
    feature14.compendiumClassFeature = level1
    Solarian.addToClassLevel(level1)
    
    let level2 = CompendiumLevel(context: context)
    level2.level = 2
    level2.bab = 2
    level2.fort = 3
    level2.ref = 0
    level2.will = 3
    let feature21 = Feature(context: context)
    feature21.name = "Stellar Revelation"
    let option211 = Option(context: context)
    option211.name = "Dark Matter (Su) [Gravitation Mode]"
    option211.content = "As a move action, you can draw on the properties of dark matter to increase your density, allowing you to resist physical damage. You gain damage reduction 1/—. This increases to DR 2/— at 6th level and increases by 1 again every 3 solarian levels thereafter. This benefit lasts for 1 round or until you leave graviton mode./n/nWhen you are attuned or fully attuned, your DR from dark matter is equal to half your solarian level."
    feature21.addToFeatureOptions(option211)
    let option212 = Option(context: context)
    option212.name = "Flare (Su) [Photon Mode]"
    option212.content = "As a move action, you can shed light in a 30-foot radius for 1 minute. You choose dim, normal, or bright light each time you activate this Revelation. As a standard action, you can create a flash of brilliant light, forcing one creature within 30 feet to succeed at a Reflex save or be blinded for 1 round. Once you’ve targeted a creature with flare, you can’t target it with this Revelation again for 10 minutes. Blind or sightless creatures are not affected by this use of this Revelation.\n\nWhen you create a flash of light as a standard action and you are attuned or fully attuned, you can instead choose to make all enemies within range dazzled for 1 round (no save)."
    feature21.addToFeatureOptions(option212)
    let option213 = Option(context: context)
    option213.name = "Gravity Anchor (Su) [Gravitation Mode]"
    option213.content = "As a move action, you can form a gravitational bond between yourself and either the surface you’re standing on or the objects you are holding. This grants you a +4 bonus to your AC against bull rush, reposition, and trip combat maneuvers if you choose the surface underfoot, or against disarm combat maneuvers if you choose objects. The bonus lasts for 1 round or until you leave graviton mode. You can have only one gravity anchor active at a time.\n\nWhen you are attuned or fully attuned, you can activate this Revelation as a reaction when targeted by a bull rush, disarm, reposition, or trip combat maneuver, in which case it defends against only that attack."
    feature21.addToFeatureOptions(option213)
    let option214 = Option(context: context)
    option214.name = "Gravity Boost (Su) [Gravitation Mode]"
    option214.content = "You can increase or reduce the gravitational attraction between yourself and the terrain around you. You can add a bonus equal to one-third your solarian level (minimum +1) to Athletics checks to climb, jump, or swim as part of the action you take to attempt the skill check. In addition, as a reaction when you are falling, you can reduce the falling damage you take by half. At 6th level, you can move along vertical surfaces and even upside down along ceilings for 1 round. This functions as spider climb, but it leaves your hands free and you can also run. You must end your movement on a surface that can support you normally. If you end your movement while you are standing on a vertical surface or ceiling, you fall unless you succeed at an Athletics check to climb to remain in position./n/nWhen you are attuned or fully attuned, the bonus you gain from this Revelation to checks to climb, jump, or swim doubles."
    feature21.addToFeatureOptions(option214)
    let option215 = Option(context: context)
    option215.name = "Gravity Hold (Su) [Gravitation Mode]"
    option215.content = "This Revelation allows you to move objects at a distance as per psychokinetic hand.\n\nWhen you are attuned or fully attuned, you can use the psychokinetic hand ability of your gravity hold to immobilize, lift, or move a Medium or smaller creature. The creature can attempt a Fortitude save to negate the effect. While under this effect, the target creature cannot move, but can take any other normal actions. This ability follows all of the restrictions of the spell other than the weight limit, but you can’t lift a creature higher than 5 feet off the ground. When you spend a standard action concentrating to maintain the gravity hold, the target can attempt a new save to end the effect. Once a creature successfully saves against this ability, it becomes immune to further uses of this Revelation for 24 hours."
    feature21.addToFeatureOptions(option215)
    let option216 = Option(context: context)
    option216.name = "Plasma Sheath (Su) [Photon Mode]"
    option216.content = "As a move action, you can cause all of your melee attacks to deal fire damage instead of their normal damage type. (The attacks are still made against the target’s EAC or KAC as normal for the weapon.) This benefit lasts for 1 round or until you leave photon mode.\n\nWhen you are attuned or fully attuned, your attacks with plasma sheath deal additional fire damage equal to half your level."
    feature21.addToFeatureOptions(option216)
    let option217 = Option(context: context)
    option217.name = "Radiation (Su) [Photon Mode]"
    option217.content = "As a standard action, you can emit an aura of low-level radiation. Creatures within 5 feet of you must succeed at a Fortitude save or be sickened. A sickened creature recovers as soon as it moves out of your aura, and a creature that succeeds at its saving throw is immune to your radiation for 24 hours. This is a poison effect. The radiation lasts for 1 round or until you leave photon mode.\n\nWhen you are attuned or fully attuned, the size of your aura increases to 10 feet."
    feature21.addToFeatureOptions(option217)
    let option218 = Option(context: context)
    option218.name = "Stellar Rush (su) [Photon Mode]"
    option218.content = "As a standard action, you can wreathe yourself in stellar fire and make a charge without the penalties.\n\nWhen you are attuned or fully attuned, you can substitute a bull rush for the melee attack at the end of the charge. Whether or not you succeed at the bull rush, the target takes 2d6 fire damage (Reflex half). This damage increases by 1d6 at 6th level and every 2 levels thereafter."
    feature21.addToFeatureOptions(option218)
    feature21.compendiumClassFeature = level2
    Solarian.addToClassLevel(level2)
    
    let level3 = CompendiumLevel(context: context)
    level3.level = 3
    level3.bab = 3
    level3.fort = 3
    level3.ref = 1
    level3.will = 3
    let feature31 = Feature(context: context)
    feature31.name = "Sidereal Influence (Su)"
    feature31.content = "You can tap into stellar forces outside of battle, using the properties of gravitons or photons to affect your skill use. At 3rd level, choose two skills from the lists below, one from the graviton list and one from the photon list. At 11th level and again at 19th level, choose two more skills. Each time you pick skills, choose one from the graviton list and one from the photon list.\n\nTo use your sidereal influence, you must spend 1 minute in meditation, then choose either graviton skills or photon skills. When attempting a skill check with one of your selected skills of the chosen type (either graviton or photon), you can roll 1d6 and add the result as an insight bonus to your check. This ability lasts until you enter combat, fall unconscious, sleep, or meditate again to choose a different skill type. You can reactivate this ability by meditating again for 1 minute.\n\nGraviton Skills: Bluff (Cha), Disguise (Cha), Mysticism (Wis), Sense Motive (Wis), Stealth (Dex)\n\nPhoton Skills: Culture (Int), Diplomacy (Cha), Intimidate (Cha), Medicine (Int), Survival (Wis)"
    let option311 = Option(context: context)
    option311.name = "Bluff (Cha)"
    feature31.addToFeatureOptions(option311)
    let option312 = Option(context: context)
    option312.name = "Disguise (Cha)"
    feature31.addToFeatureOptions(option312)
    let option313 = Option(context: context)
    option313.name = "Mysticism (Wis)"
    feature31.addToFeatureOptions(option313)
    let option314 = Option(context: context)
    option314.name = "Sense Motive (Wis)"
    feature31.addToFeatureOptions(option314)
    let option315 = Option(context: context)
    option315.name = "Stealth (Dex)"
    feature31.addToFeatureOptions(option315)
    let option316 = Option(context: context)
    option316.name = "Culture (Int)"
    feature31.addToFeatureOptions(option316)
    let option317 = Option(context: context)
    option317.name = "Diplomacy (Cha)"
    feature31.addToFeatureOptions(option317)
    let option318 = Option(context: context)
    option318.name = "Intimidate (Cha)"
    feature31.addToFeatureOptions(option318)
    let option319 = Option(context: context)
    option319.name = "Medicine (Int)"
    feature31.addToFeatureOptions(option319)
    let option3110 = Option(context: context)
    option3110.name = "Survival (Wis)"
    feature31.addToFeatureOptions(option3110)
    feature31.compendiumClassFeature = level3
    let feature32 = Feature(context: context)
    feature32.name = "Weapon Specialization (Ex)"
    feature32.content = "You gain Weapon Specialization as a bonus feat for each weapon type for which this class grants you proficiency. If you selected Solar weapon as your Solar Manifestation, it gains the benefit of Weapon Specialization as if it were an advanced melee weapon."
    feature32.compendiumClassFeature = level3
    Solarian.addToClassLevel(level3)
    
    let level4 = CompendiumLevel(context: context)
    level4.level = 4
    level4.bab = 4
    level4.fort = 4
    level4.ref = 1
    level4.will = 4
    let feature41 = Feature(context: context)
    feature41.name = "Stellar Revelation"
    feature41.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218])
    feature41.compendiumClassFeature = level4
    Solarian.addToClassLevel(level4)
    
    let level5 = CompendiumLevel(context: context)
    level5.level = 5
    level5.bab = 5
    level5.fort = 4
    level5.ref = 1
    level5.will = 4
    Solarian.addToClassLevel(level5)
    
    let level6 = CompendiumLevel(context: context)
    level6.level = 6
    level6.bab = 6
    level6.fort = 5
    level6.ref = 2
    level6.will = 5
    let feature61 = Feature(context: context)
    feature61.name = "Stellar Revelation"
    feature61.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218])
    let option611 = Option(context: context)
    option611.name = "Astrologic Sense (Su) [Photon Mode]"
    option611.content = "You can sense the movement of all objects influencing you to gain insight into upcoming events. Once per day as a full action, you can try to determine whether a particular action of yours will bring good or bad results for you in the immediate future. This functions as augury with your effective caster level equal to your solarian level. You can spend 1 Resolve Point to use this Revelation again on the same day, but you still can’t use it more than once per hour.\n\nWhen you are attuned or fully attuned, you can see 1 hour into the future (instead of half an hour as is normal for augury) when you use this Revelation."
    feature61.addToFeatureOptions(option611)
    let option612 = Option(context: context)
    option612.name = "Blazing Orbit (Su) [Photon Mode]"
    option612.content = "As a move action, you can move up to your speed, gaining concealment against any attack made against you during the move, and you can leave a trail of flames in every square you pass through. The flames last for 1 round and deal 2d6 fire damage to anyone who moves into them. You can’t move through another creature’s space during this movement. If you use blazing orbit again, any flames you previously created with it go out. The damage from the flames increases by 1d6 at 8th level and every 2 levels thereafter.\n\nWhen you are attuned or fully attuned, any creature damaged by the flames also gains the burning condition (1d6 fire damage)."
    feature61.addToFeatureOptions(option612)
    let option613 = Option(context: context)
    option613.name = "Corona (Su) [Photon Mode]"
    option613.content = "As a standard action, you can surround your body with an envelope of fiery plasma. You gain cold resistance 10, and any adjacent creature that hits you with a natural weapon or a melee weapon takes 2d6 fire damage. The corona lasts for 1 round or until you leave photon mode. At 12th level, the damage increases to 3d6 and the cold resistance increases to 15. At 18th level, the damage increases to 4d6 and the cold resistance increases to 20.\n\nWhen you are attuned or fully attuned, any creature that starts its turn adjacent to you while your corona is in effect takes fire damage equal to half your solarian level."
    feature61.addToFeatureOptions(option613)
    let option614 = Option(context: context)
    option614.name = "Crush (Su) [Graviton Mode]"
    option614.content = "As a standard action, you can increase the effects of gravity on the internal organs or workings of a target within 30 feet, causing it to have Difficulty maintaining its normal functionality. The target must succeed at a Fortitude save or become staggered for 1 round. This Revelation also affects constructs. You can maintain this effect as a move action each round, but the target can attempt a new saving throw each round to end the effect. Once a creature succeeds at this save or the effect ends, you can’t target that creature with crush again for 24 hours.\n\nWhen you are attuned or fully attuned, you can spend 1 Resolve Point to also stun the target for 1 round. Maintaining crush on subsequent rounds extends the staggered effect, but not the stunned effect."
    feature61.addToFeatureOptions(option614)
    let option615 = Option(context: context)
    option615.name = "Defy Gravity (Su) [Graviton Mode]"
    option615.content = "As a move action, you can fly up to your speed. You must end this movement on solid ground or you fall. At 12th level or higher, you don’t have to land if you immediately follow your flight with another move action to use defy gravity. On your last move action of the turn, you still have to land or fall.\n\nWhen you are attuned or fully attuned, your fly speed from this Revelation increases by 10 feet."
    feature61.addToFeatureOptions(option615)
    let option616 = Option(context: context)
    option616.name = "Glow of Life (Su) [Photon Mode]"
    option616.content = "As a move action, you can spend 1 Resolve Point to recover a number of Hit Points equal to twice your solarian level. Once you use this Revelation, you can’t use it again until the next time you regain Stamina Points after a 10-minute rest.\n\nWhen you are attuned or fully attuned, increase the amount you heal with this Revelation to three times your solarian level."
    feature61.addToFeatureOptions(option616)
    let option617 = Option(context: context)
    option617.name = "Gravity Surge (Su) [Graviton Mode]"
    option617.content = "As a full action, you can perform a disarm or trip combat maneuver against a target within 30 feet. Use your Charisma modifier on your attack roll instead of your Strength modifier, and you gain a +4 bonus to this attack roll that doesn’t stack with the bonus from the Improved Combat Maneuver feat.\n\nWhen you are attuned or fully attuned, if you disarm a target with gravity surge and have a hand free, the dropped item flies toward you and you can snatch it from the air. If you trip a target with gravity surge, you can pull the target up to 10 feet closer to you."
    feature61.addToFeatureOptions(option617)
    let option618 = Option(context: context)
    option618.name = "Hypnotic Glow (Su) [Photon Mode]"
    option618.content = "As a standard action, you can convince one living creature that you are to be trusted. This functions as charm person, but with a duration of 1 round per solarian level you have. When the effect ends, if you are out of line of sight and the target is not engaged in an activity it wouldn’t have begun without being charmed, the target does not realize it was charmed or has acted unusually unless someone else points it out. You can’t use this Revelation again while you currently have a creature charmed via this ability, and once you’ve attempted to charm a creature, whether or not the attempt was successful, you can’t charm the same creature again for 24 hours. Your influence over the creature ends once the duration has expired, and at that time the target likely ceases doing anything you’ve requested of it. At 9th level, hypnotic glow functions as c harm monster.\n\nWhen you are attuned or fully attuned and you successfully charm a creature using this ability, you can also command it to approach, flee, or halt on its next turn, as per the command spell (no save)."
    feature61.addToFeatureOptions(option618)
    let option619 = Option(context: context)
    option619.name = "Reflection (Su) [Graviton Mode]"
    option619.content = "You can reflect ranged attacks back at your enemies. If you took the total defense action on your last turn, or if you were fighting defensively and spend 1 Resolve Point, as a reaction you can redirect a ranged attack that misses you. Select a new target within 30 feet and make a ranged attack roll with a –4 penalty. If your attack hits, the new target is damaged as if it had been the intended target of the original ranged attack.\n\nWhen you are attuned or fully attuned, you don’t take a –4 penalty to your redirected attack roll."
    feature61.addToFeatureOptions(option619)
    feature61.compendiumClassFeature = level6
    Solarian.addToClassLevel(level6)
    
    let level7 = CompendiumLevel(context: context)
    level7.level = 7
    level7.bab = 7
    level7.fort = 5
    level7.ref = 2
    level7.will = 5
    let feature71 = Feature(context: context)
    feature71.name = "Flashing Strikes (Ex)"
    feature71.content = "Your mastery of melee combat allows you to make multiple attacks more accurately. When making a full attack entirely with melee weapons, you take a –3 penalty to each attack roll instead of the normal –4 penalty."
    feature71.compendiumClassFeature = level7
    Solarian.addToClassLevel(level7)
    
    let level8 = CompendiumLevel(context: context)
    level8.level = 8
    level8.bab = 8
    level8.fort = 6
    level8.ref = 2
    level8.will = 6
    let feature81 = Feature(context: context)
    feature81.name = "Stellar Revelation"
    feature81.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218, option611, option612, option613, option614, option615, option616, option617, option618, option619])
    feature81.compendiumClassFeature = level8
    Solarian.addToClassLevel(level8)
    
    let level9 = CompendiumLevel(context: context)
    level9.level = 9
    level9.bab = 9
    level9.fort = 6
    level9.ref = 3
    level9.will = 6
    let feature91 = Feature(context: context)
    feature91.name = "Zenith Revelations"
    feature91.content = "At 9th level and again at 17th level, you gain two powerful stellar revelations. Choose two revelations from the zenith revelations list: one graviton revelation and one photon revelation.\n\nZenith Revelations are powerful stellar revelations that require you to be fully attuned in a stellar mode. After using a zenith Revelation, your stellar mode immediately becomes unattuned."
    let option911 = Option(context: context)
    option911.name = "Miniature Star (Su) [Photon Mode]"
    option911.content = "When you’re fully photon-attuned, you can create a simulacrum of a star as a standard action. The star is a 10-foot-radius sphere that fills your square (or one square of your space, if you’re larger than Medium) and all squares within 5 feet of that space. Any creature that starts its turn in the same space as the star takes 1d6 fire damage for every 2 solarian levels you have, and any creature that starts its turn outside the star but within 5 feet of it takes half that damage. At 17th level, you can create your star simulacrum as a 15-foot-radius sphere that affects your square and all squares within 10 feet of that space (a total of 21 squares).\n\nCreatures can move through the star, but it exerts a gravitational pull, and any creature inside it or within 5 feet of it must spend twice as much movement for each square of movement that takes it away from the center of the star. The star remains for 1d4+1 rounds, and stays in place even if you later move. You are immune to all effects of your own miniature star."
    feature91.addToFeatureOptions(option911)
    let option912 = Option(context: context)
    option912.name = "Ray of Light (Su) [Photon Mode]"
    option912.content = "When you’re fully photon-attuned, as a move action, you can transform yourself into a ray of light and move at light speed to any space you can see within long range. Any barrier that would block, reflect, or scatter light prevents you from moving through it. No creature can use a reaction to interfere with your movement or make attacks of opportunity against you unless it’s capable of reacting faster than the speed of light. At 17th level, you can touch one willing or unconscious creature to convert it to light and bring it with you as part of the same action."
    feature91.addToFeatureOptions(option912)
    let option913 = Option(context: context)
    option913.name = "Solar Acceleration (Su) [Photon Mode]"
    option913.content = "When you’re fully photon-attuned, you can make a full attack as a standard action. In addition, you and up to six allies within 30 feet are affected by haste for 1 minute after you use this Revelation. At 17th level, the extra speed from the haste effect increases to 60 feet (to a maximum of three times the creature’s normal speed)."
    feature91.addToFeatureOptions(option913)
    let option914 = Option(context: context)
    option914.name = "Starquake (Su) [Graviton Mode]"
    option914.content = "When you’re fully graviton-attuned, you can create a violent ripple of movement to knock down your foes. As a move action, you can move up to your speed along the ground without provoking attacks of opportunity. Each creature you are adjacent to at any point during that movement takes 1d8 bludgeoning damage and must succeed at a Reflex save or be knocked prone. The affected creatures don’t need to be standing on solid ground to fall prone, and any that were in the air (but still adjacent to you) fall to the ground on a failed save. The damage increases by 1d8 for every 3 solarian levels you have beyond 7th. At 17th level, you can move up to twice your speed along the ground with this Revelation."
    feature91.addToFeatureOptions(option914)
    let option915 = Option(context: context)
    option915.name = "Time Dilation (Su) [Graviton Mode]"
    option915.content = "When you’re fully graviton-attuned, you can make time pass more slowly for your enemies. As a standard action, you can project a gravitational wave in a 30-foot cone. You choose which creatures in the cone are affected and which ones aren’t. Each target must succeed at a Fortitude save or by affected by slow for a number of rounds equal to your solarian level. At 17th level, even targets that succeed at their saving throws are affected by slow for 1 round."
    feature91.addToFeatureOptions(option915)
    let option916 = Option(context: context)
    option916.name = "Wormholes (Su) [Graviton Mode]"
    option916.content = "When you’re fully graviton-attuned, you can create two linked wormholes as a standard action. One wormhole must be adjacent to you, and the other appears anywhere in line of sight within medium range (100 feet + 10 feet per solarian level). Each wormhole is 5 feet across and appears at an intersection between two squares. You and any Large or smaller creatures you mentally designate (you can designate “all creatures,” “all lashuntas,” or similar categories) can travel between the wormholes. This is considered extradimensional travel. Entering a wormhole instantly transports a creature to a square adjacent to the other wormhole’s intersection, where the creature can continue its movement. The wormholes remain for 1 round for every 2 solarian levels you have. At 17th level, you can create three wormholes using this ability, and upon entering the wormhole, a creature can decide which of the other two wormholes to exit."
    feature91.addToFeatureOptions(option916)
    feature91.compendiumClassFeature = level9
    Solarian.addToClassLevel(level9)
    
    let level10 = CompendiumLevel(context: context)
    level10.level = 10
    level10.bab = 10
    level10.fort = 7
    level10.ref = 3
    level10.will = 7
    let feature101 = Feature(context: context)
    feature101.name = "Stellar Revelation"
    feature101.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218, option611, option612, option613, option614, option615, option616, option617, option618, option619])
    let option1011 = Option(context: context)
    option1011.name = "Soul Furnace (Su) [Photon Mode]"
    option1011.content = "You can stoke the internal energy of your entire physiology, allowing you to boost your life processes. As a move action, you can spend 1 Resolve Point. If you are suffering from an affliction (a Curse, disease, drug or poison), you can immediately attempt an additional saving throw at the affliction’s normal save DC. If you succeed at this saving throw, the affliction ends (regardless of how many successful saving throws it normally takes to end the affliction). Once you have used this Revelation, you can’t use it again until the next time you regain Stamina Points after a 10-minute rest.\n\nWhen you are attuned or fully attuned, you can also use this Revelation to end any one of the following conditions you have: bleeding, blinded, burning, cowering, dazzled, exhausted, fatigued, frightened, panicked, shaken, or sickened."
    feature101.addToFeatureOptions(option1011)
    let option1012 = Option(context: context)
    option1012.name = "Stealth Warp (Su) [Graviton Mode]"
    option1012.content = "You can bend light, sound, and even vibrations around your body, making you harder to notice. As a move action, you can grant yourself a +4 bonus to Stealth checks. This lasts for 1 round or until you leave graviton mode.\n\nWhen you are attuned or fully attuned, you can use this Revelation to reduce your sensory output so much that you can attempt a Stealth check even when you’re directly observed and lack cover or a distraction. You are not invisible, simply difficult to see clearly, and if a creature was observing you prior to your Stealth check, it remains aware of your location until you successfully reach cover or concealment. Your stealth warp ends if you make an attack or cause another creature to attempt a saving throw, or at the beginning of your next turn unless you immediately take another move action to use this Revelation."
    feature101.addToFeatureOptions(option1012)
    feature101.compendiumClassFeature = level10
    Solarian.addToClassLevel(level10)
    
    let level11 = CompendiumLevel(context: context)
    level11.level = 11
    level11.bab = 11
    level11.fort = 7
    level11.ref = 3
    level11.will = 7
    let feature111 = Feature(context: context)
    feature111.name = "Sidereal Influence (Su)"
    feature111.content = "Graviton Skills: Bluff (Cha), Disguise (Cha), Mysticism (Wis), Sense Motive (Wis), Stealth (Dex)\n\nPhoton Skills: Culture (Int), Diplomacy (Cha), Intimidate (Cha), Medicine (Int), Survival (Wis)"
    feature111.addToFeatureOptions([option311, option312, option313, option314, option315, option316, option317, option318, option319, option3110])
    feature111.compendiumClassFeature = level11
    Solarian.addToClassLevel(level11)
    
    let level12 = CompendiumLevel(context: context)
    level12.level = 12
    level12.bab = 12
    level12.fort = 8
    level12.ref = 4
    level12.will = 8
    let feature121 = Feature(context: context)
    feature121.name = "Stellar Revelation"
    feature121.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218, option611, option612, option613, option614, option615, option616, option617, option618, option619, option1011, option1012])
    feature121.compendiumClassFeature = level12
    Solarian.addToClassLevel(level12)
    
    let level13 = CompendiumLevel(context: context)
    level13.level = 13
    level13.bab = 13
    level13.fort = 8
    level13.ref = 4
    level13.will = 8
    let feature131 = Feature(context: context)
    feature131.name = "Solarian's Onslaught (Ex)"
    feature131.content = "When making a full attack, you can make up to three attacks instead of two attacks. You take a –6 penalty to these attacks instead of a –4 penalty. If you have the flashing strikes class feature, you instead take a –5 penalty to these attacks as long as they are all melee attacks."
    feature131.compendiumClassFeature = level13
    Solarian.addToClassLevel(level13)
    
    let level14 = CompendiumLevel(context: context)
    level14.level = 14
    level14.bab = 14
    level14.fort = 9
    level14.ref = 4
    level14.will = 9
    let feature141 = Feature(context: context)
    feature141.name = "Stellar Revelation"
    feature141.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218, option611, option612, option613, option614, option615, option616, option617, option618, option619, option1011, option1012])
    let option1411 = Option(context: context)
    option1411.name = "Gravity Shield (Su) [Graviton Mode]"
    option1411.content = "As a move action, you can create a minor shield of compressed gravity waves, granting you a +1 circumstance bonus to your AC. The shield lasts for 1 round or until you leave graviton mode.\n\nWhen you are attuned or fully attuned, as a move action, you can create a disk of massive gravitational energies that is capable of deflecting incoming attacks. Choose one edge of your space. The shield extends along three continuous edges in a straight line centered on the chosen edge. The shield provides cover against attacks coming from its far side, but not against attacks originating from the side you’re on. If you move, you can reposition your shield as part of your move action, moving it to a different edge of your space. You must use one of your hands to direct and maintain an active gravity shield. You cannot use this version of the gravity shield at the same time you use this Revelation to gain a circumstance bonus to your AC. This gravity shield also lasts 1 round or until you leave graviton mode."
    feature141.addToFeatureOptions(option1411)
    let option1412 = Option(context: context)
    option1412.name = "Sunbolt (Su) [Photon Mode]"
    option1412.content = "As a standard action, you can fire a bolt of concentrated Solar energy at one target within long range (400 feet + 40 feet per solarian level you have) as a ranged attack targeting the foe’s EAC. If you hit, you deal 9d6 fire damage. If you have a solarian crystal (see Solarian Weapon Crystals) that changes the type of damage dealt by a Solar weapon, you can use it to change the type of damage you deal with your sunbolt. Once you have used this Revelation, you can’t use it again until the next time you regain Stamina Points after a 10-minute rest.\n\nWhen you are attuned or fully attuned, you gain a +2 bonus to your ranged attack roll to use this Revelation."
    feature141.addToFeatureOptions(option1412)
    feature141.compendiumClassFeature = level14
    Solarian.addToClassLevel(level14)
    
    let level15 = CompendiumLevel(context: context)
    level15.level = 15
    level15.bab = 15
    level15.fort = 9
    level15.ref = 5
    level15.will = 9
    Solarian.addToClassLevel(level15)
    
    let level16 = CompendiumLevel(context: context)
    level16.level = 16
    level16.bab = 16
    level16.fort = 10
    level16.ref = 5
    level16.will = 10
    let feature161 = Feature(context: context)
    feature161.name = "Stellar Revelation"
    feature161.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218, option611, option612, option613, option614, option615, option616, option617, option618, option619, option1011, option1012, option1411, option1412])
    let option1611 = Option(context: context)
    option1611.name = "Ultimate Graviton (Su) [Graviton Mode]"
    option1611.content = "As your ability to manipulate powers of gravity expands, the range of any graviton revelation (but not zenith Revelation) you have with a range doubles. Any graviton revelation (but not zenith Revelation) you have that targets a single creature can now simultaneously target two creatures, who must be within 20 feet of each other. You also increase the power of any of the following gravity Revelations you have.\n\nDefy Gravity: Your fly speed increases by 20 feet.\n\nGravity Anchor: As a move action, you can gain both types of gravity anchor simultaneously.\n\nGravity Boost: Your bonus applies to all Acrobatics checks, and you take no damage from any fall.\n\nReflection: If you successfully redirect an attack as a reaction, you can continue to reflect additional attacks until the beginning of your next turn. You have a cumulative –2 penalty to your redirect attack roll on each reflection attempt after the first. If any reflected attack misses, you can’t make further redirect attempts until you use this Revelation again."
    feature161.addToFeatureOptions(option1611)
    let option1612 = Option(context: context)
    option1612.name = "Ultimate Photon (Su) [Photon Mode]"
    option1612.content = "Your ability to manipulate powers of light and energy expand greatly. The radius of any photon revelation (but not zenith Revelation) you have with a radius expands by 10 feet. Any photon revelation (but not zenith Revelation) that lasts for 1 round or until you leave photon mode now lasts for 1d4 rounds if you are not in photon mode. You also increase the power of any of the following photon revelations you have.\n\nAstrologic Sense: You can see twice as far into the future as normal.\n\nGlow of Life: You can use this Revelation as a swift action, rather than a move action.\n\nHypnotic Glow: The charm’s duration doubles.\n\nStellar Rush: You gain a +2 bonus to your EAC until the beginning of your next turn."
    feature161.addToFeatureOptions(option1612)
    feature161.compendiumClassFeature = level16
    Solarian.addToClassLevel(level16)
    
    let level17 = CompendiumLevel(context: context)
    level17.level = 17
    level17.bab = 17
    level17.fort = 10
    level17.ref = 5
    level17.will = 10
    let feature171 = Feature(context: context)
    feature171.name = "Zenith Revelations"
    feature171.addToFeatureOptions([option911, option912, option913, option914, option915, option916])
    feature171.compendiumClassFeature = level17
    Solarian.addToClassLevel(level17)
    
    let level18 = CompendiumLevel(context: context)
    level18.level = 18
    level18.bab = 18
    level18.fort = 11
    level18.ref = 6
    level18.will = 11
    let feature181 = Feature(context: context)
    feature181.name = "Stellar Revelation"
    feature181.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218, option611, option612, option613, option614, option615, option616, option617, option618, option619, option1011, option1012, option1411, option1412, option1611, option1612])
    feature181.compendiumClassFeature = level18
    Solarian.addToClassLevel(level18)
    
    let level19 = CompendiumLevel(context: context)
    level19.level = 19
    level19.bab = 19
    level19.fort = 11
    level19.ref = 6
    level19.will = 11
    let feature191 = Feature(context: context)
    feature191.name = "Sidereal Influence (Su)"
    feature191.content = "Graviton Skills: Bluff (Cha), Disguise (Cha), Mysticism (Wis), Sense Motive (Wis), Stealth (Dex)\n\nPhoton Skills: Culture (Int), Diplomacy (Cha), Intimidate (Cha), Medicine (Int), Survival (Wis)"
    feature191.addToFeatureOptions([option311, option312, option313, option314, option315, option316, option317, option318, option319, option3110])
    feature191.compendiumClassFeature = level19
    Solarian.addToClassLevel(level19)
    
    let level20 = CompendiumLevel(context: context)
    level20.level = 20
    level20.bab = 20
    level20.fort = 12
    level20.ref = 6
    level20.will = 12
    let feature201 = Feature(context: context)
    feature201.name = "Stellar Revelation"
    feature201.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218, option611, option612, option613, option614, option615, option616, option617, option618, option619, option1011, option1012, option1411, option1412, option1611, option1612])
    feature201.compendiumClassFeature = level20
    let feature202 = Feature(context: context)
    feature202.name = "Stellar Paragon (Su)"
    feature202.content = "You are the spiritual kin of the stars themselves. As a move action, you can raise or lower light levels within 30 feet of yourself by one step. When you enter a stellar mode, you gain 2 attunement points of the corresponding type immediately and are considered attuned, and when you keep your current stellar mode at the start of your turn, you can gain 2 attunement points instead of 1, allowing you to become fully attuned after 2 rounds.\n\nIn addition, you can spend 1 Resolve Point to gain enough attunement points to be fully attuned on the first round of combat (but not after using a zenith Revelation), or spend 1 Resolve Point at the start of your turn in combat to exchange all of your attunement points in one stellar mode for an equal number of attunement points in the other mode. For example, you can switch from being fully attuned in graviton mode to being fully attuned in photon mode."
    feature202.compendiumClassFeature = level20
    Solarian.addToClassLevel(level20)
}

//Soldier ################################################################################################################

func loadSoldier() {
    let Soldier = CompendiumClass(context: context)
    Soldier.name = "Soldier"
    Soldier.hitPoints = 7
    Soldier.staminaPoints = 7
    Soldier.classSkills = "Acrobatics, Athletics, Engineering, Intimidate, Medicine, Piloting, Profession, Survival"
    Soldier.skillRanks = 4
    
    let level1 = CompendiumLevel(context: context)
    level1.level = 1
    level1.bab = 1
    level1.fort = 2
    level1.ref = 0
    level1.will = 2
    let feature10 = Feature(context: context)
    feature10.name = "Proficiencies"
    feature10.content = "Armor-light and heavy; Weapons-basic and advanced melee weapons, small arms, longarms, heavy weapons, sniper weapons, and grenades"
    feature10.compendiumClassFeature = level1
    let feature11 = Feature(context: context)
    feature11.name = "Primary Fighting Style"
    feature11.content = "You have a preferred fighting style that represents the type of soldier you are. Each fighting style is composed of various style techniques that you learn as you gain experience. You must pick one fighting style upon taking your first soldier level, and once made, this choice cannot be changed. Descriptions of the fighting styles you can choose from appear on pages 112–115."
    let option111 = Option(context: context)
    option111.name = "Arcane Assailant"
    option111.content = "The arcane assailant fighting style supplements its combat effectiveness with magic powers, drawing on traditions of warrior-wizards. This allows you to use magic runes to augment your weapons and call on legendary powers, giving you access to arcane options even when you don’t have a magic weapon in your possession."
    feature11.addToFeatureOptions(option111)
    let option112 = Option(context: context)
    option112.name = "Armor Storm"
    option112.content = "The armor storm fighting style Focuses on using armor as a weapon by maximizing the damage of armor-based weapons while withstanding enemy fire. You learn to increase the effectiveness of attacks made with your armor and to add equipment normally beyond your armor’s capacity."
    feature11.addToFeatureOptions(option112)
    let option113 = Option(context: context)
    option113.name = "Blitz"
    option113.content = "The blitz fighting style is all about using speed and aggression to get into the thick of melee. You increase your speed and responsiveness, gain abilities that make you better at melee combat than your enemies, and keep on fighting even when surrounded by foes."
    feature11.addToFeatureOptions(option113)
    let option114 = Option(context: context)
    option114.name = "Bombard"
    option114.content = "The bombard fighting style emphasizes attacking multiple targets, often using grenades, and leverages substantial physical strength to control large weapons with significant recoil. At higher levels, you can use launchers, missiles, and other heavy weapons."
    feature11.addToFeatureOptions(option114)
    let option115 = Option(context: context)
    option115.name = "Guard"
    option115.content = "The guard fighting style Focuses on defense. You become Adept at wearing armor, protecting against attacks, and enduring damage and other setbacks from attacks that get through your defenses."
    feature11.addToFeatureOptions(option115)
    let option116 = Option(context: context)
    option116.name = "Hit-And-Run"
    option116.content = "The hit-and-run fighting style Focuses on Tactical movement as you move in and out of combat. You use ranged weapons but fight close up, and you can even mix ranged and melee attacks. Your abilities allow you to move even when you make full attacks and to avoid getting locked down by your enemies."
    feature11.addToFeatureOptions(option116)
    let option117 = Option(context: context)
    option117.name = "Sharpshoot"
    option117.content = "The sharpshoot fighting style enables you to excel at making accurate attacks, usually with ranged weapons at a long distance. You can ignore cover and other impediments to your shots, and your attacks are improved by your intense Focus."
    feature11.addToFeatureOptions(option117)
    feature11.compendiumClassFeature = level1
    let feature12 = Feature(context: context)
    feature12.name = "Primary Style Technique"
    feature12.content = "At 1st level and every 4 levels thereafter, you gain a style technique unique to your primary fighting style."
    let option121 = Option(context: context)
    option121.name = "Arcane Assailant - Rune of the Eldritch Knight (Su)"
    option121.content = "You can imbue a weapon with a magic sigil, the rune of the eldritch knight, allowing the weapon to act as a magic weapon for the purposes of bypassing DR and affecting incorporeal creatures. This takes 10 minutes, and you can imbue only a single weapon at a time. If you imbue a new weapon with the rune of the eldritch knight, any previously imbued weapon loses this benefit. When calculating the Hit Points and hardness of a weapon imbued with the rune of the eldritch knight, treat its item level as 5 higher."
    feature12.addToFeatureOptions(option121)
    let option122 = Option(context: context)
    option122.name = "Armor Storm - Hammer Fist (Ex)"
    option122.content = "You treat any unarmed attack you make while wearing heavy or powered armor as being made with a battleglove with an item level equal to or lower than your soldier level, and you calculate damage for these attacks as if you had the melee striker gear boost. If you have the melee striker gear boost, you gain a +2 bonus to damage rolls with your unarmed attacks when using this ability. These unarmed attacks don’t benefit from other abilities that apply specifically to unarmed attacks (such as the Improved Unarmed Strike feat)."
    feature12.addToFeatureOptions(option122)
    let option123 = Option(context: context)
    option123.name = "Blitz - Rapid Response (Ex)"
    option123.content = "You gain a +4 bonus to initiative checks and increase your land speed by 10 feet."
    feature12.addToFeatureOptions(option123)
    let option124 = Option(context: context)
    option124.name = "Bombard - Grenade Expert (Ex)"
    option124.content = "You increase the range increment of your thrown grenades by 5 × your Strength bonus. In addition, you’re able to salvage enough materials to create a grenade without paying for it. Creating a grenade takes 10 minutes. You can create any grenade whose item level is less than or equal to your soldier level, but this grenade is unstable and only you can use it effectively. If anyone else tries to use the grenade, it is a dud. You can have only one grenade created by this ability at one time (if you create a new grenade using this ability, the old grenade no longer works)."
    feature12.addToFeatureOptions(option124)
    let option125 = Option(context: context)
    option125.name = "Guard - Armor Training (Ex)"
    option125.content = "You reduce the armor check penalty of armor you wear by 1 (to a minimum of 0) and increase the maximum Dexterity bonus allowed by your armor by 1."
    feature12.addToFeatureOptions(option125)
    let option126 = Option(context: context)
    option126.name = "Hit-And-Run - Opening Volley (Ex)"
    option126.content = "You gain Opening Volley as a bonus feat. If you already have this feat, choose a bonus combat feat instead. At 9th level, you can use Opening Volley on both your first and second turns in combat."
    feature12.addToFeatureOptions(option126)
    let option127 = Option(context: context)
    option127.name = "Sharpshoot - Sniper’s Aim (Ex)"
    option127.content = "1st Level When you make a ranged attack against a target with cover, reduce the AC bonus from cover by 2. You can’t use sniper’s aim against an enemy with total cover."
    feature12.addToFeatureOptions(option127)
    feature12.compendiumClassFeature = level1
    Soldier.addToClassLevel(level1)
    
    let level2 = CompendiumLevel(context: context)
    level2.level = 2
    level2.bab = 2
    level2.fort = 3
    level2.ref = 0
    level2.will = 3
    let feature21 = Feature(context: context)
    feature21.name = "Combat Feat"
    feature21.content = "At 2nd level and every 2 levels thereafter, you gain a bonus feat in addition to those gained from normal advancement. These bonus feats must be selected from those listed as combat feats.\n\nWhenever you gain a new bonus feat, you can also choose to replace one of the bonus feats you have already learned with a different bonus feat. The feat you replace can’t be one that was used as a prerequisite for another feat or other ability. You can change only one feat at any given level, and you must choose whether or not to swap the feat at the time you gain the new bonus feat."
    feature21.compendiumClassFeature = level2
    Soldier.addToClassLevel(level2)
    
    let level3 = CompendiumLevel(context: context)
    level3.level = 3
    level3.bab = 3
    level3.fort = 3
    level3.ref = 1
    level3.will = 3
    let feature31 = Feature(context: context)
    feature31.name = "Gear Boost"
    feature31.content = "At 3rd level and every 4 levels thereafter, you learn a trick called a gear boost that make you better with a particular type of weapon or armor. Choose from the gear boosts listed below. Some gear boosts require you to reach a certain soldier level to select them; this level is indicated in parentheses after the boost’s name."
    let option311 = Option(context: context)
    option311.name = "Armored Advantage (Ex)"
    option311.content = "When you are wearing armor, you gain a +1 insight bonus to your Kinetic Armor Class."
    feature31.addToFeatureOptions(option311)
    let option312 = Option(context: context)
    option312.name = "Brutal Blast (Ex)"
    option312.content = "You gain a +2 insight bonus to damage rolls with weapons that have the blast special property (such as a scattergun). This extra damage applies only to creatures within 10 feet of you; creatures farther away take the normal amount of damage. This bonus increases by 1 for every 4 soldier levels you have."
    feature31.addToFeatureOptions(option312)
    let option313 = Option(context: context)
    option313.name = "Bullet Barrage (Ex)"
    option313.content = "You gain a +1 insight bonus to damage rolls for weapons in the projectile category. This bonus increases by 1 for every 4 soldier levels you have."
    feature31.addToFeatureOptions(option313)
    let option314 = Option(context: context)
    option314.name = "Laser Accuracy (Ex)"
    option314.content = "You gain a +1 insight bonus to attack rolls with weapons in the laser category."
    feature31.addToFeatureOptions(option314)
    let option315 = Option(context: context)
    option315.name = "Melee Striker (Ex)"
    option315.content = "Add an additional bonus equal to half your Strength bonus to damage rolls with melee weapons."
    feature31.addToFeatureOptions(option315)
    feature31.compendiumClassFeature = level3
    Soldier.addToClassLevel(level3)
    
    let level4 = CompendiumLevel(context: context)
    level4.level = 4
    level4.bab = 4
    level4.fort = 4
    level4.ref = 1
    level4.will = 4
    let feature41 = Feature(context: context)
    feature41.name = "Combat Feat"
    feature41.compendiumClassFeature = level4
    Soldier.addToClassLevel(level4)
    
    let level5 = CompendiumLevel(context: context)
    level5.level = 5
    level5.bab = 5
    level5.fort = 4
    level5.ref = 1
    level5.will = 4
    let feature51 = Feature(context: context)
    feature51.name = "Primary Style Technique"
    let option511 = Option(context: context)
    option511.name = "Arcane Assailant - Secret of the Magi (Su)"
    option511.content = "When you imbue a weapon with the rune of the eldritch knight, in addition to its normal benefits, the rune grants the weapon one of the following weapon fusions of your choice: ethereal, flaming, frost, merciful, or shock. The weapon can’t gain a fusion it already has, and this bonus fusion doesn’t count toward the maximum total level of fusions the weapon can have at once. The bonus fusion ends when the weapon ceases to be imbued with the rune of the eldritch knight."
    feature51.addToFeatureOptions(option511)
    let option512 = Option(context: context)
    option512.name = "Armor Storm - Enhanced Tank (Ex)"
    option512.content = "You gain the Powered Armored Proficiency feat and access to improved armor. This might be the result of your own engineering abilities, having earned the trust of contacts that can get you experimental equipment, or a powerful patron giving you gear not available to the general public to help you achieve mutual goals. You can add one more upgrade to your armor than its normal maximum number of upgrade slots. If you add this bonus upgrade to heavy armor, you can select an upgrade normally limited to powered armor. An upgrade placed in this bonus slot costs half the normal credit amount."
    feature51.addToFeatureOptions(option512)
    let option513 = Option(context: context)
    option513.name = "Blitz - Charge Attack (Ex)"
    option513.content = "As a standard action, you can make a charge without the charge penalties, and you can substitute a bull rush for the melee attack at the end of the charge. When you gain the soldier’s onslaught class feature, you can make two attacks instead of one at the end of your charge, both with a –4 penalty."
    feature51.addToFeatureOptions(option513)
    let option514 = Option(context: context)
    option514.name = "Bombard - Heavy Fire (Ex)"
    option514.content = "You can use your physical power to steady your weapon and make your attacks more dangerous. As a full action, you can make a single ranged attack that deals additional damage equal to your Strength bonus to all targets. You can use this ability in conjunction with the automatic, explode, or unwieldy special property."
    feature51.addToFeatureOptions(option514)
    let option515 = Option(context: context)
    option515.name = "Guard - Guard’s Protection (Ex)"
    option515.content = "When an ally adjacent to you is damaged by an attack, you can use your reaction to intercede. You take half the damage, and your ally takes the other half. This has no effect on spells, and any conditions delivered by the attack apply to both of you. In addition, you are now proficient with powered armor."
    feature51.addToFeatureOptions(option515)
    let option516 = Option(context: context)
    option516.name = "Hit-And-Run - Nimble Fusillade (Ex)"
    option516.content = "When you make a full attack, you can also either take a guarded step or move up to half your speed. This movement can come before, between, or after your attacks, but it can’t be split up."
    feature51.addToFeatureOptions(option516)
    let option517 = Option(context: context)
    option517.name = "Sharpshoot - Focus Fire (Ex)"
    option517.content = "When you make a full attack with a ranged weapon, you can make both attacks with a –3 penalty instead of a –4 penalty as long as they both target the same creature. If your first attack kills or knocks out the target, you can instead make the second attack against a different creature at a –4 penalty. Once you have the soldier’s onslaught class feature, you can use this ability with it, making three attacks against the same creature at a –5 penalty; if your first or second attack kills or knocks out your target, you can make your remaining attacks against a different creature at a –6 penalty."
    feature51.addToFeatureOptions(option517)
    feature51.compendiumClassFeature = level5
    Soldier.addToClassLevel(level5)
    
    let level6 = CompendiumLevel(context: context)
    level6.level = 6
    level6.bab = 6
    level6.fort = 5
    level6.ref = 2
    level6.will = 5
    let feature61 = Feature(context: context)
    feature61.name = "Combat Feat"
    feature61.compendiumClassFeature = level6
    Soldier.addToClassLevel(level6)
    
    let level7 = CompendiumLevel(context: context)
    level7.level = 7
    level7.bab = 7
    level7.fort = 5
    level7.ref = 2
    level7.will = 5
    let feature71 = Feature(context: context)
    feature71.name = "Gear Boost"
    feature71.addToFeatureOptions([option311, option312, option313, option314, option315])
    let option711 = Option(context: context)
    option711.name = "Anchoring Arcana (Su)"
    option711.content = "As a full action, you can make a single attack with a magic weapon against a single foe. If the attack is a ranged attack, the target must be within the first range increment. Even if the attack normally affects an area or multiple targets, it affects only your selected target. If your attack hits, you can spend 1 Resolve Point to force the target to attempt a Will saving throw (DC = 10 + half your soldier level + your key ability score modifier). If the target fails its save, it can’t voluntarily move from its current space for 1d4 rounds. This has no effect on involuntary movement, but it does prevent the creature from teleporting or moving to another plane. Once you’ve struck a foe with this attack, whether it succeeds at or fails its saving throw, it is immune to this ability for 24 hours."
    feature71.addToFeatureOptions(option711)
    let option712 = Option(context: context)
    option712.name = "Electric Arc (Ex)"
    option712.content = "When you hit a target with a weapon in the shock category, electricity arcs out from your original target to deal electricity damage to a secondary subject within 10 feet of the original target. This damage is equal to the weapon’s level. The secondary subject must be the creature nearest to the original target (your choice if multiple creatures are equidistant).\n\nThis gear boost does not function for weapons that have the explode or blast special property. If you use this gear boost with a weapon with the arc critical hit effect, your secondary subject for electric arc must be the same as your secondary subject for the arc critical effect."
    feature71.addToFeatureOptions(option712)
    let option713 = Option(context: context)
    option713.name = "Flash Freeze (Ex)"
    option713.content = "When you hit a creature with a weapon in the cryo category, that creature’s speeds are reduced by 10 feet for 1 round, to a minimum of 10 feet."
    feature71.addToFeatureOptions(option713)
    let option714 = Option(context: context)
    option714.name = "Plasma Immolation (Ex)"
    option714.content = "You are expert at setting things on fire with plasma. If your attack roll with a weapon in the plasma category is a 19 (the d20 shows a 19), and the attack hits your target, the target gains the burning condition. The condition deals 1d4 fire damage if the weapon has an item level of 1st-6th, 1d8 if its item level is 7th-14th, and 2d8 if its item level is 15th or higher."
    feature71.addToFeatureOptions(option714)
    let option715 = Option(context: context)
    option715.name = "Powerful Explosive (Ex)"
    option715.content = "When you attack with a weapon with the explode special property and a radius of 10 feet or greater, you can increase the radius of the explosion by 5 feet."
    feature71.addToFeatureOptions(option715)
    let option716 = Option(context: context)
    option716.name = "Sonic Resonance (Ex)"
    option716.content = "When you hit a creature within 30 feet of you using a weapon in the sonic category, the sonic energy continues to resonate within that creature, giving it the flat-footed condition for 1 round. If you hit multiple creatures at the same time (such as with an automatic, blast, or explode weapon), only the creature nearest to you or to the center of the explosion (your choice if multiple creatures are equidistant) is affected."
    feature71.addToFeatureOptions(option716)
    feature71.compendiumClassFeature = level7
    Soldier.addToClassLevel(level7)
    
    let level8 = CompendiumLevel(context: context)
    level8.level = 8
    level8.bab = 8
    level8.fort = 6
    level8.ref = 2
    level8.will = 6
    let feature81 = Feature(context: context)
    feature81.name = "Combat Feat"
    feature81.compendiumClassFeature = level8
    Soldier.addToClassLevel(level8)
    
    let level9 = CompendiumLevel(context: context)
    level9.level = 9
    level9.bab = 9
    level9.fort = 6
    level9.ref = 3
    level9.will = 6
    let feature91 = Feature(context: context)
    feature91.name = "Primary Style Technique"
    let option911 = Option(context: context)
    option911.name = "Arcane Assailant - Power of Legend (Su)"
    option911.content = "You can call on the link between you and the legendary heroes who wielded powerful magic weapons eons ago to overcome adversity. As a move action when wielding a magic weapon or a weapon imbued with the rune of the eldritch knight, you can spend 1 Resolve Point to end one of the following conditions affecting you: bleeding, burning, confused, exhausted, fatigued, flat-footed, off-target, shaken, or sickened. Alternatively, you can spend 1 Resolve Point to change the cowering condition to the frightened condition or change the frightened condition to the shaken condition. In this case, the new condition lasts for the same duration the original condition would have and can’t be further affected by this ability."
    feature91.addToFeatureOptions(option911)
    let option912 = Option(context: context)
    option912.name = "Armor Storm - Smash Through (Ex)"
    option912.content = "While you are wearing heavy armor or powered armor, you gain a +4 bonus to attack rolls to perform a bull rush combat maneuver. If you successfully push the target back 10 feet or more, you can also damage the target with an unarmed attack (and can use your hammer fist ability when doing so)."
    feature91.addToFeatureOptions(option912)
    let option913 = Option(context: context)
    option913.name = "Blitz - Keep Fighting (Ex)"
    option913.content = "As a move action, you can spend 1 Resolve Point to regain Stamina Points equal to 2d6 + your soldier level. You can’t use this ability again until after you regain Stamina Points from a 10-minute rest. The number of Stamina Points you regain increases by 1d6 at 10th level, 15th level, and 20th level."
    feature91.addToFeatureOptions(option913)
    let option914 = Option(context: context)
    option914.name = "Bombard - Debilitating Attack (Ex)"
    option914.content = "When you hit an enemy with a ranged attack or an attack with a weapon with the blast or explode special property, you can spend 1 Resolve Point to inflict a debilitating effect on that enemy for a number of rounds equal to your Strength bonus. You can choose to make the target deafened, flat-footed, or off-target, or to reduce its speeds by half (to a minimum of 10 feet). The target can negate this effect with a successful Fortitude save (DC = 10 + half your soldier level + your Strength modifier)."
    feature91.addToFeatureOptions(option914)
    let option915 = Option(context: context)
    option915.name = "Guard - Rapid Recovery (Ex)"
    option915.content = "You can spend Resolve Points to ignore detrimental conditions.\n\nAs a move action, you can spend 1 Resolve Point to suppress one of the following conditions for 10 minutes: exhausted, fatigued, frightened, nauseated, shaken, sickened, or staggered. After 10 minutes, if the condition’s duration hasn’t ended, the condition’s effects return. You can suppress only one condition at a time; if you are both fatigued and shaken, you can avoid the effects of only one of them, and if you are affected by two different instances of the same condition, you’re still affected by the second one."
    feature91.addToFeatureOptions(option915)
    let option916 = Option(context: context)
    option916.name = "Hit-And-Run - Duck and Weave (Ex)"
    option916.content = "When you move or make a ranged attack, you can spend 1 Resolve Point to avoid provoking attacks of opportunity from that movement or ranged attack."
    feature91.addToFeatureOptions(option916)
    let option917 = Option(context: context)
    option917.name = "Sharpshoot - Intense Focus (Ex)"
    option917.content = "When you make a ranged attack against a target with cover or concealment, you can spend 1 Resolve Point to negate its AC bonus from cover and reduce its concealment by one category (from total concealment to concealment or from concealment to no concealment). This benefit applies to all ranged attacks you make against that target this round. You can’t use intense Focus more than once per round, nor can you use it against an enemy with total cover."
    feature91.addToFeatureOptions(option917)
    feature91.compendiumClassFeature = level9
    let feature92 = Feature(context: context)
    feature92.name = "Secondary Fighting Style"
    feature92.content = "You choose another fighting style. Once you choose this second style, it cannot be changed."
    feature92.addToFeatureOptions([option111, option112, option113, option114, option115, option116, option117])
    feature92.compendiumClassFeature = level9
    let feature93 = Feature(context: context)
    feature93.name = "Secondary Style Technique"
    feature93.content = "At 9th level and every 4 levels thereafter, you gain a style technique unique to your secondary fighting style. For the purposes of these style techniques, treat your soldier level as equal to your soldier level – 8."
    feature93.addToFeatureOptions([option121, option122, option123, option124, option125, option126, option127])
    feature93.compendiumClassFeature = level9
    Soldier.addToClassLevel(level9)
    
    let level10 = CompendiumLevel(context: context)
    level10.level = 10
    level10.bab = 10
    level10.fort = 7
    level10.ref = 3
    level10.will = 7
    let feature101 = Feature(context: context)
    feature101.name = "Combat Feat"
    feature101.compendiumClassFeature = level10
    Soldier.addToClassLevel(level10)
    
    let level11 = CompendiumLevel(context: context)
    level11.level = 11
    level11.bab = 11
    level11.fort = 7
    level11.ref = 3
    level11.will = 7
    let feature111 = Feature(context: context)
    feature111.name = "Gear Boost"
    feature111.addToFeatureOptions([option311, option312, option313, option314, option315, option711, option712, option713, option714, option715, option716])
    let option1111 = Option(context: context)
    option1111.name = "Heavy Onslaught (Ex)"
    option1111.content = "Your attacks with heavy weapons bypass part of the target’s damage reduction. If your heavy weapon does not already overcome the target’s damage reduction, treat the target’s damage reduction as though it were 5 lower. At 15th level, treat the target’s damage reduction as 10 lower."
    feature111.addToFeatureOptions(option1111)
    feature111.compendiumClassFeature = level11
    let feature112 = Feature(context: context)
    feature112.name = "Soldier's Onslaught (Ex)"
    feature112.content = "When you make a full attack, you can make up to three attacks instead of two attacks. You take a –6 penalty to these attacks instead of a –4 penalty."
    feature112.compendiumClassFeature = level11
    Soldier.addToClassLevel(level11)
    
    let level12 = CompendiumLevel(context: context)
    level12.level = 12
    level12.bab = 12
    level12.fort = 8
    level12.ref = 4
    level12.will = 8
    let feature121 = Feature(context: context)
    feature121.name = "Combat Feat"
    feature121.compendiumClassFeature = level12
    Soldier.addToClassLevel(level12)
    
    let level13 = CompendiumLevel(context: context)
    level13.level = 13
    level13.bab = 13
    level13.fort = 8
    level13.ref = 4
    level13.will = 8
    let feature131 = Feature(context: context)
    feature131.name = "Primary Style Technique"
    let option1311 = Option(context: context)
    option1311.name = "Arcane Assailant - Secret of the Archmagi (Su)"
    option1311.content = "You can imbue two weapons with the rune of the eldritch knight. If you attempt to imbue a third weapon, the weapon infused first loses its rune and all benefits. In addition to the normal benefits, the runes grant the weapons one or more of the following weapon fusions of your choice: bane, corrosive, ethereal, flaming, frost, holy, merciful, shock, thundering, or unholy. You can grant no more than 10 total levels’ worth of fusions between the two weapons, and the bane fusion counts as a 10th-level fusion for this purpose."
    feature131.addToFeatureOptions(option1311)
    let option1312 = Option(context: context)
    option1312.name = "Armor Storm - Mobile Army (Ex)"
    option1312.content = "You become a master of all weapons associated with your armor. You deal 1d6 additional damage with any attack from a weapon that is part of your armor, including unarmed attacks using the hammer fist ability and weapons that have been attached to your armor as an armor upgrade. The additional damage is of the same type as the weapon’s normal type. Also, while wearing heavy or powered armor, you gain a +2 bonus to your KAC against combat maneuvers."
    feature131.addToFeatureOptions(option1312)
    let option1313 = Option(context: context)
    option1313.name = "Blitz - Perfect Opportunity (Ex)"
    option1313.content = "When you hit a creature with an attack of opportunity, that creature can’t move out of the squares you threaten until the start of its next turn. In addition, when an enemy takes a guarded step out of a square you threaten, you can make an attack of opportunity against it with a –2 penalty to the attack roll. If the target provoked an attack of opportunity by moving, hitting with your attack of opportunity ends the target’s movement immediately, preventing it from carrying out the rest of its movement."
    feature131.addToFeatureOptions(option1313)
    let option1314 = Option(context: context)
    option1314.name = "Bombard - Explosives Acumen (Ex)"
    option1314.content = "You increase the DC to avoid attacks you make using weapons with the explode special property by 1. You reduce the amount of any damage you take from any weapon with the explode special property by an amount equal to your Strength bonus."
    feature131.addToFeatureOptions(option1314)
    let option1315 = Option(context: context)
    option1315.name = "Guard - Kinetic Resistance (Ex)"
    option1315.content = "You gain DR 3/—. At 17th level, this DR increases to 5/—."
    feature131.addToFeatureOptions(option1315)
    let option1316 = Option(context: context)
    option1316.name = "Hit-And-Run - Elusive Target (Ex)"
    option1316.content = "On any turn in which you move, you gain a +1 insight bonus to your AC until the start of your next turn."
    feature131.addToFeatureOptions(option1316)
    let option1317 = Option(context: context)
    option1317.name = "Sharpshoot - Focused Damage (Ex)"
    option1317.content = "When you use Focus fire, each attack against the first target deals 2d6 additional damage. Additional creatures you attack after killing or knocking out your first target don’t take this extra damage."
    feature131.addToFeatureOptions(option1317)
    feature131.compendiumClassFeature = level13
    let feature132 = Feature(context: context)
    feature132.name = "Secondary Style Technique"
    feature132.addToFeatureOptions([option511, option512, option513, option514, option515, option516, option517])
    feature132.compendiumClassFeature = level13
    Soldier.addToClassLevel(level13)
    
    let level14 = CompendiumLevel(context: context)
    level14.level = 14
    level14.bab = 14
    level14.fort = 9
    level14.ref = 4
    level14.will = 9
    let feature141 = Feature(context: context)
    feature141.name = "Combat Feat"
    feature141.compendiumClassFeature = level14
    Soldier.addToClassLevel(level14)
    
    let level15 = CompendiumLevel(context: context)
    level15.level = 15
    level15.bab = 15
    level15.fort = 9
    level15.ref = 5
    level15.will = 9
    let feature151 = Feature(context: context)
    feature151.name = "Gear Boost"
    feature151.addToFeatureOptions([option311, option312, option313, option314, option315, option711, option712, option713, option714, option715, option716, option1111])
    feature151.compendiumClassFeature = level15
    Soldier.addToClassLevel(level15)
    
    let level16 = CompendiumLevel(context: context)
    level16.level = 16
    level16.bab = 16
    level16.fort = 10
    level16.ref = 5
    level16.will = 10
    let feature161 = Feature(context: context)
    feature161.name = "Combat Feat"
    feature161.compendiumClassFeature = level16
    Soldier.addToClassLevel(level16)
    
    let level17 = CompendiumLevel(context: context)
    level17.level = 17
    level17.bab = 17
    level17.fort = 10
    level17.ref = 5
    level17.will = 10
    let feature171 = Feature(context: context)
    feature171.name = "Primary Style Technique"
    let option1711 = Option(context: context)
    option1711.name = "Arcane Assailant - Arcane Attack (Su)"
    option1711.content = "As a standard action, you can spend 1 Resolve Point to use a weapon imbued with the rune of the eldritch knight to make an attack that strikes true. This attack ignores all cover and concealment, including total concealment (though you must at least be aware of a creature’s presence to target it with this attack). If the attack is a ranged attack, the target must be within the first range increment. The attack only affects your selected target, even if it normally affects an area or multiple targets. You still must make a normal attack roll, and if your attack misses, it has no effect."
    feature171.addToFeatureOptions(option1711)
    let option1712 = Option(context: context)
    option1712.name = "Armor Storm - On the Bounce (Ex)"
    option1712.content = "You learn to control your armor with such ease, you are actually more maneuverable in it than out of it. While wearing heavy armor or powered armor, you can move up to your speed when you make a full attack. You can move before or after all your attacks, but not both. If you have the Shot on the Run feat, you can divide your movement to move both before and after making a full attack as long as all the attacks are ranged attacks. If you have the Spring Attack feat, you can divide your movement to move both before and after making a full attack as long as all the attacks are melee attacks. If you have both feats, your attacks can be any combination of melee and ranged attacks."
    feature171.addToFeatureOptions(option1712)
    let option1713 = Option(context: context)
    option1713.name = "Blitz - Against the Odds (Ex)"
    option1713.content = "You gain a bonus to melee damage rolls equal to double the number of enemies within 10 feet of you. Enemies who don’t constitute a significant threat (those with a CR equal to your level – 4 or less, or as determined by the GM) don’t count when calculating this bonus."
    feature171.addToFeatureOptions(option1713)
    let option1714 = Option(context: context)
    option1714.name = "Bombard - Impactful Attack (Ex)"
    option1714.content = "As a full action, you can make a ranged attack that knocks enemies back. Targets you hit are knocked back 5 feet from you. If you use a weapon with the explode special property, all targets that fail their saving throws are instead knocked back 5 feet from the center of the explosion. An enemy that you critically hit or that rolls a natural 1 on its saving throw is also knocked prone. You can’t make an impactful attack with an automatic weapon, but you can use this ability with a weapon that has the blast special property."
    feature171.addToFeatureOptions(option1714)
    let option1715 = Option(context: context)
    option1715.name = "Guard - Impenetrable Defense (Ex)"
    option1715.content = "As a standard action, you can set up a strong defense for yourself and an adjacent ally. Until the start of your next turn, you gain three benefits: your damage reduction increases to DR 10/—; you and the chosen ally each gain a +4 bonus to AC; and if you use guard’s protection, you direct all the damage to yourself such that your ally takes none."
    feature171.addToFeatureOptions(option1715)
    let option1716 = Option(context: context)
    option1716.name = "Hit-And-Run - Harrying Shot (Ex)"
    option1716.content = "As a full action, you can make one attack and give the benefit of harrying fire against any creature you hit with that attack. If you use a blast weapon or automatic weapon, the benefit applies against all targets hit. You can also take your nimble fusillade movement before or after this attack."
    feature171.addToFeatureOptions(option1716)
    let option1717 = Option(context: context)
    option1717.name = "Sharpshoot - Prepared Shot (Ex)"
    option1717.content = "As a standard action, you can study a target before you attack. The target must be within line of sight of you and either flat-footed or unaware of your presence. On the first attack you make against that target on your next turn, you gain a +2 bonus to your attack roll. If your attack hits, the target is staggered for 1 round; if you score a critical hit, the target is instead stunned for 1 round. Once you make a prepared shot, you can’t use this ability again against the same target for 24 hours. You can’t make an attack on the same round you study the target, even if an ability would let you attack without spending a standard or full action."
    feature171.addToFeatureOptions(option1717)
    let feature172 = Feature(context: context)
    feature172.name = "Secondary Style Technique"
    feature172.addToFeatureOptions([option911, option912, option913, option914, option915, option916, option917])
    feature172.compendiumClassFeature = level17
    Soldier.addToClassLevel(level17)
    
    let level18 = CompendiumLevel(context: context)
    level18.level = 18
    level18.bab = 18
    level18.fort = 11
    level18.ref = 6
    level18.will = 11
    let feature181 = Feature(context: context)
    feature181.name = "Combat Feat"
    feature181.compendiumClassFeature = level18
    Soldier.addToClassLevel(level18)
    
    let level19 = CompendiumLevel(context: context)
    level19.level = 19
    level19.bab = 19
    level19.fort = 11
    level19.ref = 6
    level19.will = 11
    let feature191 = Feature(context: context)
    feature191.name = "Gear Boost"
    feature191.addToFeatureOptions([option311, option312, option313, option314, option315, option711, option712, option713, option714, option715, option716, option1111])
    feature191.compendiumClassFeature = level19
    Soldier.addToClassLevel(level19)
    
    let level20 = CompendiumLevel(context: context)
    level20.level = 20
    level20.bab = 20
    level20.fort = 12
    level20.ref = 6
    level20.will = 12
    let feature201 = Feature(context: context)
    feature201.name = "Combat Feat"
    feature201.compendiumClassFeature = level20
    let feature202 = Feature(context: context)
    feature202.name = "Kill Shot (Ex)"
    feature202.content = "As a standard action, you can make a single attack against an enemy. If the attack hits and does not kill your enemy, you can expend 1 Resolve Point to force the creature to succeed at a Fortitude save or die. Once you’ve used this ability on a creature (regardless of whether or not you forced it to attempt a Fortitude save), that creature is immune to your kill shot for 24 hours."
    feature202.compendiumClassFeature = level20
    Soldier.addToClassLevel(level20)
}

//Technomancer  ################################################################################################################

func loadTechnomancer () {
    
    let Technomancer = CompendiumClass(context: context)
    Technomancer.name = "Technomancer"
    Technomancer.hitPoints = 5
    Technomancer.staminaPoints = 5
    Technomancer.skillRanks = 4
    Technomancer.classSkills = "Computers, Engineering, Life Science, Mysticism, Physical Science, Piloting, Profession, Sleight of Hand"
    
    let level1 = CompendiumLevel(context: context)
    level1.level = 1
    level1.bab = 0
    level1.fort = 0
    level1.ref = 0
    level1.will = 2
    let slot1x1 = SpellSlot(context: context)
    slot1x1.slots = 2
    level1.addToCompendiumClassSlots(slot1x1)
    let slot1x2 = SpellSlot(context: context)
    slot1x2.slots = 0
    level1.addToCompendiumClassSlots(slot1x2)
    let slot1x3 = SpellSlot(context: context)
    slot1x3.slots = 0
    level1.addToCompendiumClassSlots(slot1x3)
    let slot1x4 = SpellSlot(context: context)
    slot1x4.slots = 0
    level1.addToCompendiumClassSlots(slot1x4)
    let slot1x5 = SpellSlot(context: context)
    slot1x5.slots = 0
    level1.addToCompendiumClassSlots(slot1x5)
    let slot1x6 = SpellSlot(context: context)
    slot1x6.slots = 0
    level1.addToCompendiumClassSlots(slot1x6)
    let feature10 = Feature(context: context)
    feature10.name = "Proficiencies"
    feature10.content = "Armor-light; Weapons-basic melee weapons, small arms"
    feature10.compendiumClassFeature = level1
    let feature11 = Feature(context: context)
    feature11.name = "Spells"
    feature11.content = "You cast spells drawn from the technomancer spell list. To learn or cast a spell, you must have an Intelligence score equal to at least 10 + the spell’s level. The Difficulty Class for a saving throw against your spell is 10 + the spell’s level + your Intelligence modifier.\n\nYou can cast only a certain number of spells of each spell level per day. Your number of spells per day is given on Table 4–10: Technomancer. In addition, you receive bonus spells per day if you have an Intelligence modifier of +1 or higher, as shown on Table 4–11: Technomancer Bonus Spells—note that you only receive these bonus spells once you can cast spells of that level normally. You can also cast 0-level spells. These spells are cast like any other spell, but there is no limit to how many 0-level spells you can cast each day.\n\nYour selection of spells is limited. You begin play knowing four 0-level spells and two 1st-level spells of your choice. At each new technomancer level, you learn one or more new spells, as indicated on Table 4–12: Technomancer Spells Known. Unlike spells per day, the number of spells you know isn’t affected by your Intelligence modifier.\n\nEvery time you gain a level, you can swap out one spell you already know and learn a single new spell of the same level in its place. In effect, you lose the old spell in exchange for the new one. You must choose whether or not to swap the spell at the same time you gain new spells known for the level.\n\nYou can cast any technomancer spell you know at any time, assuming you have not yet used up your allotment of spells per day for the spell’s level. You can also cast a spell using a higher-level spell slot. For instance, if you want to cast a 1st-level spell but have used up all your 1st-level spells for the day, you can use a spell from a 2nd-level slot instead if you have one.\n\nYou can also decipher magical inscriptions that would otherwise be unintelligible or, as a full action, identify any spells encoded in a spell gem. This does not normally invoke the magic contained within, although it may do so in the case of a Cursed or trapped spell gem."
    feature11.compendiumClassFeature = level1
    let feature12 = Feature(context: context)
    feature12.name = "Spell Cache (Su)"
    feature12.content = "As the culmination of your early study of the fundamental forces of the galaxy, you have created a spell cache that allows you to store and access spells. Your spell cache could be a device such as a handheld computer or technological implant; an item such as a ring or staff; or a symbol such as a brand, tattoo, or other permanent modification to your body. While you don’t need your spell cache to cast your spells, once per day, you can activate your spell cache to cast any one spell you know and are capable of casting, even if you’ve expended all your spell slots for that spell’s level.\n\nIf your spell cache is damaged, it is restored to full Hit Points the next time you prepare spells. If the spell cache is lost or destroyed, you can replace it after 1 week with a special ritual that takes 8 hours to complete."
    feature12.compendiumClassFeature = level1
    Technomancer.addToClassLevel(level1)
    
    let level2 = CompendiumLevel(context: context)
    level2.level = 2
    level2.bab = 1
    level2.fort = 0
    level2.ref = 0
    level2.will = 3
    let slot2x1 = SpellSlot(context: context)
    slot2x1.slots = 2
    level2.addToCompendiumClassSlots(slot2x1)
    let slot2x2 = SpellSlot(context: context)
    slot2x2.slots = 0
    level2.addToCompendiumClassSlots(slot2x2)
    let slot2x3 = SpellSlot(context: context)
    slot2x3.slots = 0
    level2.addToCompendiumClassSlots(slot2x3)
    let slot2x4 = SpellSlot(context: context)
    slot2x4.slots = 0
    level2.addToCompendiumClassSlots(slot2x4)
    let slot2x5 = SpellSlot(context: context)
    slot2x5.slots = 0
    level2.addToCompendiumClassSlots(slot2x5)
    let slot2x6 = SpellSlot(context: context)
    slot2x6.slots = 0
    level2.addToCompendiumClassSlots(slot2x6)
    let feature21 = Feature(context: context)
    feature21.name = "Magic Hack"
    feature21.content = "You have carefully studied the forces that define magic and can manipulate them. You learn your first magic hack at 2nd level, and you learn an additional magic hack every 3 levels thereafter. When casting a spell, you can apply no more than one magic hack that affects the attributes of a spell (such as distant spell or extended spell). If a magic hack allows a saving throw to resist its effects, the DC is equal to 10 + half your technomancer level + your Intelligence modifier. The list of magic hacks appears starting on page 120."
    let option211 = Option(context: context)
    option211.name = "Countertech (Su)"
    option211.content = "As a reaction when you take damage from an attack by a technological weapon or source within medium range that specifically targets you, you can expend an unused spell slot to disrupt the attack. With a spell slot of 1st to 5th level, you can counter an attack from a technological weapon whose item level is equal to or less than the level of the expended spell slot × 3, to a maximum of your caster level. 6th-level spell slots can counter any weapon with a level equal to or less than your caster level. For example, at 2nd level, you could expend a 1st-level spell slot to counter an attack from a 1st- or 2nd-level weapon. To successfully counter the attack, you must roll a countertech check (1d20 + your caster level) with a DC equal to 11 + the weapon’s level. If the countertech check succeeds, the attack deals half damage. If the countertech check fails, the attack deals normal damage. This magic hack only affects attacks that target you directly; you cannot use countertech against attacks that target an area or that target another person."
    feature21.addToFeatureOptions(option211)
    let option212 = Option(context: context)
    option212.name = "Empowered Weapon (Su)"
    option212.content = "As a move action, you can expend an unused spell slot to reconfigure and enhance a weapon you’re wielding. Until the start of your next turn, your attacks with the enhanced weapon gain a bonus to attack rolls equal to the level of the spell slot you expended. In addition, your attacks with that weapon deal 1d6 additional damage per level of the expended spell slot. This damage is of the same type the weapon normally deals."
    feature21.addToFeatureOptions(option212)
    let option213 = Option(context: context)
    option213.name = "Energize Spell (Ex)"
    option213.content = "Once per day as a move action, you can use a battery or a weapon’s power cell to power your spellcasting, enabling you to cast one spell you know without using a spell slot. This expends 20 charges per spell level from the battery or power cell and requires you to touch the battery, power cell, or weapon. You must cast the spell before the start of your next turn, or the charges are wasted with no effect."
    feature21.addToFeatureOptions(option213)
    let option214 = Option(context: context)
    option214.name = "Fabricate Tech (Sp)"
    option214.content = "As a full action, you can expend an unused spell slot to temporarily construct a piece of technological gear from raw magic. You can create any single technological item with a level equal to or less than the level of the expended spell slot × 3, to a maximum of your caster level. The item appears in your hands or in an adjacent square. You can use fuse spells with this magic hack. The size of the item cannot exceed 10 bulk or Medium size, and the quality of the item is average. Treat this as a spell of the same level as the expended spell slot. For example, at 4th level, you could expend a 1st-level spell slot to fabricate an item of up to 3rd level, or you could expend a 2nd-level spell slot to fabricate an item of up to 4th level. The item persists for a number of minutes equal to your technomancer level. At the end of this duration, the item disappears. You can’t create armor, weapons, magic items, or items with limited uses or charges (such as batteries, drugs, or fuel) with this hack."
    feature21.addToFeatureOptions(option214)
    let option215 = Option(context: context)
    option215.name = "Harmful Spells (Ex)"
    option215.content = "When you cast an instantaneous spell that deals damage, you can increase the spell’s damage by half your technomancer level. This increased damage applies to all creatures damaged by an area spell, but for spells that target multiple creatures with multiple rays or other attacks (such as magic missile), the increased damage applies only to a single ray or missile. This increased damage doesn’t apply to ongoing damage from the spell (such as bleed or burn). This magic hack doesn’t increase ability damage or other spell effects, only damage to Stamina Points or Hit Points."
    feature21.addToFeatureOptions(option215)
    let option216 = Option(context: context)
    option216.name = "Quick Scan (Su)"
    option216.content = "As a standard action, you can get a general sense of what information is stored on drives or other digital storage media. You must pass your hand in the air near the data source, but don’t have to touch it or connect to it. The information you get is very general, such as “financial records,” “military records,” or “spells.” Getting detailed information requires interfacing with the data more directly. If you attempt a quick scan on a creature that stores its memories in a digital medium—to get a sense of the memories stored in a robot, for example—the target can attempt a Will save to negate the scan and prevent you from trying against it again for 24 hours."
    feature21.addToFeatureOptions(option216)
    let option217 = Option(context: context)
    option217.name = "Robot Influence (Ex)"
    option217.content = "You can affect constructs, robots, and other creatures that have the technological subtype with your mind-affecting spells, even if they’re mindless or normally immune to such effects. However, they receive a +2 bonus to their Will saves against your mind-affecting spells."
    feature21.addToFeatureOptions(option217)
    let option218 = Option(context: context)
    option218.name = "Selective Targeting (Ex)"
    option218.content = "When you cast an instantaneous spell with an area effect, you can shape the spell so it doesn’t affect one of your allies. Choose one 5-foot square within the spell’s area to be unaffected by the spell. At 5th level, you can spend 1 Resolve Point to exclude any number of squares with this ability."
    feature21.addToFeatureOptions(option218)
    let option219 = Option(context: context)
    option219.name = "Spell Countermeasures"
    option219.content = "You gain a +2 bonus to saving throws against spells and other magical effects."
    feature21.addToFeatureOptions(option219)
    let option2110 = Option(context: context)
    option2110.name = "Technomantic Proficiency"
    option2110.content = "As a standard action, you can spend 1 Resolve Point to temporarily learn how to use a weapon in combat. Choose a single weapon; you gain proficiency with it (and any identical weapon) for a number of minutes equal to your class level. Each round you use the weapon reduces this magic hack’s duration by 1 minute. For example, at 4th level, you could gain proficiency with corona laser rifles for 4 minutes. If you fire such a weapon for 2 rounds, you remain proficient with it for 2 more minutes."
    feature21.addToFeatureOptions(option2110)
    feature21.compendiumClassFeature = level2
    Technomancer.addToClassLevel(level2)
    
    let level3 = CompendiumLevel(context: context)
    level3.level = 3
    level3.bab = 2
    level3.fort = 1
    level3.ref = 1
    level3.will = 3
    let slot3x1 = SpellSlot(context: context)
    slot3x1.slots = 3
    level3.addToCompendiumClassSlots(slot3x1)
    let slot3x2 = SpellSlot(context: context)
    slot3x2.slots = 0
    level3.addToCompendiumClassSlots(slot3x2)
    let slot3x3 = SpellSlot(context: context)
    slot3x3.slots = 0
    level3.addToCompendiumClassSlots(slot3x3)
    let slot3x4 = SpellSlot(context: context)
    slot3x4.slots = 0
    level3.addToCompendiumClassSlots(slot3x4)
    let slot3x5 = SpellSlot(context: context)
    slot3x5.slots = 0
    level3.addToCompendiumClassSlots(slot3x5)
    let slot3x6 = SpellSlot(context: context)
    slot3x6.slots = 0
    level3.addToCompendiumClassSlots(slot3x6)
    let feature31 = Feature(context: context)
    feature31.name = "Spell Focus"
    feature31.content = "You gain Spell Focus as a bonus feat."
    feature31.compendiumClassFeature = level3
    let feature32 = Feature(context: context)
    feature32.name = "Techlore (Ex)"
    feature32.content = "You rewire your mind to give you greater insight into the nature of magic and technology. You gain a +1 insight bonus to Computers and Mysticism checks. This bonus increases by 1 at 6th level and every 3 levels thereafter."
    let modifier321 = Bonus(context: context)
    modifier321.bonus = 1
    modifier321.type = "Computers"
    modifier321.enabled = true
    modifier321.featureBonus = feature32
    let modifier322 = Bonus(context: context)
    modifier322.bonus = 1
    modifier322.type = "Mysticism"
    modifier322.enabled = true
    modifier322.featureBonus = feature32
    feature32.compendiumClassFeature = level3
    let feature33 = Feature(context: context)
    feature33.name = "Weapon Specialization (Ex)"
    feature33.content = "You gain the Weapon Specialization feat as a bonus feat for each weapon type this class grants you proficiency with."
    feature33.compendiumClassFeature = level3
    Technomancer.addToClassLevel(level3)
    
    let level4 = CompendiumLevel(context: context)
    level4.level = 4
    level4.bab = 3
    level4.fort = 1
    level4.ref = 1
    level4.will = 4
    let slot4x1 = SpellSlot(context: context)
    slot4x1.slots = 3
    level4.addToCompendiumClassSlots(slot4x1)
    let slot4x2 = SpellSlot(context: context)
    slot4x2.slots = 2
    level4.addToCompendiumClassSlots(slot4x2)
    let slot4x3 = SpellSlot(context: context)
    slot4x3.slots = 0
    level4.addToCompendiumClassSlots(slot4x3)
    let slot4x4 = SpellSlot(context: context)
    slot4x4.slots = 0
    level4.addToCompendiumClassSlots(slot4x4)
    let slot4x5 = SpellSlot(context: context)
    slot4x5.slots = 0
    level4.addToCompendiumClassSlots(slot4x5)
    let slot4x6 = SpellSlot(context: context)
    slot4x6.slots = 0
    level4.addToCompendiumClassSlots(slot4x6)
    Technomancer.addToClassLevel(level4)
    
    let level5 = CompendiumLevel(context: context)
    level5.level = 5
    level5.bab = 3
    level5.fort = 1
    level5.ref = 1
    level5.will = 4
    let slot5x1 = SpellSlot(context: context)
    slot5x1.slots = 4
    level5.addToCompendiumClassSlots(slot5x1)
    let slot5x2 = SpellSlot(context: context)
    slot5x2.slots = 2
    level5.addToCompendiumClassSlots(slot5x2)
    let slot5x3 = SpellSlot(context: context)
    slot5x3.slots = 0
    level5.addToCompendiumClassSlots(slot5x3)
    let slot5x4 = SpellSlot(context: context)
    slot5x4.slots = 0
    level5.addToCompendiumClassSlots(slot5x4)
    let slot5x5 = SpellSlot(context: context)
    slot5x5.slots = 0
    level5.addToCompendiumClassSlots(slot5x5)
    let slot5x6 = SpellSlot(context: context)
    slot5x6.slots = 0
    level5.addToCompendiumClassSlots(slot5x6)
    let feature51 = Feature(context: context)
    feature51.name = "Magic Hack"
    feature51.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218, option219, option2110])
    let option511 = Option(context: context)
    option511.name = "Charging Jolt (Su)"
    option511.content = "As a move action, you can expend an unused spell slot to refill charges in a weapon’s power cell. This requires you to touch the weapon or its power cell. The power cell regains 10 charges per spell level, up to its capacity. You can also use this ability to jump-start or short out an electronic device, allowing you to attempt an Engineering check to disable a device with a bonus equal to double the level of the spell you expended."
    feature51.addToFeatureOptions(option511)
    let option512 = Option(context: context)
    option512.name = "Debug Spell (Ex)"
    option512.content = "Any piece of code has bugs, but you can turn the bugs in your spellcode into features. After rolling damage for an instantaneous spell that deals Hit Point damage, you can spend 1 Resolve Point to reroll one die with a result of 1. At 11th level, you can reroll up to two dice with a result of 1, and at 17th level, you can reroll up to three dice with a result of 1. For example, if you were 17th level and cast disintegrate, you could spend 1 Resolve Point to reroll up to three dice that rolled 1s, after rolling and seeing how many 1s you rolled."
    feature51.addToFeatureOptions(option512)
    let option513 = Option(context: context)
    option513.name = "Distant Spell (Ex)"
    option513.content = "When you cast a spell with a range of close, medium, or long, you can spend 1 Resolve Point to double its range. Spells whose ranges are not defined by distance, as well as spells whose ranges are not close, medium, or long, do not benefit from this magic hack. If the spell affects an area, doubling its range doesn’t alter the size of its area."
    feature51.addToFeatureOptions(option513)
    let option514 = Option(context: context)
    option514.name = "Extended Spell (Ex)"
    option514.content = "When you cast a spell, you can spend 1 Resolve Point to double its duration. This has no effect on spells with a duration of concentration, instantaneous, 1 round or less, or permanent, nor can it increase a spell’s duration to more than 24 hours."
    feature51.addToFeatureOptions(option514)
    let option515 = Option(context: context)
    option515.name = "Fabricate Arms (Su)"
    option515.content = "As a full action, you can expend an unused spell slot to temporarily construct a technological weapon or suit of armor out of raw magic. You can create one suit of armor or weapon with a level equal to or less than the level of the expended spell slot × 3, to a maximum of your caster level. The item appears in your hands, on your person, or in an adjacent square. You can use fuse spells with this magic hack. A weapon can’t be larger than two-handed, and the size of the item can’t exceed 10 bulk. The quality of the item is average for its type. Treat this as a spell of the same level as the expended spell slot. For example, at 10th level, you could expend a 3rd-level spell slot to fabricate a weapon of 9th level or lower, or expend a 4th-level spell slot to fabricate a suit of armor of 10th level or lower. The armor or weapon persists for a number of rounds equal to your technomancer level. At the end of this duration, the item disappears. You are proficient with (but not specialized in) any weapons you create with this ability. You can’t create magic items, weapons made from a special material, or weapons that are expended with use (such as arrows, grenades, or missiles) with this magic hack."
    feature51.addToFeatureOptions(option515)
    let option516 = Option(context: context)
    option516.name = "Magic Negation (Sp)"
    option516.content = "As a standard action, you can spend 1 RP to temporarily suppress magic, as if using dispel magic. Choose either an ongoing spell or a magic item within 30 feet of you. The magical effects of the spell or magic item are suppressed for 1d4 rounds, and then they return. If the spell’s level is higher than you can cast or the item’s caster level is greater than yours, you can’t suppress it. If you target a spell affecting a creature, the creature can attempt a Will save to stop you from suppressing the spell."
    feature51.addToFeatureOptions(option516)
    let option517 = Option(context: context)
    option517.name = "Spell Grenade (Sp)"
    option517.content = "You can spend 1 Resolve Point to store a spell with a range of touch in a grenade, allowing you to affect a target within the grenade’s blast radius with the spell. Casting a spell with spell grenade uses the spell’s standard casting time, and throwing the spell grenade is a standard action. You must throw the grenade before the end of your next turn, or the spell is wasted. You are considered proficient with the grenade for this attack. Choose a single target within the grenade’s blast radius; that target is affected by the spell as if you had successfully touched it. The grenade goes off as normal, with all of its usual effects within its blast radius. If you miss the targeted intersection with the grenade, you must choose a target within the grenade’s new blast radius. If there are no suitable targets within the grenade’s blast radius, the spell is wasted. Spells whose ranges are not touch don’t benefit from this magic hack."
    feature51.addToFeatureOptions(option517)
    feature51.compendiumClassFeature = level5
    Technomancer.addToClassLevel(level5)
    
    let level6 = CompendiumLevel(context: context)
    level6.level = 6
    level6.bab = 4
    level6.fort = 2
    level6.ref = 2
    level6.will = 5
    let slot6x1 = SpellSlot(context: context)
    slot6x1.slots = 4
    level6.addToCompendiumClassSlots(slot6x1)
    let slot6x2 = SpellSlot(context: context)
    slot6x2.slots = 3
    level6.addToCompendiumClassSlots(slot6x2)
    let slot6x3 = SpellSlot(context: context)
    slot6x3.slots = 0
    level6.addToCompendiumClassSlots(slot6x3)
    let slot6x4 = SpellSlot(context: context)
    slot6x4.slots = 0
    level6.addToCompendiumClassSlots(slot6x4)
    let slot6x5 = SpellSlot(context: context)
    slot6x5.slots = 0
    level6.addToCompendiumClassSlots(slot6x5)
    let slot6x6 = SpellSlot(context: context)
    slot6x6.slots = 0
    level6.addToCompendiumClassSlots(slot6x6)
    let feature61 = Feature(context: context)
    feature61.name = "Cache Capacitor (Su)"
    feature61.content = "You expand your spell cache into a cache capacitor. As part of regaining your spells each day, you can cast a single spell into your spell cache and have it affect you continuously for 24 hours. The cache capacitor can hold any of the following spells: detect radiation, disguise self, keen senses, or unseen servant. You must know a spell to store it in your cache capacitor. When you cast the spell into your cache capacitor, you expend the spell slot normally and make any decisions required for that spell, but the duration doesn’t expire for 24 hours. If the spell in your cache capacitor is dispelled or dismissed, you can spend 5 minutes of uninterrupted concentration to reestablish it, keeping the same decisions you made when you cast it, and gaining whatever duration the spell had remaining. You can’t exchange the stored spell for another spell until you again regains your spells.\n\nAt 12th level, your cache capacitor gains a second slot that can hold darkvision, lesser resistant armor , life bubble, or spider climb.\n\nAt 18th level, your cache capacitor gains a third slot that can hold arcane sight, flight (spell level 3rd or lower), see invisibility, or tongues."
    feature61.compendiumClassFeature = level6
    let feature62 = Feature(context: context)
    feature62.name = "Techlore +2"
    let modifier621 = Bonus(context: context)
    modifier621.bonus = 1
    modifier621.type = "Computers"
    modifier621.enabled = true
    modifier621.featureBonus = feature62
    let modifier622 = Bonus(context: context)
    modifier622.bonus = 1
    modifier622.type = "Mysticism"
    modifier622.enabled = true
    modifier622.featureBonus = feature62
    feature62.compendiumClassFeature = level6
    Technomancer.addToClassLevel(level6)
    
    let level7 = CompendiumLevel(context: context)
    level7.level = 7
    level7.bab = 5
    level7.fort = 2
    level7.ref = 2
    level7.will = 5
    let slot7x1 = SpellSlot(context: context)
    slot7x1.slots = 4
    level7.addToCompendiumClassSlots(slot7x1)
    let slot7x2 = SpellSlot(context: context)
    slot7x2.slots = 3
    level7.addToCompendiumClassSlots(slot7x2)
    let slot7x3 = SpellSlot(context: context)
    slot7x3.slots = 2
    level7.addToCompendiumClassSlots(slot7x3)
    let slot7x4 = SpellSlot(context: context)
    slot7x4.slots = 0
    level7.addToCompendiumClassSlots(slot7x4)
    let slot7x5 = SpellSlot(context: context)
    slot7x5.slots = 0
    level7.addToCompendiumClassSlots(slot7x5)
    let slot7x6 = SpellSlot(context: context)
    slot7x6.slots = 0
    level7.addToCompendiumClassSlots(slot7x6)
    Technomancer.addToClassLevel(level7)
    
    let level8 = CompendiumLevel(context: context)
    level8.level = 8
    level8.bab = 6
    level8.fort = 2
    level8.ref = 2
    level8.will = 6
    let slot8x1 = SpellSlot(context: context)
    slot8x1.slots = 4
    level8.addToCompendiumClassSlots(slot8x1)
    let slot8x2 = SpellSlot(context: context)
    slot8x2.slots = 4
    level8.addToCompendiumClassSlots(slot8x2)
    let slot8x3 = SpellSlot(context: context)
    slot8x3.slots = 2
    level8.addToCompendiumClassSlots(slot8x3)
    let slot8x4 = SpellSlot(context: context)
    slot8x4.slots = 0
    level8.addToCompendiumClassSlots(slot8x4)
    let slot8x5 = SpellSlot(context: context)
    slot8x5.slots = 0
    level8.addToCompendiumClassSlots(slot8x5)
    let slot8x6 = SpellSlot(context: context)
    slot8x6.slots = 0
    level8.addToCompendiumClassSlots(slot8x6)
    let feature81 = Feature(context: context)
    feature81.name = "Magic Hack"
    feature81.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218, option219, option2110, option511, option512, option513, option514, option515, option516, option517])
    let option811 = Option(context: context)
    option811.name = "Diviner's Tap (Su)"
    option811.content = "You can hack a computer to set up magical surveillance. This takes 10 minutes and requires a successful Computers check against the device’s DC. If you fail, you can’t try again on the same device. On a success, your tap lasts for a number of days equal to your caster level. You can program your tap either to give you general information about user activity on the device or to receive a mental alarm when a user accesses or transmits data about a specific topic (getting an idea of the information found). For instance, a user might hold a video call to talk about your exploits. If you chose to receive general information, you might know that a video call took place but not the call’s topic. If you chose to have the tap receive an alarm when the topic is you, you’d get the gist of the conversation (but not a complete transcript). Setting up a new diviner’s tap ends the duration of any previous one still in effect."
    feature81.addToFeatureOptions(option811)
    let option812 = Option(context: context)
    option812.name = "Flash Teleport (Sp)"
    option812.content = "As a move action, you can spend 1 Resolve Point to teleport up to 30 feet. You must have line of sight to your destination. This movement doesn’t provoke attacks of opportunity."
    feature81.addToFeatureOptions(option812)
    let option813 = Option(context: context)
    option813.name = "Mental Mark (Su)"
    option813.content = "When an enemy fails a Will save against one of your technomancer spells, it takes a –2 penalty to saving throws and AC for 1 round. When an enemy succeeds at a Will save against one of your technomancer spells, it takes a –1 penalty to saving throws against your spells for 1 round. A creature can take only one penalty from a mental mark at a time."
    feature81.addToFeatureOptions(option813)
    let option814 = Option(context: context)
    option814.name = "Spellshot (Sp)"
    option814.content = "You can cast an area spell with a casting time of 1 standard action or less through a ranged weapon, allowing you to use the weapon’s range rather than the spell’s range. You must target a single creature with your attack, and the spell’s area is centered on that creature, or originates at the creature’s location for a cone or line effect (oriented in whichever direction you choose), even if the spell would normally be centered on or originate from a point. You can fire the weapon as part of the standard action to cast the spell. You must fire the weapon during the round that the casting is completed, or the spell is wasted. If the attack misses, the spell is wasted. Spells with an emanation effect that would be centered on you don’t benefit from this magic hack."
    feature81.addToFeatureOptions(option814)
    let option815 = Option(context: context)
    option815.name = "Tech Countermeasures (Su)"
    option815.content = "As a move action, you can spend 1 Resolve Point to make it more difficult for enemies to target you with technological weapons for 1 round. Until the start of your next turn, as a reaction just before an enemy attacks you with a technological weapon, you can force that enemy to roll the attack twice and take the lower result; if the weapon allows a Reflex save instead of requiring an attack roll, you instead gain the benefit of evasion (as the operative’s class feature) against the attack. This magic hack has no effect on spells that target you or on weapons or attacks that are not technological in nature."
    feature81.addToFeatureOptions(option815)
    let option816 = Option(context: context)
    option816.name = "Widened Spell (Ex)"
    option816.content = "When you cast a spell with a burst, emanation, or spread, you can spend 2 Resolve Points to double its radius. For instance, a spell with a 30-foot burst would have a 60-foot burst instead. Spells that don’t have an area of one of these three types are not affected by this magic hack."
    feature81.addToFeatureOptions(option816)
    feature81.compendiumClassFeature = level8
    Technomancer.addToClassLevel(level8)
    
    let level9 = CompendiumLevel(context: context)
    level9.level = 9
    level9.bab = 6
    level9.fort = 3
    level9.ref = 3
    level9.will = 6
    let slot9x1 = SpellSlot(context: context)
    slot9x1.slots = 5
    level9.addToCompendiumClassSlots(slot9x1)
    let slot9x2 = SpellSlot(context: context)
    slot9x2.slots = 4
    level9.addToCompendiumClassSlots(slot9x2)
    let slot9x3 = SpellSlot(context: context)
    slot9x3.slots = 3
    level9.addToCompendiumClassSlots(slot9x3)
    let slot9x4 = SpellSlot(context: context)
    slot9x4.slots = 0
    level9.addToCompendiumClassSlots(slot9x4)
    let slot9x5 = SpellSlot(context: context)
    slot9x5.slots = 0
    level9.addToCompendiumClassSlots(slot9x5)
    let slot9x6 = SpellSlot(context: context)
    slot9x6.slots = 0
    level9.addToCompendiumClassSlots(slot9x6)
    let feature91 = Feature(context: context)
    feature91.name = "Techlore +3"
    let modifier911 = Bonus(context: context)
    modifier911.bonus = 1
    modifier911.type = "Computers"
    modifier911.enabled = true
    modifier911.featureBonus = feature91
    let modifier912 = Bonus(context: context)
    modifier912.bonus = 1
    modifier912.type = "Mysticism"
    modifier912.enabled = true
    modifier912.featureBonus = feature91
    feature91.compendiumClassFeature = level9
    Technomancer.addToClassLevel(level9)
    
    let level10 = CompendiumLevel(context: context)
    level10.level = 10
    level10.bab = 7
    level10.fort = 3
    level10.ref = 3
    level10.will = 7
    let slot10x1 = SpellSlot(context: context)
    slot10x1.slots = 5
    level10.addToCompendiumClassSlots(slot10x1)
    let slot10x2 = SpellSlot(context: context)
    slot10x2.slots = 4
    level10.addToCompendiumClassSlots(slot10x2)
    let slot10x3 = SpellSlot(context: context)
    slot10x3.slots = 3
    level10.addToCompendiumClassSlots(slot10x3)
    let slot10x4 = SpellSlot(context: context)
    slot10x4.slots = 2
    level10.addToCompendiumClassSlots(slot10x4)
    let slot10x5 = SpellSlot(context: context)
    slot10x5.slots = 0
    level10.addToCompendiumClassSlots(slot10x5)
    let slot10x6 = SpellSlot(context: context)
    slot10x6.slots = 0
    level10.addToCompendiumClassSlots(slot10x6)
    Technomancer.addToClassLevel(level10)
    
    let level11 = CompendiumLevel(context: context)
    level11.level = 11
    level11.bab = 8
    level11.fort = 3
    level11.ref = 3
    level11.will = 7
    let slot11x1 = SpellSlot(context: context)
    slot11x1.slots = 5
    level11.addToCompendiumClassSlots(slot11x1)
    let slot11x2 = SpellSlot(context: context)
    slot11x2.slots = 4
    level11.addToCompendiumClassSlots(slot11x2)
    let slot11x3 = SpellSlot(context: context)
    slot11x3.slots = 4
    level11.addToCompendiumClassSlots(slot11x3)
    let slot11x4 = SpellSlot(context: context)
    slot11x4.slots = 2
    level11.addToCompendiumClassSlots(slot11x4)
    let slot11x5 = SpellSlot(context: context)
    slot11x5.slots = 0
    level11.addToCompendiumClassSlots(slot11x5)
    let slot11x6 = SpellSlot(context: context)
    slot11x6.slots = 0
    level11.addToCompendiumClassSlots(slot11x6)
    let feature111 = Feature(context: context)
    feature111.name = "Magic Hack"
    feature111.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218, option219, option2110, option511, option512, option513, option514, option515, option516, option517, option811, option812, option813, option814, option815, option816])
    let option1111 = Option(context: context)
    option1111.name = "Countertech Sentinel (Su)"
    option1111.content = "You can spend 1 Resolve Point to use your countertech magic hack to counter a direct attack against an ally within 15 feet. You can’t use countertech sentinel against attacks that target an area. You must have the countertech magic hack to choose this magic hack."
    feature111.addToFeatureOptions(option1111)
    let option1112 = Option(context: context)
    option1112.name = "Eternal Spell (Ex)"
    option1112.content = "Choose one 1st-level spell you know from the list of technomancer spells. You can cast it at will, as though it were a 0-level spell. It still counts as one of your 1st-level spells known, not one of your 0-level spells known. You can choose a 1st-level spell from a source other than the core rules with the GM’s permission."
    feature111.addToFeatureOptions(option1112)
    let option1113 = Option(context: context)
    option1113.name = "Reboot Mind (Su)"
    option1113.content = "You can free someone from magical mental control or conditions. As a standard action, you can spend 1 Resolve Point and touch a willing creature. This restarts the subject’s brain, ending all mind-affecting effects affecting it, as well as all conditions that could be removed by greater remove condition that were imparted on the creature by mind-affecting effects, but the subject becomes stunned until the end of its next turn. Once you reboot a mind, you can’t use this ability again for 24 hours.\n\nYou can attempt to reboot the mind of an ally who is unwilling due to the influence of a mind-affecting effect. In this case, the ally can attempt a new saving throw against the effect at the same DC. If she succeeds, the ally can allow her mind to be rebooted, but if she fails, you waste the expended Resolve Point and action.\n\nYou can use this ability to reboot your own mind. If you’re unable to take actions, you can reboot your mind without spending actions, but it must be the first thing you do on your turn, and you are stunned until the end of your next turn."
    feature111.addToFeatureOptions(option1113)
    let option1114 = Option(context: context)
    option1114.name = "Seeking Shot (Su)"
    option1114.content = "As a standard action, you can spend 1 Resolve Point to fire a single shot from a ranged weapon at a target known to you within range. The shot travels to the target, even around corners. Only an unavoidable obstacle or the limit of the weapon’s range prevents the shot from reaching the target. This ability negates cover and concealment modifiers, but otherwise the attack is rolled normally."
    feature111.addToFeatureOptions(option1114)
    feature111.compendiumClassFeature = level11
    Technomancer.addToClassLevel(level11)
    
    let level12 = CompendiumLevel(context: context)
    level12.level = 12
    level12.bab = 9
    level12.fort = 4
    level12.ref = 4
    level12.will = 8
    let slot12x1 = SpellSlot(context: context)
    slot12x1.slots = 5
    level12.addToCompendiumClassSlots(slot12x1)
    let slot12x2 = SpellSlot(context: context)
    slot12x2.slots = 5
    level12.addToCompendiumClassSlots(slot12x2)
    let slot12x3 = SpellSlot(context: context)
    slot12x3.slots = 4
    level12.addToCompendiumClassSlots(slot12x3)
    let slot12x4 = SpellSlot(context: context)
    slot12x4.slots = 3
    level12.addToCompendiumClassSlots(slot12x4)
    let slot12x5 = SpellSlot(context: context)
    slot12x5.slots = 0
    level12.addToCompendiumClassSlots(slot12x5)
    let slot12x6 = SpellSlot(context: context)
    slot12x6.slots = 0
    level12.addToCompendiumClassSlots(slot12x6)
    let feature121 = Feature(context: context)
    feature121.name = "Techlore +4"
    let modifier1211 = Bonus(context: context)
    modifier1211.bonus = 1
    modifier1211.type = "Computers"
    modifier1211.enabled = true
    modifier1211.featureBonus = feature121
    let modifier1212 = Bonus(context: context)
    modifier1212.bonus = 1
    modifier1212.type = "Mysticism"
    modifier1212.enabled = true
    modifier1212.featureBonus = feature121
    feature121.compendiumClassFeature = level12
    Technomancer.addToClassLevel(level12)
    
    let level13 = CompendiumLevel(context: context)
    level13.level = 13
    level13.bab = 9
    level13.fort = 4
    level13.ref = 4
    level13.will = 8
    let slot13x1 = SpellSlot(context: context)
    slot13x1.slots = 5
    level13.addToCompendiumClassSlots(slot13x1)
    let slot13x2 = SpellSlot(context: context)
    slot13x2.slots = 5
    level13.addToCompendiumClassSlots(slot13x2)
    let slot13x3 = SpellSlot(context: context)
    slot13x3.slots = 4
    level13.addToCompendiumClassSlots(slot13x3)
    let slot13x4 = SpellSlot(context: context)
    slot13x4.slots = 3
    level13.addToCompendiumClassSlots(slot13x4)
    let slot13x5 = SpellSlot(context: context)
    slot13x5.slots = 2
    level13.addToCompendiumClassSlots(slot13x5)
    let slot13x6 = SpellSlot(context: context)
    slot13x6.slots = 0
    level13.addToCompendiumClassSlots(slot13x6)
    Technomancer.addToClassLevel(level13)
    
    let level14 = CompendiumLevel(context: context)
    level14.level = 14
    level14.bab = 10
    level14.fort = 4
    level14.ref = 4
    level14.will = 9
    let slot14x1 = SpellSlot(context: context)
    slot14x1.slots = 5
    level14.addToCompendiumClassSlots(slot14x1)
    let slot14x2 = SpellSlot(context: context)
    slot14x2.slots = 5
    level14.addToCompendiumClassSlots(slot14x2)
    let slot14x3 = SpellSlot(context: context)
    slot14x3.slots = 4
    level14.addToCompendiumClassSlots(slot14x3)
    let slot14x4 = SpellSlot(context: context)
    slot14x4.slots = 4
    level14.addToCompendiumClassSlots(slot14x4)
    let slot14x5 = SpellSlot(context: context)
    slot14x5.slots = 2
    level14.addToCompendiumClassSlots(slot14x5)
    let slot14x6 = SpellSlot(context: context)
    slot14x6.slots = 0
    level14.addToCompendiumClassSlots(slot14x6)
    let feature141 = Feature(context: context)
    feature141.name = "Magic Hack"
    feature141.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218, option219, option2110, option511, option512, option513, option514, option515, option516, option517, option811, option812, option813, option814, option815, option816, option1111, option1112, option1113, option1114])
    let option1411 = Option(context: context)
    option1411.name = "Phase Shot (Su)"
    option1411.content = "As a standard action, you can spend 1 Resolve Point to fire a single shot from a ranged weapon at a target known to you within range. The shot travels straight to the target, passing through any nonmagical barrier in its way, ignoring hardness and Hit Points (any magical barrier, such as a wall of force, stops the shot). This ability negates cover and concealment modifiers, but otherwise the attack is rolled normally."
    feature141.addToFeatureOptions(option1411)
    let option1412 = Option(context: context)
    option1412.name = "Quickened Spell (Ex)"
    option1412.content = "You can cast a spell as a move action. You can spend 2 Resolve Points to cast a quickened 0-level spell or 4 Resolve Points to cast a quickened 1st-level spell. You can quicken only spells with a casting time of 1 full action or shorter. At 16th level, you can spend 6 Resolve Points to cast a quickened 2nd-level spell."
    feature141.addToFeatureOptions(option1412)
    let option1413 = Option(context: context)
    option1413.name = "Rain of Fire (Su)"
    option1413.content = "Once per day as a full action, you can spend 2 Resolve Points to shoot a ranged weapon at multiple targets within range; the maximum number of targets is equal to half your technomancer level or the number of shots in your weapon, whichever is lower. Each attack uses your highest attack bonus, and each enemy can be targeted only by a single shot."
    feature141.addToFeatureOptions(option1413)
    let option1414 = Option(context: context)
    option1414.name = "Spell Library (Ex)"
    option1414.content = "You gain one extra spell known for each level of spell you can cast. You must choose the new spells when you gain this magic hack. If you gain access to a higher level of spell after choosing this hack, you gain one extra spell known for that spell level."
    feature141.addToFeatureOptions(option1414)
    feature141.compendiumClassFeature = level14
    Technomancer.addToClassLevel(level14)
    
    let level15 = CompendiumLevel(context: context)
    level15.level = 15
    level15.bab = 11
    level15.fort = 5
    level15.ref = 5
    level15.will = 9
    let slot15x1 = SpellSlot(context: context)
    slot15x1.slots = 5
    level15.addToCompendiumClassSlots(slot15x1)
    let slot15x2 = SpellSlot(context: context)
    slot15x2.slots = 5
    level15.addToCompendiumClassSlots(slot15x2)
    let slot15x3 = SpellSlot(context: context)
    slot15x3.slots = 5
    level15.addToCompendiumClassSlots(slot15x3)
    let slot15x4 = SpellSlot(context: context)
    slot15x4.slots = 4
    level15.addToCompendiumClassSlots(slot15x4)
    let slot15x5 = SpellSlot(context: context)
    slot15x5.slots = 3
    level15.addToCompendiumClassSlots(slot15x5)
    let slot15x6 = SpellSlot(context: context)
    slot15x6.slots = 0
    level15.addToCompendiumClassSlots(slot15x6)
    let feature151 = Feature(context: context)
    feature151.name = "Techlore +5"
    let modifier1511 = Bonus(context: context)
    modifier1511.bonus = 1
    modifier1511.type = "Computers"
    modifier1511.enabled = true
    modifier1511.featureBonus = feature151
    let modifier1512 = Bonus(context: context)
    modifier1512.bonus = 1
    modifier1512.type = "Mysticism"
    modifier1512.enabled = true
    modifier1512.featureBonus = feature151
    feature151.compendiumClassFeature = level15
    Technomancer.addToClassLevel(level15)
    
    let level16 = CompendiumLevel(context: context)
    level16.level = 16
    level16.bab = 12
    level16.fort = 5
    level16.ref = 5
    level16.will = 10
    let slot16x1 = SpellSlot(context: context)
    slot16x1.slots = 5
    level16.addToCompendiumClassSlots(slot16x1)
    let slot16x2 = SpellSlot(context: context)
    slot16x2.slots = 5
    level16.addToCompendiumClassSlots(slot16x2)
    let slot16x3 = SpellSlot(context: context)
    slot16x3.slots = 5
    level16.addToCompendiumClassSlots(slot16x3)
    let slot16x4 = SpellSlot(context: context)
    slot16x4.slots = 4
    level16.addToCompendiumClassSlots(slot16x4)
    let slot16x5 = SpellSlot(context: context)
    slot16x5.slots = 3
    level16.addToCompendiumClassSlots(slot16x5)
    let slot16x6 = SpellSlot(context: context)
    slot16x6.slots = 2
    level16.addToCompendiumClassSlots(slot16x6)
    Technomancer.addToClassLevel(level16)
    
    let level17 = CompendiumLevel(context: context)
    level17.level = 17
    level17.bab = 12
    level17.fort = 5
    level17.ref = 5
    level17.will = 10
    let slot17x1 = SpellSlot(context: context)
    slot17x1.slots = 5
    level17.addToCompendiumClassSlots(slot17x1)
    let slot17x2 = SpellSlot(context: context)
    slot17x2.slots = 5
    level17.addToCompendiumClassSlots(slot17x2)
    let slot17x3 = SpellSlot(context: context)
    slot17x3.slots = 5
    level17.addToCompendiumClassSlots(slot17x3)
    let slot17x4 = SpellSlot(context: context)
    slot17x4.slots = 4
    level17.addToCompendiumClassSlots(slot17x4)
    let slot17x5 = SpellSlot(context: context)
    slot17x5.slots = 4
    level17.addToCompendiumClassSlots(slot17x5)
    let slot17x6 = SpellSlot(context: context)
    slot17x6.slots = 2
    level17.addToCompendiumClassSlots(slot17x6)
    let feature171 = Feature(context: context)
    feature171.name = "Magic Hack"
    feature171.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218, option219, option2110, option511, option512, option513, option514, option515, option516, option517, option811, option812, option813, option814, option815, option816, option1111, option1112, option1113, option1114, option1411, option1412, option1413, option1414])
    feature171.compendiumClassFeature = level17
    Technomancer.addToClassLevel(level17)
    
    let level18 = CompendiumLevel(context: context)
    level18.level = 18
    level18.bab = 13
    level18.fort = 6
    level18.ref = 6
    level18.will = 11
    let slot18x1 = SpellSlot(context: context)
    slot18x1.slots = 5
    level18.addToCompendiumClassSlots(slot18x1)
    let slot18x2 = SpellSlot(context: context)
    slot18x2.slots = 5
    level18.addToCompendiumClassSlots(slot18x2)
    let slot18x3 = SpellSlot(context: context)
    slot18x3.slots = 5
    level18.addToCompendiumClassSlots(slot18x3)
    let slot18x4 = SpellSlot(context: context)
    slot18x4.slots = 5
    level18.addToCompendiumClassSlots(slot18x4)
    let slot18x5 = SpellSlot(context: context)
    slot18x5.slots = 4
    level18.addToCompendiumClassSlots(slot18x5)
    let slot18x6 = SpellSlot(context: context)
    slot18x6.slots = 3
    level18.addToCompendiumClassSlots(slot18x6)
    let feature181 = Feature(context: context)
    feature181.name = "Techlore +6"
    let modifier1811 = Bonus(context: context)
    modifier1811.bonus = 1
    modifier1811.type = "Computers"
    modifier1811.enabled = true
    modifier1811.featureBonus = feature181
    let modifier1812 = Bonus(context: context)
    modifier1812.bonus = 1
    modifier1812.type = "Mysticism"
    modifier1812.enabled = true
    modifier1812.featureBonus = feature181
    feature181.compendiumClassFeature = level18
    Technomancer.addToClassLevel(level18)
    
    let level19 = CompendiumLevel(context: context)
    level19.level = 19
    level19.bab = 14
    level19.fort = 6
    level19.ref = 6
    level19.will = 11
    let slot19x1 = SpellSlot(context: context)
    slot19x1.slots = 5
    level19.addToCompendiumClassSlots(slot19x1)
    let slot19x2 = SpellSlot(context: context)
    slot19x2.slots = 5
    level19.addToCompendiumClassSlots(slot19x2)
    let slot19x3 = SpellSlot(context: context)
    slot19x3.slots = 5
    level19.addToCompendiumClassSlots(slot19x3)
    let slot19x4 = SpellSlot(context: context)
    slot19x4.slots = 5
    level19.addToCompendiumClassSlots(slot19x4)
    let slot19x5 = SpellSlot(context: context)
    slot19x5.slots = 5
    level19.addToCompendiumClassSlots(slot19x5)
    let slot19x6 = SpellSlot(context: context)
    slot19x6.slots = 4
    level19.addToCompendiumClassSlots(slot19x6)
    let feature191 = Feature(context: context)
    feature191.name = "Resolve Attunement"
    feature191.content = "You recover Resolve Points when you use powerful magic. Each time you cast a 6th-level spell, you regain 1 Resolve Point, up to your normal maximum. This applies only to spells you cast using your normal 6th-level spell slots, not to those you cast using magic items or other methods such as fuse spells."
    feature191.compendiumClassFeature = level19
    Technomancer.addToClassLevel(level19)
    
    let level20 = CompendiumLevel(context: context)
    level20.level = 20
    level20.bab = 15
    level20.fort = 6
    level20.ref = 6
    level20.will = 12
    let slot20x1 = SpellSlot(context: context)
    slot20x1.slots = 5
    level20.addToCompendiumClassSlots(slot20x1)
    let slot20x2 = SpellSlot(context: context)
    slot20x2.slots = 5
    level20.addToCompendiumClassSlots(slot20x2)
    let slot20x3 = SpellSlot(context: context)
    slot20x3.slots = 5
    level20.addToCompendiumClassSlots(slot20x3)
    let slot20x4 = SpellSlot(context: context)
    slot20x4.slots = 5
    level20.addToCompendiumClassSlots(slot20x4)
    let slot20x5 = SpellSlot(context: context)
    slot20x5.slots = 5
    level20.addToCompendiumClassSlots(slot20x5)
    let slot20x6 = SpellSlot(context: context)
    slot20x6.slots = 5
    level20.addToCompendiumClassSlots(slot20x6)
    let feature201 = Feature(context: context)
    feature201.name = "Magic Hack"
    feature201.addToFeatureOptions([option211, option212, option213, option214, option215, option216, option217, option218, option219, option2110, option511, option512, option513, option514, option515, option516, option517, option811, option812, option813, option814, option815, option816, option1111, option1112, option1113, option1114, option1411, option1412, option1413, option1414])
    feature201.compendiumClassFeature = level20
    let feature202 = Feature(context: context)
    feature202.name = "Fuse Spells (Ex)"
    feature202.content = "You can combine lower-level spell slots to cast higher-level spells. As part of casting a spell, you can spend 1 Resolve Point to exchange a number of unused spell slots for a single spell slot of a higher level; this expends the lower-level spell slots. Add up the levels of the expended slots to determine which higher level of spell you can cast (maximum 6th). For instance, you could exchange three 1st-level slots to cast a 3rd-level spell, or you could exchange two 3rd-level slots to cast a 6th-level spell. If you combine spell slots to cast a 6th-level spell, it doesn’t count as such for resolve attunement.\n\nFurthermore, you can spend 2 Resolve Points to combine two 6th-level spell slots to cast wish."
    feature202.compendiumClassFeature = level20
    Technomancer.addToClassLevel(level20)
    
    
}



//Races  ################################################################################################################

func loadRaces() {
    loadAndroid()
    loadHuman()
    loadKasatha()
    loadLashuntas()
    loadShirren()
    loadVesk()
    loadYsoki()
}

//Android  ################################################################################################################

func loadAndroid() {
    let android = CompendiumRace(context: context)
    android.name = "Android"
    
    let hitPoints = Bonus(context: context)
    hitPoints.type = "Hit Points"
    hitPoints.bonus = 4
    android.addToRacialBonus(hitPoints)
    
    let abilityBonus1 = Bonus(context: context)
    abilityBonus1.type = "Dexterity"
    abilityBonus1.bonus = 2
    android.addToRacialBonus(abilityBonus1)
    
    let abilityBonus2 = Bonus(context: context)
    abilityBonus2.type = "Intelligence"
    abilityBonus2.bonus = 2
    android.addToRacialBonus(abilityBonus2)
    
    let abilityBonus3 = Bonus(context: context)
    abilityBonus3.type = "Charisma"
    abilityBonus3.bonus = -2
    android.addToRacialBonus(abilityBonus3)
    
    let feature1 = Feature(context: context)
    feature1.name = "Size and Type"
    feature1.content = "Androids are Medium humanoids with the android subtype."
    android.addToRacialFeature(feature1)
    
    let feature2 = Feature(context: context)
    feature2.name = "Constructed"
    feature2.content = "For effects targeting creatures by type, androids count as both humanoids and constructs (whichever effect is worse). They receive a +2 racial bonus to saving throws against disease, mind-affecting effects, poison, and sleep, unless those effects specifically target constructs. In addition, androids do not breathe or suffer the normal environmental effects of being in a vacuum."
    android.addToRacialFeature(feature2)
    
    let feature3 = Feature(context: context)
    feature3.name = "Exceptional Vision"
    feature3.content = "Androids have low-light vision and darkvision. As a result, they can see in dim light as if it were normal light, and they can see with no light source at all to a range of 60 feet in black and white only."
    android.addToRacialFeature(feature3)
    
    let feature4 = Feature(context: context)
    feature4.name = "Flat Affect"
    feature4.content = "Androids find emotions confusing and keep them bottled up. They take a –2 penalty to Sense Motive checks, but the DCs of Sense Motive checks attempted against them increase by 2."
    let bonus41 = Bonus(context: context)
    bonus41.type = "sense motive"
    bonus41.bonus = -2
    feature4.addToFeatureBonus(bonus41)
    android.addToRacialFeature(feature4)
    
    let feature5 = Feature(context: context)
    feature5.name = "Upgrade Slot"
    feature5.content = "Androids have a single armor upgrade slot in their bodies. Regardless of whether androids are wearing physical armor, they can use this slot to install any one armor upgrade that could be installed into light armor."
    android.addToRacialFeature(feature5)
}

//Human  ################################################################################################################

func loadHuman() {
    let human = CompendiumRace(context: context)
    human.name = "Human"
    
    let hitPoints = Bonus(context: context)
    hitPoints.type = "Hit Points"
    hitPoints.bonus = 4
    human.addToRacialBonus(hitPoints)
    
    let abilityBonus = Feature(context: context)
    abilityBonus.name = "Ability Bonus"
    abilityBonus.content = "Humans gain a +2 bonus to any one ability at character creation"
    human.addToRacialFeature(abilityBonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Bonus Feat"
    feat1.content = "Humans select one extra feat at 1st level."
    human.addToRacialFeature(feat1)
    
    let feat2 = Feature(context: context)
    feat2.name = "Skilled"
    feat2.content = "Humans gain an additional skill rank at 1st level and each level thereafter."
    let bonus21 = Bonus(context: context)
    bonus21.type = "Skill Ranks Per Level"
    bonus21.bonus = 1
    human.addToRacialFeature(feat2)
    
}

//Kasatha  ################################################################################################################

func loadKasatha() {
    let kasatha = CompendiumRace(context: context)
    kasatha.name = "Kasatha"
    
    let hitpoints = Bonus(context: context)
    hitpoints.type = "Hit Points"
    hitpoints.bonus = 4
    kasatha.addToRacialBonus(hitpoints)
    
    let abilityBonus1 = Bonus(context: context)
    abilityBonus1.type = "Strength"
    abilityBonus1.bonus = 2
    kasatha.addToRacialBonus(abilityBonus1)
    
    let abilityBonus2 = Bonus(context: context)
    abilityBonus2.type = "Wisdom"
    abilityBonus2.bonus = 2
    kasatha.addToRacialBonus(abilityBonus2)
    
    let abilityBonus3 = Bonus(context: context)
    abilityBonus3.type = "Intelligence"
    abilityBonus3.bonus = -2
    kasatha.addToRacialBonus(abilityBonus3)
    
    let feat1 = Feature(context: context)
    feat1.name = "Desert Stride"
    feat1.content = "Kasathas can move through nonmagical difficult terrain in deserts, hills, and mountains at their normal speed."
    kasatha.addToRacialFeature(feat1)
    
    let feat2 = Feature(context: context)
    feat2.name = "Four-Armed"
    feat2.content = "Kasathas have four arms, which allows them to wield and hold up to four hands’ worth of weapons and equipment. While their multiple arms increase the number of items they can have at the ready, it doesn’t increase the number of attacks they can make during combat."
    kasatha.addToRacialFeature(feat2)
    
    let feat3 = Feature(context: context)
    feat3.name = "Historian"
    feat3.content = "Due to their in-depth historical training and the wide-ranging academic background knowledge they possess, kasathas receive a +2 racial bonus to Culture checks."
    let bonus31 = Bonus(context: context)
    bonus31.type = "Culture"
    bonus31.bonus = 2
    feat3.addToFeatureBonus(bonus31)
    kasatha.addToRacialFeature(feat3)
    
    let feat4 = Feature(context: context)
    feat4.name = "Natural Grace"
    feat4.content = "Kasathas receive a +2 racial bonus to Acrobatics and Athletics checks."
    let bonus41 = Bonus(context: context)
    bonus41.type = "Acrobatics"
    bonus41.bonus = 2
    feat4.addToFeatureBonus(bonus41)
    let bonus42 = Bonus(context: context)
    bonus42.type = "Athletics"
    bonus42.bonus = 2
    feat4.addToFeatureBonus(bonus42)
    kasatha.addToRacialFeature(feat4)
    
}

//Lashuntas ################################################################################################################

func loadLashuntas() {
    let lashunta1 = CompendiumRace(context: context)
    lashunta1.name = "Korasha Lashunta"
    
    let HPA = Bonus(context: context)
    HPA.type = "Hit Points"
    HPA.bonus = 4
    lashunta1.addToRacialBonus(HPA)
    
    let abilityA1 = Bonus(context: context)
    abilityA1.type = "Strength"
    abilityA1.bonus = 2
    lashunta1.addToRacialBonus(abilityA1)
    
    let abilityA2 = Bonus(context: context)
    abilityA2.type = "Wisdom"
    abilityA2.bonus = -2
    lashunta1.addToRacialBonus(abilityA2)
    
    ////////////////////////////////////////////////
    let lashunta2 = CompendiumRace(context: context)
    lashunta2.name = "Damaya Lashunta"
    
    let HPB = Bonus(context: context)
    HPB.type = "Hit Points"
    HPB.bonus = 4
    lashunta2.addToRacialBonus(HPB)
    
    let abilityB1 = Bonus(context: context)
    abilityB1.type = "Intelligence"
    abilityB1.bonus = 2
    lashunta2.addToRacialBonus(abilityB1)
    
    let abilityB2 = Bonus(context: context)
    abilityB2.type = "Constitution"
    abilityB2.bonus = -2
    lashunta2.addToRacialBonus(abilityB2)
    
    ////////////////////////////////////////////////
    let abilityA3 = Bonus(context: context)
    let abilityB3 = Bonus(context: context)
    abilityA3.type = "Charisma"
    abilityB3.type = "Charisma"
    abilityA3.bonus = 2
    abilityB3.bonus = 2
    lashunta1.addToRacialBonus(abilityA3)
    lashunta2.addToRacialBonus(abilityB3)
    
    let feat1A = Feature(context: context)
    feat1A.name = "Lashunta Magic"
    feat1A.content = "Lashuntas gain the following Spell-Like abilities:\nAt will: daze, psychokinetic hand\n1/day: detect thoughts\nThe caster level for these effects is equal to the lashunta’s level."
    let feat1B = Feature(context: context)
    feat1B.name = feat1A.name
    feat1B.content = feat1A.content
    lashunta1.addToRacialFeature(feat1A)
    lashunta2.addToRacialFeature(feat1B)
    
    let feat2A = Feature(context: context)
    feat2A.name = "Limited Telepathy"
    feat2A.content = "Lashuntas can mentally communicate with any creatures within 30 feet with whom they share a language. Conversing telepathically with multiple creatures simultaneously is just as difficult as listening to multiple people speaking."
    let feat2B = Feature(context: context)
    feat2B.name = feat2A.name
    feat2B.content = feat2A.content
    lashunta1.addToRacialFeature(feat2A)
    lashunta2.addToRacialFeature(feat2B)
    
    let feat3A = Feature(context: context)
    feat3A.name = "Student"
    feat3A.content = "Lashuntas love to learn, and they receive a +2 racial bonus to any two skills of their choice."
    let feat3B = Feature(context: context)
    feat3B.name = feat3A.name
    feat3B.content = feat3A.content
    lashunta1.addToRacialFeature(feat3A)
    lashunta2.addToRacialFeature(feat3B)
    
}


//Shirren ################################################################################################################

func loadShirren() {
    let shirren =  CompendiumRace(context: context)
    shirren.name = "Shirren"
    
    let hitPoints = Bonus(context: context)
    hitPoints.type = "Hit Points"
    hitPoints.bonus = 6
    shirren.addToRacialBonus(hitPoints)
    
    let abilityBonus1 = Bonus(context: context)
    abilityBonus1.type = "Constitution"
    abilityBonus1.bonus = 2
    shirren.addToRacialBonus(abilityBonus1)
    
    let abilityBonus2 = Bonus(context: context)
    abilityBonus2.type = "Wisdom"
    abilityBonus2.bonus = 2
    shirren.addToRacialBonus(abilityBonus2)
    
    let abilityBonus3 = Bonus(context: context)
    abilityBonus3.type = "Charisma"
    abilityBonus3.bonus = -2
    shirren.addToRacialBonus(abilityBonus3)
    
    let feat0 = Feature(context: context)
    feat0.name = "Size and Type"
    feat0.content = "Shirrens are Medium humanoids with the shirren subtype."
    shirren.addToRacialFeature(feat0)
    
    let feat1 = Feature(context: context)
    feat1.name = "Blindsense"
    feat1.content = "Shirrens’ sensitive antennae grant them blindsense (vibration)—the ability to sense vibrations in the air—out to 30 feet. A shirren ignores the Stealth bonuses from any form of visual camouflage, invisibility, and the like when attempting a Perception check opposed by a creature’s Stealth check. Even on a successful Perception check, any foe that can’t be seen still has total concealment (50% miss chance) against a shirren, and the shirren still has the normal miss chance when attacking foes that have concealment. A shirren is still flat-footed against attacks from creatures it can’t see."
    shirren.addToRacialFeature(feat1)
    
    let feat2 = Feature(context: context)
    feat2.name = "Communalism"
    feat2.content = "Shirrens are used to working with others as part of a team. Once per day, as long as an ally is within 10 feet, a shirren can roll a single attack roll or skill check twice and take the higher result."
    shirren.addToRacialFeature(feat2)
    
    let feat3 = Feature(context: context)
    feat3.name = "Cultural Fascination"
    feat3.content = "Shirrens are eager to learn about new cultures and societies. Shirrens receive a +2 racial bonus to Culture and Diplomacy checks."
    let bonus31 = Bonus(context: context)
    bonus31.type = "Culture"
    bonus31.bonus = 2
    feat3.addToFeatureBonus(bonus31)
    let bonus32 = Bonus(context: context)
    bonus32.type = "Diplomacy"
    bonus32.bonus = 2
    feat3.addToFeatureBonus(bonus32)
    shirren.addToRacialFeature(feat3)
    
    let feat4 = Feature(context: context)
    feat4.name = "Limited Telepathy"
    feat4.content = "Shirrens can communicate telepathically with any creatures within 30 feet with whom they share a language. Conversing telepathically with multiple creatures simultaneously is just as difficult as listening to multiple people speak."
    shirren.addToRacialFeature(feat4)
}

//Vesk ################################################################################################################

func loadVesk() {
    let Vesk = CompendiumRace(context: context)
    Vesk.name = "Vesk"
    
    let hitPoints = Bonus(context: context)
    hitPoints.type = "Hit Points"
    hitPoints.bonus = 6
    Vesk.addToRacialBonus(hitPoints)
    
    let abilityBonus1 = Bonus(context: context)
    abilityBonus1.type = "Constitution"
    abilityBonus1.bonus = 2
    Vesk.addToRacialBonus(abilityBonus1)
    
    let abilityBonus2 = Bonus(context: context)
    abilityBonus2.type = "Strength"
    abilityBonus2.bonus = 2
    Vesk.addToRacialBonus(abilityBonus2)
    
    let abilityBonus3 = Bonus(context: context)
    abilityBonus3.type = "Intelligence"
    abilityBonus3.bonus = -2
    Vesk.addToRacialBonus(abilityBonus3)
    
    let feat0 = Feature(context: context)
    feat0.name = "Size and Type"
    feat0.content = "Vesk are Medium humanoids with the vesk subtype."
    Vesk.addToRacialFeature(feat0)
    
    let feat1 = Feature(context: context)
    feat1.name = "Armor Savant"
    feat1.content = "Vesk use armor in a way that complements their uniquely sturdy physiology. When wearing armor, they gain a +1 racial bonus to AC. When they’re wearing heavy armor, their armor check penalty is 1 less severe than normal."
    Vesk.addToRacialFeature(feat1)
    
    let feat2 = Feature(context: context)
    feat2.name = "Fearless"
    feat2.content = "Vesk receive a +2 racial bonus to saving throws against fear effects."
    Vesk.addToRacialFeature(feat2)
    
    let feat3 = Feature(context: context)
    feat3.name = "Low-Light Vision"
    feat3.content = "Vesk can see in dim light as if it were normal light."
    Vesk.addToRacialFeature(feat3)
    
    let feat4 = Feature(context: context)
    feat4.name = "Natural Weapons"
    feat4.content = "Vesk are always considered armed. They can deal 1d3 lethal damage with unarmed strikes and the attack doesn’t count as archaic. Vesk gain a unique weapon specialization with their natural weapons at 3rd level, allowing them to add 1–1/2 × their character level to their damage rolls for their natural weapons (instead of just adding their character level, as usual)."
    Vesk.addToRacialFeature(feat4)
}

//Ysoki ################################################################################################################

func loadYsoki() {
    let Ysoki = CompendiumRace(context: context)
    Ysoki.name = "Ysoki"
    
    let hitPoints = Bonus(context: context)
    hitPoints.type = "Hit Points"
    hitPoints.bonus = 2
    Ysoki.addToRacialBonus(hitPoints)
    
    let abilityBonus1 = Bonus(context: context)
    abilityBonus1.type = "Dexterity"
    abilityBonus1.bonus = 2
    Ysoki.addToRacialBonus(abilityBonus1)
    
    let abilityBonus2 = Bonus(context: context)
    abilityBonus2.type = "Intelligence"
    abilityBonus2.bonus = 2
    Ysoki.addToRacialBonus(abilityBonus2)
    
    let abilityBonus3 = Bonus(context: context)
    abilityBonus3.type = "Strength"
    abilityBonus3.bonus = -2
    Ysoki.addToRacialBonus(abilityBonus3)
    
    let feat0 = Feature(context: context)
    feat0.name = "Size and Type"
    feat0.content = "Ysoki are Small humanoids with the ysoki subtype."
    Ysoki.addToRacialFeature(feat0)
    
    let feat1 = Feature(context: context)
    feat1.name = "Cheek Pouches"
    feat1.content = "Ysoki can store up to 1 cubic foot of items weighing up to 1 bulk in total in their cheek pouches, and they can transfer a single object between hand and cheek as a swift action. A ysoki can disgorge the entire contents of his pouch onto the ground in his square as a move action that does not provoke an attack of opportunity."
    Ysoki.addToRacialFeature(feat1)
    
    let feat2 = Feature(context: context)
    feat2.name = "Darkvision"
    feat2.content = "Ysoki can see up to 60 feet in the dark."
    Ysoki.addToRacialFeature(feat2)
    
    let feat3 = Feature(context: context)
    feat3.name = "Moxie"
    feat3.content = "Ysoki are scrappy and nimble even when the odds are against them. A ysoki can stand from prone as a swift action. Additionally, when off-kilter, a ysoki does not take the normal penalties to attacks or gain the flat-footed condition. When attempting an Acrobatics check to tumble through the space of an opponent at least one size category larger than himself, a ysoki receive a +5 racial bonus to the check."
    Ysoki.addToRacialFeature(feat3)
    
    let feat4 = Feature(context: context)
    feat4.name = "Scrounger"
    feat4.content = "Ysoki receive a +2 racial bonus to Engineering, Stealth, and Survival checks."
    let bonus1 = Bonus(context: context)
    bonus1.type = "Engineering"
    bonus1.bonus = 2
    feat4.addToFeatureBonus(bonus1)
    let bonus2 = Bonus(context: context)
    bonus2.type = "Stealth"
    bonus2.bonus = 2
    feat4.addToFeatureBonus(bonus2)
    let bonus3 = Bonus(context: context)
    bonus3.type = "Survival"
    bonus3.bonus = 2
    feat4.addToFeatureBonus(bonus3)
    Ysoki.addToRacialFeature(feat4)
}




//Themes  ################################################################################################################

func loadThemes() {
    loadAcePilot()
    loadBiotechnician()
    loadBountyHunter()
    loadCorporateAgent()
    loadCultist()
    loadCyberborn()
    loadDeathTouched()
    loadDragonblood()
    loadDreamProphet()
    loadFormlessEmissary()
    loadGladiator()
    loadIcon()
    loadMercenary()
    loadOutlaw()
    loadPriest()
    loadRoboticist()
    loadScholar()
    loadShipbuilder()
    loadSolarDisciple()
    loadSpacefarer()
    loadSpacePirate()
    loadTemperedPilgrim()
    loadWildWarden()
    loadXenoseeker()
    loadXenoarchaeologist()
    loadThemeless()
}

//Ace Pilot ################################################################################################################
func loadAcePilot() {
    let acePilot = CompendiumTheme(context: context)
    acePilot.name = "Ace Pilot"
    
    let bonus = Bonus(context: context)
    bonus.type = "Dexterity"
    bonus.bonus = 1
    acePilot.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You are obsessed with starships and vehicles, and have committed to memory almost every related tidbit of knowledge you’ve ever come across. Reduce the DC of Culture checks to recall knowledge about starship and vehicle Models and parts as well as famous hotshot pilots by 5. Piloting is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to your Piloting checks. In addition, you gain an ability adjustment of +1 to Dexterity at character creation."
    acePilot.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Lone Wolf (6th Level)"
    feat6.content = "You know at least a little bit about handling every role on a starship, and you can sub in for certain tasks in a pinch. Whenever you need to attempt a skill check either during starship combat or to directly repair or otherwise maintain your starship, you can treat half your ranks in Piloting as your ranks in the appropriate skill for the check, if that would be better (since you effectively have ranks in the related skill, you are considered trained in the skill for the purposes of this check)."
    acePilot.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Need For Speed (12th Level)"
    feat12.content = "Speeding in a vehicle gives you a heady rush, and you can easily handle operating vehicles at high velocities that might send lesser pilots spinning out of control. Reduce any penalties to Piloting checks you make when on a vehicle by 1. When you take the double maneuver action during a vehicle chase, reduce the penalty for each action by 1. Whenever a Piloting check has a penalty for failing by 5 or more, you take that penalty only if you fail by 10 or more."
    acePilot.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Master Pilot (18th Level)"
    feat18.content = "Your piloting accomplishments invigorate you, giving you renewed purpose and zeal. Up to twice per day, when you defeat a significant foe in starship combat as a pilot or succeed in a vehicle chase (meaning that you’ve either escaped a pursuer or caught or defeated your opponent), you recover 1 Resolve Point."
    acePilot.addToThemeFeatures(feat18)
}

//Biotechnician ################################################################################################################
func loadBiotechnician() {
    let Biotechnician = CompendiumTheme(context: context)
    Biotechnician.name = "Biotechnician"
    
    let bonus = Bonus(context: context)
    bonus.type = "Intelligence"
    bonus.bonus = 1
    Biotechnician.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You have a sharp mind for the intricacies of biotech augmentations and keep up-to-date on current research in the field, whether because you work to develop such technology or because you are the beneficiary of biotech augmentations — or, most likely, both. Reduce the DC of Life Science checks to identify biotech augmentations and to recall knowledge about famous biotech corporations and researchers by 5. Medicine is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to your Medicine checks. In addition, you gain an ability adjustment of +1 to Intelligence at character creation."
    Biotechnician.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Industry Connections (6th Level)"
    feat6.content = "You’ve forged and maintained a number of connections with significant players in the biotech industry, scoring yourself favors and preferred treatment. As long as you are able to contact your connections in the industry, you gain a 10% discount off the typical list price for biotech augmentations installed in you."
    Biotechnician.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Test Subject (12th Level)"
    feat12.content = "Thanks to your enthusiasm for biotech gear and constant tinkering with your DNA, you can adopt experimental, cutting-edge augmentations in your body beyond what most people can support. You can install one additional piece of biotech augmentation than a typical member of your race. For example, a human could have both a dragon gland and a wildwise implant even though they both occupy the throat system."
    Biotechnician.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Adaptive Biotech (18th Level)"
    feat18.content = "You have learned to leverage your biotech augmentations in ways their creators hardly envisioned. Up to twice per day as a standard action, you can deactivate a piece of biotech implanted in your body (except for a prosthetic limb), rendering it inert until your next 8-hour rest, to regain 1 Resolve Point. An inert piece of biotech doesn’t grant its usual benefits (for instance, an inert venom spur can’t be used to attack), and you can shut down a single biotech implant only once per day."
    Biotechnician.addToThemeFeatures(feat18)

}

//Bounty Hunter ################################################################################################################
func loadBountyHunter() {
    let bountyHunter = CompendiumTheme(context: context)
    bountyHunter.name = "Bounty Hunter"
    
    let bonus = Bonus(context: context)
    bonus.type = "Constitution"
    bonus.bonus = 1
    bountyHunter.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "Your mind is a cold steel trap when it comes to scraps of information about the creatures you’re tracking down. Choose a specific sentient creature that you can identify by name, alias, or specific identity to be your mark. Reduce the DC of Culture or Profession (bounty hunter) checks to recall knowledge about your mark, as well as to recall knowledge about law-enforcement individuals and practices, by 5. If you choose a mark that is known only by an alias or secret identity, this ability helps you learn facts only about the identity you know about, not any other unknown identities. Once you defeat your mark, as an action that takes 1 minute, you can study dossiers and database information about another individual to be your new mark. You can instead abandon your mark for a new one without defeating it, but if you do so, you take a –2 penalty to all skill checks for 1 week. Survival is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Survival checks. In addition, you gain an ability adjustment of +1 to Constitution at character creation."
    bountyHunter.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Swift Hunter (6th Level)"
    feat6.content = "You know just how to ask around about your marks to gain information and insight in a hurry. You can use Diplomacy to gather information about a specific individual in half the normal time, and you reduce the penalty for following tracks using Survival while moving at full speed to 0."
    bountyHunter.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Relentless (12th Level)"
    feat12.content = "You never seem to get tired, even when working longer and harder than everyone else in pursuit of your mark; some of your targets might even refer to you as a tireless ghost or an all-seeing hunter. You can walk or be otherwise active for 12 hours instead of 8 before needing to attempt Constitution checks for a forced march, and you can hustle for 2 hours a day during overland travel instead of 1 hour. Reduce the penalty for following tracks using Survival while moving at double speed to –10."
    bountyHunter.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Master Hunter (18th Level)"
    feat18.content = "Your relentless pursuit of your mark steels your determination and can renew your inner reserves of strength. Once per day while in pursuit of your mark, you can review current information about your mark for 10 minutes to regain 1 Resolve Point; this doesn’t count as resting to regain Stamina Points. Additionally, once per day when you defeat your mark, you regain 1 Resolve Point."
    bountyHunter.addToThemeFeatures(feat18)
    
}

//Corporate Agent ################################################################################################################
func loadCorporateAgent() {
    let CorporateAgent = CompendiumTheme(context: context)
    CorporateAgent.name = "Corporate Agent"
    
    let bonus = Bonus(context: context)
    bonus.type = "Charisma"
    bonus.bonus = 1
    CorporateAgent.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You are deeply connected to the world of corporate culture, and know all the movers and shakers. When attempting a Profession or Culture check to recall knowledge about corporations and their executives, reduce the DC by 5. Diplomacy is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Diplomacy checks. In addition, you gain an ability adjustment of +1 to Charisma at character creation."
    CorporateAgent.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Networking (6th Level)"
    feat6.content = "If your corporate database doesn’t have a piece of information you are searching for, you probably know someone who does. It takes you only 10 minutes to attempt a Diplomacy check to gather information, as long as you have connection to a local infosphere or a quick way to communicate with contacts in a settlement that is at least technologically average. Additionally if you have access to a local infosphere, you can take 20 on a skill check to recall knowledge in half the normal time (typically 1 minute)."
    CorporateAgent.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Strong-Arm Tactics (12th Level)"
    feat12.content = "When you throw the name of your company around, you can usually get what you want, though acting in such a way never wins you any friends. When you successfully use Intimidate to bully a creature, its change in attitude lasts three times as long. At the GM’s discretion, this ability might not work on creatures that haven’t heard of your corporation."
    CorporateAgent.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Seal the Deal (18th Level)"
    feat18.content = "Nothing is more thrilling to you than engaging in spirited discussion to pursue your employer’s interests. It is why you were hired, and it’s why you venture out into the wider cosmos. Up to twice per day, after you spend at least 10 minutes bargaining and negotiating (this doesn’t count as resting to regain Stamina Points) or using an infosphere to research details relevant to a deal that is significantly advantageous to your company, you regain 1 Resolve Point."
    CorporateAgent.addToThemeFeatures(feat18)
}

//Cultist ################################################################################################################
func loadCultist() {
    let Cultist = CompendiumTheme(context: context)
    Cultist.name = "Cultist"
    
    let bonus = Bonus(context: context)
    bonus.type = "Constitution"
    bonus.bonus = 1
    Cultist.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You cataloged the symbols, members, and indoctrination techniques of the cult you joined, and you can generalize these to hidden cults of any kind. Reduce the DC of Culture and Mysticism checks to recall knowledge about hidden cults and secretive religions, including knowledge about their beliefs, hierarchy, and symbols, by 5. Reduce the DC of Diplomacy checks to gather information about hidden cults and their enigmatic members (usually considered obscure or secret knowledge or mysterious or obscure individuals) by 5. Disguise is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Disguise checks. In addition, you gain an ability adjustment of +1 to Constitution at character creation."
    Cultist.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Cult Infiltrator (6th Level)"
    feat6.content = "Once you have discovered a hidden cult, you can quickly learn to slip into the mindset of its members and pretend to be one of them. If you spend 10 minutes conversing with a member of a hidden cult and succeed at a DC 25 Culture check, typical followers of that cult have a starting attitude of indifferent toward you. You also gain a +2 bonus to Bluff, Diplomacy, and Intimidate checks against such followers."
    Cultist.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Exceptional Endurance (12th Level)"
    feat12.content = "Your exposure to drugs and poisons during your time with the cult has left you inured to their effects. Once per day, you can re-roll a Fortitude saving throw to resist the effects of a disease, drug, or poison. You must decide to use this ability after rolling but before learning the outcome of your first roll."
    Cultist.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Memories of Devotion (18th Level)"
    feat18.content = "Reflecting on your experience within or against the galaxy’s cults provides you with inner reserves of strength. Up to twice per day, you can deliberate about your time as a cultist—either by speaking to another person or by recording private audio logs—for 10 minutes recover 1 Resolve Point; this doesn’t count as resting to regain Stamina Points."
    Cultist.addToThemeFeatures(feat18)
}

//Cyberborn ################################################################################################################
func loadCyberborn() {
    let Cyberborn = CompendiumTheme(context: context)
    Cyberborn.name = "Cyberborn"
    
    let bonus = Bonus(context: context)
    bonus.type = "Intelligence"
    bonus.bonus = 1
    Cyberborn.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You enthusiastically study the field of cybernetics and seek to keep abreast of new applications and experimental technologies. Reduce the DCs of Engineering checks to identify cybernetic augmentations and of Life Science checks to recall knowledge about cybernetic augmentation techniques, as well as corporations and other research facilities involved in the production of and experimentation with cybernetic augmentations, by 5. Computers is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Computers checks. In addition, you gain an ability adjustment of +1 to Intelligence at character creation."
    Cyberborn.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Self-Hacker (6th Level)"
    feat6.content = "Your constant experimentation has blurred the lines between your body and your augmentations. Once per day as a full action, you can overclock one of your cybernetic augmentations to regain a number of Stamina Points equal to the augmentation’s item level; you must have a cybernetic augmentation installed in your body to use this ability."
    Cyberborn.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Hardened Systems (12th Level)"
    feat12.content = "You understand the potential vulnerabilities of cybernetics and have tinkered extensively with your own to make them more resilient. The DC to hack your cybernetic augmentations via magic or technological means increases by 5, thanks to the devious security countermeasures you have added to them. Additionally, your cybernetic augmentations grant you electricity resistance 5; this resistance stacks with one other source of energy resistance."
    Cyberborn.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Master Modder (18th Level)"
    feat18.content = "You feel energized whenever you demonstrate the improved capabilities of your cybernetically enhanced body. Up to twice per day, when you have succeeded at a significant task in a way that crucially relied upon abilities granted by your cybernetics (GM’s discretion), you can spend 10 minutes testing and performing system maintenance on those augmentations to regain 1 Resolve Point; this doesn’t count as resting to regain Stamina Points."
    Cyberborn.addToThemeFeatures(feat18)
}

//Death-Touched ################################################################################################################
func loadDeathTouched() {
    let DeathTouched = CompendiumTheme(context: context)
    DeathTouched.name = "Death-Touched"
    
    let bonus = Bonus(context: context)
    bonus.type = "Constitution"
    bonus.bonus = 1
    DeathTouched.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "Thanks to your experiences with the undead and the growing power of the grave within your form, you have an instinctive understanding and recognition of negative energy and undead. You can use Perception, rather than Mysticism, to recall knowledge about undead and negative energy effects when you first observe them. Perception is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Perception checks. In addition, you gain an ability adjustment of +1 to Constitution at character creation."
    DeathTouched.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Dread Vitality (6th Level)"
    feat6.content = "You draw dark strength from the spark of negative energy within you, and you gain a fraction of the resistances that undead creatures have. You gain a +1 bonus to saving throws against disease, exhaustion, fatigue, mind-affecting effects, paralysis, poison, sleep effects, and stunning."
    DeathTouched.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Inured to the Grave (12th Level)"
    feat12.content = "Your body, always somewhat cool to the touch despite how much warm clothing you wear, becomes resistant even to extreme cold. You gain cold resistance equal to your level. If you already have greater cold resistance from some other source,  that cold resistance instead increases by an amount equal to half your level."
    DeathTouched.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Life Eater (18th Level)"
    feat18.content = "If you are close to a sapient creature when its life is snuffed out, you can draw part of the released energy into your deathinfused body, fueling your vitality. The first time each day when a living creature with an Intelligence score of 3 or more dies within 10 feet of you, you regain 1 Resolve Point. You need not be the one to deal the killing blow. Additionally, anytime you are unconscious and a living creature with an Intelligence score of 3 or more dies in a space adjacent to you, as a reaction you can spend the appropriate number of Resolve Points to stabilize or, if you are already stable, you can spend 1 Resolve Point to stay in the fight."
    DeathTouched.addToThemeFeatures(feat18)
}

//Dragonblood ################################################################################################################
func loadDragonblood() {
    let Dragonblood = CompendiumTheme(context: context)
    Dragonblood.name = "Dragonblood"
    
    let bonus = Bonus(context: context)
    bonus.type = "Charisma"
    bonus.bonus = 1
    Dragonblood.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You have a voracious appetite for lore about dragons and never forget a detail, whether it’s about draconic culture, traditions, and abilities, or the personal information of the system’s oldest dragons. When you attempt a Culture or Mysticism check to recall knowledge about dragons’ ways, their abilities, or the names and general personal details about dragons that are adults or older, reduce the DC by 5. Culture is a class skill for you, but if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Culture checks. In addition, you gain an ability adjustment of +1 to Charisma at character creation."
    Dragonblood.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Dragon Mien (6th Level)"
    feat6.content = "You can harness the terrifying reputation of dragons to strike fear into the hearts of those you oppose. You’ve read or seen so much of dragons’ tactics that you can mimic them with surprising accuracy and effectiveness. When you successfully use Intimidate to bully a creature, its change in attitude lasts for an additional 10 minutes. When you successfully use Intimidate to demoralize an opponent, it is shaken for 1 additional round."
    Dragonblood.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Dragon Skin (12th Level)"
    feat12.content = "You have conditioned your skin to withstand the inherent power that dragons hold inside them, and you are more inured to elemental damage as a result. The first time each day you would take energy damage, you gain energy resistance 5 against that type of damage for that attack and for 1 hour afterward or until you rest to regain Stamina Points, whichever comes first. This energy resistance stacks with only one other type of energy resistance you have from another source."
    Dragonblood.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Dragon Hoard (18th Level)"
    feat18.content = "You have a deep understanding of dragons’ motivations, natural prowess, and ancient cultures, and you have taken on a dragon’s love of material possessions. Up to twice per day, you can spend 10 minutes cataloging and examining your wealth — such as inquiring into your bank account or polishing your most expensive weapon—to recover 1 Resolve Point; this doesn’t count as resting to regain Stamina Points."
    Dragonblood.addToThemeFeatures(feat18)
}

//DreamProphet ################################################################################################################
func loadDreamProphet() {
    let DreamProphet = CompendiumTheme(context: context)
    DreamProphet.name = "Dream Prophet"
    
    let bonus = Bonus(context: context)
    bonus.type = "Wisdom"
    bonus.bonus = 1
    DreamProphet.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "Your perceptions of the psychic energies permeating reality provide you insight into various magical and mystical phenomena, especially those produced by creatures that can cast spells. Reduce the DCs of Mysticism checks to identify spells as they are being cast and to recall knowledge about arcane symbols and magic traditions by 5. Mysticism is always a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Mysticism checks. In addition, you gain an ability adjustment of +1 to Wisdom at character creation."
    DreamProphet.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Flash of Prescience (6th Level)"
    feat6.content = "When you fully open yourself to the psychic resonance around you, especially in the split second when your life is on the line, time seems to come to a halt. In these fleeting moments, you can sense the reverberations of actions that you have not yet taken, and guide your course accordingly. Once per day as a standard action, you can cast augury as a spell-like ability, though you can see only 1 minute into the future. This functions in all other ways as augury."
    DreamProphet.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Dreams of the Future(12th Level)"
    feat12.content = "Your dreams often contain vague visions of your immediate future, and they allow you to gain a bit of an edge in certain situations when these dreams rush to the forefront of your consciousness without warning. Each day after you wake from an 8-hour rest, choose ability checks, saving throws, or skill checks; twice per day, you can re-roll a roll of the type you chose for that day."
    DreamProphet.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Reverie (18th Level)"
    feat18.content = "Up to twice per day after using your dreams of the future ability, if your re-roll is unsuccessful, you can spend some time reflecting on the fleeting and sometimes unreliable nature of dreams and prophecy. You can spend 10 minutes in deep meditation on this topic to regain 1 Resolve Point; this doesn’t count as resting to regain Stamina Points."
    DreamProphet.addToThemeFeatures(feat18)
}

//FormlessEmissary ################################################################################################################
func loadFormlessEmissary() {
    let FormlessEmissary = CompendiumTheme(context: context)
    FormlessEmissary.name = "Formless Emissary (Abiarazi)"
    
    let bonus = Bonus(context: context)
    bonus.type = "Charisma"
    bonus.bonus = 1
    FormlessEmissary.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You gain a +1 trait bonus to Disguise checks to pass for any other humanoid race. Disguise also becomes a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 on Disguise checks. In addition, you gain a +1 bonus to your Charisma score."
    FormlessEmissary.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Integration (6th Level)"
    feat6.content = "You’ve spent your entire life among other species, learning to adapt to any culture. When making a Culture check to recall knowledge of another species in order to appear as a member of that species, you may roll the check twice and take the better result."
    FormlessEmissary.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Intervention (12th Level)"
    feat12.content = "You’re adept at saving face in complex social situations, even if your allies are less than diplomatic. Once per day, if an ally within 30 feet would fail a Bluff or Diplomacy check, as a reaction you may roll the same check using your bonuses and substitute that result for your ally’s, as if she had rolled the higher result."
    FormlessEmissary.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Formless Master(18th Level)"
    feat18.content = "You’re so convincing that sometimes you convince yourself. Once per day, when you succeed at a Disguise check, regain 1 Resolve Point."
    FormlessEmissary.addToThemeFeatures(feat18)
}

//Gladiator ################################################################################################################
func loadGladiator() {
    let Gladiator = CompendiumTheme(context: context)
    Gladiator.name = "Gladiator"
    
    let bonus = Bonus(context: context)
    bonus.type = "Constitution"
    bonus.bonus = 1
    Gladiator.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "Your experience in the arenas has exposed you to countless warrior cultures, and you both recognize strange martial arts and know how to impress others with your own unique style. Reduce the DC of Culture checks to recall knowledge about entertainment combat, fighting styles, and gladiatorial traditions by 5. Intimidate is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Intimidate checks. In addition, you gain an ability adjustment of +1 to Constitution at character creation."
    Gladiator.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Famous Fighter (6th Level)"
    feat6.content = "You have developed a considerable fandom that loves you for your arena prowess. You’re famous enough that others require only a DC 15 Culture check to recognize your name and a DC 25 Culture check to recognize you out of context from your appearance alone. Because you’re famous for your brutal stage presence, you can spend twice the normal amount of time when using Intimidate to bully a creature whose attitude is indifferent or better. If you do and succeed at the check, when the effect wears off, the creature’s attitude toward you is worsened only to indifferent, not unfriendly. At the GM’s discretion, a die-hard fan’s attitude might be worsened to friendly instead, or you might be able to use this ability against an unfriendly target."
    Gladiator.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Part of the Outfit (12th Level)"
    feat12.content = "Your name is synonymous with your gladiatorial persona and outfit. As long as your gear is in good condition, you don’t take any circumstantial penalties for wearing light armor or heavy armor in social situations (such as wearing golemforged plate to a formal event). You can use Intimidate or Profession (gladiator; Charisma) to “hide” up to two smaller weapons (such as a small arm or one-handed melee weapon with light bulk) or one larger melee weapon on your body, though you do not conceal the weapon so much as convince others to accept your carrying it without any objections. You can draw these weapons as normal; you do not need to spend a standard action as you would to draw a hidden weapon. Otherwise, this functions as the hide object task of Sleight of Hand. At the GM’s discretion, areas with especially high security may not allow you to carry weapons at all, no matter your reputation."
    Gladiator.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Crowd Favorite (18th Level)"
    feat18.content = "The first time each day you deal the finishing blow (reduce a creature to 0 Hit Points) to a significant enemy in front of an audience (consisting of at least one bystander or ticket-holding fan, but not another enemy), you regain 1 Resolve Point. If the audience contains 20 or more creatures, you instead regain 2 Resolve Points."
    Gladiator.addToThemeFeatures(feat18)
}

//Icon ################################################################################################################
func loadIcon() {
    let Icon = CompendiumTheme(context: context)
    Icon.name = "Icon"
    
    let bonus = Bonus(context: context)
    bonus.type = "Charisma"
    bonus.bonus = 1
    Icon.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "Choose a Profession skill. You are hooked deeply into the culture of your iconic profession. When attempting a Profession or Culture check to recall knowledge about other icons of your profession or details about your profession’s cultural aspects, increase the DC by 5. You gain a +1 bonus to checks with your chosen Profession skill. Culture also becomes a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Culture checks. In addition, you gain an ability adjustment of +1 to Charisma at character creation."
    Icon.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Celebrity (6th Level)"
    feat6.content = "You are famous enough that pretty much everyone has either heard of you or can quickly find information about you (it’s a DC 10 Culture check to recognize your name and a DC 20 Culture check for someone to recognize you out of context from your appearance alone). Among those who follow your iconic profession, you’ve built up both fans and detractors due to your celebrity. If you’re looking for a generic person like “a doctor who can treat this disease,” you can almost always find one who’s a fan and whose attitude starts as friendly or helpful to you; this takes 2d4 hours. At the GM’s discretion, fans might give you services (although not goods) for a discount or even for free."
    Icon.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Megacelebrity (12th Level)"
    feat12.content = "Your reputation grows to the point that your name is ubiquitous. The DC of Culture checks to recognize you is reduced to 5 (or 10 to recognize you out of context from your appearance alone) and it takes only 1d4 hours to find a fan who meets a generic description. In addition, fans give you a 10% discount on purchased goods."
    Icon.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Master Icon (18th Level)"
    feat18.content = "Up to twice per day, you can interact with the public about your profession (usually during a performance, such as a concert, but sometimes in a press conference afterward if your profession requires no audience) for a total of at least 10 minutes to recover 1 Resolve Point."
    Icon.addToThemeFeatures(feat18)
}

//Mercenary ################################################################################################################
func loadMercenary() {
    let Mercenary = CompendiumTheme(context: context)
    Mercenary.name = "Mercenary"
    
    let bonus = Bonus(context: context)
    bonus.type = "Strength"
    bonus.bonus = 1
    Mercenary.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You are knowledgeable about the military, from rival mercenary groups to standard military procedures to planetary armed forces, and you can draw upon this fount of information to aid your adventurous pursuits. Reduce the DC of Culture checks and Profession (mercenary) checks to recall knowledge about hierarchies, practices, personnel, and so on in the military by 5. Athletics is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Athletics checks. In addition, you gain an ability adjustment of +1 to Strength at character creation."
    Mercenary.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Grunt (6th Level)"
    feat6.content = "You’re used to long marches while carrying heavy equipment and can hoist most machinery with ease. Treat your Strength as 1 higher for the purpose of determining your bulk limit."
    Mercenary.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Squad Leader (12th Level)"
    feat12.content = "You are extremely skilled at coordinating with your squad, both because of your Tactical efficiency and because of the respect that you command. If you are able to attempt the check in question, you automatically succeed at a skill check to aid another when assisting a squad member or other longtime ally (such as a fellow PC)."
    Mercenary.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Commander (18th Level)"
    feat18.content = "You pull determination from your victories with your squad, no matter how bloody. After participating in at least three combats in a day in which you defeat distinct groups of significant foes, you recover 1 Resolve Point. After participating in six such combats in a day, you recover a second Resolve Point."
    Mercenary.addToThemeFeatures(feat18)
}

//Outlaw ################################################################################################################
func loadOutlaw() {
    let Outlaw = CompendiumTheme(context: context)
    Outlaw.name = "Outlaw"
    
    let bonus = Bonus(context: context)
    bonus.type = "Dexterity"
    bonus.bonus = 1
    Outlaw.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You are well connected to shadowy secrets and back-alley deals, and you both know about key players and have handy skills of your own. Reduce the DC of Culture checks to recall knowledge about the criminal underworld by 5. Sleight of Hand is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Sleight of Hand checks. In addition, you gain an ability adjustment of +1 to Dexterity at character creation."
    Outlaw.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Legal Corruption (6th Level)"
    feat6.content = "Your underworld contacts have serious pull with the corporations and the authorities and can get you out of just about any legal trouble—as long as you’re willing to pay the right price. Depending on the severity of the crime, this can be anywhere between 500 credits × your character level and 10,000 credits × your character level."
    Outlaw.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Black Market Connections (12th Level)"
    feat12.content = "You have contacts who can move goods of all manner discreetly and quietly just about anywhere to nearly any destination you can imagine. You can sell goods in any city for their usual price, even if the goods are illegal or too luxurious for the locals to afford. Additionally, for 10% more than the usual price, you can purchase goods to be delivered to a remote drop-off point (possibly near an adventure location) in the same Solar system as a familiar city. The delivery always takes at least as long as the journey between the city and the drop-off point—and usually longer."
    Outlaw.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Master Outlaw (18th Level)"
    feat18.content = "Organizing shady plans is one of your specialties, and doing so is like a sweet shot of adrenaline. Up to twice per day, after you spend at least 10 minutes to plan a significant heist, caper, or other crime (this doesn’t count as resting to regain Stamina Points) and successfully complete at least one action toward enacting that plan, you regain 1 Resolve Point."
    Outlaw.addToThemeFeatures(feat18)
}

//Priest ################################################################################################################
func loadPriest() {
    let Priest = CompendiumTheme(context: context)
    Priest.name = "Priest"
    
    let bonus = Bonus(context: context)
    bonus.type = "Wisdom"
    bonus.bonus = 1
    Priest.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "Choose a deity or a philosophy whose alignment is within one step (on either the good-evil axis or the law-chaos axis) of your own. Reduce the DC of Culture and Mysticism checks to recall knowledge about religious traditions, religious symbols, and famous religious leaders by 5. Mysticism becomes a class skill for you, though if it’s a class skill from the class you take at 1st level, you instead gain a +1 bonus to Mysticism checks. In addition, you gain an ability adjustment of +1 to Wisdom at character creation."
    Priest.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Mantle of the Clergy (6th Level)"
    feat6.content = "You have reached a rank of authority in your religion. Typical lay followers of your religion have a starting attitude of helpful toward you and will often provide you with simple assistance on request due to some combination of adoration, respect, or fear (depending on your religion), and even other clergy must give your opinions due consideration in matters of disagreement. You gain a +2 bonus to Diplomacy and Intimidate checks against lay followers and lower-ranking clergy."
    Priest.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Divine Boon (12th Level)"
    feat12.content = "Your deity grants you mystic power. Choose one 1st-level mystic spell with some connection to your deity’s portfolio (subject to the GM’s approval). If you have levels in the mystic class, you gain 1 additional 1st-level Spell per day and add the chosen Spell to your list of mystic spells known. Otherwise, you can use the chosen Spell once per day as a Spell-Like ability."
    Priest.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "True Communion (18th Level)"
    feat18.content = "Up to twice per day, after performing a significant action strongly aligned with your faith’s dogma (at the GM’s discretion), you can spend 10 minutes in deep meditation or prayer to regain 1 Resolve Point; this doesn’t count as resting to regain Stamina Points."
    Priest.addToThemeFeatures(feat18)
}

//Roboticist ################################################################################################################
func loadRoboticist() {
    let Roboticist = CompendiumTheme(context: context)
    Roboticist.name = "Roboticist"
    
    let bonus = Bonus(context: context)
    bonus.type = "Intelligence"
    bonus.bonus = 1
    Roboticist.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You’re obsessed with the intricacies of constructs and how automated machines function. You can easily identify what a machine’s function is and have an easier time attempting to access the internal programming of mechanized life-forms. Reduce the DC of Engineering checks to identify creatures and technology by 5. Computers is a class skill for you, though if it is a class skill from a class you take at 1st level, you instead gain a +1 bonus to Computers checks. In addition, you gain an ability adjustment of +1 to Intelligence at character creation"
    Roboticist.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Crafting Savant (6th Level)"
    feat6.content = "You’ve mastered the art of putting together technological armor and weapons from a variety of components. While equipment you construct certainly has your flair, it’s also clear that you can accomplish great feats of construction. When calculating the number of ranks you have in a skill necessary to construct a technological (not magic or hybrid) item, increase that number by 1. This allows you to construct technological equipment of up to your character level +1."
    Roboticist.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Technical Knack (12th Level)"
    feat12.content = "You’ve developed a unique talent for efficiently repairing constructs and starships, whether effecting emergency repairs on a drone or keeping robotic allies in the fight. Once per day, you can cast make whole, but you can target only construct creatures or damaged technological (not hybrid or magical) items. When repairing a starship, you reduce the time spent to 2 hours of work instead of 5."
    Roboticist.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Master Roboticist (18th Level)"
    feat18.content = "There are few pieces of technology that you’re unfamiliar with, so you are sure to take time to examine those unique discoveries you happen upon. Up to twice per day, after you spend at least 10 minutes studying a previously undiscovered piece of technology with an item level within 5 levels of your character level or the wreckage of a significant enemy technological construct, you regain 1 Resolve Point; this doesn’t count as resting to regain Stamina Points."
    Roboticist.addToThemeFeatures(feat18)
}

//Scholar ################################################################################################################
func loadScholar() {
    let Scholar = CompendiumTheme(context: context)
    Scholar.name = "Scholar"
    
    let bonus = Bonus(context: context)
    bonus.type = "Intelligence"
    bonus.bonus = 1
    Scholar.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You are an expert in one particular field of study, and your passion for the subject shows. Choose either Life Science or Physical Science and then choose a field of specialization. If you pick Life Science, you can specialize in bioEngineering, biology, botany, ecology, genetics, xenobiology, zoology, or another field of biological science. If you pick Physical Science, you can specialize in astronomy, chemistry, climatology, geography, geology, meteorology, oceanography, physics, or another field of physical science. The DC of skill checks to recall knowledge about your specialty is reduced by 5. Your chosen skill is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to checks with your chosen skill. In addition, you gain an ability adjustment of +1 to Intelligence at character creation."
    Scholar.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Tip of the Tongue (6th Level)"
    feat6.content = "Sometimes, after pausing to collect your thoughts, you realize that you know the answer to a particularly challenging question. Once per day, you can reroll any skill check to recall knowledge. You must decide to use this ability after rolling but before learning the information from your first roll. You must take the second result, even if it is worse."
    Scholar.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Research Maven (12th Level)"
    feat12.content = "You can research much faster than most other people, allowing you to collate information from databases, libraries, and other sources in one-quarter the normal time; with this ability, you can typically take 20 to recall knowledge in 5 rounds."
    Scholar.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Master Scholar (18th Level)"
    feat18.content = "To you, learning and absorbing knowledge related to your field of expertise is as refreshing as drinking from a cool spring in the middle of a desert planet. Up to twice per day, when in a situation where information from your specialty field could be useful (at the GM’s discretion), you can spend 10 minutes in deep contemplation and research of your specialty field and recover 1 Resolve Point, in addition to using recall knowledge for the information you seek; this doesn’t count as resting to regain Stamina Points."
    Scholar.addToThemeFeatures(feat18)
}

//Shipbuilder ################################################################################################################
func loadShipbuilder() {
    let Shipbuilder = CompendiumTheme(context: context)
    Shipbuilder.name = "Shipbuilder (Manu)"
    
    let bonus = Bonus(context: context)
    bonus.type = "Intelligence"
    bonus.bonus = 1
    Shipbuilder.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "When you successfully use the aid another action to aid an ally’s Engineering check, that character gains a +2 circumstance bonus to the check (in addition to the +2 bonus normally granted for successfully aiding another). Engineering also becomes a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 on Engineering checks. In addition, you gain a +1 bonus to your Intelligence score."
    Shipbuilder.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Builder Prodigy (6th Level)"
    feat6.content = "After years of working on spacefaring vessels, learning the ins and outs of their design and construction, you have become a master builder. You gain a +4 bonus to Engineering checks to craft or repair parts of spacefaring vessels, and you never damage such items you attempt to repair, no matter how much you fail the check by."
    Shipbuilder.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Jury-Rig (12th Level)"
    feat12.content = "You’ve become adept at using cheaper materials without reducing the stability or reliability of the vessels you create. You may add your character level to the build points of a vessel you build without increasing its cost. If you are part of an adventuring crew, this build point increase applies to your crew’s starship as long as you travel with the crew."
    Shipbuilder.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Master Shipbuilder (18th Level)"
    feat18.content = "Fixing things is cathartic for you, and can even recharge you. Once per day, when you successfully repair a technological item with the Engineering skill, you regain 1 Resolve Point."
    Shipbuilder.addToThemeFeatures(feat18)
}

//SolarDisciple ################################################################################################################
func loadSolarDisciple() {
    let SolarDisciple = CompendiumTheme(context: context)
    SolarDisciple.name = "Solar Disciple"
    
    let bonus = Bonus(context: context)
    bonus.type = "Wisdom"
    bonus.bonus = 1
    SolarDisciple.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You’ve read extensively about the physics of the sun and its associated planes and the best theories about how they interact to produce the solar environment. You’ve also made a study of every sun-based religion of the Pact Worlds, from the Church of the Dawnflower down to the most primitive sun cult. Reduce the DC of Physical Science checks to recall knowledge about scientific questions concerning the sun and light by 5. Reduce the DC of Mysticism checks to recall knowledge about sun-focused religions, the Elemental Plane of Fire, and the Positive Energy Plane by 5. Perception is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Perception checks. In addition, you gain an ability adjustment of +1 to Wisdom at character creation."
    SolarDisciple.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Mental Gravity (6th Level)"
    feat6.content = "Though nothing is truly constant in the universe, stars are one of the few celestial bodies whose positioning within their systems rarely changes. Like the sun’s ineffable mass, you will not be moved from your proper mental space. You gain a +1 bonus to Will saving throws against compulsion effects."
    SolarDisciple.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Heat Transfer (12th Level)"
    feat12.content = "You have learned to thrive in the heat of the sun, and when you are burned, you can funnel some of that fiery energy into your own spells and weapons. Whenever you take fire damage, you can increase the amount of fire damage you deal as part of an attack or spell made before the end of your next turn by an amount equal to one-quarter the damage you just took (rounded down, minimum 1)."
    SolarDisciple.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Sun Meditation (18th Level)"
    feat18.content = "After much practice and the occasional painful sunburn, your meditation regime has reached the peak of its potency. The light of the sun recharges you, much like it does a solar-powered battery. Up to twice per day, you can spend 10 minutes meditating while in the direct light of a sun to regain 1 Resolve Point; this doesn’t count as resting to regain Stamina Points."
    SolarDisciple.addToThemeFeatures(feat18)
}

//Spacefarer ################################################################################################################
func loadSpacefarer() {
    let Spacefarer = CompendiumTheme(context: context)
    Spacefarer.name = "Spacefarer"
    
    let bonus = Bonus(context: context)
    bonus.type = "Constitution"
    bonus.bonus = 1
    Spacefarer.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You are obsessed with distant worlds, and you always mentally catalog everything you learn about new and strange places so you can recall it when you need it most. Additionally, you use your knowledge of biology and topology to inure yourself to alien hazards. Reduce the DC of Physical Science checks to recall knowledge about strange new worlds or features of space by 5. Physical Science is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Physical Science checks. In addition, you gain an ability adjustment of +1 to Constitution at character creation."
    Spacefarer.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Eager Dabbler (6th Level)"
    feat6.content = "In your journeys, you’ve picked up quite a few Tricks about all sorts of things, even if you haven’t formally studied them, and you can often use this logic and intuition to your advantage. You gain a +2 bonus to skill checks if you don’t have any ranks in that skill. This ability does not allow you to attempt checks for trained-only skills."
    Spacefarer.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Jack of All Trades (12th Level)"
    feat12.content = "You can do just about anything if you put your mind to it, and you never let lack of formal instruction stand between you and a task that needs handling. You can use all skills untrained, even if you could not normally do so, and when you roll a natural 20 while attempting a skill check for a skill in which you don’t have ranks, your bonus from eager dabbler increases to +4."
    Spacefarer.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Master Explorer (18th Level)"
    feat18.content = "Scientifically noting the even tiniest details about a new place—including everything from apparent colors and incline grades to barometric, seismic, and other delicate readings—is absolutely invigorating to you. Up to twice per day while on an unexplored planet, you can spend 10 minutes exploring, mapping, and documenting a new geographical feature to recover 1 Resolve Point; this doesn’t count as resting to regain Stamina Points."
    Spacefarer.addToThemeFeatures(feat18)
}

//SpacePirate ################################################################################################################
func loadSpacePirate() {
    let SpacePirate = CompendiumTheme(context: context)
    SpacePirate.name = "Space Pirate"
    
    let bonus = Bonus(context: context)
    bonus.type = "Dexterity"
    bonus.bonus = 1
    SpacePirate.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You have a distinct advantage over others when operating in the shadows of society. Reduce the DC of Culture checks to recall knowledge about black market locations, known smugglers, and notorious space pirates by 5. Bluff is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to your Bluff checks. In addition, you gain an ability adjustment of +1 to Dexterity at character creation."
    SpacePirate.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Smuggler (6th Level)"
    feat6.content = "You know how and when to move illicit goods and how to get in and out of tight situations that might spell doom for a less seasoned smuggler. Once per day when you attempt a Stealth check to hide, you can roll twice and take the higher result. Additionally, whenever someone attempts a Perception check to search your body for objects you have hidden on your person using the hide object task of the Sleight of Hand skill, the searcher receives only a +2 bonus to the check, instead of a +4 bonus."
    SpacePirate.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Sword and Pistol (12th Level)"
    feat12.content = "You are well trained in a traditional piratical fighting style dating as far back as the antiquated ages before the Gap. When you are wielding at least one one-handed melee weapon and at least one small arm, you can make two attacks against the same target with one of each type of weapon as a standard action. Each attack takes the same –4 penalty as a full attack action."
    SpacePirate.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Besmara’s Blessing (18th Level)"
    feat18.content = "The pirate goddess Besmara blesses your thieving and marauding ways, even if you don’t worship her directly. Up to twice per day, when you successfully ambush and defeat a significant foe or group of foes in tactical combat or starship combat in order to take any goods and valuables they are transporting (or simply have in their possession), you recover 1 Resolve Point."
    SpacePirate.addToThemeFeatures(feat18)
}

//TemperedPilgrim ################################################################################################################
func loadTemperedPilgrim() {
    let TemperedPilgrim = CompendiumTheme(context: context)
    TemperedPilgrim.name = "Tempered Pilgrim"
    
    let bonus = Bonus(context: context)
    bonus.type = "Charisma"
    bonus.bonus = 1
    TemperedPilgrim.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You have read and studied much in your eagerness to learn about and experience new cultures, and you often know about them before you encounter them. Reduce the DC of Culture checks to recall knowledge about a culture’s customs and related topics by 5. In addition, whenever you take a rank in Culture, you learn to speak and read two new languages instead of one. Culture is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Culture checks. In addition, you gain an ability adjustment of +1 to Charisma at character creation."
    TemperedPilgrim.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Compelling Influence (6th Level)"
    feat6.content = "You understand a variety of social cues and are quick to take advantage of them when you interact with others. When you exceed the DC of a Diplomacy check to improve a creature’s attitude by 5 or more, you need to spend only 1 extra minute interacting with the creature to improve its attitude by one additional category. In addition, you worsen a creature’s attitude only if you fail the Diplomacy check to improve its attitude by 10 or more."
    TemperedPilgrim.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Breadth of Knowledge (12th Level)"
    feat12.content = "In your many travels, you have accumulated a wide base of knowledge about all manner of subjects. You can always take 10 on skill checks to recall knowledge, no matter the circumstances. In addition, once per day when attempting a skill check with a skill you have no ranks in, you can roll twice and take the better result."
    TemperedPilgrim.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Diverse Experiences (18th Level)"
    feat18.content = "The Tempering is about learning something of your own culture by experiencing others. Up to twice per day, when you participate in an established cultural tradition that takes at least 10 minutes and is significantly different from a tradition of your own culture, you can reflect on those differences to recover 1 Resolve Point. What constitutes a cultural tradition is subject to the GM’s discretion, but it usually involves a formal or festive ceremony such as a dance, a feast, a parade, or even ritual meditation."
    TemperedPilgrim.addToThemeFeatures(feat18)
}

//WildWarden ################################################################################################################
func loadWildWarden() {
    let WildWarden = CompendiumTheme(context: context)
    WildWarden.name = "Wild Warden"
    
    let bonus = Bonus(context: context)
    bonus.type = "Wisdom"
    bonus.bonus = 1
    WildWarden.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "In the course of your explorations of various biomes, you have studied all manner of ﬂora and fauna. Reduce the DC to identify creatures of the animal, plant, and vermin types using Life Sciences by 5. Survival is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Survival checks. In addition, you gain an ability adjustment of +1 to Wisdom at character creation"
    WildWarden.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Protector of the Wild (6th Level)"
    feat6.content = "You harm creatures of the wilderness only when necessary for survival, preferring to simply knock them unconscious whenever possible. When you use a weapon that deals lethal damage to deal nonlethal damage to a creature of the animal, plant, or vermin type that you have identified with a successful Life Sciences check, you don’t take the standard –4 penalty to your attack rolls. In addition, if you are dealing nonlethal damage in this way and score a critical hit, you can choose not to impose any of your weapon’s critical hit eﬀects. Finally, you can use Life Science to provide first aid (as per the Medicine task) to creatures of the animal, plant, and vermin types."
    WildWarden.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Master Forager (12th Level)"
    feat12.content = "Thanks to your survival skills, you can find materials to sustain and bolster your allies while guiding and feeding them by foraging in a wild environment. When you succeed at a Survival check to live oﬀ the land, you and the creatures you provide food and water for as a result of the skill check regain an additional number of Hit Points equal to your Wisdom modifier when you next recover Hit Points with a full night’s rest (which must be no more than 24 hours after you succeed at your check)."
    WildWarden.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Commune with Nature (18th Level)"
    feat18.content = "Being out in the natural world revitalizes your spirits, reminding you why you enjoy the lifestyle you lead. Up to twice per day in a natural setting (such as a jungle or even an arctic tundra), you can spend 10 minutes meditating or simply considering the world around you to recover 1 Resolve Point; this doesn’t count as resting to regain Stamina Points."
    WildWarden.addToThemeFeatures(feat18)
}

//Xenoarchaeologist ################################################################################################################
func loadXenoarchaeologist() {
    let Xenoarchaeologist = CompendiumTheme(context: context)
    Xenoarchaeologist.name = "Xenoarchaeologist"
    
    let bonus = Bonus(context: context)
    bonus.type = "Intelligence"
    bonus.bonus = 1
    Xenoarchaeologist.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You have trained yourself to have few presuppositions about the foreign devices you uncover. Reduce the DC to identify rare, ancient, or alien tech by 5. Engineering is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Engineering checks. In addition, you gain an ability adjustment of +1 to Intelligence at character creation."
    Xenoarchaeologist.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Tip of the Tongue(6th Level)"
    feat6.content = "You often encounter ancient, exotic traps and security devices, varying from mechanical defenses to magical wards. You have honed your senses to pick out warning signs of traps of any kind. When you come within 10 feet of a trap, you can immediately attempt a Perception check to notice the trap, which should be rolled in secret by the GM."
    Xenoarchaeologist.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Research Maven (12th Level)"
    feat12.content = "Your notable exposure to ancient and foreign writing systems allows you to gain the general meaning of new languages with ease, even if you have never been exposed to the language previously. You can attempt a Culture check to decipher writing of up to 250 words of text as a move action, and you have no chance of entirely misconstruing its meaning. Additionally, as long as you have any computer equipment (including just a comm unit), you are assumed to have the necessary data set to take 20 on Culture checks to decipher writing, which you can do even if you are not trained in the Computers skill. It normally takes you 20 minutes to take 20 on text up to 250 words."
    Xenoarchaeologist.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = " (18th Level)"
    feat18.content = "Up to twice per day, when you document a new artifact from an ancient or unknown culture, you regain 1 Resolve Point. When you discover an item on an unexplored planet, this process usually takes 10 minutes at most (and doesn’t count as resting to regain Stamina Points), but even on known planets, you might be able to find new artifacts in 1d4 hours (or less) in old ruins or remote sections of cities with long histories or a high degree of trade with foreign cultures."
    Xenoarchaeologist.addToThemeFeatures(feat18)
}

//Xenoseeker ################################################################################################################
func loadXenoseeker() {
    let Xenoseeker = CompendiumTheme(context: context)
    Xenoseeker.name = "Xenoseeker"
    
    let bonus = Bonus(context: context)
    bonus.type = "Charisma"
    bonus.bonus = 1
    Xenoseeker.addToThemeBonus(bonus)
    
    let feat1 = Feature(context: context)
    feat1.name = "Theme Knowledge (1st Level)"
    feat1.content = "You are trained to seek out, identify, and interact with alien life-forms. Reduce the DC to identify a rare creature using Life Science by 5. Life Science is a class skill for you, though if it is a class skill from the class you take at 1st level, you instead gain a +1 bonus to Life Science checks. In addition, you gain an ability adjustment of +1 to Charisma at character creation."
    Xenoseeker.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Quick Pidgin (6th Level)"
    feat6.content = "If you don’t share a language with creatures you encounter, you and the creatures can spend 10 minutes attempting to converse (if they are willing), after which you attempt a DC 25 Culture check. If you succeed, you formulate a simple pidgin language that allows basic communication. You can use the pidgin language with those specific creatures only, but you gain a +2 bonus to Culture checks to create a pidgin language with similar creatures that speak the same language."
    Xenoseeker.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "First Contact (12th Level)"
    feat12.content = "You know how to make a good first impression on new races and assuage their fears of the unknown. When meeting a creature that has never seen your race or any of the races of your traveling companions, if it would normally be unfriendly to unknown races, treat it as indifferent instead. This has no effect if the creature would be hostile, indifferent, friendly, or helpful."
    Xenoseeker.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Brilliant Discovery (18th Level)"
    feat18.content = "Up to twice per day, when you discover and document a new species of flora or fauna, you recover 1 RP. On an unexplored planet where every species is new, this process usually takes 10 minutes at most (and doesn’t count as rest to regain SP, but even on known planets, you might be able to find a new species in 1d4 hours (or fewer) in a remote biome or one with a high variety of wildlife."
    Xenoseeker.addToThemeFeatures(feat18)
}

//Themeless ################################################################################################################
func loadThemeless() {
    let Themeless = CompendiumTheme(context: context)
    Themeless.name = "Themeless"
    
    let feat1 = Feature(context: context)
    feat1.name = "General Knowledge (1st Level)"
    feat1.content = "You gain a class skill of your choice when you create a themeless character. Also, you gain an ability adjustment of +1 to any ability score you choose."
    Themeless.addToThemeFeatures(feat1)
    
    let feat6 = Feature(context: context)
    feat6.name = "Certainty (6th Level)"
    feat6.content = "Once per day before you roll a skill check, you can gain a +2 bonus to that skill for that check."
    Themeless.addToThemeFeatures(feat6)
    
    let feat12 = Feature(context: context)
    feat12.name = "Extensive Studies (12th Level)"
    feat12.content = "Choose a skill that is a class skill for you. Once per day, you can reroll one such skill check before learning the results of the roll. You must take the second result, even if it is worse."
    Themeless.addToThemeFeatures(feat12)
    
    let feat18 = Feature(context: context)
    feat18.name = "Steely Determination (18th Level)"
    feat18.content = "Increase your pool of Resolve Points by 1."
    Themeless.addToThemeFeatures(feat18)
}









//Feats  ################################################################################################################

func loadFeats() {
    
    let AgileCasting = CompendiumFeat(context: context)
    AgileCasting.name = "Agile Casting"
    AgileCasting.content = "Prerequisites: Key ability score 15, Dex 15, Mobility, caster level 4th.\n\nBenefit: As a full action, you can move up to your speed and cast a single Spell with a casting time of one standard action or less at any point during your movement. If you have a Supernatural ability that can be activated as a standard action or less, you can instead use that ability at any point during your movement.\n\nNormal: You can move only before or after casting a Spell, not both."
    
    let Antagonize = CompendiumFeat(context: context)
    Antagonize.name = "Antagonize"
    Antagonize.content = "Prerequisites: Diplomacy 5 ranks, Intimidate 5 ranks.\n\nBenefit: As a standard action, you can antagonize a foe that can see and hear you by attempting a Diplomacy or Intimidate check (DC = 10 + your opponent’s total Sense Motive skill bonus, or 15 + 1-1/2 × the opponent’s CR, whichever is higher). If you succeed, the foe is off-target and takes a –2 penalty to all skill checks for 1 round plus 1 additional round for every 5 by which your result exceeds the DC, or until it makes an attack against you, forces you to attempt a saving throw, or damages you (whichever comes first). Once you have attempted to antagonize a foe, that foe is immune to this ability for 24 hours. This is a language-dependent ability."
    
    let ClimbingMaster = CompendiumFeat(context: context)
    ClimbingMaster.name = "Climbing Master"
    ClimbingMaster.content = "Prerequisites: Athletics 5 ranks.\n\nBenefit: You gain a climb speed equal to your land speed."
    
    let ConnectionInkling = CompendiumFeat(context: context)
    ConnectionInkling.name = "Connection Inkling"
    ConnectionInkling.content = "Prerequisites: Wis 15, character level 5th, no levels in mystic.\n\nBenefit: Choose two 0-level mystic Spells and one 1st-level mystic Spell. You can cast the 0-level Spells at will and the 1st-level Spell once per day for every 3 character levels you have. Your caster level is equal to your character level, and the key ability score for these Spells is Wisdom. If you later gain levels in mystic, you lose the benefits of this feat and can replace it with either Spell Focus or Spell Penetration."
    
    let Diehard = CompendiumFeat(context: context)
    Diehard.name = "Diehard"
    Diehard.content = "Benefit: When you are dying, you can spend the required Resolve Points to stabilize and 1 Resolve Point to stay in the fight (regaining 1 Hit Point) in the same round.\n\nNormal: You must use Resolve Points to stabilize and to stay in the fight in separate rounds."
    
    let Diversion = CompendiumFeat(context: context)
    Diversion.name = "Diversion"
    Diversion.content = "Benefit: When you successfully use Bluff to create a distraction, you can allow an ally to attempt a Stealth check to hide (instead of attempting to hide yourself). You can attempt to allow multiple allies to use Stealth to hide, but you take a –5 penalty to your Bluff check for every ally after the first, and on a failed check no ally can attempt to hide.\n\nNormal: Using Bluff to create a distraction allows only you to attempt a Stealth check to hide."
    
    let EnhancedResistance = CompendiumFeat(context: context)
    EnhancedResistance.name = "Enhanced Resistance"
    EnhancedResistance.content = "Prerequisites: Base attack bonus +4.\n\nBenefit: Choose either kinetic damage or one of acid, cold, electricity, fire, or sonic. If you choose kinetic damage, you gain damage reduction equal to your base attack bonus. If you choose acid, cold, electricity, fire, or sonic, you gain energy resistance against that type of energy equal to your base attack bonus."
    
    let ExtraResolve = CompendiumFeat(context: context)
    ExtraResolve.name = "Extra Resolve"
    ExtraResolve.content = "Prerequisites: Character level 5th.\n\nBenefit: You have 2 additional Resolve Points in your pool."
    
    let FastTalk = CompendiumFeat(context: context)
    FastTalk.name = "Fast Talk"
    FastTalk.content = "Prerequisites: Bluff 5 ranks.\n\nBenefit: You can distract a creature with a confusing barrage of words, causing it to be surprised at the beginning of combat. You can use this ability only on a creature you are able to converse with (it must be able to see or hear you and understand your words) prior to the beginning of combat, and you must continue to converse with it until combat begins. You can’t use this ability if you are the one to instigate combat or if you are unaware at the start of combat.\n\nWhen the GM declares that combat has begun, but before initiative is rolled, you can spend 1 Resolve Point to attempt a Bluff check against a single creature that this ability can affect. The DC is equal to 15 + the target’s total Perception skill bonus, or 20 + 1-1/2 × the target’s CR, whichever is higher. If your check is successful, the target creature is considered unaware at the start of combat, allowing other creatures (including yourself) to act in a surprise round. Once you have attempted to use this ability on a creature, whether or not you succeed, it is immune to this ability for 24 hours."
    
    let GreatFortitude = CompendiumFeat(context: context)
    GreatFortitude.name = "Great Fortitude"
    GreatFortitude.content = "Benefit: You gain a +2 bonus to Fortitude saving throws."
    
    let GreaterSpellPenetration = CompendiumFeat(context: context)
    GreaterSpellPenetration.name = "Greater Spell Penetration"
    GreaterSpellPenetration.content = "Prerequisites: Spell Penetration.\n\nBenefit: You gain a +2 bonus to caster level checks to overcome a creature’s Spell resistance. This bonus stacks with the bonus from Spell Penetration."
    
    let HarmUndead = CompendiumFeat(context: context)
    HarmUndead.name = "Harm Undead"
    HarmUndead.content = "Prerequisites: Healing channel connection power, mystic level 1st.\n\nBenefit: When you use your healing channel, you can expend a mystic Spell slot of the highest level you can cast to also deal damage equal to the amount you heal to all undead foes in the area. The undead can attempt a Will save for half damage, at your usual connection power DC."
    
    let ImprovedGreatFortitude = CompendiumFeat(context: context)
    ImprovedGreatFortitude.name = "Improved Great Fortitude"
    ImprovedGreatFortitude.content = "Prerequisites: Great Fortitude, character level 5th.\n\nBenefit: You can spend 1 RP to reroll a failed Fortitude save."
    
    let ImprovedIronWill = CompendiumFeat(context: context)
    ImprovedIronWill.name = "Improved Iron Will"
    ImprovedIronWill.content = "Prerequisites: Iron Will, character level 5th.\n\nBenefit: You can spend 1 RP to reroll a failed Will save."
    
    let ImprovedLightningReflexes = CompendiumFeat(context: context)
    ImprovedLightningReflexes.name = "Improved Lightning Reflexes"
    ImprovedLightningReflexes.content = "Prerequisites: Lightning Reflexes, character level 5th.\n\nBenefit: You can spend 1 RP to reroll a failed Reflex save."
    
    let IronWill = CompendiumFeat(context: context)
    IronWill.name = "Iron Will"
    IronWill.content = "Benefit: You gain a +2 bonus to Will saving throws."
    
    let JetDash = CompendiumFeat(context: context)
    JetDash.name = "Jet Dash"
    JetDash.content = "Benefit: When running, you move six times your land speed.\n\nWhenever you jump, double the height and distance you can jump. While running, you don’t gain the flat-footed condition.\n\nNormal: You move four times your land speed and gain the flat-footed condition while running."
    
    let LightningReflexes = CompendiumFeat(context: context)
    LightningReflexes.type = "General"
    LightningReflexes.name = "Lightning Reflexes"
    LightningReflexes.content = "Benefit: You gain a +2 bonus to Reflex saving throws."
    
    let MajorPsychicPower = CompendiumFeat(context: context)
    MajorPsychicPower.type = "General"
    MajorPsychicPower.name = "Major Psychic Power"
    MajorPsychicPower.content = "Prerequisites: Cha 15, Minor Psychic Power, Psychic Power, character level 7th.\n\nBenefit: Select one of the following 2nd-level Spells: augury or status. You can cast this spell once per day as a Spell-Like ability, using your character level as your caster level."
    
    let MajorStageMagic = CompendiumFeat(context: context)
    MajorStageMagic.type = "General"
    MajorStageMagic.name = "Major Stage Magic"
    MajorStageMagic.content = "Prerequisites: Cha 15, Minor Stage Magic, Stage Magic, character level 7th.\n\nBenefit: Select one of the following 2nd-level spells: holographic image, invisibility, or mirror image. You can cast this spell once per day as a spell-like ability, using your character level as your caster level. The key ability score for this spell is Charisma. If you select holographic image with this feat and you have already selected holographic image with the Stage Magic feat, you can replace the spell selected with Stage Magic with another spell listed in the Stage Magic feat."
    
    let MasterCrafter = CompendiumFeat(context: context)
    MasterCrafter.type = "General"
    MasterCrafter.name = "Master Crafter"
    MasterCrafter.content = "Prerequisites: Computers, Engineering, Life Science, Mysticism, Physical Science, or appropriate Profession 5 ranks.\n\nBenefit: Choose one skill that allows you to craft items in which you have the required number of ranks. When you craft items using that skill, it takes half the normal time.\n\nSpecial: You can take Master Crafter multiple times. Each time you do, it applies to a different skill that meets the prerequisite number of ranks."

    let MedicalExpert = CompendiumFeat(context: context)
    MedicalExpert.type = "General"
    MedicalExpert.name = "Medical Expert"
    MedicalExpert.content = "Prerequisites: Life Science 1 rank, Medicine 1 rank, Physical Science 1 rank.\n\nBenefit: You can use the Medicine skill in conjunction with a medpatch or sprayflesh to treat deadly wounds as a full action. If you have an ability that enables you to treat deadly wounds more often but with a longer time frame (such as the envoy’s surgeon expertise talent), you cannot use this feat to use that ability more quickly. When used in this way, the medpatch or sprayflesh does not perform any of its normal functions. You can also use the Medicine skill to provide long-term care with just a medkit.\n\nNormal: It takes 1 minute to treat deadly wounds, and long-term care requires a medical bay or medical lab."

    let MinorPsychicPower = CompendiumFeat(context: context)
    MinorPsychicPower.type = "General"
    MinorPsychicPower.name = "Minor Psychic Power"
    MinorPsychicPower.content = "Prerequisites: Cha 11.\n\nBenefit: Select one of the following 0-level Spells: dancing lights, psychokinetic hand, telekinetic projectile, or telepathic message. You can cast this spell three times per day as a Spell-Like ability, using your character level as your caster level.\n\nSpecial: You can select this feat more than once. Each time you do, you must choose a different Spell from the list."
    
    let MinorStageMagic = CompendiumFeat(context: context)
    MinorStageMagic.type = "General"
    MinorStageMagic.name = "Minor Stage Magic"
    MinorStageMagic.content = "Prerequisites: Cha 11\n\nBenefit: Select one of the following 0-level spells: dancing lights, ghost sound, or token spell. You can cast this spell three times per day as a spell-like ability, using your character level as your caster level. The key ability score for this spell is Charisma.\n\nSpecial: You can select this feat more than once. Each time you do, you must choose a different spell from the list."

    let PenetratingSpell = CompendiumFeat(context: context)
    PenetratingSpell.type = "General"
    PenetratingSpell.name = "Penetrating Spell"
    PenetratingSpell.content = "Prerequisites: Ability to cast 4th-level Spells.\n\nBenefit: Reduce your target’s energy resistances and damage reduction by 5 against your Spell damage."
    
    let PsychicPower = CompendiumFeat(context: context)
    PsychicPower.type = "General"
    PsychicPower.name = "Psychic Power"
    PsychicPower.content = "Prerequisites: Cha 13, Minor Psychic Power, character level 4th.\n\nBenefit: Select one of the following 1st-level Spells: comprehend languages, detect thoughts , or mind link. You can cast this spell once per day as a Spell-Like ability, using your character level as your caster level.\n\nSpecial: You can select this feat more than once. Each time you do, you must choose a different Spell from the list."
    
    let SkillFocus = CompendiumFeat(context: context)
    SkillFocus.type = "General"
    SkillFocus.name = "Skill Focus"
    SkillFocus.content = "Benefit: Choose a skill. You gain a +3 insight bonus to checks involving the chosen skill.\n\nSpecial: You can take this feat multiple times. Its effects don’t stack. Each time you take this feat, it applies to a new skill."
    
    let SkillSynergy = CompendiumFeat(context: context)
    SkillSynergy.type = "General"
    SkillSynergy.name = "Skill Synergy"
    SkillSynergy.content = "Benefit: Choose two skills. These skills become class skills for you. If one or both were already class skills, you gain a +2 insight bonus to those skill checks instead.\n\nSpecial: You can take this feat multiple times. Its effects don’t stack. Each time you take it, it applies to two different skills."
    
    let SkyJockey = CompendiumFeat(context: context)
    SkyJockey.type = "General"
    SkyJockey.name = "Sky Jockey"
    SkyJockey.content = "Prerequisites: Piloting 5 ranks.\n\nBenefit: When you’re using a device to fly (including magic items, but not Spells or natural flight), your fly speed increases by 10 feet. If you are operating a flying Vehicle, its fly speed increases by 10 (though this has no impact on its full speed or overland movement speed). When you are in the pilot role of Starship combat, your Starship’s speed increases by 1."

    let SpellFocus = CompendiumFeat(context: context)
    SpellFocus.type = "General"
    SpellFocus.name = "Spell Focus"
    SpellFocus.content = "Prerequisites: Ability to cast Spells, character level 3rd.\n\nBenefit: The DC of Spells you cast increases by 1. At 11th level, the DC of your Spells instead increases by 2, and at 17th level, the DC of Spells you cast instead increases by 3. This bonus does not apply to Spell-Like abilities."

    let SpellPenetration = CompendiumFeat(context: context)
    SpellPenetration.type = "General"
    SpellPenetration.name = "Spell Penetration"
    SpellPenetration.content = "Benefit: You gain a +2 bonus to caster level checks to overcome a creature’s Spell resistance."
    
    let Spellbane = CompendiumFeat(context: context)
    Spellbane.type = "General"
    Spellbane.name = "Spellbane"
    Spellbane.content = "Prerequisites: Unable to cast Spells or use Spell-Like abilities.\n\nBenefit: You gain a +2 insight bonus to saving throws against Spells and Spell-Like abilities. If you ever gain the ability to cast Spells or use Spell-Like abilities, you lose the benefits of this feat and can replace it with Great Fortitude, Lightning Reflexes, or Iron Will, or the improved version of one of those feats if you meet its prerequisites."
    
    let StageMagic = CompendiumFeat(context: context)
    StageMagic.type = "General"
    StageMagic.name = "Stage Magic"
    StageMagic.content = "Prerequisites: Cha 13, Minor Stage Magic, character level 4th.\n\nBenefit: Select one of the following 1st-level spells: disguise self, holographic image, or unseen servant. You can cast this spell once per day as a spell-like ability, using your character level as your caster level. The key ability score for this spell is Charisma.\n\nSpecial: You can select this feat more than once. Each time you do, you must choose a different spell from the list."
    
    let SwimmingMaster = CompendiumFeat(context: context)
    SwimmingMaster.type = "General"
    SwimmingMaster.name = "Swimming Master"
    SwimmingMaster.content = "Prerequisites: Athletics 5 ranks.\n\nBenefit: You gain a swim speed equal to your land speed."

    let TechnomanticDabbler = CompendiumFeat(context: context)
    TechnomanticDabbler.type = "General"
    TechnomanticDabbler.name = "Technomantic Dabbler"
    TechnomanticDabbler.content = "Prerequisites: Intelligence 15, character level 5th, no levels in technomancer.\n\nBenefit: Choose two 0-level technomancer Spells and one 1st-level technomancer Spell. You can cast the 0-level Spells at will and the 1st-level Spell once per day for every 3 character levels you have. Your caster level is equal to your character level, and the key ability score for these Spells is Intelligence. If you later gain levels in technomancer, you lose the benefits of this feat and can replace it with either Spell Focus or Spell Penetration."

    let Toughness = CompendiumFeat(context: context)
    Toughness.type = "General"
    Toughness.name = "Toughness"
    Toughness.content = "Benefit: For every character level you have (and whenever you gain a new level), you gain 1 Stamina Point. In addition, you gain a +4 bonus to Constitution checks to continue running, to avoid damage from a forced march, to hold your breath, and to avoid damage from starvation or thirst. You also gain a +4 bonus to Fortitude saving throws to avoid taking damage from hot or cold environments, to withstand the harmful effects of thick and thin atmospheres, to avoid choking when breathing in heavy smoke, and to avoid fatigue caused by sleep deprivation."
    
    let VeiledThreat = CompendiumFeat(context: context)
    VeiledThreat.type = "General"
    VeiledThreat.name = "Veiled Threat"
    VeiledThreat.content = "Prerequisites: Cha 15, Intimidate 1 rank.\n\nBenefit: When you successfully use the Intimidate skill to bully a creature, after the duration of its helpful attitude ends, its attitude toward you becomes indifferent rather than hostile."
    
    
    // Combat Feats
    let AdaptiveFighting = CompendiumFeat(context: context)
    AdaptiveFighting.name = "Adaptive Fighting"
    AdaptiveFighting.type = "Combat"
    AdaptiveFighting.content = "Prerequisites: Three or more combat feats.\n\nBenefit: Select three combat feats that you do not have but whose prerequisites you meet. Once per day as a move action, you can gain the benefit of one of these feats for 1 minute. Each time you gain a level, you can replace one of these three selected feats with a different feat that you don’t have but meet the prerequisites for."
    
    let AdvancedMeleeWeaponProficiency = CompendiumFeat(context: context)
    AdvancedMeleeWeaponProficiency.name = "Advanced Melee Weapon Proficiency"
    AdvancedMeleeWeaponProficiency.type = "Combat"
    AdvancedMeleeWeaponProficiency.content = "Prerequisites: Proficiency in basic melee weapons.\n\nBenefit: You gain proficiency in advanced melee weapons"
    
    let AmplifiedGlitch = CompendiumFeat(context: context)
    AmplifiedGlitch.name = "Amplified Glitch"
    AmplifiedGlitch.type = "Combat"
    AmplifiedGlitch.content = "Prerequisites: Computers 3 ranks, Intimidate 3 ranks.\n\nBenefit: As a standard action, you can wirelessly introduce a fast-acting virus into nearby technological devices to briefly cause them to malfunction in loud, surprising ways. You can use this ability on one target creature per character level, no two of which can be more than 30 feet apart. Each target must either be carrying technological devices or be within sight and hearing of such devices. While the locations of such devices are up to the GM, most public spaces (aside from technologically underdeveloped areas) contain enough technology for this feat to function. Your glitch causes alarms to go off, automated devices to spin and flail, readouts to flash brightly, and so on. With a successful Computers check (DC = 15 + 1 per target + 1-1/2 × the CR of the highest-CR target), all targets are shaken for 1 round, plus 1 additional round for every 5 by which your result exceeds the DC.\n\nOnce you have targeted a creature with this feat, that foe is immune to this ability for 24 hours."
    
    let Barricade = CompendiumFeat(context: context)
    Barricade.name = "Barricade"
    Barricade.type = "Combat"
    Barricade.content = "Prerequisites: Engineering 1 rank.\n\nBenefit: As a move action, you can stack and reinforce objects that are too small or too fragile to provide cover into a single square of adjacent cover. The GM has discretion over whether enough such objects are nearby to allow you to use this ability, but most urban and wilderness settings not specifically described as empty or barren have enough such material to allow at least one such temporary barricade to be built. The barricade grants partial cover against attacks with line of effect that pass through it. If the barricade is in a square that already granted partial cover, it instead grants normal cover.\n\nThe barricade is temporary and not particularly durable. When determining its hardness and Hit Points, treat it as a piece of equipment with an item level equal to half your total ranks in Engineering (minimum 1st level). Additionally, once it or a creature adjacent to it is hit by an attack, the barricade collapses at the beginning of your turn in 1d4 rounds (unless the barricade is destroyed completely by the attack). There isn’t normally enough material for you to build a second barricade in exactly the same space unless you are in a particularly crowded area (as determined by the GM)."
    
    let BasicMeleeWeaponProficiency = CompendiumFeat(context: context)
    BasicMeleeWeaponProficiency.type = "Combat"
    BasicMeleeWeaponProficiency.name = "Basic Melee Weapon Proficiency"
    BasicMeleeWeaponProficiency.content = "Benefit: You gain proficiency in basic melee weapons (see Weapon Proficiency on page 243)."
    
    let BlindFight = CompendiumFeat(context: context)
    BlindFight.type = "Combat"
    BlindFight.name = "Blind-Fight"
    BlindFight.content = "Benefit: In melee, every time you miss because of concealment, you can reroll your miss chance percentile roll one time to see if you actually hit. You aren’t flat-footed against melee attacks from creatures you can’t see, and you can withdraw from creatures you can’t perceive. You don’t need to attempt Acrobatics checks to move at full speed while blinded."
    
    let Bodyguard = CompendiumFeat(context: context)
    Bodyguard.type = "Combat"
    Bodyguard.name = "Bodyguard"
    Bodyguard.content = "Benefit: As a reaction when an adjacent ally is attacked, you can grant that ally a +2 circumstance bonus to its AC against that attack. If you do so, you take a –2 penalty to your own Armor Class until the beginning of your next turn."
    
    let Cleave = CompendiumFeat(context: context)
    Cleave.type = "Combat"
    Cleave.name = "Cleave"
    Cleave.content = "Prerequisites: Str 13, base attack bonus +1.\n\nBenefit: As a standard action, you can make a single melee attack against a foe within reach. If you hit, you deal damage normally and can make an additional melee attack (using your full base attack bonus) against a foe that is adjacent to the first and also within reach. You can make only one additional attack per round with this feat"
    
    let CloseCombat = CompendiumFeat(context: context)
    CloseCombat.type = "Combat"
    CloseCombat.name = "Close Combat"
    CloseCombat.content = "Prerequisites: Base attack bonus +1.\n\nBenefit: When you hit an adjacent foe with a melee attack, as long as you are adjacent to that target, you gain a +2 circumstance bonus to your AC against attacks from other creatures that are not adjacent to you until the beginning of your next turn."
    
    let CombatCasting = CompendiumFeat(context: context)
    CombatCasting.type = "Combat"
    CombatCasting.name = "Combat Casting"
    CombatCasting.content = "Prerequisites: Ability to cast 2nd-level Spells.\n\nBenefit: You gain a +2 bonus to your Armor Class and saving throws against attacks of opportunity you provoked by casting a Spell and against readied actions triggered by your Spellcasting."
    
    let CoordinatedShot = CompendiumFeat(context: context)
    CoordinatedShot.type = "Combat"
    CoordinatedShot.name = "Coordinated Shot"
    CoordinatedShot.content = "Prerequisites: Base attack bonus +1.\n\nBenefit: When you are threatening a foe with a melee weapon, any ally that has line of sight to that foe without you granting that foe cover gains a +1 bonus to ranged attack rolls against that foe."
    
    let DeadlyAim = CompendiumFeat(context: context)
    DeadlyAim.type = "Combat"
    DeadlyAim.name = "Deadly Aim"
    DeadlyAim.content = "Prerequisites: Base attack bonus +1.\n\nBenefit: When you take the attack or full attack action with weapons (including a Solarian’s Solar Manifestation, but not Spells or other special abilities of any kind), you can take a –2 penalty to your attack rolls. If you do, those attacks deal additional damage equal to half your base attack bonus (minimum 1)."

    let DeflectProjectiles = CompendiumFeat(context: context)
    DeflectProjectiles.type = "Combat"
    DeflectProjectiles.name = "Deflect Projectiles"
    DeflectProjectiles.content = "Prerequisites: Base attack bonus +8.\n\nBenefit: When you would be hit by a ranged attack from a weapon or Spell that deals energy or kinetic damage, you can spend 1 Resolve Point as a reaction to make an attack roll with a nonarchaic melee weapon that deals the same general category of damage (energy or kinetic) with a +5 bonus. If your attack roll is higher than the attack roll that hit you, you deflect the attack with your weapon, and it misses. This doesn’t work against area attacks, even against area attacks that have attack rolls like blast weapons, and you can’t use this reaction if you aren’t capable of making an attack with an appropriate weapon."
    
    let DiveforCover = CompendiumFeat(context: context)
    DiveforCover.type = "Combat"
    DiveforCover.name = "Dive for Cover"
    DiveforCover.content = "Prerequisites: Base Reflex save bonus +2.\n\nBenefit: When you attempt a Reflex save against an area attack or area effect, you can fall prone in an adjacent square and roll that Reflex save twice (taking the better result of the two). If you were in a threatened space, this movement provokes attacks of opportunity normally."

    let DragDown = CompendiumFeat(context: context)
    DragDown.type = "Combat"
    DragDown.name = "Drag Down"
    DragDown.content = "Benefit: Whenever an opponent successfully uses the trip combat maneuver against you, you can attempt to trip an adjacent opponent as a reaction."
    
    let FarShot = CompendiumFeat(context: context)
    FarShot.type = "Combat"
    FarShot.name = "Far Shot"
    FarShot.content = "Prerequisites: Base attack bonus +1.\n\nBenefit: You take only a –1 penalty per full range increment between you and your target when using a ranged weapon.\n\nNormal: You take a –2 penalty per full range increment between you and your target."
    
    let Fleet = CompendiumFeat(context: context)
    Fleet.type = "Combat"
    Fleet.name = "Fleet"
    Fleet.content = "Benefit: While you are wearing light or no armor, your land speed increases by 10 feet. When you are encumbered, your land speed instead increases by only 5 feet. When you are overburdened, your speed is reduced to 10 feet."

    let FocusedSpellcaster = CompendiumFeat(context: context)
    FocusedSpellcaster.type = "Combat"
    FocusedSpellcaster.name = "Focused Spellcaster"
    FocusedSpellcaster.content = "Prerequisites: Combat Casting, ability to cast 4th-level spells.\n\nBenefit: If your spell would fail as a result of you taking damage either from a successful attack or from an effect that you failed a saving throw against during the casting of the spell, as a reaction you can spend a Resolve Point to prevent the spell from failing. You suffer the effects of the attack as normal, but as long as you remain able to complete the spellcasting after the attack, you successfully cast the spell."
    
    let Fusillade = CompendiumFeat(context: context)
    Fusillade.type = "Combat"
    Fusillade.name = "Fusillade"
    Fusillade.content = "Prerequisites: Base attack bonus +1, four or more arms.\n\nBenefit: As a full attack when you are wielding four or more identical small arms, you can fire them all simultaneously to duplicate the effects of an automatic weapon. You use all of the ammunition in all the small arms used, and you treat this as an attack in automatic Mode. Add all the ammunition expended from all of your small arms when determining the maximum number of creatures you can hit."
    
    let GreatCleave = CompendiumFeat(context: context)
    GreatCleave.type = "Combat"
    GreatCleave.name = "Great Cleave"
    GreatCleave.content = "Prerequisites: Str 13, Cleave, base attack bonus +4.\n\nBenefit: If you strike a second target with the Cleave feat, you can spend 1 Resolve Point to make a melee attack against each subsequent foe that is both adjacent to the last target and within your reach, as long as you hit the previous foe. You can’t attack an individual foe more than once during this attack action."
    
    let GreaterFeint = CompendiumFeat(context: context)
    GreaterFeint.type = "Combat"
    GreaterFeint.name = "Greater Feint"
    GreaterFeint.content = "Prerequisites: Improved Feint, base attack bonus +6.\n\nBenefit: Whenever you successfully feint in combat, the foe gains the flat-footed condition until the end of your next turn."
    
    let GrenadeProficiency = CompendiumFeat(context: context)
    GrenadeProficiency.type = "Combat"
    GrenadeProficiency.name = "Grenade Proficiency"
    GrenadeProficiency.content = "Benefit: You gain proficiency in grenades (see Weapon Proficiency on page 243)."
    
    let HeavyArmorProficiency = CompendiumFeat(context: context)
    HeavyArmorProficiency.type = "Combat"
    HeavyArmorProficiency.name = "Heavy Armor Proficiency"
    HeavyArmorProficiency.content = "Prerequisites: Str 13, proficiency in light armor.\n\nBenefit: You gain proficiency in heavy armor."
    
    let HeavyWeaponProficiency = CompendiumFeat(context: context)
    HeavyWeaponProficiency.type = "Combat"
    HeavyWeaponProficiency.name = "Heavy Weapon Proficiency"
    HeavyWeaponProficiency.content = "Prerequisites: Str 13, proficiency in small arms and longarms.\n\nBenefit: You gain proficiency in heavy weapons."
    
    let ImprovedCombatManeuver = CompendiumFeat(context: context)
    ImprovedCombatManeuver.type = "Combat"
    ImprovedCombatManeuver.name = "Improved Combat Maneuver"
    ImprovedCombatManeuver.content = "Prerequisites: Base attack bonus +1.\n\nBenefit: Choose one combat maneuver (bull rush, dirty trick, disarm, grapple, reposition, sunder, or trip). You gain a +4 bonus to your attack roll to resolve that combat maneuver.\n\nSpecial: You can take Improved Combat Maneuver multiple times. The effects don’t stack. Each time you take the feat, it applies to a new combat maneuver."
    
    let ImprovedCritical = CompendiumFeat(context: context)
    ImprovedCritical.type = "Combat"
    ImprovedCritical.name = "Improved Critical"
    ImprovedCritical.content = "Prerequisites: Base attack bonus +8.\n\nBenefit: When you score a critical hit with a weapon, increase the DC to resist that weapon’s critical effect by 2."
    
    let ImprovedFeint = CompendiumFeat(context: context)
    ImprovedFeint.type = "Combat"
    ImprovedFeint.name = "Improved Feint"
    ImprovedFeint.content = "Benefit: You can use Bluff to feint in combat as a move action."

    let ImprovedInitiative = CompendiumFeat(context: context)
    ImprovedInitiative.type = "Combat"
    ImprovedInitiative.name = "Improved Initiative"
    ImprovedInitiative.content = "Benefit: You gain a +4 bonus to initiative checks."
    
    let ImprovedSidestep = CompendiumFeat(context: context)
    ImprovedSidestep.type = "Combat"
    ImprovedSidestep.name = "Improved Sidestep"
    ImprovedSidestep.content = "Prerequisites: Dex 17, Mobility or trick attack class feature, Sidestep.\n\nBenefit: After sidestepping an opponent’s missed attack using the Sidestep feat, you can still take a guarded step during your next turn, or you can move up to your full speed if you take an action to move during your next turn.\n\nNormal: If you use the Sidestep feat, you can’t take a guarded step during your next turn and your movement is reduced by 5 feet during your next turn."
    
    let ImprovedStandStill = CompendiumFeat(context: context)
    ImprovedStandStill.type = "Combat"
    ImprovedStandStill.name = "Improved Stand Still"
    ImprovedStandStill.content = "Prerequisites: Stand Still.\n\nBenefit: You gain a +4 bonus to your melee attack roll for Stand Still."

    let ImprovedUnarmedStrike = CompendiumFeat(context: context)
    ImprovedUnarmedStrike.type = "Combat"
    ImprovedUnarmedStrike.name = "Improved Unarmed Strike"
    ImprovedUnarmedStrike.content = "Benefit: Your unarmed attack damage increases to 1d6 at 4th level, 2d6 at 8th level, 3d6 at 12th level, 5d6 at 15th level, and 7d6 at 20th level. You threaten squares within your natural reach with your unarmed strikes even when you do not have a hand free for an unarmed strike. If you are immobilized, entangled, or unable to use both legs (or whatever appendages you have in place of legs, where appropriate), you lose the ability to make unarmed strikes without your hands. When making an unarmed strike without your hands, you can’t use such attacks for combat maneuvers or similar abilities—only to deal damage.\n\nNormal: You don’t threaten any squares with unarmed attacks, and you must have a hand free to make an unarmed attack."
    
    let InHarmsWay = CompendiumFeat(context: context)
    InHarmsWay.type = "Combat"
    InHarmsWay.name = "In Harm’s Way"
    InHarmsWay.content = "Prerequisites: Bodyguard.\n\nBenefit: When an attack hits an ally whose Armor Class you have increased with the Bodyguard feat, you can intercept the attack. You take all damage and associated effects from that attack, and once you intercept the attack, no other ability can redirect it. This ability takes no action, but you can intercept only one attack in this way each round."
    
    let KasathanBattleDance = CompendiumFeat(context: context)
    KasathanBattleDance.type = "Combat"
    KasathanBattleDance.name = "Kasathan Battle Dance"
    KasathanBattleDance.content = "Prerequisites: Dex 13, Mobility or trick attack.\n\nBenefit: When you take the withdraw action and have at least two hands free, none of the squares you move through are considered threatened by any opponent whose location you are aware of (see The Four States of Awareness).\n\nNormal: When you withdraw, the square you start out in is not considered threatened by opponents you can see, but squares you subsequently move through may be.\n\nSpecial: A solarian with a solar weapon treats the hand holding the solar weapon as being free for purposes of using this feat."
    
    let KipUp = CompendiumFeat(context: context)
    KipUp.type = "Combat"
    KipUp.name = "Kip Up"
    KipUp.content = "Prerequisites: Acrobatics 1 rank.\n\nBenefit: You can stand from prone as a swift action, rather than a move action."
    
    let LightArmorProficiency = CompendiumFeat(context: context)
    LightArmorProficiency.type = "Combat"
    LightArmorProficiency.name = "Light Armor Proficiency"
    LightArmorProficiency.content = "Benefit: You gain proficiency in light armor (see Armor Proficiency on page 242)."
    
    let LongarmProficiency = CompendiumFeat(context: context)
    LongarmProficiency.type = "Combat"
    LongarmProficiency.name = "Longarm Proficiency"
    LongarmProficiency.content = "Prerequisites: Proficiency in small arms.\n\nBenefit: You gain proficiency in longarms (see Weapon Proficiency on page 243)."
    
    let Lunge = CompendiumFeat(context: context)
    Lunge.type = "Combat"
    Lunge.name = "Lunge"
    Lunge.content = "Prerequisites: Base attack bonus +6.\n\nBenefit: You can increase the reach of your melee attacks by 5 feet until the end of your turn by taking a –2 penalty to your Armor Class until the beginning of your next turn. You must decide to use this ability before making any attacks in the round."
    
    let Mobility = CompendiumFeat(context: context)
    Mobility.type = "Combat"
    Mobility.name = "Mobility"
    Mobility.content = "Prerequisites: Dex 13.\n\nBenefit: You gain a +4 bonus to your Armor Class against attacks of opportunity that you provoke by leaving a threatened square."

    let MultiWeaponFighting = CompendiumFeat(context: context)
    MultiWeaponFighting.type = "Combat"
    MultiWeaponFighting.name = "Multi-Weapon Fighting"
    MultiWeaponFighting.content = "Benefit: When you make a full attack with two or more small arms or with two or more operative melee weapons, reduce the penalty for making a full attack by 1."
    
    let MysticStrike = CompendiumFeat(context: context)
    MysticStrike.type = "Combat"
    MysticStrike.name = "Mystic Strike"
    MysticStrike.content = "Prerequisites: Ability to cast Spells.\n\nBenefit: Your melee and ranged attacks count as magic for the purposes of bypassing damage reduction and other situations, such as attacking incorporeal creatures."
    
    let NimbleMoves = CompendiumFeat(context: context)
    NimbleMoves.type = "Combat"
    NimbleMoves.name = "Nimble Moves"
    NimbleMoves.content = "Prerequisites: Dex 15.\n\nBenefit: You can move through up to 20 feet of difficult terrain each round as if it were normal terrain. This feat allows you to take a guarded step into difficult terrain."
    
    let OpeningVolley = CompendiumFeat(context: context)
    OpeningVolley.type = "Combat"
    OpeningVolley.name = "Opening Volley"
    OpeningVolley.content = "Benefit: Whenever you deal damage to an opponent with a ranged attack on your first turn in a combat, you gain a +2 circumstance bonus to your next melee attack roll against that opponent. This melee attack must occur before the end of your next turn."
    
    let PartingShot = CompendiumFeat(context: context)
    PartingShot.type = "Combat"
    PartingShot.name = "Parting Shot"
    PartingShot.content = "Prerequisites: Dex 15, Mobility, Shot on the Run, base attack bonus +6.\nBenefit: When using the withdraw action, you can make a single ranged attack at any point during your movement. If you have the trick attack class feature and are using an appropriate weapon, you can add your trick attack damage to the attack you make while withdrawing. Once you use this ability, you can’t use it again until the next time you regain Stamina Points with a 10-minute rest.\nNormal: You can’t attack when using the withdraw action."
    
    let PenetratingAttack = CompendiumFeat(context: context)
    PenetratingAttack.type = "Combat"
    PenetratingAttack.name = "Penetrating Attack"
    PenetratingAttack.content = "Prerequisites: Base attack bonus +12.\n\nBenefit: Reduce your target’s energy resistances and damage reduction by 5 against your weapon attacks."
    
    let PoweredArmoredProficiency = CompendiumFeat(context: context)
    PoweredArmoredProficiency.type = "Combat"
    PoweredArmoredProficiency.name = "Powered Armored Proficiency"
    PoweredArmoredProficiency.content = "Prerequisites: Str 13, base attack bonus +5, proficiency in light and heavy armor.\n\nBenefit: You gain proficiency in powered armor (see Armor Proficiency on page 242)."
    
    let PullthePin = CompendiumFeat(context: context)
    PullthePin.type = "Combat"
    PullthePin.name = "Pull the Pin"
    PullthePin.content = "Prerequisites: Improved Combat Maneuver (disarm).\n\nBenefit: When you make a successful disarm combat maneuver against a foe that you know has grenades, rather than disarming the foe of a weapon, you can activate one grenade in the foe’s possession. You can activate only a grenade that is ready to be drawn and thrown (not, for example, a grenade stowed away within an equipment pack). The grenade explodes at the end of your current turn, unless it has a delayed fuse that causes it to go off 1 round or more after it is activated.\n\nThe foe takes a –2 penalty to the saving throw against this grenade, and the grenade’s explosion has half its normal area."

    let QuickDraw = CompendiumFeat(context: context)
    QuickDraw.type = "Combat"
    QuickDraw.name = "Quick Draw"
    QuickDraw.content = "Prerequisites: Base attack bonus +1.\n\nBenefit: You can draw a weapon as a swift action. Additionally, when making an attack using a thrown weapon as an attack or full attack action, you can draw a weapon as part of the action of making a thrown attack with it. You can draw a hidden weapon (see Sleight of Hand on page 146) as a move action.\n\nNormal: You can draw a weapon as a move action, or (if your base attack bonus is +1 or higher) as part of a move action, and you can draw a hidden weapon as a standard action."
    
    let ReflectProjectiles = CompendiumFeat(context: context)
    ReflectProjectiles.type = "Combat"
    ReflectProjectiles.name = "Reflect Projectiles"
    ReflectProjectiles.content = "Prerequisites: Deflect Projectiles, base attack bonus +16.\n\nBenefit: When you successfully deflect an attack with the Deflect Projectiles feat, you can spend 1 additional Resolve Point to redirect the attack at a target within 60 feet to which you have line of effect. Make a ranged attack at a –4 penalty against the appropriate Armor Class of the new target. If your attack succeeds, the target is damaged as if it had been the target of the original attack."
    
    let ShotontheRun = CompendiumFeat(context: context)
    ShotontheRun.type = "Combat"
    ShotontheRun.name = "Shot on the Run"
    ShotontheRun.content = "Prerequisites: Dex 15, Mobility, base attack bonus +4.\n\nBenefit: As a full action, you can move up to your speed and make a single ranged attack at any point during your movement. If you have the trick attack class feature, you can take your movement from trick attack at any time during a trick attack with a ranged weapon (instead of only before).\n\nNormal: You can move only before or after an attack with a ranged weapon, not both."
    
    let Sidestep = CompendiumFeat(context: context)
    Sidestep.type = "Combat"
    Sidestep.name = "Sidestep"
    Sidestep.content = "Prerequisites: Dex 15, Mobility or trick attack class feature.\n\nBenefit: Whenever an opponent misses you with a melee attack, you can take a guarded step as a reaction, as long as you remain within that opponent’s threatened area. If you take this step, you can’t take a guarded step during your next turn. If you take an action to move during your next turn, subtract 5 feet from your total movement."
    
    let SlipperyShooter = CompendiumFeat(context: context)
    SlipperyShooter.type = "Combat"
    SlipperyShooter.name = "Slippery Shooter"
    SlipperyShooter.content = "Prerequisites: Dex 15, base attack bonus +6.\n\nBenefit: You gain a +3 bonus to your Armor Class against attacks of opportunity you provoke by making a ranged attack."
    
    let SmallArmProficiency = CompendiumFeat(context: context)
    SmallArmProficiency.type = "Combat"
    SmallArmProficiency.name = "Small Arm Proficiency"
    SmallArmProficiency.content = "Benefit: You gain proficiency in small arms (see Weapon Proficiency on page 243)."
    
    let SniperWeaponProficiency = CompendiumFeat(context: context)
    SniperWeaponProficiency.type = "Combat"
    SniperWeaponProficiency.name = "Sniper Weapon Proficiency"
    SniperWeaponProficiency.content = "Benefit: You gain proficiency in sniper weapons (see Weapon Proficiency on page 243)."

    let SpecialWeaponProficiency = CompendiumFeat(context: context)
    SpecialWeaponProficiency.type = "Combat"
    SpecialWeaponProficiency.name = "Special Weapon Proficiency"
    SpecialWeaponProficiency.content = "Prerequisites: Proficiency in basic melee weapons or small arms (see below).\n\nBenefit: You gain proficiency in a single special weapon of your choice (see Weapon Proficiency on page 243). If the special weapon you choose is a melee special weapon, you must have proficiency in basic melee weapons. If the special weapon you choose is a ranged weapon, you must have proficiency in small arms. If a set of special weapons are all different Models of the same weapon, proficiency in one such weapon grants proficiency with all weapons in the set.\n\nSpecial: You can take this feat multiple times. Each time you do, select a different special weapon."
    
    let SpringAttack = CompendiumFeat(context: context)
    SpringAttack.type = "Combat"
    SpringAttack.name = "Spring Attack"
    SpringAttack.content = "Prerequisites: Dex 15, Mobility, base attack bonus +4.\n\nBenefit: As a full action, you can move up to your speed and make a single melee attack or combat maneuver without provoking any attacks of opportunity from the target of your attack. You can move both before and after the attack, but you must move at least 10 feet before the attack, and the total distance that you move cannot be greater than your speed. You cannot use this ability to attack a foe that is adjacent to you at the start of your turn. If you have the trick attack class feature, you can take your movement from trick attack at any time during a trick attack with a melee weapon (instead of only before), without provoking any attacks of opportunity from the target of your attack.\n\nNormal: You can move only before or after an attack, not both."

    let SpryCover = CompendiumFeat(context: context)
    SpryCover.type = "Combat"
    SpryCover.name = "Spry Cover"
    SpryCover.content = "Prerequisites: Base attack bonus +1.\n\nBenefit: Instead of the usual benefits of covering fire, you can use covering fire to grant an ally a +4 bonus to her next Acrobatics check to tumble before the end of your next turn."
    
    let StandStill = CompendiumFeat(context: context)
    StandStill.type = "Combat"
    StandStill.name = "Stand Still"
    StandStill.content = "Benefit: When a foe provokes an attack of opportunity by leaving a square you threaten, you can attempt a melee attack as a reaction against that foe’s Kinetic Armor Class + 8. If you’re successful, the enemy cannot take any further movement for the rest of its turn. The enemy can still take the rest of its actions, but cannot leave that square."
    
    let StepUp = CompendiumFeat(context: context)
    StepUp.type = "Combat"
    StepUp.name = "Step Up"
    StepUp.content = "Prerequisites: Base attack bonus +1.\n\nBenefit: Whenever an adjacent foe attempts to take a guarded step away from you, you can also take a guarded step as a reaction as long as you end up adjacent to the foe that triggered this ability."
    
    let StepUpandStrike = CompendiumFeat(context: context)
    StepUpandStrike.type = "Combat"
    StepUpandStrike.name = "Step Up and Strike"
    StepUpandStrike.content = "Prerequisites: Dex 13, Step Up, base attack bonus +6.\n\nBenefit: When using the Step Up feat to follow an adjacent foe, you can move up to 10 feet. You can also either make an attack of opportunity against the foe, or wait to see if the foe provokes another attack of opportunity at any point before the end of its turn. Either way, this attack of opportunity does not count toward the number of actions you can usually take each round; it is part of the Step Up reaction."

    let StrikeBack = CompendiumFeat(context: context)
    StrikeBack.type = "Combat"
    StrikeBack.name = "Strike Back"
    StrikeBack.content = "Prerequisites: Base attack bonus +1.\n\nBenefit: You can ready an action to make a melee attack against a foe that attacks you with a melee weapon, even if that foe isn’t within your reach."
    
    let SuppressiveFire = CompendiumFeat(context: context)
    SuppressiveFire.type = "Combat"
    SuppressiveFire.name = "Suppressive Fire"
    SuppressiveFire.content = "Prerequisites: Base attack bonus +1, proficiency with heavy weapons.\n\nBenefit: As a full action, you can use a ranged weapon with the automatic weapon property to provide covering fire or harrying fire in a cone with a range equal to half the weapon’s range increment. You must expend 10 charges or rounds of ammunition to use this ability. Decide if you are providing covering fire or harrying fire. Make a single ranged attack roll with a +4 bonus, and compare it to the AC of all creatures in the area. Any creature with an AC equal to or less than your attack roll is affected by the selected effect. If you select covering fire, choose a single ally that gains the benefit of the covering fire bonus to its AC."
    
    let UnfriendlyFire = CompendiumFeat(context: context)
    UnfriendlyFire.type = "Combat"
    UnfriendlyFire.name = "Unfriendly Fire"
    UnfriendlyFire.content = "Prerequisites: Bluff 5 ranks.\n\nBenefit: As a reaction when an attacker makes a ranged attack against you and misses, you can attempt a Bluff check to redirect the attack toward a different target. The new target must be adjacent to you and within line of sight and line of effect of the original attacker. The DC for this check is equal to either 10 + the attacker’s total Sense Motive skill bonus, or 15 + 1-1/2 × the attacker’s CR, whichever is greater. You can’t take 10 on this check. If you succeed, the original attacker rerolls the attack roll with the same bonuses against the appropriate Armor Class of the new target.\n\nOnce a creature has observed you use this feat, even if that creature is neither the attacker nor the new target, you can’t use this feat to attempt to redirect attacks from that creature for 24 hours."
    
    let VersatileFocus = CompendiumFeat(context: context)
    VersatileFocus.type = "Combat"
    VersatileFocus.name = "Versatile Focus"
    VersatileFocus.content = "Prerequisites: Weapon Focus (any).\n\nBenefit: The benefits of Weapon Focus extend to all weapons with which you are proficient."
    
    let VersatileSpecialization = CompendiumFeat(context: context)
    VersatileSpecialization.type = "Combat"
    VersatileSpecialization.name = "Versatile Specialization"
    VersatileSpecialization.content = "Prerequisites: Weapon Specialization, character level 3rd.\n\nBenefit: You gain specialization in all weapons with which you are proficient that can be selected with Weapon Specialization."
    
    let WeaponFocus = CompendiumFeat(context: context)
    WeaponFocus.type = "Combat"
    WeaponFocus.name = "Weapon Focus"
    WeaponFocus.content = "Prerequisites: Proficiency with selected weapon type.\n\nBenefit: Chose one weapon type (small arms, longarms, heavy weapons, etc.). You gain a +1 bonus to attack rolls with that weapon type. If your base attack bonus is at least 3 lower than your character level (or your mechanic’s class level, if you are a Drone), you gain a +2 bonus instead."
    
    let WeaponSpecialization = CompendiumFeat(context: context)
    WeaponSpecialization.type = "Combat"
    WeaponSpecialization.name = "Weapon Specialization"
    WeaponSpecialization.content = "Prerequisites: Character level 3rd, proficiency with selected weapon type.\n\nBenefit: Choose one weapon type (small arms, longarms, heavy weapons, etc.). You gain specialization in that weapon type, which means you add your character level to damage with the selected weapon type, or half your character level for small arms or operative melee weapons. You can never have specialization in grenades."
    
}



//Spells  ################################################################################################################

func loadSpells() {
    
    let DancingLights = CompendiumSpell(context: context)
    DancingLights.name = "Dancing Lights"
    DancingLights.type = "T"
    DancingLights.level = 0
    DancingLights.school = "Enchantment"
    DancingLights.castingTime = "1 standard action"
    DancingLights.range = "medium (100 ft. + 10 ft./level)"
    DancingLights.effect = "up to four lights"
    DancingLights.duration = "1 minute (D)"
    DancingLights.savingThrow = "none"
    DancingLights.spellResistance = "No"
    DancingLights.content = "You create up to four lights that resemble small headlights or flashlights. The dancing lights must stay within a 10-foot-radius area in relation to each other but otherwise move as you desire: forward or back, up or down, straight or turning corners, or the like. The lights can move up to 100 feet per round. A light winks out if the distance between you and it exceeds the spell’s range.\n\nYou can have only one dancing lights spell active at a time. If you cast this spell while another casting is still in effect, the previous casting is dispelled."

    
    let Daze = CompendiumSpell(context: context)
    Daze.name = "Daze"
    Daze.type = "MT"
    Daze.level = 0
    Daze.school = "Enchantment [compulsion, mind-affecting]"
    Daze.castingTime = "1 standard action"
    Daze.range = "close (25 ft. + 5 ft./2 levels)"
    Daze.targets =  "one humanoid creature of CR 3 or lower"
    Daze.duration = "1 round"
    Daze.savingThrow = "Will negates"
    Daze.spellResistance = "Yes"
    Daze.content = "This spell short-circuits the mind of a humanoid creature with a CR of 3 or lower so that it is dazed (unable to take actions, but taking no penalty to AC). Humanoids of CR 4 or higher are not affected. After a creature has been dazed by this spell, it is immune to it for 1 minute."
    
    let DetectAffliction = CompendiumSpell(context: context)
    DetectAffliction.name = "Detect Affliction"
    DetectAffliction.type = "MT"
    DetectAffliction.level = 0
    DetectAffliction.school = "Divination"
    DetectAffliction.castingTime = "1 standard action"
    DetectAffliction.range = "close (25 ft. + 5 ft./2 levels)"
    DetectAffliction.targets = "one creature or object"
    DetectAffliction.duration = "instantaneous"
    DetectAffliction.spellResistance = "yes (harmless)"
    DetectAffliction.content = "You determine whether a creature or object has been poisoned, is diseased, is Cursed, or is suffering a similar affliction. If the target is poisoned or diseased, you automatically detect that fact and can determine the exact type of poison or disease with a successful DC 20 Intelligence or Wisdom check. If you are trained in Life Science or Medicine (depending on the nature of the poison or disease), you can attempt a DC 20 check of that skill if you fail your Wisdom or Intelligence check. If the target is Cursed or suffering from a similar affliction, you must succeed at a DC 20 Intelligence or Wisdom check to determine that fact. You can then determine the exact nature of the Curse with a successful DC 25 Mysticism check."
    
    let DetectMagic = CompendiumSpell(context: context)
    DetectMagic.name = "Detect Magic"
    DetectMagic.type = "MT"
    DetectMagic.level = 0
    DetectMagic.school = "Divination"
    DetectMagic.castingTime = "1 standard action"
    DetectMagic.range = "60 ft"
    DetectMagic.area = "cone-shaped emanation"
    DetectMagic.duration = "concentration, up to 1 minute/level"
    DetectMagic.savingThrow = "none"
    DetectMagic.spellResistance = "No"
    DetectMagic.content = "You detect all magic spells, effects, items, and objects (including those on or affecting creatures you can see), as well as hybrid items, in the area. You can’t detect magical traps in this way, as they are created with additional magic that wards them from this common spell. Each round you concentrate on the same area, you can determine if one magic source you detect is from a spell, magic item, or other effect, and the caster level (or item level) of the effect. You can’t determine if there are magic sources in areas you can’t see, or if there was a magic source in an area at one time but that has since expired."
    
    let EnergyRay = CompendiumSpell(context: context)
    EnergyRay.name = "Energy Ray"
    EnergyRay.type = "T"
    EnergyRay.level = 0
    EnergyRay.school = "Conjuration [creation]"
    EnergyRay.castingTime = "1 standard action"
    EnergyRay.range = "close (25 ft. + 5 ft./2 levels)"
    EnergyRay.targets =  "one creature or object"
    EnergyRay.duration = "instantaneous"
    EnergyRay.savingThrow = "none"
    EnergyRay.spellResistance = "Yes"
    EnergyRay.content = "When you cast this spell, choose acid, cold, electricity, or fire; the spell gains that descriptor. You fire a ray at the target, and you must make a ranged attack against its EAC. On a hit, the ray deals 1d3 damage of the chosen energy type."

    let FabricateScrap = CompendiumSpell(context: context)
    FabricateScrap.name = "Fabricate Scrap"
    FabricateScrap.type = "T"
    FabricateScrap.level = 0
    FabricateScrap.school = "Universal; see text"
    FabricateScrap.castingTime = "1 standard action"
    FabricateScrap.range = "close (25 ft. + 5 ft./2 levels)"
    FabricateScrap.effect = "creates or converts 1 bulk of inert electronic equipment"
    FabricateScrap.duration = "instantaneous"
    FabricateScrap.savingThrow = "Will negates (Object)"
    FabricateScrap.spellResistance = "Yes (Object); see text"
    FabricateScrap.content = "You turn 1 bulk of inert matter, such as debris, dust, rocks, or other unattended 0-level items, into 1 bulk of junked electronic equipment suitable for targeting with spells such as battle junkbot, handy junkbot, healing junkbot, junk armor, or junksword. The junked electronics have no resale value and cannot be repaired into any functioning item. Any direct examination by a character trained in Engineering or Physical Science reveals the useless nature of the junk."
    
    let Fatigue = CompendiumSpell(context: context)
    Fatigue.name = "Fatigue"
    Fatigue.type = "M"
    Fatigue.level = 0
    Fatigue.school = "Necromancy"
    Fatigue.castingTime = "1 standard action"
    Fatigue.range = "touch"
    Fatigue.targets =  "one creature"
    Fatigue.duration = "1 round/level"
    Fatigue.savingThrow = "Fortitude negates"
    Fatigue.spellResistance = "Yes"
    Fatigue.content = "You make a melee attack against a single target’s EAC, adding your key ability score modifier to the attack roll instead of your Strength modifier if it is higher. The target must succeed at a Fortitude save or be fatigued for the spell’s duration. This spell has no effect on a creature that is already fatigued. Casting this spell doesn’t provoke attacks of opportunity."
    
    let GhostSound = CompendiumSpell(context: context)
    GhostSound.name = "Ghost Sound"
    GhostSound.type = "MT"
    GhostSound.level = 0
    GhostSound.school = "Illusion"
    GhostSound.castingTime = "1 standard action"
    GhostSound.range = "close (25 ft. + 5 ft./2 levels)"
    GhostSound.effect = "illusory sounds"
    GhostSound.targets =  "one creature"
    GhostSound.duration = "1 round/level (D)"
    GhostSound.savingThrow = "Will disbelief"
    GhostSound.spellResistance = "No"
    GhostSound.content = "You create a volume of sound that rises, falls, recedes, approaches, or remains fixed. You choose what type of sound this spell creates when casting it and cannot thereafter change the sound’s basic character.\n\nThe volume of sound created can produce as much noise as 20 normal humans. Thus, you can create shouting, singing, talking, marching, running, or walking sounds, as well as sounds of battle or small explosions. You can make noises that sound like machines, the general chatter of distant conversation, or the roar of an alien predator, but you can’t make specific sounds such as intelligible speech or the exact hum of a particular Starship’s engines."

    let Mending = CompendiumSpell(context: context)
    Mending.name = "Mending"
    Mending.type = "T"
    Mending.level = 0
    Mending.school = "Transmutation"
    Mending.castingTime = "10 minutes"
    Mending.range = "10 ft."
    Mending.targets =  "one object of up to 1 bulk"
    Mending.duration = "instantaneous"
    Mending.savingThrow = "Will negates (harmless, object)"
    Mending.spellResistance = "Yes (harmless, object)"
    Mending.content = "You turn 1 bulk of inert matter, such as debris, dust, rocks, or other unattended 0-level items, into 1 bulk of junked electronic equipment suitable for targeting with spells such as battle junkbot, handy junkbot, healing junkbot, junk armor, or junksword. The junked electronics have no resale value and cannot be repaired into any functioning item. Any direct examination by a character trained in Engineering or Physical Science reveals the useless nature of the junk."
    
    let GraveWords = CompendiumSpell(context: context)
    GraveWords.name = "Grave Words"
    GraveWords.type = "M"
    GraveWords.level = 0
    GraveWords.school = "Necromancy [language-dependent]"
    GraveWords.castingTime = "1 minute"
    GraveWords.range = "touch"
    GraveWords.targets =  "one dead creature"
    GraveWords.duration = "1 round"
    GraveWords.savingThrow = "none"
    GraveWords.spellResistance = "No"
    GraveWords.content = "You can force a touched corpse talk to you, but you can’t ask it specific questions or communicate with it at all. The corpse utters random sentences for 1 round, with a 10% chance this information is of some use to you. Useful information might include warnings about dangers in a wrecked Starship, the password to unlock a computer, or the name of a Supernatural creature seeking you or your allies. The GM makes the d% roll in secret and decides what information, useful or not, the corpse spews out in its babbling.\n\nOnce a corpse has been subjected to grave words by any caster, any new attempt to cast grave words on that corpse fails. A corpse must have a mouth or means to speak in order for this spell to function, and the spell doesn’t affect a corpse that has been turned into an undead creature."

    let PsychokineticHand = CompendiumSpell(context: context)
    PsychokineticHand.name = "Psychokinetic Hand"
    PsychokineticHand.type = "MT"
    PsychokineticHand.level = 0
    PsychokineticHand.school = "Transmutation"
    PsychokineticHand.castingTime = "1 standard action"
    PsychokineticHand.range = "close (25 ft. + 5 ft./2 levels)"
    PsychokineticHand.targets =  "one unattended object of no more than 10 lbs. or 1 bulk"
    PsychokineticHand.duration = "concentration"
    PsychokineticHand.savingThrow = "none"
    PsychokineticHand.spellResistance = "No"
    PsychokineticHand.content = "You point your finger at the target object, gaining the ability to lift it and move it at will from a distance. As a move action, you can propel the object as far as 15 feet in any direction, though the spell ends if the distance between you and the object ever exceeds the spell’s range. You can’t perform complex operations, such as firing a gun or using a computer, but you can shut a mechanical door or lid and work simple buttons to open or close automated doors or trigger an alarm."
    
    let Stabilize = CompendiumSpell(context: context)
    Stabilize.name = "Stabilize"
    Stabilize.type = "M"
    Stabilize.level = 0
    Stabilize.school = "Conjuration [healing]"
    Stabilize.castingTime = "1 standard action"
    Stabilize.range = "close (25 ft. + 5 ft./2 levels)"
    Stabilize.targets =  "one living creature"
    Stabilize.duration = "instantaneous"
    Stabilize.savingThrow = "Will negates (harmless)"
    Stabilize.spellResistance = "Yes (harmless)"
    Stabilize.content = "If the target of this spell has 0 Hit Points and is dying, it automatically stabilizes. If the creature later takes damage, it is no longer stable."
    
    let TelekineticProjectile = CompendiumSpell(context: context)
    TelekineticProjectile.name = "Telekinetic Projectile"
    TelekineticProjectile.type = "M"
    TelekineticProjectile.level = 0
    TelekineticProjectile.school = "Evocation"
    TelekineticProjectile.castingTime = "1 standard action"
    TelekineticProjectile.range = "close (25 ft. + 5 ft./2 levels)"
    TelekineticProjectile.targets =  "one object and one creature"
    TelekineticProjectile.duration = "instantaneous"
    TelekineticProjectile.savingThrow = "none"
    TelekineticProjectile.spellResistance = "No"
    TelekineticProjectile.content = "You fling an object weighing up to 5 pounds (less than 1 bulk) at the target, making a ranged attack against its KAC. If you hit, you deal 1d6 bludgeoning damage to both the target and the object. The type of object thrown doesn’t change the damage type or any other properties of the attack."

    let TelepathicMessage = CompendiumSpell(context: context)
    TelepathicMessage.name = "Telepathic Message"
    TelepathicMessage.type = "MT"
    TelepathicMessage.level = 0
    TelepathicMessage.school = "Divination [language-dependent, mind-affecting]"
    TelepathicMessage.castingTime = "1 standard action"
    TelepathicMessage.range = "medium (100 ft. + 10 ft./level)"
    TelepathicMessage.targets =  "up to one creature/level"
    TelepathicMessage.duration = "10 minutes/level"
    TelepathicMessage.savingThrow = "none"
    TelepathicMessage.spellResistance = "No"
    TelepathicMessage.content = "You can send a short telepathic message and hear simple telepathic replies. Any living creature within 10 feet of you or an intended recipient also receives your telepathic message if it succeeds at a DC 25 Perception check. You must be able to see or hear each recipient. The creatures that receive the message can reply telepathically, but no more than a single message can be sent each round, and each message cannot exceed 10 words. A technomancer casting this spell can also use it to send a message to a computer or a construct with the technological subtype if the receiving target is designed to receive messages."
    
    let TokenSpell = CompendiumSpell(context: context)
    TokenSpell.name = "Token Spell"
    TokenSpell.type = "MT"
    TokenSpell.level = 0
    TokenSpell.school = "Transmutation"
    TokenSpell.castingTime = "1 standard action"
    TokenSpell.range = "10 ft."
    TokenSpell.area = "see text"
    TokenSpell.effect = "see text"
    TokenSpell.targets =  "see text"
    TokenSpell.duration = "1 hour"
    TokenSpell.savingThrow = "none"
    TokenSpell.spellResistance = "Yes"
    TokenSpell.content = "Token spells are often some of the first minor changes that spellcasters produce when they begin experimenting with magic. Once cast, token spell enables you to perform simple magical effects for 1 hour. The effects are minor and have severe limitations. You can slowly lift one item of light bulk. You can alter items in a 1-foot cube each round, coloring, cleaning, soiling, cooling, warming, or flavoring them. You can create small objects, but they look Artificial and are extremely fragile (they can’t be used as tools or weapons). You can illuminate an object to shed dim light in a 30-foot radius.\n\nToken spell lacks the power to duplicate any other spell effects. Any actual change to an object (beyond moving, cleaning, or soiling it) persists for only 1 hour."

    let TransferCharge = CompendiumSpell(context: context)
    TransferCharge.name = "Transfer Charge"
    TransferCharge.type = "T"
    TransferCharge.level = 0
    TransferCharge.school = "Transmutation"
    TransferCharge.castingTime = "1 standard action"
    TransferCharge.range = "touch"
    TransferCharge.targets =  "two objects of the same type; see text"
    TransferCharge.duration = "instantaneous"
    TransferCharge.savingThrow = "Fortitude negates (object)"
    TransferCharge.spellResistance = "Yes (object)"
    TransferCharge.content = "You can transfer any number of charges from one battery to another battery or from one power cell to another power cell. You can only transfer charges using two objects of the exact same type (two batteries of the same size, two identical power cells, or the like); you transfer charges from the source object to the receiving object.\n\nYou must declare how many charges you are transferring before casting this spell. If you transfer more charges from the source than the receiving item can hold, the receiving item must succeed at a Fortitude saving throw or take 1d6 electricity damage. This spell provides no knowledge of how many charges a receiving item can safely hold, but you can choose to transfer fewer charges than the maximum allowed to reduce the risk."
    
    let Carnivorous = CompendiumSpell(context: context)
    Carnivorous.name = "Carnivorous"
    Carnivorous.type = "M"
    Carnivorous.level = 1
    Carnivorous.school = "Transmutation"
    Carnivorous.castingTime = "1 standard action"
    Carnivorous.range = "personal"
    Carnivorous.duration = "1 minute/level"
    Carnivorous.savingThrow = "none"
    Carnivorous.spellResistance = "No"
    Carnivorous.content = "Your mouth expands to twice its normal size,and fills with rows of razor-sharp teeth, giving you a bite attack. This attack is treated as an attack with a basic melee weapon with the operative special quality for purposes of proficiency and Weapon Specialization and for other abilities that function with basic melee operative weapons. You can make this attack without using any limbs and when pinned. The attack deals 1d4 piercing damage. At 7th level, the damage increases to 2d4. At 10th level, it increases to 2d8. At 14th level, it increases to 3d8. At 16th level, it increases to 4d8. At 18th level, it increases to 5d8. At 20th level, it increases to 10d8."

    let CharmPerson = CompendiumSpell(context: context)
    CharmPerson.name = "Charm Person"
    CharmPerson.type = "M"
    CharmPerson.level = 1
    CharmPerson.school = "Enchantment [charm, mind-affecting]"
    CharmPerson.castingTime = "1 standard action"
    CharmPerson.range = "close (25 ft. + 5 ft./2 levels)"
    CharmPerson.targets =  "one humanoid creature"
    CharmPerson.duration = "1 hour/level"
    CharmPerson.savingThrow = "Will negates"
    CharmPerson.spellResistance = "Yes"
    CharmPerson.content = "This charm makes a humanoid creature regard you as its trusted friend and ally (treat the target’s attitude as friendly). If the creature is currently being threatened or attacked by you or your allies, however, it receives a +5 bonus to its saving throw.\n\nThe spell does not enable you to control the charmed creature as if it were an automaton. It is unlikely to attempt to harm you, but it is also unlikely to attack any of its true friends or allies. You can try to give the target suggestions, but you must succeed at an opposed Charisma check to convince it to do anything it wouldn’t ordinarily do. (Retries of this check are not allowed.) An affected creature never obeys suicidal or obviously harmful suggestions. Any act by you or your apparent allies that threatens the charmed creature breaks the spell. You must speak the creature’s language to communicate your suggestions, or else be good at pantomiming."

    let Command = CompendiumSpell(context: context)
    Command.name = "Command"
    Command.type = "M"
    Command.level = 1
    Command.school = "Enchantment [compulsion, language-dependent, mind-affecting]"
    Command.castingTime = "1 standard action"
    Command.range = "close (25 ft. + 5 ft./2 levels)"
    Command.targets =  "one living creature"
    Command.duration = "1 round"
    Command.savingThrow = "Will negates"
    Command.spellResistance = "Yes"
    Command.content = "You give the target one of the following commands, which it obeys to the best of its ability at its earliest opportunity. If the target can’t carry out your command on its next turn, the spell automatically fails.\n\nApproach: The target moves toward you as quickly and directly as possible for 1 round, taking no other actions and triggering reactions (such as attacks of opportunity) for this movement as normal.\n\nDrop: The target drops whatever it is holding. It can’t pick up any dropped item until its next turn.\n\nFall: The target falls to the ground and remains prone for 1 round. It can otherwise act normally.\n\nFlee: The target moves away from you as quickly and directly as possible for 1 round, taking no other actions and provoking reactions (such as attacks of opportunity) for this movement as normal.\n\nHalt: The target is dazed for 1 round."

    let ComprehendLanguages = CompendiumSpell(context: context)
    ComprehendLanguages.name = "Comprehend Languages"
    ComprehendLanguages.type = "T"
    ComprehendLanguages.level = 1
    ComprehendLanguages.school = "Divination"
    ComprehendLanguages.castingTime = "1 standard action"
    ComprehendLanguages.range = "personal"
    ComprehendLanguages.duration = "10 minutes/level"
    ComprehendLanguages.content = "You can understand the spoken or signed words of creatures or read otherwise incomprehensible written or tactile messages. The ability to read does not necessarily impart insight into the material, merely its literal meaning. The spell enables you to understand or read an unknown language, not speak or write it. You can’t use this spell to read magic writing or encoded messages (though it does reveal if a message is magic or encoded), but you can use it to read raw computer code or foreign programming languages, allowing you to understand enough to attempt Computers checks on those materials without penalties."
    
    let ConfusionLesser = CompendiumSpell(context: context)
    ConfusionLesser.name = "Confusion, Lesser"
    ConfusionLesser.type = "M"
    ConfusionLesser.level = 1
    ConfusionLesser.school = "Enchantment [compulsion, mind-affecting]"
    ConfusionLesser.castingTime = "1 standard action"
    ConfusionLesser.range = "close (25 ft. + 5 ft./2 levels)"
    ConfusionLesser.targets =  "one living creature"
    ConfusionLesser.duration = "1 round"
    ConfusionLesser.savingThrow = "Will negates"
    ConfusionLesser.spellResistance = "Yes"
    ConfusionLesser.content = "This spell causes a single creature to become confused (as per the confusion spell) for 1 round."

    let DetectRadiation = CompendiumSpell(context: context)
    DetectRadiation.name = "Detect Radiation"
    DetectRadiation.type = "M"
    DetectRadiation.level = 1
    DetectRadiation.school = "Divination"
    DetectRadiation.castingTime = "1 standard action"
    DetectRadiation.range = "120 ft."
    DetectRadiation.area = "120-ft. spherical emanation centered on you"
    DetectRadiation.targets =  "one living creature"
    DetectRadiation.duration = "10 minutes/level"
    DetectRadiation.savingThrow = "none"
    DetectRadiation.spellResistance = "No"
    DetectRadiation.content = "You detect radiation in the surrounding area, and you can determine the specific intensity of the radiation of one area or object within the spell’s area each round without taking an action (see Radiation for more details). The spell can penetrate barriers, but 3 feet of dirt or wood, 1 foot of stone, 1 inch of common metal, a thin sheet of lead, or any force field blocks it."
    
    let DetectTech = CompendiumSpell(context: context)
    DetectTech.name = "Detect Tech"
    DetectTech.type = "T"
    DetectTech.level = 1
    DetectTech.school = "Divination"
    DetectTech.castingTime = "1 standard action"
    DetectTech.range = "60 ft."
    DetectTech.area = "cone-shaped burst"
    DetectTech.duration = "instantaneous"
    DetectTech.savingThrow = "none"
    DetectTech.spellResistance = "No"
    DetectTech.content = "You detect all technological items (even hybrid items) with charges or that replenish charges in the area, including batteries, power cells, and generators (as well as such items that are on creatures you can see, even if the creatures have hidden those items on themselves). You can’t determine if there are technological items in areas you can’t see, nor can you detect technological traps in this way.\n\nThe information this spell provides allows you to differentiate between charged items and items that replenish charges, but it does not provide any further information nor does it tell you, for example, how many charges an item currently has or how many maximum charges it can hold. This spell can penetrate barriers, but 3 feet of dirt or wood, 1 foot of stone, 1 inch of common metal, a thin sheet of lead, or any force field blocks it."

    let DetectThoughts = CompendiumSpell(context: context)
    DetectThoughts.name = "Detect Thoughts"
    DetectThoughts.type = "M"
    DetectThoughts.level = 1
    DetectThoughts.school = "Divination [mind-effecting]"
    DetectThoughts.castingTime = "1 standard action"
    DetectThoughts.range = "60 ft."
    DetectThoughts.area = "cone-shaped emanation"
    DetectThoughts.duration = "concentration, up to 1 minute/level"
    DetectThoughts.savingThrow = "Will negates"
    DetectThoughts.spellResistance = "No"
    DetectThoughts.content = "You detect the surface thoughts of intelligent creatures around you. The amount of information revealed depends on how long you study a particular area or target.\n\n1st Round: You detect the presence or absence of thoughts from conscious creatures that have Intelligence scores of at least 1 (or an Intelligence modifier of –5) or higher.\n\n2nd Round: You detect the number of thinking minds and the Intelligence score (or modifier) of each. If the highest Intelligence score is 26 (or a modifier of +8) or higher and at least 10 points higher than your own Intelligence score (or 5 points higher than your own Intelligence modifier), you are stunned for 1 round and the spell ends. This spell doesn’t let you determine the location of the thinking minds if you can’t see the creatures whose thoughts you are detecting.\n\n3rd Round: You can read the surface thoughts of any mind in the area. A target who succeeds at its Will save prevents you from reading its thoughts, and you must cast detect thoughts again to have another chance. Creatures of animal intelligence (an Intelligence score of 1 or 2 or an Intelligence modifier of –4 or lower) have simple, instinctual thoughts.\n\nEach round, you can turn to detect thoughts in a new area. The spell can penetrate barriers, but 3 feet of dirt or wood, 1 foot of stone, 1 inch of common metal, a thin sheet of lead, or any force field blocks it."

    let DisguiseSelf = CompendiumSpell(context: context)
    DisguiseSelf.name = "Disguise Self"
    DisguiseSelf.type = "MT"
    DisguiseSelf.level = 1
    DisguiseSelf.school = "Illusion"
    DisguiseSelf.castingTime = "1 standard action"
    DisguiseSelf.range = "personal"
    DisguiseSelf.duration = "10 minutes/level (D)"
    DisguiseSelf.savingThrow = "Will negates"
    DisguiseSelf.spellResistance = "No"
    DisguiseSelf.content = "You make yourself—and any clothing, armor, weapons, and equipment on you—look different. You can seem up to 1 foot shorter or taller, thin, fat, or in between. You can’t change your creature type (although you can appear as another subtype). Otherwise, the extent of the apparent change is up to you. You could merely add or obscure a minor feature, or you could look like an entirely different person or gender.\n\nThe spell does not provide the abilities or mannerisms of the chosen form nor does it alter the perceived tactile (touch) or audible (sound) properties of you or your equipment.\n\nIf you use this spell to create a disguise, you gain a +10 circumstance bonus to the Disguise check (since it counts as altering your form). A creature that interacts with you directly can attempt a Will saving throw to recognize your appearance as an illusion."
    
    let Erase = CompendiumSpell(context: context)
    Erase.name = "Erase"
    Erase.type = "T"
    Erase.level = 1
    Erase.school = "Transmutation"
    Erase.castingTime = "1 standard action"
    Erase.range = "close (25 ft. + 5 ft./2 levels)"
    Erase.targets =  "one written data set"
    Erase.duration = "instantaneous"
    Erase.savingThrow = "none"
    Erase.spellResistance = "No"
    Erase.content = "Erase removes writings of either magical or mundane nature from any written storage, including paper, computers, or similar devices. You remove up to 1,500 words worth of text (for computer files, this could be a 1,500-word data file or 1,500 words of computer code). With this spell, you can remove magic runes and glyphs created by spells of 3rd-level and lower.\n\nNonmagical writing in a book or manual is automatically erased if you touch it and no one else is holding it. Magical writing and computer programs must be touched (either directly or by touching the physical drive that holds the file) to be erased, and you must also succeed at a caster level check (1d20 + caster level) with a DC equal to 11 + the caster level for the magical writing or the item level of the computer’s drive. Computers generally keep backups on a round-by-round basis, and when you erase code from a computer, it takes 1 round for the computer to access its backups. If you erase a file that stores continuous data (like a camera feed), the computer won’t be able to recover the missing round. A natural 1 is always a failure on this check. If you fail to erase writing that is part of a trap (magical or otherwise), you set off that trap."

    let Fear1 = CompendiumSpell(context: context)
    Fear1.name = "Fear 1"
    Fear1.type = "M"
    Fear1.level = 1
    Fear1.school = "Enchantment [emotion, fear, mind-affecting]"
    Fear1.castingTime = "1 standard action"
    Fear1.range = "see text"
    Fear1.targets =  "see text"
    Fear1.duration = "see text"
    Fear1.savingThrow = "Will partial"
    Fear1.spellResistance = "Yes"
    Fear1.content = "With a single mental nudge, you can unlock one or more targets’ deepest nightmares. A target that succeeds at its Will saving throw against this spell is shaken for 1 round.\n\n1st: When you cast fear as a 1st-level spell, it affects one living creature of CR 4 or lower at close range (25 feet + 5 feet/2 levels). The target must succeed at a Will saving throw or be frightened for 1d4 rounds.\n\n2nd: When you cast fear as a 2nd-level spell, it affects one living creature of CR 4 or lower per 3 caster levels at medium range (100 feet + 10 feet/level), no two of which can be more than 30 feet apart. Each target must succeed at a Will saving throw or be frightened for 1 minute.\n\n3rd: When you cast fear as 3rd-level spell, it affects all living creatures of CR 8 or lower in 30-foot cone-shaped burst. Each target must succeed at a Will save or become panicked for 1 minute. If cornered, a panicked creature begins cowering.\n\n4th: When you cast fear as 4th-level spell, it affects all living creatures in 30-foot cone-shaped burst regardless of CR. Each target must succeed at a Will save or become panicked for 1 minute. If cornered, a panicked creature begins cowering."

    let Fear2 = CompendiumSpell(context: context)
    Fear2.name = "Fear 2"
    Fear2.type = "M"
    Fear2.level = 2
    Fear2.school = "Enchantment [emotion, fear, mind-affecting]"
    Fear2.castingTime = "1 standard action"
    Fear2.range = "see text"
    Fear2.targets =  "see text"
    Fear2.duration = "see text"
    Fear2.savingThrow = "Will partial"
    Fear2.spellResistance = "Yes"
    Fear2.content = "With a single mental nudge, you can unlock one or more targets’ deepest nightmares. A target that succeeds at its Will saving throw against this spell is shaken for 1 round.\n\n1st: When you cast fear as a 1st-level spell, it affects one living creature of CR 4 or lower at close range (25 feet + 5 feet/2 levels). The target must succeed at a Will saving throw or be frightened for 1d4 rounds.\n\n2nd: When you cast fear as a 2nd-level spell, it affects one living creature of CR 4 or lower per 3 caster levels at medium range (100 feet + 10 feet/level), no two of which can be more than 30 feet apart. Each target must succeed at a Will saving throw or be frightened for 1 minute.\n\n3rd: When you cast fear as 3rd-level spell, it affects all living creatures of CR 8 or lower in 30-foot cone-shaped burst. Each target must succeed at a Will save or become panicked for 1 minute. If cornered, a panicked creature begins cowering.\n\n4th: When you cast fear as 4th-level spell, it affects all living creatures in 30-foot cone-shaped burst regardless of CR. Each target must succeed at a Will save or become panicked for 1 minute. If cornered, a panicked creature begins cowering."

    let Fear3 = CompendiumSpell(context: context)
    Fear3.name = "Fear 3"
    Fear3.type = "M"
    Fear3.level = 3
    Fear3.school = "Enchantment [emotion, fear, mind-affecting]"
    Fear3.castingTime = "1 standard action"
    Fear3.range = "see text"
    Fear3.targets =  "see text"
    Fear3.duration = "see text"
    Fear3.savingThrow = "Will partial"
    Fear3.spellResistance = "Yes"
    Fear3.content = "With a single mental nudge, you can unlock one or more targets’ deepest nightmares. A target that succeeds at its Will saving throw against this spell is shaken for 1 round.\n\n1st: When you cast fear as a 1st-level spell, it affects one living creature of CR 4 or lower at close range (25 feet + 5 feet/2 levels). The target must succeed at a Will saving throw or be frightened for 1d4 rounds.\n\n2nd: When you cast fear as a 2nd-level spell, it affects one living creature of CR 4 or lower per 3 caster levels at medium range (100 feet + 10 feet/level), no two of which can be more than 30 feet apart. Each target must succeed at a Will saving throw or be frightened for 1 minute.\n\n3rd: When you cast fear as 3rd-level spell, it affects all living creatures of CR 8 or lower in 30-foot cone-shaped burst. Each target must succeed at a Will save or become panicked for 1 minute. If cornered, a panicked creature begins cowering.\n\n4th: When you cast fear as 4th-level spell, it affects all living creatures in 30-foot cone-shaped burst regardless of CR. Each target must succeed at a Will save or become panicked for 1 minute. If cornered, a panicked creature begins cowering."

    let Fear4 = CompendiumSpell(context: context)
    Fear4.name = "Fear 4"
    Fear4.type = "M"
    Fear4.level = 4
    Fear4.school = "Enchantment [emotion, fear, mind-affecting]"
    Fear4.castingTime = "1 standard action"
    Fear4.range = "see text"
    Fear4.targets =  "see text"
    Fear4.duration = "see text"
    Fear4.savingThrow = "Will partial"
    Fear4.spellResistance = "Yes"
    Fear4.content = "With a single mental nudge, you can unlock one or more targets’ deepest nightmares. A target that succeeds at its Will saving throw against this spell is shaken for 1 round.\n\n1st: When you cast fear as a 1st-level spell, it affects one living creature of CR 4 or lower at close range (25 feet + 5 feet/2 levels). The target must succeed at a Will saving throw or be frightened for 1d4 rounds.\n\n2nd: When you cast fear as a 2nd-level spell, it affects one living creature of CR 4 or lower per 3 caster levels at medium range (100 feet + 10 feet/level), no two of which can be more than 30 feet apart. Each target must succeed at a Will saving throw or be frightened for 1 minute.\n\n3rd: When you cast fear as 3rd-level spell, it affects all living creatures of CR 8 or lower in 30-foot cone-shaped burst. Each target must succeed at a Will save or become panicked for 1 minute. If cornered, a panicked creature begins cowering.\n\n4th: When you cast fear as 4th-level spell, it affects all living creatures in 30-foot cone-shaped burst regardless of CR. Each target must succeed at a Will save or become panicked for 1 minute. If cornered, a panicked creature begins cowering."

    let Flight1 = CompendiumSpell(context: context)
    Flight1.name = "Flight 1"
    Flight1.type = "T"
    Flight1.level = 1
    Flight1.school = "Transmutation"
    Flight1.castingTime = "1 standard action; see text"
    Flight1.range = "see text"
    Flight1.targets =  "see text"
    Flight1.duration = "see text"
    Flight1.savingThrow = "Will negates (harmless)"
    Flight1.spellResistance = "Yes (harmless)"
    Flight1.content = "You tinker with the particles of magic surrounding one or more targets to either allow them to slow a fall, gently rise or descend, or fly short or vast distances.\n\n1st: When you cast flight as a 1st-level spell, you can target one Medium or smaller falling object or creature per level at close range (25 feet + 5 feet/2 levels). The targets must all be within 20 feet of each other. A Large creature or object counts as two Medium creatures or objects, a Huge creature or object counts as four Medium creatures or objects, and so on. The affected targets instantly fall slower, at a rate of just 60 feet per round (equivalent to the end of a fall from a few feet). The targets take no damage upon landing while the spell is in effect. This spell doesn’t affect charging or flying creatures.\n\nFor each target, this casting of the spell lasts until that target lands or 1 round per caster level (whichever happens first).\n\nThe 1st-level version of this spell can be cast as a reaction, but when you do so, you can’t take a standard action on your next round.\n\n2nd: When you cast flight as a 2nd-level spell, you can target yourself or one willing or unconscious creature or unattended object (total weight up to 100 pounds or 10 bulk per level) at close range. The spell allows you to move the target up or down as you wish. Each round as a move action, you can mentally direct the target up or down as much as 20 feet. You can’t move the target horizontally. A levitating creature that attacks with a melee or ranged weapon finds itself increasingly unstable; the first attack takes a –1 penalty to attack rolls, the second a –2 penalty, and so on, to a maximum of –5. A full round spent stabilizing allows the creature to begin again at –1.\n\nThis casting of the spell lasts 1 minute per caster level and is dismissible.\n\n3rd: When you cast flight as a 3rd-level spell, you can target one willing or unconscious touched creature and give it the power of flight. The target can fly at a speed of 60 feet with average maneuverability. Flying while under this spell’s effects takes no more concentration than walking, so the target can attack or cast spells normally. The target can charge but not run, and it can’t carry aloft more weight than its normal bulk limit. The target gains a bonus to Acrobatics checks to fly equal to half your caster level.\n\nIf this spell expires or is dispelled while the target is aloft, the target floats downward 60 feet per round for 1d6 rounds. If it reaches the ground in that amount of time, it lands safely. If not, it falls the rest of the distance, taking 1d6 damage per 10 feet fallen.\n\nThe spell lasts for 1 minute per caster level.\n\n4th: When you cast flight as a 4th-level spell, you can target one willing or unconscious touched creature and affect it as per the 3rd-level version of the spell, except the target’s fly speed is increased by 10 feet and the spell lasts for 10 minutes per caster level.\n\n5th: When you cast flight as a 5th-level spell, you can target yourself and be affected as per the 4th-level version of the spell, except the spell lasts for 1 hour per caster level. When you use this flight speed for long-distance movement, you can hustle without taking nonlethal damage (a forced march still requires Constitution checks). You can cover 140 miles in an 8-hour period of flight (or 80 miles at a speed of 50 feet).\n\n6th: When you cast flight as a 6th-level spell, you can target multiple willing or unconscious creatures at close range (25 feet + 5 feet/2 levels) and affect them as per the 3rd-level version of the spell. You can target one creature per caster level, all of which must be within 30 feet of each other. This casting of the spell lasts 10 minutes per caster level."

    let Flight2 = CompendiumSpell(context: context)
    Flight2.name = "Flight 2"
    Flight2.type = "T"
    Flight2.level = 2
    Flight2.school = "Transmutation"
    Flight2.castingTime = "1 standard action; see text"
    Flight2.range = "see text"
    Flight2.targets =  "see text"
    Flight2.duration = "see text"
    Flight2.savingThrow = "Will negates (harmless)"
    Flight2.spellResistance = "Yes (harmless)"
    Flight2.content = "You tinker with the particles of magic surrounding one or more targets to either allow them to slow a fall, gently rise or descend, or fly short or vast distances.\n\n1st: When you cast flight as a 1st-level spell, you can target one Medium or smaller falling object or creature per level at close range (25 feet + 5 feet/2 levels). The targets must all be within 20 feet of each other. A Large creature or object counts as two Medium creatures or objects, a Huge creature or object counts as four Medium creatures or objects, and so on. The affected targets instantly fall slower, at a rate of just 60 feet per round (equivalent to the end of a fall from a few feet). The targets take no damage upon landing while the spell is in effect. This spell doesn’t affect charging or flying creatures.\n\nFor each target, this casting of the spell lasts until that target lands or 1 round per caster level (whichever happens first).\n\nThe 1st-level version of this spell can be cast as a reaction, but when you do so, you can’t take a standard action on your next round.\n\n2nd: When you cast flight as a 2nd-level spell, you can target yourself or one willing or unconscious creature or unattended object (total weight up to 100 pounds or 10 bulk per level) at close range. The spell allows you to move the target up or down as you wish. Each round as a move action, you can mentally direct the target up or down as much as 20 feet. You can’t move the target horizontally. A levitating creature that attacks with a melee or ranged weapon finds itself increasingly unstable; the first attack takes a –1 penalty to attack rolls, the second a –2 penalty, and so on, to a maximum of –5. A full round spent stabilizing allows the creature to begin again at –1.\n\nThis casting of the spell lasts 1 minute per caster level and is dismissible.\n\n3rd: When you cast flight as a 3rd-level spell, you can target one willing or unconscious touched creature and give it the power of flight. The target can fly at a speed of 60 feet with average maneuverability. Flying while under this spell’s effects takes no more concentration than walking, so the target can attack or cast spells normally. The target can charge but not run, and it can’t carry aloft more weight than its normal bulk limit. The target gains a bonus to Acrobatics checks to fly equal to half your caster level.\n\nIf this spell expires or is dispelled while the target is aloft, the target floats downward 60 feet per round for 1d6 rounds. If it reaches the ground in that amount of time, it lands safely. If not, it falls the rest of the distance, taking 1d6 damage per 10 feet fallen.\n\nThe spell lasts for 1 minute per caster level.\n\n4th: When you cast flight as a 4th-level spell, you can target one willing or unconscious touched creature and affect it as per the 3rd-level version of the spell, except the target’s fly speed is increased by 10 feet and the spell lasts for 10 minutes per caster level.\n\n5th: When you cast flight as a 5th-level spell, you can target yourself and be affected as per the 4th-level version of the spell, except the spell lasts for 1 hour per caster level. When you use this flight speed for long-distance movement, you can hustle without taking nonlethal damage (a forced march still requires Constitution checks). You can cover 140 miles in an 8-hour period of flight (or 80 miles at a speed of 50 feet).\n\n6th: When you cast flight as a 6th-level spell, you can target multiple willing or unconscious creatures at close range (25 feet + 5 feet/2 levels) and affect them as per the 3rd-level version of the spell. You can target one creature per caster level, all of which must be within 30 feet of each other. This casting of the spell lasts 10 minutes per caster level."

    let Flight3 = CompendiumSpell(context: context)
    Flight3.name = "Flight 3"
    Flight3.type = "T"
    Flight3.level = 3
    Flight3.school = "Transmutation"
    Flight3.castingTime = "1 standard action; see text"
    Flight3.range = "see text"
    Flight3.targets =  "see text"
    Flight3.duration = "see text"
    Flight3.savingThrow = "Will negates (harmless)"
    Flight3.spellResistance = "Yes (harmless)"
    Flight3.content = "You tinker with the particles of magic surrounding one or more targets to either allow them to slow a fall, gently rise or descend, or fly short or vast distances.\n\n1st: When you cast flight as a 1st-level spell, you can target one Medium or smaller falling object or creature per level at close range (25 feet + 5 feet/2 levels). The targets must all be within 20 feet of each other. A Large creature or object counts as two Medium creatures or objects, a Huge creature or object counts as four Medium creatures or objects, and so on. The affected targets instantly fall slower, at a rate of just 60 feet per round (equivalent to the end of a fall from a few feet). The targets take no damage upon landing while the spell is in effect. This spell doesn’t affect charging or flying creatures.\n\nFor each target, this casting of the spell lasts until that target lands or 1 round per caster level (whichever happens first).\n\nThe 1st-level version of this spell can be cast as a reaction, but when you do so, you can’t take a standard action on your next round.\n\n2nd: When you cast flight as a 2nd-level spell, you can target yourself or one willing or unconscious creature or unattended object (total weight up to 100 pounds or 10 bulk per level) at close range. The spell allows you to move the target up or down as you wish. Each round as a move action, you can mentally direct the target up or down as much as 20 feet. You can’t move the target horizontally. A levitating creature that attacks with a melee or ranged weapon finds itself increasingly unstable; the first attack takes a –1 penalty to attack rolls, the second a –2 penalty, and so on, to a maximum of –5. A full round spent stabilizing allows the creature to begin again at –1.\n\nThis casting of the spell lasts 1 minute per caster level and is dismissible.\n\n3rd: When you cast flight as a 3rd-level spell, you can target one willing or unconscious touched creature and give it the power of flight. The target can fly at a speed of 60 feet with average maneuverability. Flying while under this spell’s effects takes no more concentration than walking, so the target can attack or cast spells normally. The target can charge but not run, and it can’t carry aloft more weight than its normal bulk limit. The target gains a bonus to Acrobatics checks to fly equal to half your caster level.\n\nIf this spell expires or is dispelled while the target is aloft, the target floats downward 60 feet per round for 1d6 rounds. If it reaches the ground in that amount of time, it lands safely. If not, it falls the rest of the distance, taking 1d6 damage per 10 feet fallen.\n\nThe spell lasts for 1 minute per caster level.\n\n4th: When you cast flight as a 4th-level spell, you can target one willing or unconscious touched creature and affect it as per the 3rd-level version of the spell, except the target’s fly speed is increased by 10 feet and the spell lasts for 10 minutes per caster level.\n\n5th: When you cast flight as a 5th-level spell, you can target yourself and be affected as per the 4th-level version of the spell, except the spell lasts for 1 hour per caster level. When you use this flight speed for long-distance movement, you can hustle without taking nonlethal damage (a forced march still requires Constitution checks). You can cover 140 miles in an 8-hour period of flight (or 80 miles at a speed of 50 feet).\n\n6th: When you cast flight as a 6th-level spell, you can target multiple willing or unconscious creatures at close range (25 feet + 5 feet/2 levels) and affect them as per the 3rd-level version of the spell. You can target one creature per caster level, all of which must be within 30 feet of each other. This casting of the spell lasts 10 minutes per caster level."

    let Flight4 = CompendiumSpell(context: context)
    Flight4.name = "Flight 4"
    Flight4.type = "T"
    Flight4.level = 4
    Flight4.school = "Transmutation"
    Flight4.castingTime = "1 standard action; see text"
    Flight4.range = "see text"
    Flight4.targets =  "see text"
    Flight4.duration = "see text"
    Flight4.savingThrow = "Will negates (harmless)"
    Flight4.spellResistance = "Yes (harmless)"
    Flight4.content = "You tinker with the particles of magic surrounding one or more targets to either allow them to slow a fall, gently rise or descend, or fly short or vast distances.\n\n1st: When you cast flight as a 1st-level spell, you can target one Medium or smaller falling object or creature per level at close range (25 feet + 5 feet/2 levels). The targets must all be within 20 feet of each other. A Large creature or object counts as two Medium creatures or objects, a Huge creature or object counts as four Medium creatures or objects, and so on. The affected targets instantly fall slower, at a rate of just 60 feet per round (equivalent to the end of a fall from a few feet). The targets take no damage upon landing while the spell is in effect. This spell doesn’t affect charging or flying creatures.\n\nFor each target, this casting of the spell lasts until that target lands or 1 round per caster level (whichever happens first).\n\nThe 1st-level version of this spell can be cast as a reaction, but when you do so, you can’t take a standard action on your next round.\n\n2nd: When you cast flight as a 2nd-level spell, you can target yourself or one willing or unconscious creature or unattended object (total weight up to 100 pounds or 10 bulk per level) at close range. The spell allows you to move the target up or down as you wish. Each round as a move action, you can mentally direct the target up or down as much as 20 feet. You can’t move the target horizontally. A levitating creature that attacks with a melee or ranged weapon finds itself increasingly unstable; the first attack takes a –1 penalty to attack rolls, the second a –2 penalty, and so on, to a maximum of –5. A full round spent stabilizing allows the creature to begin again at –1.\n\nThis casting of the spell lasts 1 minute per caster level and is dismissible.\n\n3rd: When you cast flight as a 3rd-level spell, you can target one willing or unconscious touched creature and give it the power of flight. The target can fly at a speed of 60 feet with average maneuverability. Flying while under this spell’s effects takes no more concentration than walking, so the target can attack or cast spells normally. The target can charge but not run, and it can’t carry aloft more weight than its normal bulk limit. The target gains a bonus to Acrobatics checks to fly equal to half your caster level.\n\nIf this spell expires or is dispelled while the target is aloft, the target floats downward 60 feet per round for 1d6 rounds. If it reaches the ground in that amount of time, it lands safely. If not, it falls the rest of the distance, taking 1d6 damage per 10 feet fallen.\n\nThe spell lasts for 1 minute per caster level.\n\n4th: When you cast flight as a 4th-level spell, you can target one willing or unconscious touched creature and affect it as per the 3rd-level version of the spell, except the target’s fly speed is increased by 10 feet and the spell lasts for 10 minutes per caster level.\n\n5th: When you cast flight as a 5th-level spell, you can target yourself and be affected as per the 4th-level version of the spell, except the spell lasts for 1 hour per caster level. When you use this flight speed for long-distance movement, you can hustle without taking nonlethal damage (a forced march still requires Constitution checks). You can cover 140 miles in an 8-hour period of flight (or 80 miles at a speed of 50 feet).\n\n6th: When you cast flight as a 6th-level spell, you can target multiple willing or unconscious creatures at close range (25 feet + 5 feet/2 levels) and affect them as per the 3rd-level version of the spell. You can target one creature per caster level, all of which must be within 30 feet of each other. This casting of the spell lasts 10 minutes per caster level."

    let Flight5 = CompendiumSpell(context: context)
    Flight5.name = "Flight 5"
    Flight5.type = "T"
    Flight5.level = 5
    Flight5.school = "Transmutation"
    Flight5.castingTime = "1 standard action; see text"
    Flight5.range = "see text"
    Flight5.targets =  "see text"
    Flight5.duration = "see text"
    Flight5.savingThrow = "Will negates (harmless)"
    Flight5.spellResistance = "Yes (harmless)"
    Flight5.content = "You tinker with the particles of magic surrounding one or more targets to either allow them to slow a fall, gently rise or descend, or fly short or vast distances.\n\n1st: When you cast flight as a 1st-level spell, you can target one Medium or smaller falling object or creature per level at close range (25 feet + 5 feet/2 levels). The targets must all be within 20 feet of each other. A Large creature or object counts as two Medium creatures or objects, a Huge creature or object counts as four Medium creatures or objects, and so on. The affected targets instantly fall slower, at a rate of just 60 feet per round (equivalent to the end of a fall from a few feet). The targets take no damage upon landing while the spell is in effect. This spell doesn’t affect charging or flying creatures.\n\nFor each target, this casting of the spell lasts until that target lands or 1 round per caster level (whichever happens first).\n\nThe 1st-level version of this spell can be cast as a reaction, but when you do so, you can’t take a standard action on your next round.\n\n2nd: When you cast flight as a 2nd-level spell, you can target yourself or one willing or unconscious creature or unattended object (total weight up to 100 pounds or 10 bulk per level) at close range. The spell allows you to move the target up or down as you wish. Each round as a move action, you can mentally direct the target up or down as much as 20 feet. You can’t move the target horizontally. A levitating creature that attacks with a melee or ranged weapon finds itself increasingly unstable; the first attack takes a –1 penalty to attack rolls, the second a –2 penalty, and so on, to a maximum of –5. A full round spent stabilizing allows the creature to begin again at –1.\n\nThis casting of the spell lasts 1 minute per caster level and is dismissible.\n\n3rd: When you cast flight as a 3rd-level spell, you can target one willing or unconscious touched creature and give it the power of flight. The target can fly at a speed of 60 feet with average maneuverability. Flying while under this spell’s effects takes no more concentration than walking, so the target can attack or cast spells normally. The target can charge but not run, and it can’t carry aloft more weight than its normal bulk limit. The target gains a bonus to Acrobatics checks to fly equal to half your caster level.\n\nIf this spell expires or is dispelled while the target is aloft, the target floats downward 60 feet per round for 1d6 rounds. If it reaches the ground in that amount of time, it lands safely. If not, it falls the rest of the distance, taking 1d6 damage per 10 feet fallen.\n\nThe spell lasts for 1 minute per caster level.\n\n4th: When you cast flight as a 4th-level spell, you can target one willing or unconscious touched creature and affect it as per the 3rd-level version of the spell, except the target’s fly speed is increased by 10 feet and the spell lasts for 10 minutes per caster level.\n\n5th: When you cast flight as a 5th-level spell, you can target yourself and be affected as per the 4th-level version of the spell, except the spell lasts for 1 hour per caster level. When you use this flight speed for long-distance movement, you can hustle without taking nonlethal damage (a forced march still requires Constitution checks). You can cover 140 miles in an 8-hour period of flight (or 80 miles at a speed of 50 feet).\n\n6th: When you cast flight as a 6th-level spell, you can target multiple willing or unconscious creatures at close range (25 feet + 5 feet/2 levels) and affect them as per the 3rd-level version of the spell. You can target one creature per caster level, all of which must be within 30 feet of each other. This casting of the spell lasts 10 minutes per caster level."

    let Flight6 = CompendiumSpell(context: context)
    Flight6.name = "Flight 6"
    Flight6.type = "T"
    Flight6.level = 6
    Flight6.school = "Transmutation"
    Flight6.castingTime = "1 standard action; see text"
    Flight6.range = "see text"
    Flight6.targets =  "see text"
    Flight6.duration = "see text"
    Flight6.savingThrow = "Will negates (harmless)"
    Flight6.spellResistance = "Yes (harmless)"
    Flight6.content = "You tinker with the particles of magic surrounding one or more targets to either allow them to slow a fall, gently rise or descend, or fly short or vast distances.\n\n1st: When you cast flight as a 1st-level spell, you can target one Medium or smaller falling object or creature per level at close range (25 feet + 5 feet/2 levels). The targets must all be within 20 feet of each other. A Large creature or object counts as two Medium creatures or objects, a Huge creature or object counts as four Medium creatures or objects, and so on. The affected targets instantly fall slower, at a rate of just 60 feet per round (equivalent to the end of a fall from a few feet). The targets take no damage upon landing while the spell is in effect. This spell doesn’t affect charging or flying creatures.\n\nFor each target, this casting of the spell lasts until that target lands or 1 round per caster level (whichever happens first).\n\nThe 1st-level version of this spell can be cast as a reaction, but when you do so, you can’t take a standard action on your next round.\n\n2nd: When you cast flight as a 2nd-level spell, you can target yourself or one willing or unconscious creature or unattended object (total weight up to 100 pounds or 10 bulk per level) at close range. The spell allows you to move the target up or down as you wish. Each round as a move action, you can mentally direct the target up or down as much as 20 feet. You can’t move the target horizontally. A levitating creature that attacks with a melee or ranged weapon finds itself increasingly unstable; the first attack takes a –1 penalty to attack rolls, the second a –2 penalty, and so on, to a maximum of –5. A full round spent stabilizing allows the creature to begin again at –1.\n\nThis casting of the spell lasts 1 minute per caster level and is dismissible.\n\n3rd: When you cast flight as a 3rd-level spell, you can target one willing or unconscious touched creature and give it the power of flight. The target can fly at a speed of 60 feet with average maneuverability. Flying while under this spell’s effects takes no more concentration than walking, so the target can attack or cast spells normally. The target can charge but not run, and it can’t carry aloft more weight than its normal bulk limit. The target gains a bonus to Acrobatics checks to fly equal to half your caster level.\n\nIf this spell expires or is dispelled while the target is aloft, the target floats downward 60 feet per round for 1d6 rounds. If it reaches the ground in that amount of time, it lands safely. If not, it falls the rest of the distance, taking 1d6 damage per 10 feet fallen.\n\nThe spell lasts for 1 minute per caster level.\n\n4th: When you cast flight as a 4th-level spell, you can target one willing or unconscious touched creature and affect it as per the 3rd-level version of the spell, except the target’s fly speed is increased by 10 feet and the spell lasts for 10 minutes per caster level.\n\n5th: When you cast flight as a 5th-level spell, you can target yourself and be affected as per the 4th-level version of the spell, except the spell lasts for 1 hour per caster level. When you use this flight speed for long-distance movement, you can hustle without taking nonlethal damage (a forced march still requires Constitution checks). You can cover 140 miles in an 8-hour period of flight (or 80 miles at a speed of 50 feet).\n\n6th: When you cast flight as a 6th-level spell, you can target multiple willing or unconscious creatures at close range (25 feet + 5 feet/2 levels) and affect them as per the 3rd-level version of the spell. You can target one creature per caster level, all of which must be within 30 feet of each other. This casting of the spell lasts 10 minutes per caster level."
    
    let Grease = CompendiumSpell(context: context)
    Grease.name = "Grease"
    Grease.type = "T"
    Grease.level = 1
    Grease.school = "Conjuration [creation]"
    Grease.castingTime = "1 standard action"
    Grease.range = "close (25 ft. + 5 ft./2 levels)"
    Grease.area = "one 10-ft. square or one object"
    Grease.duration = "1 minute/level (D)"
    Grease.savingThrow = "Reflex partial, see text"
    Grease.spellResistance = "No"
    Grease.content = "You cover a solid surface with a layer of slippery grease. Any creature in the area when the spell is cast must succeed at a Reflex save or fall prone. A creature can walk within or through the area of grease at half normal speed with a successful DC 10 Acrobatics check. Failure means the creature can’t move that round and must then succeed at a Reflex save or fall prone, while failure by 5 or more means it falls prone (see the Acrobatics skill for details). A creature that doesn’t move on its turn doesn’t need to attempt this check and isn’t considered flat-footed. The spell can also be used to create a greasy coating on an item. Unattended material objects are always affected by this spell. If you attempt to affect an object in a creature’s possession, the creature can attempt a Reflex save to negate the effect. If the creature fails the initial saving throw, it immediately drops the item and must attempt a new save each round it attempts to pick up, hold, or use the item. A creature wearing greased armor or clothing gains a +5 circumstance bonus to Acrobatics checks to escape a grapple and a +2 circumstance bonus to its AC against grapple combat maneuvers."

    let HoldPortal = CompendiumSpell(context: context)
    HoldPortal.name = "Hold Portal"
    HoldPortal.type = "T"
    HoldPortal.level = 1
    HoldPortal.school = "Abjuration"
    HoldPortal.castingTime = "1 standard action"
    HoldPortal.range = "medium (100 ft. + 10 ft./level)"
    HoldPortal.targets =  "one portal up to 20 sq. ft./level"
    HoldPortal.duration = "1 minute/level (D)"
    HoldPortal.savingThrow = "none"
    HoldPortal.spellResistance = "No"
    HoldPortal.content = "This spell magically holds shut a door, gate, shutter, or window of any standard material (metal, plastic, stone, wood, and so on), or it reinforces an electronic lock. The magic affects the portal just as if it were securely closed and normally locked. A knock spell or a successful dispel magic spell can negate a hold portal spell.\n\nAdd 5 to the normal DC for forcing open a portal or hacking an electronic lock affected by this spell."

    let HolographicImage1 = CompendiumSpell(context: context)
    HolographicImage1.name = "Holographic Image 1"
    HolographicImage1.type = "T"
    HolographicImage1.level = 1
    HolographicImage1.school = "Illusion"
    HolographicImage1.castingTime = "1 standard action"
    HolographicImage1.range = "see text"
    HolographicImage1.area = "see text"
    HolographicImage1.duration = "see text"
    HolographicImage1.savingThrow = "Will disbelief"
    HolographicImage1.spellResistance = "No"
    HolographicImage1.content = "You weave nearby photons into illusory holograms that can take almost any form you can imagine. These holograms are usually effective against cameras, robots, and living creatures.\n\n1st: When you cast holographic image as a 1st-level spell, it produces a purely visual hologram at long range (400 feet + 40 feet/level). The image has no sound, smell, texture, or temperature. The image can’t extend beyond four 10-foot cubes plus one 10-foot cube per caster level. The image lasts for as long as you concentrate. You can move the image within the limits of the size of the effect.\n\n2nd: When you cast holographic image as a 2nd-level spell, it produces a hologram as per the 1st-level version of the spell, except the hologram can include minor sounds, but not understandable speech. The image lasts for as long as you concentrate plus 2 additional rounds.\n\n3rd: When you cast holographic image as a 3rd-level spell, it produces a hologram as per the 1st-level version of the spell, except the hologram can include sound, smell, and thermal illusions (but not speech). The image disappears when it is struck by an opponent, unless you cause the hologram to react appropriately. The image lasts for as long as you concentrate plus 3 additional rounds.\n\n4th: When you cast holographic image as a 4th-level spell, it produces a hologram as per the 3rd-level version of the spell, except the hologram follows a script determined by you. It follows that script for 1 minute per level without you having to concentrate on it. The hologram can include intelligible speech, if you wish.\n\n5th: When you cast holographic image as a 5th-level spell, it produces a hologram as per the 4th-level version of the spell, except the size of the hologram can’t extend beyond a 20-foot cube plus one 10-foot cube per caster level.\n\nYou can choose to make the hologram permanent at the time of casting. By concentrating, you can move the image within the limits of the range, but it is static while you are not concentrating.\n\nAlternatively, you can have the hologram activate when a specific condition (which you set at the time of casting) occurs. The event that triggers the hologram can be as general or as specific and detailed as desired, but it must be based on an audible, olfactory, tactile, or visual trigger. The trigger can’t be based on some quality not normally obvious to the senses, such as alignment. The spell lasts until it is triggered, and then the hologram lasts for 1 round per caster level.\n\n6th: When you cast holographic image as a 6th-level spell, it creates a quasi-real, illusory version of yourself at medium range (100 feet + 10 feet/level). This hologram looks, sounds, and smells like you, but it is intangible. The hologram mimics your actions (including speech) unless you use a move action to direct it to act differently. You can see through its eyes and hear through its ears as if you were standing where it is, and during your turn you can switch from using its senses to using your own, or back again, as a move action. While you are using its senses, your body is considered blinded and deafened.\n\nIf you desire, any spell you cast with a range of touch or greater can originate from the hologram instead of from you. The hologram can’t cast spells on itself except for illusion spells. Spells cast in this manner affect other targets normally, despite originating from the hologram.\n\nAn object isn’t deceived by illusions (treat as if it had succeeded at its Will saving throw). The hologram remains for 1 round per level, and you must maintain line of effect to the hologram at all times. If your line of effect is obstructed, the spell ends. If you use dimension door, plane shift, teleport, or a similar spell that breaks your line of effect, even momentarily, the spell ends. This casting of the spell is a shadow effect."

    let HolographicImage2 = CompendiumSpell(context: context)
    HolographicImage2.name = "Holographic Image 2"
    HolographicImage2.type = "T"
    HolographicImage2.level = 2
    HolographicImage2.school = "Illusion"
    HolographicImage2.castingTime = "1 standard action"
    HolographicImage2.range = "see text"
    HolographicImage2.area = "see text"
    HolographicImage2.duration = "see text"
    HolographicImage2.savingThrow = "Will disbelief"
    HolographicImage2.spellResistance = "No"
    HolographicImage2.content = "You weave nearby photons into illusory holograms that can take almost any form you can imagine. These holograms are usually effective against cameras, robots, and living creatures.\n\n1st: When you cast holographic image as a 1st-level spell, it produces a purely visual hologram at long range (400 feet + 40 feet/level). The image has no sound, smell, texture, or temperature. The image can’t extend beyond four 10-foot cubes plus one 10-foot cube per caster level. The image lasts for as long as you concentrate. You can move the image within the limits of the size of the effect.\n\n2nd: When you cast holographic image as a 2nd-level spell, it produces a hologram as per the 1st-level version of the spell, except the hologram can include minor sounds, but not understandable speech. The image lasts for as long as you concentrate plus 2 additional rounds.\n\n3rd: When you cast holographic image as a 3rd-level spell, it produces a hologram as per the 1st-level version of the spell, except the hologram can include sound, smell, and thermal illusions (but not speech). The image disappears when it is struck by an opponent, unless you cause the hologram to react appropriately. The image lasts for as long as you concentrate plus 3 additional rounds.\n\n4th: When you cast holographic image as a 4th-level spell, it produces a hologram as per the 3rd-level version of the spell, except the hologram follows a script determined by you. It follows that script for 1 minute per level without you having to concentrate on it. The hologram can include intelligible speech, if you wish.\n\n5th: When you cast holographic image as a 5th-level spell, it produces a hologram as per the 4th-level version of the spell, except the size of the hologram can’t extend beyond a 20-foot cube plus one 10-foot cube per caster level.\n\nYou can choose to make the hologram permanent at the time of casting. By concentrating, you can move the image within the limits of the range, but it is static while you are not concentrating.\n\nAlternatively, you can have the hologram activate when a specific condition (which you set at the time of casting) occurs. The event that triggers the hologram can be as general or as specific and detailed as desired, but it must be based on an audible, olfactory, tactile, or visual trigger. The trigger can’t be based on some quality not normally obvious to the senses, such as alignment. The spell lasts until it is triggered, and then the hologram lasts for 1 round per caster level.\n\n6th: When you cast holographic image as a 6th-level spell, it creates a quasi-real, illusory version of yourself at medium range (100 feet + 10 feet/level). This hologram looks, sounds, and smells like you, but it is intangible. The hologram mimics your actions (including speech) unless you use a move action to direct it to act differently. You can see through its eyes and hear through its ears as if you were standing where it is, and during your turn you can switch from using its senses to using your own, or back again, as a move action. While you are using its senses, your body is considered blinded and deafened.\n\nIf you desire, any spell you cast with a range of touch or greater can originate from the hologram instead of from you. The hologram can’t cast spells on itself except for illusion spells. Spells cast in this manner affect other targets normally, despite originating from the hologram.\n\nAn object isn’t deceived by illusions (treat as if it had succeeded at its Will saving throw). The hologram remains for 1 round per level, and you must maintain line of effect to the hologram at all times. If your line of effect is obstructed, the spell ends. If you use dimension door, plane shift, teleport, or a similar spell that breaks your line of effect, even momentarily, the spell ends. This casting of the spell is a shadow effect."

    let HolographicImage3 = CompendiumSpell(context: context)
    HolographicImage3.name = "Holographic Image 3"
    HolographicImage3.type = "T"
    HolographicImage3.level = 3
    HolographicImage3.school = "Illusion"
    HolographicImage3.castingTime = "1 standard action"
    HolographicImage3.range = "see text"
    HolographicImage3.area = "see text"
    HolographicImage3.duration = "see text"
    HolographicImage3.savingThrow = "Will disbelief"
    HolographicImage3.spellResistance = "No"
    HolographicImage3.content = "You weave nearby photons into illusory holograms that can take almost any form you can imagine. These holograms are usually effective against cameras, robots, and living creatures.\n\n1st: When you cast holographic image as a 1st-level spell, it produces a purely visual hologram at long range (400 feet + 40 feet/level). The image has no sound, smell, texture, or temperature. The image can’t extend beyond four 10-foot cubes plus one 10-foot cube per caster level. The image lasts for as long as you concentrate. You can move the image within the limits of the size of the effect.\n\n2nd: When you cast holographic image as a 2nd-level spell, it produces a hologram as per the 1st-level version of the spell, except the hologram can include minor sounds, but not understandable speech. The image lasts for as long as you concentrate plus 2 additional rounds.\n\n3rd: When you cast holographic image as a 3rd-level spell, it produces a hologram as per the 1st-level version of the spell, except the hologram can include sound, smell, and thermal illusions (but not speech). The image disappears when it is struck by an opponent, unless you cause the hologram to react appropriately. The image lasts for as long as you concentrate plus 3 additional rounds.\n\n4th: When you cast holographic image as a 4th-level spell, it produces a hologram as per the 3rd-level version of the spell, except the hologram follows a script determined by you. It follows that script for 1 minute per level without you having to concentrate on it. The hologram can include intelligible speech, if you wish.\n\n5th: When you cast holographic image as a 5th-level spell, it produces a hologram as per the 4th-level version of the spell, except the size of the hologram can’t extend beyond a 20-foot cube plus one 10-foot cube per caster level.\n\nYou can choose to make the hologram permanent at the time of casting. By concentrating, you can move the image within the limits of the range, but it is static while you are not concentrating.\n\nAlternatively, you can have the hologram activate when a specific condition (which you set at the time of casting) occurs. The event that triggers the hologram can be as general or as specific and detailed as desired, but it must be based on an audible, olfactory, tactile, or visual trigger. The trigger can’t be based on some quality not normally obvious to the senses, such as alignment. The spell lasts until it is triggered, and then the hologram lasts for 1 round per caster level.\n\n6th: When you cast holographic image as a 6th-level spell, it creates a quasi-real, illusory version of yourself at medium range (100 feet + 10 feet/level). This hologram looks, sounds, and smells like you, but it is intangible. The hologram mimics your actions (including speech) unless you use a move action to direct it to act differently. You can see through its eyes and hear through its ears as if you were standing where it is, and during your turn you can switch from using its senses to using your own, or back again, as a move action. While you are using its senses, your body is considered blinded and deafened.\n\nIf you desire, any spell you cast with a range of touch or greater can originate from the hologram instead of from you. The hologram can’t cast spells on itself except for illusion spells. Spells cast in this manner affect other targets normally, despite originating from the hologram.\n\nAn object isn’t deceived by illusions (treat as if it had succeeded at its Will saving throw). The hologram remains for 1 round per level, and you must maintain line of effect to the hologram at all times. If your line of effect is obstructed, the spell ends. If you use dimension door, plane shift, teleport, or a similar spell that breaks your line of effect, even momentarily, the spell ends. This casting of the spell is a shadow effect."

    let HolographicImage4 = CompendiumSpell(context: context)
    HolographicImage4.name = "Holographic Image 4"
    HolographicImage4.type = "T"
    HolographicImage4.level = 4
    HolographicImage4.school = "Illusion"
    HolographicImage4.castingTime = "1 standard action"
    HolographicImage4.range = "see text"
    HolographicImage4.area = "see text"
    HolographicImage4.duration = "see text"
    HolographicImage4.savingThrow = "Will disbelief"
    HolographicImage4.spellResistance = "No"
    HolographicImage4.content = "You weave nearby photons into illusory holograms that can take almost any form you can imagine. These holograms are usually effective against cameras, robots, and living creatures.\n\n1st: When you cast holographic image as a 1st-level spell, it produces a purely visual hologram at long range (400 feet + 40 feet/level). The image has no sound, smell, texture, or temperature. The image can’t extend beyond four 10-foot cubes plus one 10-foot cube per caster level. The image lasts for as long as you concentrate. You can move the image within the limits of the size of the effect.\n\n2nd: When you cast holographic image as a 2nd-level spell, it produces a hologram as per the 1st-level version of the spell, except the hologram can include minor sounds, but not understandable speech. The image lasts for as long as you concentrate plus 2 additional rounds.\n\n3rd: When you cast holographic image as a 3rd-level spell, it produces a hologram as per the 1st-level version of the spell, except the hologram can include sound, smell, and thermal illusions (but not speech). The image disappears when it is struck by an opponent, unless you cause the hologram to react appropriately. The image lasts for as long as you concentrate plus 3 additional rounds.\n\n4th: When you cast holographic image as a 4th-level spell, it produces a hologram as per the 3rd-level version of the spell, except the hologram follows a script determined by you. It follows that script for 1 minute per level without you having to concentrate on it. The hologram can include intelligible speech, if you wish.\n\n5th: When you cast holographic image as a 5th-level spell, it produces a hologram as per the 4th-level version of the spell, except the size of the hologram can’t extend beyond a 20-foot cube plus one 10-foot cube per caster level.\n\nYou can choose to make the hologram permanent at the time of casting. By concentrating, you can move the image within the limits of the range, but it is static while you are not concentrating.\n\nAlternatively, you can have the hologram activate when a specific condition (which you set at the time of casting) occurs. The event that triggers the hologram can be as general or as specific and detailed as desired, but it must be based on an audible, olfactory, tactile, or visual trigger. The trigger can’t be based on some quality not normally obvious to the senses, such as alignment. The spell lasts until it is triggered, and then the hologram lasts for 1 round per caster level.\n\n6th: When you cast holographic image as a 6th-level spell, it creates a quasi-real, illusory version of yourself at medium range (100 feet + 10 feet/level). This hologram looks, sounds, and smells like you, but it is intangible. The hologram mimics your actions (including speech) unless you use a move action to direct it to act differently. You can see through its eyes and hear through its ears as if you were standing where it is, and during your turn you can switch from using its senses to using your own, or back again, as a move action. While you are using its senses, your body is considered blinded and deafened.\n\nIf you desire, any spell you cast with a range of touch or greater can originate from the hologram instead of from you. The hologram can’t cast spells on itself except for illusion spells. Spells cast in this manner affect other targets normally, despite originating from the hologram.\n\nAn object isn’t deceived by illusions (treat as if it had succeeded at its Will saving throw). The hologram remains for 1 round per level, and you must maintain line of effect to the hologram at all times. If your line of effect is obstructed, the spell ends. If you use dimension door, plane shift, teleport, or a similar spell that breaks your line of effect, even momentarily, the spell ends. This casting of the spell is a shadow effect."

    let HolographicImage5 = CompendiumSpell(context: context)
    HolographicImage5.name = "Holographic Image 5"
    HolographicImage5.type = "T"
    HolographicImage5.level = 5
    HolographicImage5.school = "Illusion"
    HolographicImage5.castingTime = "1 standard action"
    HolographicImage5.range = "see text"
    HolographicImage5.area = "see text"
    HolographicImage5.duration = "see text"
    HolographicImage5.savingThrow = "Will disbelief"
    HolographicImage5.spellResistance = "No"
    HolographicImage5.content = "You weave nearby photons into illusory holograms that can take almost any form you can imagine. These holograms are usually effective against cameras, robots, and living creatures.\n\n1st: When you cast holographic image as a 1st-level spell, it produces a purely visual hologram at long range (400 feet + 40 feet/level). The image has no sound, smell, texture, or temperature. The image can’t extend beyond four 10-foot cubes plus one 10-foot cube per caster level. The image lasts for as long as you concentrate. You can move the image within the limits of the size of the effect.\n\n2nd: When you cast holographic image as a 2nd-level spell, it produces a hologram as per the 1st-level version of the spell, except the hologram can include minor sounds, but not understandable speech. The image lasts for as long as you concentrate plus 2 additional rounds.\n\n3rd: When you cast holographic image as a 3rd-level spell, it produces a hologram as per the 1st-level version of the spell, except the hologram can include sound, smell, and thermal illusions (but not speech). The image disappears when it is struck by an opponent, unless you cause the hologram to react appropriately. The image lasts for as long as you concentrate plus 3 additional rounds.\n\n4th: When you cast holographic image as a 4th-level spell, it produces a hologram as per the 3rd-level version of the spell, except the hologram follows a script determined by you. It follows that script for 1 minute per level without you having to concentrate on it. The hologram can include intelligible speech, if you wish.\n\n5th: When you cast holographic image as a 5th-level spell, it produces a hologram as per the 4th-level version of the spell, except the size of the hologram can’t extend beyond a 20-foot cube plus one 10-foot cube per caster level.\n\nYou can choose to make the hologram permanent at the time of casting. By concentrating, you can move the image within the limits of the range, but it is static while you are not concentrating.\n\nAlternatively, you can have the hologram activate when a specific condition (which you set at the time of casting) occurs. The event that triggers the hologram can be as general or as specific and detailed as desired, but it must be based on an audible, olfactory, tactile, or visual trigger. The trigger can’t be based on some quality not normally obvious to the senses, such as alignment. The spell lasts until it is triggered, and then the hologram lasts for 1 round per caster level.\n\n6th: When you cast holographic image as a 6th-level spell, it creates a quasi-real, illusory version of yourself at medium range (100 feet + 10 feet/level). This hologram looks, sounds, and smells like you, but it is intangible. The hologram mimics your actions (including speech) unless you use a move action to direct it to act differently. You can see through its eyes and hear through its ears as if you were standing where it is, and during your turn you can switch from using its senses to using your own, or back again, as a move action. While you are using its senses, your body is considered blinded and deafened.\n\nIf you desire, any spell you cast with a range of touch or greater can originate from the hologram instead of from you. The hologram can’t cast spells on itself except for illusion spells. Spells cast in this manner affect other targets normally, despite originating from the hologram.\n\nAn object isn’t deceived by illusions (treat as if it had succeeded at its Will saving throw). The hologram remains for 1 round per level, and you must maintain line of effect to the hologram at all times. If your line of effect is obstructed, the spell ends. If you use dimension door, plane shift, teleport, or a similar spell that breaks your line of effect, even momentarily, the spell ends. This casting of the spell is a shadow effect."

    let HolographicImage6 = CompendiumSpell(context: context)
    HolographicImage6.name = "Holographic Image 6"
    HolographicImage6.type = "T"
    HolographicImage6.level = 6
    HolographicImage6.school = "Illusion"
    HolographicImage6.castingTime = "1 standard action"
    HolographicImage6.range = "see text"
    HolographicImage6.area = "see text"
    HolographicImage6.duration = "see text"
    HolographicImage6.savingThrow = "Will disbelief"
    HolographicImage6.spellResistance = "No"
    HolographicImage6.content = "You weave nearby photons into illusory holograms that can take almost any form you can imagine. These holograms are usually effective against cameras, robots, and living creatures.\n\n1st: When you cast holographic image as a 1st-level spell, it produces a purely visual hologram at long range (400 feet + 40 feet/level). The image has no sound, smell, texture, or temperature. The image can’t extend beyond four 10-foot cubes plus one 10-foot cube per caster level. The image lasts for as long as you concentrate. You can move the image within the limits of the size of the effect.\n\n2nd: When you cast holographic image as a 2nd-level spell, it produces a hologram as per the 1st-level version of the spell, except the hologram can include minor sounds, but not understandable speech. The image lasts for as long as you concentrate plus 2 additional rounds.\n\n3rd: When you cast holographic image as a 3rd-level spell, it produces a hologram as per the 1st-level version of the spell, except the hologram can include sound, smell, and thermal illusions (but not speech). The image disappears when it is struck by an opponent, unless you cause the hologram to react appropriately. The image lasts for as long as you concentrate plus 3 additional rounds.\n\n4th: When you cast holographic image as a 4th-level spell, it produces a hologram as per the 3rd-level version of the spell, except the hologram follows a script determined by you. It follows that script for 1 minute per level without you having to concentrate on it. The hologram can include intelligible speech, if you wish.\n\n5th: When you cast holographic image as a 5th-level spell, it produces a hologram as per the 4th-level version of the spell, except the size of the hologram can’t extend beyond a 20-foot cube plus one 10-foot cube per caster level.\n\nYou can choose to make the hologram permanent at the time of casting. By concentrating, you can move the image within the limits of the range, but it is static while you are not concentrating.\n\nAlternatively, you can have the hologram activate when a specific condition (which you set at the time of casting) occurs. The event that triggers the hologram can be as general or as specific and detailed as desired, but it must be based on an audible, olfactory, tactile, or visual trigger. The trigger can’t be based on some quality not normally obvious to the senses, such as alignment. The spell lasts until it is triggered, and then the hologram lasts for 1 round per caster level.\n\n6th: When you cast holographic image as a 6th-level spell, it creates a quasi-real, illusory version of yourself at medium range (100 feet + 10 feet/level). This hologram looks, sounds, and smells like you, but it is intangible. The hologram mimics your actions (including speech) unless you use a move action to direct it to act differently. You can see through its eyes and hear through its ears as if you were standing where it is, and during your turn you can switch from using its senses to using your own, or back again, as a move action. While you are using its senses, your body is considered blinded and deafened.\n\nIf you desire, any spell you cast with a range of touch or greater can originate from the hologram instead of from you. The hologram can’t cast spells on itself except for illusion spells. Spells cast in this manner affect other targets normally, despite originating from the hologram.\n\nAn object isn’t deceived by illusions (treat as if it had succeeded at its Will saving throw). The hologram remains for 1 round per level, and you must maintain line of effect to the hologram at all times. If your line of effect is obstructed, the spell ends. If you use dimension door, plane shift, teleport, or a similar spell that breaks your line of effect, even momentarily, the spell ends. This casting of the spell is a shadow effect."

    let Identify = CompendiumSpell(context: context)
    Identify.name = "Identify"
    Identify.type = "MT"
    Identify.level = 1
    Identify.school = "Divination"
    Identify.castingTime = "1 standard action"
    Identify.range = "5 ft."
    Identify.targets =  "one magic or technological object"
    Identify.duration = "1 round/level (D)"
    Identify.savingThrow = "none"
    Identify.spellResistance = "No"
    Identify.content = "This spell allows you to attempt to identify the function of a magic item (with Mysticism) or technological device (with Engineering) each round. You gain a +10 insight bonus to skill checks to identify the properties and command words or passwords of items targeted when using this spell. This spell does not allow you to identify artifacts."

    let JoltingSurge = CompendiumSpell(context: context)
    JoltingSurge.name = "Jolting Surge"
    JoltingSurge.type = "T"
    JoltingSurge.level = 1
    JoltingSurge.school = "Enchantment [electricity]"
    JoltingSurge.castingTime = "1 standard action"
    JoltingSurge.range = "touch"
    JoltingSurge.targets =  "one creature or object"
    JoltingSurge.duration = "instantaneous"
    JoltingSurge.savingThrow = "none"
    JoltingSurge.spellResistance = "Yes"
    JoltingSurge.content = "You touch a target with a device you’re holding that uses electricity, requiring a melee attack against the target’s EAC. Alternatively, you can instead touch an electrical device a target is wearing (or a target that is an electrical device, such as a robot) with your hand, gaining a +2 bonus to your attack roll. Either way, if your attack hits, the electrical device surges out of control, dealing 4d6 electricity damage to your target.\n\nCasting this spell doesn’t provoke attacks of opportunity."

    let JunkArmor = CompendiumSpell(context: context)
    JunkArmor.name = "Junk Armor"
    JunkArmor.type = "T"
    JunkArmor.level = 1
    JunkArmor.school = "Conjuration [creation]"
    JunkArmor.castingTime = "1 standard action"
    JunkArmor.range = "touch"
    JunkArmor.targets =  "1 bulk of inert electronic equipment; see text"
    JunkArmor.duration = "24 hours"
    JunkArmor.savingThrow = "none"
    JunkArmor.spellResistance = "No"
    JunkArmor.content = "You turn a pile of technological junk into a suit of light armor, or use it to upgrade a suit of light armor to heavy armor. You must target inert, nonworking electronic equipment of at least 1 bulk. Valid targets include a large broken computer system, nonworking or unconnected computer or robot parts, a destroyed robot or another such trashed mechanical system, or any related electronic components or combination of the above, as long as the junk is found in sufficient quantity.\n\nYou can cause the armor to be created on yourself or an adjacent willing or unconscious ally. Light or heavy armor you create requires proficiency to use without penalties as normal. If you use this spell to create light armor, the armor has an EAC bonus equal to your caster level, a KAC bonus equal to your caster level + 2, and a maximum Dex bonus equal to 1 + one- quarter your caster level. Using junk armor to temporarily turn light armor into heavy armor increases the armor’s EAC bonus by 1 and its KAC bonus by 2, reduces its maximum Dexterity bonus by 3, and worsens its armor check penalty by 2. "

    let Junksword = CompendiumSpell(context: context)
    Junksword.name = "Junksword 1"
    Junksword.type = "T"
    Junksword.level = 1
    Junksword.school = "Conjuration [creation]"
    Junksword.castingTime = "1 standard action"
    Junksword.range = "touch"
    Junksword.targets =  "1 bulk of inert electronic equipment"
    Junksword.duration = "10 minutes/level (D)"
    Junksword.savingThrow = "none"
    Junksword.spellResistance = "No"
    Junksword.content = "You turn a pile of technological junk into a one-handed melee weapon that you can wield against your foes. You must target inert, nonworking electronic equipment of at least 1 bulk. Valid targets include a large broken computer system nonworking or unconnected computer or robot parts, a destroyed robot or another such trashed mechanical system, or any related electronic components or combination of the above, as long as the junk is found in sufficient quantity.\n\nYou are automatically proficient with this melee weapon, and you add 1-1/2 times your caster level to damage rolls with it (in place of a Weapon Specialization bonus). A junksword functions only for its creator, and once created it cannot leave your hand. Should you wish to sheathe it, the junksword obliges by collapsing into a wreath of junk that surrounds your hand like a glove.\n\nYou can grant your junksword additional abilities based on the spell’s level. You can change one modification to your junksword as a move action, or you can completely reconfigure all of its modifications as a full action.\n\n1st: Your junksword deals 1d4 bludgeoning and slashing damage and has the analog weapon special property. In addition, you can grant your junksword up to two of the following special properties: block, disarm, nonlethal, reach, or trip.\n\n2nd: Your junksword deals 1d8 bludgeoning and slashing damage and has the analog weapon special property. In addition, you can grant your junksword up to three of the special properties from the 1st-level list.\n\n3rd Your junksword has either the analog or powered (capacity 30, usage 2) weapon special property (your choice). It deals 2d4 bludgeoning and slashing damage if it’s an analog weapon, or 2d4 electricity damage if it’s a powered weapon. In addition, you can grant your junksword up to three of the special properties from the 1st-level list, plus the staggered critical effect. If you select the powered option, your junksword’s battery is integrated and cannot be removed, recharged, replaced, or used to power other devices.\n\n4th: This functions as the 3rd-level junksword, but it deals 2d8 bludgeoning and slashing damage if it’s an analog weapon or 3d4 damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered).\n\n5th: This functions as the 3rd-level casting of junksword, but the junksword deals 3d10 bludgeoning and slashing damage if it’s an analog weapon or 3d6 electricity damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered).\n\n6th: his functions as the 3rd-level casting of junksword, but the junksword deals 6d6 bludgeoning and slashing damage if it’s an analog weapon or 3d8 electricity damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered). Additionally, you can grant the junksword one of the following weapon fusions: dispelling, entangling, ghost killer, merciful, or spellthrower."

    let Junksword2 = CompendiumSpell(context: context)
    Junksword2.name = "Junksword 2"
    Junksword2.type = "T"
    Junksword2.level = 2
    Junksword2.school = "Conjuration [creation]"
    Junksword2.castingTime = "1 standard action"
    Junksword2.range = "touch"
    Junksword2.targets =  "1 bulk of inert electronic equipment"
    Junksword2.duration = "10 minutes/level (D)"
    Junksword2.savingThrow = "none"
    Junksword2.spellResistance = "No"
    Junksword2.content = "You turn a pile of technological junk into a one-handed melee weapon that you can wield against your foes. You must target inert, nonworking electronic equipment of at least 1 bulk. Valid targets include a large broken computer system nonworking or unconnected computer or robot parts, a destroyed robot or another such trashed mechanical system, or any related electronic components or combination of the above, as long as the junk is found in sufficient quantity.\n\nYou are automatically proficient with this melee weapon, and you add 1-1/2 times your caster level to damage rolls with it (in place of a Weapon Specialization bonus). A junksword functions only for its creator, and once created it cannot leave your hand. Should you wish to sheathe it, the junksword obliges by collapsing into a wreath of junk that surrounds your hand like a glove.\n\nYou can grant your junksword additional abilities based on the spell’s level. You can change one modification to your junksword as a move action, or you can completely reconfigure all of its modifications as a full action.\n\n1st: Your junksword deals 1d4 bludgeoning and slashing damage and has the analog weapon special property. In addition, you can grant your junksword up to two of the following special properties: block, disarm, nonlethal, reach, or trip.\n\n2nd: Your junksword deals 1d8 bludgeoning and slashing damage and has the analog weapon special property. In addition, you can grant your junksword up to three of the special properties from the 1st-level list.\n\n3rd Your junksword has either the analog or powered (capacity 30, usage 2) weapon special property (your choice). It deals 2d4 bludgeoning and slashing damage if it’s an analog weapon, or 2d4 electricity damage if it’s a powered weapon. In addition, you can grant your junksword up to three of the special properties from the 1st-level list, plus the staggered critical effect. If you select the powered option, your junksword’s battery is integrated and cannot be removed, recharged, replaced, or used to power other devices.\n\n4th: This functions as the 3rd-level junksword, but it deals 2d8 bludgeoning and slashing damage if it’s an analog weapon or 3d4 damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered).\n\n5th: This functions as the 3rd-level casting of junksword, but the junksword deals 3d10 bludgeoning and slashing damage if it’s an analog weapon or 3d6 electricity damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered).\n\n6th: his functions as the 3rd-level casting of junksword, but the junksword deals 6d6 bludgeoning and slashing damage if it’s an analog weapon or 3d8 electricity damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered). Additionally, you can grant the junksword one of the following weapon fusions: dispelling, entangling, ghost killer, merciful, or spellthrower."

    let Junksword3 = CompendiumSpell(context: context)
    Junksword3.name = "Junksword 3"
    Junksword3.type = "T"
    Junksword3.level = 3
    Junksword3.school = "Conjuration [creation]"
    Junksword3.castingTime = "1 standard action"
    Junksword3.range = "touch"
    Junksword3.targets =  "1 bulk of inert electronic equipment"
    Junksword3.duration = "10 minutes/level (D)"
    Junksword3.savingThrow = "none"
    Junksword3.spellResistance = "No"
    Junksword3.content = "You turn a pile of technological junk into a one-handed melee weapon that you can wield against your foes. You must target inert, nonworking electronic equipment of at least 1 bulk. Valid targets include a large broken computer system nonworking or unconnected computer or robot parts, a destroyed robot or another such trashed mechanical system, or any related electronic components or combination of the above, as long as the junk is found in sufficient quantity.\n\nYou are automatically proficient with this melee weapon, and you add 1-1/2 times your caster level to damage rolls with it (in place of a Weapon Specialization bonus). A junksword functions only for its creator, and once created it cannot leave your hand. Should you wish to sheathe it, the junksword obliges by collapsing into a wreath of junk that surrounds your hand like a glove.\n\nYou can grant your junksword additional abilities based on the spell’s level. You can change one modification to your junksword as a move action, or you can completely reconfigure all of its modifications as a full action.\n\n1st: Your junksword deals 1d4 bludgeoning and slashing damage and has the analog weapon special property. In addition, you can grant your junksword up to two of the following special properties: block, disarm, nonlethal, reach, or trip.\n\n2nd: Your junksword deals 1d8 bludgeoning and slashing damage and has the analog weapon special property. In addition, you can grant your junksword up to three of the special properties from the 1st-level list.\n\n3rd Your junksword has either the analog or powered (capacity 30, usage 2) weapon special property (your choice). It deals 2d4 bludgeoning and slashing damage if it’s an analog weapon, or 2d4 electricity damage if it’s a powered weapon. In addition, you can grant your junksword up to three of the special properties from the 1st-level list, plus the staggered critical effect. If you select the powered option, your junksword’s battery is integrated and cannot be removed, recharged, replaced, or used to power other devices.\n\n4th: This functions as the 3rd-level junksword, but it deals 2d8 bludgeoning and slashing damage if it’s an analog weapon or 3d4 damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered).\n\n5th: This functions as the 3rd-level casting of junksword, but the junksword deals 3d10 bludgeoning and slashing damage if it’s an analog weapon or 3d6 electricity damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered).\n\n6th: his functions as the 3rd-level casting of junksword, but the junksword deals 6d6 bludgeoning and slashing damage if it’s an analog weapon or 3d8 electricity damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered). Additionally, you can grant the junksword one of the following weapon fusions: dispelling, entangling, ghost killer, merciful, or spellthrower."

    let Junksword4 = CompendiumSpell(context: context)
    Junksword4.name = "Junksword 4"
    Junksword4.type = "T"
    Junksword4.level = 4
    Junksword4.school = "Conjuration [creation]"
    Junksword4.castingTime = "1 standard action"
    Junksword4.range = "touch"
    Junksword4.targets =  "1 bulk of inert electronic equipment"
    Junksword4.duration = "10 minutes/level (D)"
    Junksword4.savingThrow = "none"
    Junksword4.spellResistance = "No"
    Junksword4.content = "You turn a pile of technological junk into a one-handed melee weapon that you can wield against your foes. You must target inert, nonworking electronic equipment of at least 1 bulk. Valid targets include a large broken computer system nonworking or unconnected computer or robot parts, a destroyed robot or another such trashed mechanical system, or any related electronic components or combination of the above, as long as the junk is found in sufficient quantity.\n\nYou are automatically proficient with this melee weapon, and you add 1-1/2 times your caster level to damage rolls with it (in place of a Weapon Specialization bonus). A junksword functions only for its creator, and once created it cannot leave your hand. Should you wish to sheathe it, the junksword obliges by collapsing into a wreath of junk that surrounds your hand like a glove.\n\nYou can grant your junksword additional abilities based on the spell’s level. You can change one modification to your junksword as a move action, or you can completely reconfigure all of its modifications as a full action.\n\n1st: Your junksword deals 1d4 bludgeoning and slashing damage and has the analog weapon special property. In addition, you can grant your junksword up to two of the following special properties: block, disarm, nonlethal, reach, or trip.\n\n2nd: Your junksword deals 1d8 bludgeoning and slashing damage and has the analog weapon special property. In addition, you can grant your junksword up to three of the special properties from the 1st-level list.\n\n3rd Your junksword has either the analog or powered (capacity 30, usage 2) weapon special property (your choice). It deals 2d4 bludgeoning and slashing damage if it’s an analog weapon, or 2d4 electricity damage if it’s a powered weapon. In addition, you can grant your junksword up to three of the special properties from the 1st-level list, plus the staggered critical effect. If you select the powered option, your junksword’s battery is integrated and cannot be removed, recharged, replaced, or used to power other devices.\n\n4th: This functions as the 3rd-level junksword, but it deals 2d8 bludgeoning and slashing damage if it’s an analog weapon or 3d4 damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered).\n\n5th: This functions as the 3rd-level casting of junksword, but the junksword deals 3d10 bludgeoning and slashing damage if it’s an analog weapon or 3d6 electricity damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered).\n\n6th: his functions as the 3rd-level casting of junksword, but the junksword deals 6d6 bludgeoning and slashing damage if it’s an analog weapon or 3d8 electricity damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered). Additionally, you can grant the junksword one of the following weapon fusions: dispelling, entangling, ghost killer, merciful, or spellthrower."

    let Junksword5 = CompendiumSpell(context: context)
    Junksword5.name = "Junksword 5"
    Junksword5.type = "T"
    Junksword5.level = 5
    Junksword5.school = "Conjuration [creation]"
    Junksword5.castingTime = "1 standard action"
    Junksword5.range = "touch"
    Junksword5.targets =  "1 bulk of inert electronic equipment"
    Junksword5.duration = "10 minutes/level (D)"
    Junksword5.savingThrow = "none"
    Junksword5.spellResistance = "No"
    Junksword5.content = "You turn a pile of technological junk into a one-handed melee weapon that you can wield against your foes. You must target inert, nonworking electronic equipment of at least 1 bulk. Valid targets include a large broken computer system nonworking or unconnected computer or robot parts, a destroyed robot or another such trashed mechanical system, or any related electronic components or combination of the above, as long as the junk is found in sufficient quantity.\n\nYou are automatically proficient with this melee weapon, and you add 1-1/2 times your caster level to damage rolls with it (in place of a Weapon Specialization bonus). A junksword functions only for its creator, and once created it cannot leave your hand. Should you wish to sheathe it, the junksword obliges by collapsing into a wreath of junk that surrounds your hand like a glove.\n\nYou can grant your junksword additional abilities based on the spell’s level. You can change one modification to your junksword as a move action, or you can completely reconfigure all of its modifications as a full action.\n\n1st: Your junksword deals 1d4 bludgeoning and slashing damage and has the analog weapon special property. In addition, you can grant your junksword up to two of the following special properties: block, disarm, nonlethal, reach, or trip.\n\n2nd: Your junksword deals 1d8 bludgeoning and slashing damage and has the analog weapon special property. In addition, you can grant your junksword up to three of the special properties from the 1st-level list.\n\n3rd Your junksword has either the analog or powered (capacity 30, usage 2) weapon special property (your choice). It deals 2d4 bludgeoning and slashing damage if it’s an analog weapon, or 2d4 electricity damage if it’s a powered weapon. In addition, you can grant your junksword up to three of the special properties from the 1st-level list, plus the staggered critical effect. If you select the powered option, your junksword’s battery is integrated and cannot be removed, recharged, replaced, or used to power other devices.\n\n4th: This functions as the 3rd-level junksword, but it deals 2d8 bludgeoning and slashing damage if it’s an analog weapon or 3d4 damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered).\n\n5th: This functions as the 3rd-level casting of junksword, but the junksword deals 3d10 bludgeoning and slashing damage if it’s an analog weapon or 3d6 electricity damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered).\n\n6th: his functions as the 3rd-level casting of junksword, but the junksword deals 6d6 bludgeoning and slashing damage if it’s an analog weapon or 3d8 electricity damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered). Additionally, you can grant the junksword one of the following weapon fusions: dispelling, entangling, ghost killer, merciful, or spellthrower."

    let Junksword6 = CompendiumSpell(context: context)
    Junksword6.name = "Junksword 6"
    Junksword6.type = "T"
    Junksword6.level = 6
    Junksword6.school = "Conjuration [creation]"
    Junksword6.castingTime = "1 standard action"
    Junksword6.range = "touch"
    Junksword6.targets =  "1 bulk of inert electronic equipment"
    Junksword6.duration = "10 minutes/level (D)"
    Junksword6.savingThrow = "none"
    Junksword6.spellResistance = "No"
    Junksword6.content = "You turn a pile of technological junk into a one-handed melee weapon that you can wield against your foes. You must target inert, nonworking electronic equipment of at least 1 bulk. Valid targets include a large broken computer system nonworking or unconnected computer or robot parts, a destroyed robot or another such trashed mechanical system, or any related electronic components or combination of the above, as long as the junk is found in sufficient quantity.\n\nYou are automatically proficient with this melee weapon, and you add 1-1/2 times your caster level to damage rolls with it (in place of a Weapon Specialization bonus). A junksword functions only for its creator, and once created it cannot leave your hand. Should you wish to sheathe it, the junksword obliges by collapsing into a wreath of junk that surrounds your hand like a glove.\n\nYou can grant your junksword additional abilities based on the spell’s level. You can change one modification to your junksword as a move action, or you can completely reconfigure all of its modifications as a full action.\n\n1st: Your junksword deals 1d4 bludgeoning and slashing damage and has the analog weapon special property. In addition, you can grant your junksword up to two of the following special properties: block, disarm, nonlethal, reach, or trip.\n\n2nd: Your junksword deals 1d8 bludgeoning and slashing damage and has the analog weapon special property. In addition, you can grant your junksword up to three of the special properties from the 1st-level list.\n\n3rd Your junksword has either the analog or powered (capacity 30, usage 2) weapon special property (your choice). It deals 2d4 bludgeoning and slashing damage if it’s an analog weapon, or 2d4 electricity damage if it’s a powered weapon. In addition, you can grant your junksword up to three of the special properties from the 1st-level list, plus the staggered critical effect. If you select the powered option, your junksword’s battery is integrated and cannot be removed, recharged, replaced, or used to power other devices.\n\n4th: This functions as the 3rd-level junksword, but it deals 2d8 bludgeoning and slashing damage if it’s an analog weapon or 3d4 damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered).\n\n5th: This functions as the 3rd-level casting of junksword, but the junksword deals 3d10 bludgeoning and slashing damage if it’s an analog weapon or 3d6 electricity damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered).\n\n6th: his functions as the 3rd-level casting of junksword, but the junksword deals 6d6 bludgeoning and slashing damage if it’s an analog weapon or 3d8 electricity damage if it’s a powered weapon, and it gains the stunned critical effect (rather than staggered). Additionally, you can grant the junksword one of the following weapon fusions: dispelling, entangling, ghost killer, merciful, or spellthrower."

    let KeenSenses = CompendiumSpell(context: context)
    KeenSenses.name = "Keen Senses"
    KeenSenses.type = "MT"
    KeenSenses.level = 1
    KeenSenses.school = "Transmutation"
    KeenSenses.castingTime = "1 standard action"
    KeenSenses.range = "touch"
    KeenSenses.targets =  "one creature"
    KeenSenses.duration = "1 minute/level (D)"
    KeenSenses.savingThrow = "Will negates (harmless)"
    KeenSenses.spellResistance = "Yes (harmless)"
    KeenSenses.content = "The target gains a +2 insight bonus to Perception checks and gains low-light vision. Targets that have low-light vision double the distance they can see under the effects of this spell."

    let LifeBubble = CompendiumSpell(context: context)
    LifeBubble.name = "Life Bubble"
    LifeBubble.type = "MT"
    LifeBubble.level = 1
    LifeBubble.school = "Abjuration"
    LifeBubble.castingTime = "1 standard action"
    LifeBubble.range = "medium (100 ft. + 10 ft./level)"
    LifeBubble.targets =  "up to one creature/level, no two of which can be more than 30 ft. apart"
    LifeBubble.duration = "1 day/level"
    LifeBubble.savingThrow = "Will negates (harmless)"
    LifeBubble.spellResistance = "Yes (harmless)"
    LifeBubble.content = "You surround the target creatures with a constant and movable 1-inch shell of tolerable living conditions customized for each creature. This shell enables the targets to breathe freely in a variety of atmospheric conditions (including in corrosive, thick, thin, and toxic atmospheres), as well as underwater or in a vacuum. It also makes the targets immune to harmful gases and vapors, including inhaled diseases and poisons as well as spells with a harmful gaseous effect. In addition, the shell protects targets (and their equipment) from extreme temperatures (between –50° and 140° F) without having to attempt Fortitude saving throws, as well as extreme pressures.\n\nLife bubble doesn’t provide protection from energy damage, negative or positive energy (such as found on the Negative and Positive Energy Planes), or radiation; it also doesn’t provide the ability to see in conditions of poor visibility (such as in smoke or fog) or the ability to move or act normally in conditions that impede movement (such as underwater)."
    
    let MagicMissile = CompendiumSpell(context: context)
    MagicMissile.name = "Magic Missile"
    MagicMissile.type = "T"
    MagicMissile.level = 1
    MagicMissile.school = "Evocation [force]"
    MagicMissile.castingTime = "1 standard action; see text"
    MagicMissile.range = "medium (100 ft. + 10 ft./level)"
    MagicMissile.targets =  "up to three creatures, no two of which can be more than 15 ft. apart; see text"
    MagicMissile.duration = "instantaneous"
    MagicMissile.savingThrow = "none"
    MagicMissile.spellResistance = "Yes"
    MagicMissile.content = "You fire two missiles of magical energy that strike targets unerringly (the creatures must still be valid targets) and deal 1d4+1 force damage each. You can’t target specific parts of a creature, and objects are not damaged by the spell.\n\nYou can target a single creature or several creatures, but each missile can strike only one creature. You must designate targets before you attempt to overcome spell resistance or roll damage.\n\nYou can cast this spell as a full action. If you do, you fire three missiles instead of two."
    
    let MightoftheEllicoth = CompendiumSpell(context: context)
    MightoftheEllicoth.name = "Might of the Ellicoth"
    MightoftheEllicoth.type = "M"
    MightoftheEllicoth.level = 1
    MightoftheEllicoth.school = "Transmutation"
    MightoftheEllicoth.castingTime = "1 standard action"
    MightoftheEllicoth.range = "touch"
    MightoftheEllicoth.targets =  "one creature"
    MightoftheEllicoth.duration = "24 hours"
    MightoftheEllicoth.savingThrow = "Fortitude negates (harmless)"
    MightoftheEllicoth.spellResistance = "Yes (harmless)"
    MightoftheEllicoth.content = "With a touch, you cause a surge of power to flow through the target’s slow-twitch muscle fiber (or its equivalent physiology if it has no muscle fibers), increasing the amount of bulk the creature can carry by 3."

    let MindLink = CompendiumSpell(context: context)
    MindLink.name = "Mind Link"
    MindLink.type = "M"
    MindLink.level = 1
    MindLink.school = "Divination [mind-affecting]"
    MindLink.castingTime = "1 standard action"
    MindLink.range = "touch"
    MindLink.targets =  "one creature"
    MindLink.duration = "instantaneous"
    MindLink.savingThrow = "Will negates (harmless)"
    MindLink.spellResistance = "Yes (harmless)"
    MindLink.content = "You link your mind to that of a touched creature to swiftly communicate a large amount of complex information in an instant. You decide what the target learns, limited to any amount of information that otherwise could be communicated in 10 minutes. This information comes in a series of visual images and emotional sensations, and it isn’t language dependent."

    let MindThrust1 = CompendiumSpell(context: context)
    MindThrust1.name = "Mind Thrust 1"
    MindThrust1.type = "M"
    MindThrust1.level = 1
    MindThrust1.school = "Divination [mind-affecting]"
    MindThrust1.castingTime = "1 standard action"
    MindThrust1.range = "close (25 ft. + 5 ft./2 levels)"
    MindThrust1.targets =  "one creature"
    MindThrust1.duration = "instantaneous"
    MindThrust1.savingThrow = "Will half"
    MindThrust1.spellResistance = "Yes"
    MindThrust1.content = "You divine the most vulnerable portion of your opponent’s mind and overload it with a glut of psychic information. The target can attempt a Will saving throw to halve the damage dealt by this spell. This spell has no effect on creatures without an Intelligence score.\n\n1st: When you cast mind thrust as a 1st-level spell, it deals 2d10 damage to the target.\n\n2nd: When you cast mind thrust as a 2nd-level spell, it deals 4d10 damage to the target.\n\n3rd: When you cast mind thrust as a 3rd-level spell, it deals 7d10 damage to the target.\n\n4th: When you cast mind thrust as a 4th-level spell, it deals 10d10 damage to the target and the target is fatigued for 1 round if it fails its saving throw.\n\n5th: When you cast mind thrust as a 5th-level spell, it deals 15d10 damage to the target. The target is exhausted for 1 round if it fails its save and it is fatigued for 1 round if it succeeds at its saving throw.\n\n6th: When you cast mind thrust as a 6th-level spell, it deals 17d10 damage to the target. The target is exhausted and stunned for 1 round if it fails its save, and it is fatigued for 1 round if it succeeds at its saving throw."

    let MindThrust2 = CompendiumSpell(context: context)
    MindThrust2.name = "Mind Thrust 2"
    MindThrust2.type = "M"
    MindThrust2.level = 2
    MindThrust2.school = "Divination [mind-affecting]"
    MindThrust2.castingTime = "1 standard action"
    MindThrust2.range = "close (25 ft. + 5 ft./2 levels)"
    MindThrust2.targets =  "one creature"
    MindThrust2.duration = "instantaneous"
    MindThrust2.savingThrow = "Will half"
    MindThrust2.spellResistance = "Yes"
    MindThrust2.content = "You divine the most vulnerable portion of your opponent’s mind and overload it with a glut of psychic information. The target can attempt a Will saving throw to halve the damage dealt by this spell. This spell has no effect on creatures without an Intelligence score.\n\n1st: When you cast mind thrust as a 1st-level spell, it deals 2d10 damage to the target.\n\n2nd: When you cast mind thrust as a 2nd-level spell, it deals 4d10 damage to the target.\n\n3rd: When you cast mind thrust as a 3rd-level spell, it deals 7d10 damage to the target.\n\n4th: When you cast mind thrust as a 4th-level spell, it deals 10d10 damage to the target and the target is fatigued for 1 round if it fails its saving throw.\n\n5th: When you cast mind thrust as a 5th-level spell, it deals 15d10 damage to the target. The target is exhausted for 1 round if it fails its save and it is fatigued for 1 round if it succeeds at its saving throw.\n\n6th: When you cast mind thrust as a 6th-level spell, it deals 17d10 damage to the target. The target is exhausted and stunned for 1 round if it fails its save, and it is fatigued for 1 round if it succeeds at its saving throw."

    let MindThrust3 = CompendiumSpell(context: context)
    MindThrust3.name = "Mind Thrust 3"
    MindThrust3.type = "M"
    MindThrust3.level = 3
    MindThrust3.school = "Divination [mind-affecting]"
    MindThrust3.castingTime = "1 standard action"
    MindThrust3.range = "close (25 ft. + 5 ft./2 levels)"
    MindThrust3.targets =  "one creature"
    MindThrust3.duration = "instantaneous"
    MindThrust3.savingThrow = "Will half"
    MindThrust3.spellResistance = "Yes"
    MindThrust3.content = "You divine the most vulnerable portion of your opponent’s mind and overload it with a glut of psychic information. The target can attempt a Will saving throw to halve the damage dealt by this spell. This spell has no effect on creatures without an Intelligence score.\n\n1st: When you cast mind thrust as a 1st-level spell, it deals 2d10 damage to the target.\n\n2nd: When you cast mind thrust as a 2nd-level spell, it deals 4d10 damage to the target.\n\n3rd: When you cast mind thrust as a 3rd-level spell, it deals 7d10 damage to the target.\n\n4th: When you cast mind thrust as a 4th-level spell, it deals 10d10 damage to the target and the target is fatigued for 1 round if it fails its saving throw.\n\n5th: When you cast mind thrust as a 5th-level spell, it deals 15d10 damage to the target. The target is exhausted for 1 round if it fails its save and it is fatigued for 1 round if it succeeds at its saving throw.\n\n6th: When you cast mind thrust as a 6th-level spell, it deals 17d10 damage to the target. The target is exhausted and stunned for 1 round if it fails its save, and it is fatigued for 1 round if it succeeds at its saving throw."

    let MindThrust4 = CompendiumSpell(context: context)
    MindThrust4.name = "Mind Thrust 4"
    MindThrust4.type = "M"
    MindThrust4.level = 4
    MindThrust4.school = "Divination [mind-affecting]"
    MindThrust4.castingTime = "1 standard action"
    MindThrust4.range = "close (25 ft. + 5 ft./2 levels)"
    MindThrust4.targets =  "one creature"
    MindThrust4.duration = "instantaneous"
    MindThrust4.savingThrow = "Will half"
    MindThrust4.spellResistance = "Yes"
    MindThrust4.content = "You divine the most vulnerable portion of your opponent’s mind and overload it with a glut of psychic information. The target can attempt a Will saving throw to halve the damage dealt by this spell. This spell has no effect on creatures without an Intelligence score.\n\n1st: When you cast mind thrust as a 1st-level spell, it deals 2d10 damage to the target.\n\n2nd: When you cast mind thrust as a 2nd-level spell, it deals 4d10 damage to the target.\n\n3rd: When you cast mind thrust as a 3rd-level spell, it deals 7d10 damage to the target.\n\n4th: When you cast mind thrust as a 4th-level spell, it deals 10d10 damage to the target and the target is fatigued for 1 round if it fails its saving throw.\n\n5th: When you cast mind thrust as a 5th-level spell, it deals 15d10 damage to the target. The target is exhausted for 1 round if it fails its save and it is fatigued for 1 round if it succeeds at its saving throw.\n\n6th: When you cast mind thrust as a 6th-level spell, it deals 17d10 damage to the target. The target is exhausted and stunned for 1 round if it fails its save, and it is fatigued for 1 round if it succeeds at its saving throw."

    let MindThrust5 = CompendiumSpell(context: context)
    MindThrust5.name = "Mind Thrust 5"
    MindThrust5.type = "M"
    MindThrust5.level = 5
    MindThrust5.school = "Divination [mind-affecting]"
    MindThrust5.castingTime = "1 standard action"
    MindThrust5.range = "close (25 ft. + 5 ft./2 levels)"
    MindThrust5.targets =  "one creature"
    MindThrust5.duration = "instantaneous"
    MindThrust5.savingThrow = "Will half"
    MindThrust5.spellResistance = "Yes"
    MindThrust5.content = "You divine the most vulnerable portion of your opponent’s mind and overload it with a glut of psychic information. The target can attempt a Will saving throw to halve the damage dealt by this spell. This spell has no effect on creatures without an Intelligence score.\n\n1st: When you cast mind thrust as a 1st-level spell, it deals 2d10 damage to the target.\n\n2nd: When you cast mind thrust as a 2nd-level spell, it deals 4d10 damage to the target.\n\n3rd: When you cast mind thrust as a 3rd-level spell, it deals 7d10 damage to the target.\n\n4th: When you cast mind thrust as a 4th-level spell, it deals 10d10 damage to the target and the target is fatigued for 1 round if it fails its saving throw.\n\n5th: When you cast mind thrust as a 5th-level spell, it deals 15d10 damage to the target. The target is exhausted for 1 round if it fails its save and it is fatigued for 1 round if it succeeds at its saving throw.\n\n6th: When you cast mind thrust as a 6th-level spell, it deals 17d10 damage to the target. The target is exhausted and stunned for 1 round if it fails its save, and it is fatigued for 1 round if it succeeds at its saving throw."

    let MindThrust6 = CompendiumSpell(context: context)
    MindThrust6.name = "Mind Thrust 6"
    MindThrust6.type = "M"
    MindThrust6.level = 6
    MindThrust6.school = "Divination [mind-affecting]"
    MindThrust6.castingTime = "1 standard action"
    MindThrust6.range = "close (25 ft. + 5 ft./2 levels)"
    MindThrust6.targets =  "one creature"
    MindThrust6.duration = "instantaneous"
    MindThrust6.savingThrow = "Will half"
    MindThrust6.spellResistance = "Yes"
    MindThrust6.content = "You divine the most vulnerable portion of your opponent’s mind and overload it with a glut of psychic information. The target can attempt a Will saving throw to halve the damage dealt by this spell. This spell has no effect on creatures without an Intelligence score.\n\n1st: When you cast mind thrust as a 1st-level spell, it deals 2d10 damage to the target.\n\n2nd: When you cast mind thrust as a 2nd-level spell, it deals 4d10 damage to the target.\n\n3rd: When you cast mind thrust as a 3rd-level spell, it deals 7d10 damage to the target.\n\n4th: When you cast mind thrust as a 4th-level spell, it deals 10d10 damage to the target and the target is fatigued for 1 round if it fails its saving throw.\n\n5th: When you cast mind thrust as a 5th-level spell, it deals 15d10 damage to the target. The target is exhausted for 1 round if it fails its save and it is fatigued for 1 round if it succeeds at its saving throw.\n\n6th: When you cast mind thrust as a 6th-level spell, it deals 17d10 damage to the target. The target is exhausted and stunned for 1 round if it fails its save, and it is fatigued for 1 round if it succeeds at its saving throw."

    let MysticCure1 = CompendiumSpell(context: context)
    MysticCure1.name = "Mystic Cure 1"
    MysticCure1.type = "M"
    MysticCure1.level = 1
    MysticCure1.school = "Conjuration [healing]"
    MysticCure1.castingTime = "1 standard action"
    MysticCure1.range = "touch"
    MysticCure1.targets =  "one living creature"
    MysticCure1.duration = "instantaneous"
    MysticCure1.savingThrow = "Will half (harmless)"
    MysticCure1.spellResistance = "Yes (harmless)"
    MysticCure1.content = "With a touch, you heal and invigorate your target, restoring a number of Hit Points. If the target regains all of its Hit Points as a result of this healing, you can apply the remaining healing to yourself, as long as you are a living creature. On the other hand, if this isn’t enough to restore all the target’s Hit Points, you can transfer any number of your own Hit Points to the target, healing the target that amount. You can’t transfer more Hit Points than you have or more Hit Points than the target is missing.\n\nMystic cure restores a number of Hit Points to your target depending on the spell’s level.\n\n1st: 1d8 + your Wisdom modifier\n\n2nd: 3d8 + your Wisdom modifier\n\n3rd: 5d8 + your Wisdom modifier\n\n4th: 7d8 + your Wisdom modifier\n\n5th: 9d8 + your Wisdom modifier\n\n6th: 11d8 + your Wisdom modifier\n\nIn addition, unlike most healing, when you cast mystic cure as a spell of 4th-level or higher, you have two options to enhance its effects. The first option is to restore an extra 5d8 Hit Points with a 4th-level mystic cure spell, an extra 7d8 Hit Points with a 5th-level mystic cure spell, or an extra 9d8 Hit Points with a 6th-level mystic cure spell. The second option is to bring a target that died within 2 rounds back to life. In addition to healing such a creature, the spell returns the target to life, and the target takes a temporary negative level for 24 hours. This spell can’t resuscitate creatures slain by death effects, creatures turned into undead, or creatures whose bodies were destroyed, significantly mutilated, disintegrated, and so on.\n\nCasting this spell doesn’t provoke attacks of opportunity."

    let MysticCure2 = CompendiumSpell(context: context)
    MysticCure2.name = "Mystic Cure 2"
    MysticCure2.type = "M"
    MysticCure2.level = 2
    MysticCure2.school = "Conjuration [healing]"
    MysticCure2.castingTime = "1 standard action"
    MysticCure2.range = "touch"
    MysticCure2.targets =  "one living creature"
    MysticCure2.duration = "instantaneous"
    MysticCure2.savingThrow = "Will half (harmless)"
    MysticCure2.spellResistance = "Yes (harmless)"
    MysticCure2.content = "With a touch, you heal and invigorate your target, restoring a number of Hit Points. If the target regains all of its Hit Points as a result of this healing, you can apply the remaining healing to yourself, as long as you are a living creature. On the other hand, if this isn’t enough to restore all the target’s Hit Points, you can transfer any number of your own Hit Points to the target, healing the target that amount. You can’t transfer more Hit Points than you have or more Hit Points than the target is missing.\n\nMystic cure restores a number of Hit Points to your target depending on the spell’s level.\n\n1st: 1d8 + your Wisdom modifier\n\n2nd: 3d8 + your Wisdom modifier\n\n3rd: 5d8 + your Wisdom modifier\n\n4th: 7d8 + your Wisdom modifier\n\n5th: 9d8 + your Wisdom modifier\n\n6th: 11d8 + your Wisdom modifier\n\nIn addition, unlike most healing, when you cast mystic cure as a spell of 4th-level or higher, you have two options to enhance its effects. The first option is to restore an extra 5d8 Hit Points with a 4th-level mystic cure spell, an extra 7d8 Hit Points with a 5th-level mystic cure spell, or an extra 9d8 Hit Points with a 6th-level mystic cure spell. The second option is to bring a target that died within 2 rounds back to life. In addition to healing such a creature, the spell returns the target to life, and the target takes a temporary negative level for 24 hours. This spell can’t resuscitate creatures slain by death effects, creatures turned into undead, or creatures whose bodies were destroyed, significantly mutilated, disintegrated, and so on.\n\nCasting this spell doesn’t provoke attacks of opportunity."

    let MysticCure3 = CompendiumSpell(context: context)
    MysticCure3.name = "Mystic Cure 3"
    MysticCure3.type = "M"
    MysticCure3.level = 3
    MysticCure3.school = "Conjuration [healing]"
    MysticCure3.castingTime = "1 standard action"
    MysticCure3.range = "touch"
    MysticCure3.targets =  "one living creature"
    MysticCure3.duration = "instantaneous"
    MysticCure3.savingThrow = "Will half (harmless)"
    MysticCure3.spellResistance = "Yes (harmless)"
    MysticCure3.content = "With a touch, you heal and invigorate your target, restoring a number of Hit Points. If the target regains all of its Hit Points as a result of this healing, you can apply the remaining healing to yourself, as long as you are a living creature. On the other hand, if this isn’t enough to restore all the target’s Hit Points, you can transfer any number of your own Hit Points to the target, healing the target that amount. You can’t transfer more Hit Points than you have or more Hit Points than the target is missing.\n\nMystic cure restores a number of Hit Points to your target depending on the spell’s level.\n\n1st: 1d8 + your Wisdom modifier\n\n2nd: 3d8 + your Wisdom modifier\n\n3rd: 5d8 + your Wisdom modifier\n\n4th: 7d8 + your Wisdom modifier\n\n5th: 9d8 + your Wisdom modifier\n\n6th: 11d8 + your Wisdom modifier\n\nIn addition, unlike most healing, when you cast mystic cure as a spell of 4th-level or higher, you have two options to enhance its effects. The first option is to restore an extra 5d8 Hit Points with a 4th-level mystic cure spell, an extra 7d8 Hit Points with a 5th-level mystic cure spell, or an extra 9d8 Hit Points with a 6th-level mystic cure spell. The second option is to bring a target that died within 2 rounds back to life. In addition to healing such a creature, the spell returns the target to life, and the target takes a temporary negative level for 24 hours. This spell can’t resuscitate creatures slain by death effects, creatures turned into undead, or creatures whose bodies were destroyed, significantly mutilated, disintegrated, and so on.\n\nCasting this spell doesn’t provoke attacks of opportunity."

    let MysticCure4 = CompendiumSpell(context: context)
    MysticCure4.name = "Mystic Cure 4"
    MysticCure4.type = "M"
    MysticCure4.level = 4
    MysticCure4.school = "Conjuration [healing]"
    MysticCure4.castingTime = "1 standard action"
    MysticCure4.range = "touch"
    MysticCure4.targets =  "one living creature"
    MysticCure4.duration = "instantaneous"
    MysticCure4.savingThrow = "Will half (harmless)"
    MysticCure4.spellResistance = "Yes (harmless)"
    MysticCure4.content = "With a touch, you heal and invigorate your target, restoring a number of Hit Points. If the target regains all of its Hit Points as a result of this healing, you can apply the remaining healing to yourself, as long as you are a living creature. On the other hand, if this isn’t enough to restore all the target’s Hit Points, you can transfer any number of your own Hit Points to the target, healing the target that amount. You can’t transfer more Hit Points than you have or more Hit Points than the target is missing.\n\nMystic cure restores a number of Hit Points to your target depending on the spell’s level.\n\n1st: 1d8 + your Wisdom modifier\n\n2nd: 3d8 + your Wisdom modifier\n\n3rd: 5d8 + your Wisdom modifier\n\n4th: 7d8 + your Wisdom modifier\n\n5th: 9d8 + your Wisdom modifier\n\n6th: 11d8 + your Wisdom modifier\n\nIn addition, unlike most healing, when you cast mystic cure as a spell of 4th-level or higher, you have two options to enhance its effects. The first option is to restore an extra 5d8 Hit Points with a 4th-level mystic cure spell, an extra 7d8 Hit Points with a 5th-level mystic cure spell, or an extra 9d8 Hit Points with a 6th-level mystic cure spell. The second option is to bring a target that died within 2 rounds back to life. In addition to healing such a creature, the spell returns the target to life, and the target takes a temporary negative level for 24 hours. This spell can’t resuscitate creatures slain by death effects, creatures turned into undead, or creatures whose bodies were destroyed, significantly mutilated, disintegrated, and so on.\n\nCasting this spell doesn’t provoke attacks of opportunity."

    let MysticCure5 = CompendiumSpell(context: context)
    MysticCure5.name = "Mystic Cure 5"
    MysticCure5.type = "M"
    MysticCure5.level = 5
    MysticCure5.school = "Conjuration [healing]"
    MysticCure5.castingTime = "1 standard action"
    MysticCure5.range = "touch"
    MysticCure5.targets =  "one living creature"
    MysticCure5.duration = "instantaneous"
    MysticCure5.savingThrow = "Will half (harmless)"
    MysticCure5.spellResistance = "Yes (harmless)"
    MysticCure5.content = "With a touch, you heal and invigorate your target, restoring a number of Hit Points. If the target regains all of its Hit Points as a result of this healing, you can apply the remaining healing to yourself, as long as you are a living creature. On the other hand, if this isn’t enough to restore all the target’s Hit Points, you can transfer any number of your own Hit Points to the target, healing the target that amount. You can’t transfer more Hit Points than you have or more Hit Points than the target is missing.\n\nMystic cure restores a number of Hit Points to your target depending on the spell’s level.\n\n1st: 1d8 + your Wisdom modifier\n\n2nd: 3d8 + your Wisdom modifier\n\n3rd: 5d8 + your Wisdom modifier\n\n4th: 7d8 + your Wisdom modifier\n\n5th: 9d8 + your Wisdom modifier\n\n6th: 11d8 + your Wisdom modifier\n\nIn addition, unlike most healing, when you cast mystic cure as a spell of 4th-level or higher, you have two options to enhance its effects. The first option is to restore an extra 5d8 Hit Points with a 4th-level mystic cure spell, an extra 7d8 Hit Points with a 5th-level mystic cure spell, or an extra 9d8 Hit Points with a 6th-level mystic cure spell. The second option is to bring a target that died within 2 rounds back to life. In addition to healing such a creature, the spell returns the target to life, and the target takes a temporary negative level for 24 hours. This spell can’t resuscitate creatures slain by death effects, creatures turned into undead, or creatures whose bodies were destroyed, significantly mutilated, disintegrated, and so on.\n\nCasting this spell doesn’t provoke attacks of opportunity."

    let MysticCure6 = CompendiumSpell(context: context)
    MysticCure6.name = "Mystic Cure 6"
    MysticCure6.type = "M"
    MysticCure6.level = 6
    MysticCure6.school = "Conjuration [healing]"
    MysticCure6.castingTime = "1 standard action"
    MysticCure6.range = "touch"
    MysticCure6.targets =  "one living creature"
    MysticCure6.duration = "instantaneous"
    MysticCure6.savingThrow = "Will half (harmless)"
    MysticCure6.spellResistance = "Yes (harmless)"
    MysticCure6.content = "With a touch, you heal and invigorate your target, restoring a number of Hit Points. If the target regains all of its Hit Points as a result of this healing, you can apply the remaining healing to yourself, as long as you are a living creature. On the other hand, if this isn’t enough to restore all the target’s Hit Points, you can transfer any number of your own Hit Points to the target, healing the target that amount. You can’t transfer more Hit Points than you have or more Hit Points than the target is missing.\n\nMystic cure restores a number of Hit Points to your target depending on the spell’s level.\n\n1st: 1d8 + your Wisdom modifier\n\n2nd: 3d8 + your Wisdom modifier\n\n3rd: 5d8 + your Wisdom modifier\n\n4th: 7d8 + your Wisdom modifier\n\n5th: 9d8 + your Wisdom modifier\n\n6th: 11d8 + your Wisdom modifier\n\nIn addition, unlike most healing, when you cast mystic cure as a spell of 4th-level or higher, you have two options to enhance its effects. The first option is to restore an extra 5d8 Hit Points with a 4th-level mystic cure spell, an extra 7d8 Hit Points with a 5th-level mystic cure spell, or an extra 9d8 Hit Points with a 6th-level mystic cure spell. The second option is to bring a target that died within 2 rounds back to life. In addition to healing such a creature, the spell returns the target to life, and the target takes a temporary negative level for 24 hours. This spell can’t resuscitate creatures slain by death effects, creatures turned into undead, or creatures whose bodies were destroyed, significantly mutilated, disintegrated, and so on.\n\nCasting this spell doesn’t provoke attacks of opportunity."

    let NecromanticRevitalization1 = CompendiumSpell(context: context)
    NecromanticRevitalization1.name = "Necromantic Revitalization 1"
    NecromanticRevitalization1.type = "MT"
    NecromanticRevitalization1.level = 1
    NecromanticRevitalization1.school = "Necromancy"
    NecromanticRevitalization1.castingTime = "1 standard action"
    NecromanticRevitalization1.range = "touch"
    NecromanticRevitalization1.targets =  "one undead creature"
    NecromanticRevitalization1.duration = "instantaneous"
    NecromanticRevitalization1.savingThrow = "Will half (harmless)"
    NecromanticRevitalization1.spellResistance = "Yes (harmless)"
    NecromanticRevitalization1.content = "With a touch, you replenish the negative energies that animate your target, restoring a number of Hit Points. If the target regains all of its Hit Points as a result of this healing, you can apply the remaining healing to yourself, as long as you are an undead creature.\n\nNecromantic revitalaization restores a number of Hit Points to your target depending on the spell’s level.\n\n1st: 1d8 + your Intelligence modifier\n\n2nd: 3d8 + your Intelligence modifier\n\n3rd: 5d8 + your Intelligence modifier\n\n4th: 7d8 + your Intelligence modifier\n\n5th: 9d8 + your Intelligence modifier\n\n6th: 11d8 + your Intelligence modifier\n\nIn addition, unlike most healing, when you cast necromantic revitalization as a spell of 4th-level or higher, you have two options to enhance its effects. The first option is to restore an extra 5d8 Hit Points with a 4th-level necromantic revitalization spell, an extra 7d8 Hit Points with a 5th-level necromantic revitalization spell, or an extra 9d8 Hit Points with a 6th-level necromantic revitalization spell. The second option is to bring a target that has been destroyed within 2 rounds back to life bringing it back to its undead state with the numberof Hit Points that would otherwise be restored by this spell. This spell can’t reanimate creatures that were destroyed by effects that specifically target or have a special effect against the undead (such as wall of fire) or creatures whose bodies were significantly mutilated, disintegrated, or otherwise obliterated. It also cannot restore an undead creature whose existence is tied to an object (such as a necrovite’s electroencephalon) if that object has been destroyed.\n\nCasting this spell doesn’t provoke attacks of opportunity."

    let NecromanticRevitalization2 = CompendiumSpell(context: context)
    NecromanticRevitalization2.name = "Necromantic Revitalization 2"
    NecromanticRevitalization2.type = "MT"
    NecromanticRevitalization2.level = 2
    NecromanticRevitalization2.school = "Necromancy"
    NecromanticRevitalization2.castingTime = "1 standard action"
    NecromanticRevitalization2.range = "touch"
    NecromanticRevitalization2.targets =  "one undead creature"
    NecromanticRevitalization2.duration = "instantaneous"
    NecromanticRevitalization2.savingThrow = "Will half (harmless)"
    NecromanticRevitalization2.spellResistance = "Yes (harmless)"
    NecromanticRevitalization2.content = "With a touch, you replenish the negative energies that animate your target, restoring a number of Hit Points. If the target regains all of its Hit Points as a result of this healing, you can apply the remaining healing to yourself, as long as you are an undead creature.\n\nNecromantic revitalaization restores a number of Hit Points to your target depending on the spell’s level.\n\n1st: 1d8 + your Intelligence modifier\n\n2nd: 3d8 + your Intelligence modifier\n\n3rd: 5d8 + your Intelligence modifier\n\n4th: 7d8 + your Intelligence modifier\n\n5th: 9d8 + your Intelligence modifier\n\n6th: 11d8 + your Intelligence modifier\n\nIn addition, unlike most healing, when you cast necromantic revitalization as a spell of 4th-level or higher, you have two options to enhance its effects. The first option is to restore an extra 5d8 Hit Points with a 4th-level necromantic revitalization spell, an extra 7d8 Hit Points with a 5th-level necromantic revitalization spell, or an extra 9d8 Hit Points with a 6th-level necromantic revitalization spell. The second option is to bring a target that has been destroyed within 2 rounds back to life bringing it back to its undead state with the numberof Hit Points that would otherwise be restored by this spell. This spell can’t reanimate creatures that were destroyed by effects that specifically target or have a special effect against the undead (such as wall of fire) or creatures whose bodies were significantly mutilated, disintegrated, or otherwise obliterated. It also cannot restore an undead creature whose existence is tied to an object (such as a necrovite’s electroencephalon) if that object has been destroyed.\n\nCasting this spell doesn’t provoke attacks of opportunity."

    let NecromanticRevitalization3 = CompendiumSpell(context: context)
    NecromanticRevitalization3.name = "Necromantic Revitalization 3"
    NecromanticRevitalization3.type = "MT"
    NecromanticRevitalization3.level = 3
    NecromanticRevitalization3.school = "Necromancy"
    NecromanticRevitalization3.castingTime = "1 standard action"
    NecromanticRevitalization3.range = "touch"
    NecromanticRevitalization3.targets =  "one undead creature"
    NecromanticRevitalization3.duration = "instantaneous"
    NecromanticRevitalization3.savingThrow = "Will half (harmless)"
    NecromanticRevitalization3.spellResistance = "Yes (harmless)"
    NecromanticRevitalization3.content = "With a touch, you replenish the negative energies that animate your target, restoring a number of Hit Points. If the target regains all of its Hit Points as a result of this healing, you can apply the remaining healing to yourself, as long as you are an undead creature.\n\nNecromantic revitalaization restores a number of Hit Points to your target depending on the spell’s level.\n\n1st: 1d8 + your Intelligence modifier\n\n2nd: 3d8 + your Intelligence modifier\n\n3rd: 5d8 + your Intelligence modifier\n\n4th: 7d8 + your Intelligence modifier\n\n5th: 9d8 + your Intelligence modifier\n\n6th: 11d8 + your Intelligence modifier\n\nIn addition, unlike most healing, when you cast necromantic revitalization as a spell of 4th-level or higher, you have two options to enhance its effects. The first option is to restore an extra 5d8 Hit Points with a 4th-level necromantic revitalization spell, an extra 7d8 Hit Points with a 5th-level necromantic revitalization spell, or an extra 9d8 Hit Points with a 6th-level necromantic revitalization spell. The second option is to bring a target that has been destroyed within 2 rounds back to life bringing it back to its undead state with the numberof Hit Points that would otherwise be restored by this spell. This spell can’t reanimate creatures that were destroyed by effects that specifically target or have a special effect against the undead (such as wall of fire) or creatures whose bodies were significantly mutilated, disintegrated, or otherwise obliterated. It also cannot restore an undead creature whose existence is tied to an object (such as a necrovite’s electroencephalon) if that object has been destroyed.\n\nCasting this spell doesn’t provoke attacks of opportunity."

    let NecromanticRevitalization4 = CompendiumSpell(context: context)
    NecromanticRevitalization4.name = "Necromantic Revitalization 4"
    NecromanticRevitalization4.type = "MT"
    NecromanticRevitalization4.level = 4
    NecromanticRevitalization4.school = "Necromancy"
    NecromanticRevitalization4.castingTime = "1 standard action"
    NecromanticRevitalization4.range = "touch"
    NecromanticRevitalization4.targets =  "one undead creature"
    NecromanticRevitalization4.duration = "instantaneous"
    NecromanticRevitalization4.savingThrow = "Will half (harmless)"
    NecromanticRevitalization4.spellResistance = "Yes (harmless)"
    NecromanticRevitalization4.content = "With a touch, you replenish the negative energies that animate your target, restoring a number of Hit Points. If the target regains all of its Hit Points as a result of this healing, you can apply the remaining healing to yourself, as long as you are an undead creature.\n\nNecromantic revitalaization restores a number of Hit Points to your target depending on the spell’s level.\n\n1st: 1d8 + your Intelligence modifier\n\n2nd: 3d8 + your Intelligence modifier\n\n3rd: 5d8 + your Intelligence modifier\n\n4th: 7d8 + your Intelligence modifier\n\n5th: 9d8 + your Intelligence modifier\n\n6th: 11d8 + your Intelligence modifier\n\nIn addition, unlike most healing, when you cast necromantic revitalization as a spell of 4th-level or higher, you have two options to enhance its effects. The first option is to restore an extra 5d8 Hit Points with a 4th-level necromantic revitalization spell, an extra 7d8 Hit Points with a 5th-level necromantic revitalization spell, or an extra 9d8 Hit Points with a 6th-level necromantic revitalization spell. The second option is to bring a target that has been destroyed within 2 rounds back to life bringing it back to its undead state with the numberof Hit Points that would otherwise be restored by this spell. This spell can’t reanimate creatures that were destroyed by effects that specifically target or have a special effect against the undead (such as wall of fire) or creatures whose bodies were significantly mutilated, disintegrated, or otherwise obliterated. It also cannot restore an undead creature whose existence is tied to an object (such as a necrovite’s electroencephalon) if that object has been destroyed.\n\nCasting this spell doesn’t provoke attacks of opportunity."

    let NecromanticRevitalization5 = CompendiumSpell(context: context)
    NecromanticRevitalization5.name = "Necromantic Revitalization 5"
    NecromanticRevitalization5.type = "MT"
    NecromanticRevitalization5.level = 5
    NecromanticRevitalization5.school = "Necromancy"
    NecromanticRevitalization5.castingTime = "1 standard action"
    NecromanticRevitalization5.range = "touch"
    NecromanticRevitalization5.targets =  "one undead creature"
    NecromanticRevitalization5.duration = "instantaneous"
    NecromanticRevitalization5.savingThrow = "Will half (harmless)"
    NecromanticRevitalization5.spellResistance = "Yes (harmless)"
    NecromanticRevitalization5.content = "With a touch, you replenish the negative energies that animate your target, restoring a number of Hit Points. If the target regains all of its Hit Points as a result of this healing, you can apply the remaining healing to yourself, as long as you are an undead creature.\n\nNecromantic revitalaization restores a number of Hit Points to your target depending on the spell’s level.\n\n1st: 1d8 + your Intelligence modifier\n\n2nd: 3d8 + your Intelligence modifier\n\n3rd: 5d8 + your Intelligence modifier\n\n4th: 7d8 + your Intelligence modifier\n\n5th: 9d8 + your Intelligence modifier\n\n6th: 11d8 + your Intelligence modifier\n\nIn addition, unlike most healing, when you cast necromantic revitalization as a spell of 4th-level or higher, you have two options to enhance its effects. The first option is to restore an extra 5d8 Hit Points with a 4th-level necromantic revitalization spell, an extra 7d8 Hit Points with a 5th-level necromantic revitalization spell, or an extra 9d8 Hit Points with a 6th-level necromantic revitalization spell. The second option is to bring a target that has been destroyed within 2 rounds back to life bringing it back to its undead state with the numberof Hit Points that would otherwise be restored by this spell. This spell can’t reanimate creatures that were destroyed by effects that specifically target or have a special effect against the undead (such as wall of fire) or creatures whose bodies were significantly mutilated, disintegrated, or otherwise obliterated. It also cannot restore an undead creature whose existence is tied to an object (such as a necrovite’s electroencephalon) if that object has been destroyed.\n\nCasting this spell doesn’t provoke attacks of opportunity."

    let NecromanticRevitalization6 = CompendiumSpell(context: context)
    NecromanticRevitalization6.name = "Necromantic Revitalization 6"
    NecromanticRevitalization6.type = "MT"
    NecromanticRevitalization6.level = 6
    NecromanticRevitalization6.school = "Necromancy"
    NecromanticRevitalization6.castingTime = "1 standard action"
    NecromanticRevitalization6.range = "touch"
    NecromanticRevitalization6.targets =  "one undead creature"
    NecromanticRevitalization6.duration = "instantaneous"
    NecromanticRevitalization6.savingThrow = "Will half (harmless)"
    NecromanticRevitalization6.spellResistance = "Yes (harmless)"
    NecromanticRevitalization6.content = "With a touch, you replenish the negative energies that animate your target, restoring a number of Hit Points. If the target regains all of its Hit Points as a result of this healing, you can apply the remaining healing to yourself, as long as you are an undead creature.\n\nNecromantic revitalaization restores a number of Hit Points to your target depending on the spell’s level.\n\n1st: 1d8 + your Intelligence modifier\n\n2nd: 3d8 + your Intelligence modifier\n\n3rd: 5d8 + your Intelligence modifier\n\n4th: 7d8 + your Intelligence modifier\n\n5th: 9d8 + your Intelligence modifier\n\n6th: 11d8 + your Intelligence modifier\n\nIn addition, unlike most healing, when you cast necromantic revitalization as a spell of 4th-level or higher, you have two options to enhance its effects. The first option is to restore an extra 5d8 Hit Points with a 4th-level necromantic revitalization spell, an extra 7d8 Hit Points with a 5th-level necromantic revitalization spell, or an extra 9d8 Hit Points with a 6th-level necromantic revitalization spell. The second option is to bring a target that has been destroyed within 2 rounds back to life bringing it back to its undead state with the numberof Hit Points that would otherwise be restored by this spell. This spell can’t reanimate creatures that were destroyed by effects that specifically target or have a special effect against the undead (such as wall of fire) or creatures whose bodies were significantly mutilated, disintegrated, or otherwise obliterated. It also cannot restore an undead creature whose existence is tied to an object (such as a necrovite’s electroencephalon) if that object has been destroyed.\n\nCasting this spell doesn’t provoke attacks of opportunity."
    
    let Overheat = CompendiumSpell(context: context)
    Overheat.name = "Overheat"
    Overheat.type = "T"
    Overheat.level = 1
    Overheat.school = "Evocation [fire]"
    Overheat.castingTime = "1 standard action"
    Overheat.range = "15 ft."
    Overheat.area = "cone-shaped burst"
    Overheat.duration = "instantaneous"
    Overheat.savingThrow = "Reflex half"
    Overheat.spellResistance = "Yes"
    Overheat.content = "You collect the heat generated by nearby bodies and devices and vent it outward in a thermal wave, dealing 2d8 fire damage to creatures and objects in the area."

    let ReflectingArmor = CompendiumSpell(context: context)
    ReflectingArmor.name = "Reflecting Armor"
    ReflectingArmor.type = "M"
    ReflectingArmor.level = 1
    ReflectingArmor.school = "Abjuration [force]"
    ReflectingArmor.castingTime = "1 standard action"
    ReflectingArmor.range = "personal"
    ReflectingArmor.duration = "10 minutes/level or until dismissed (D); see text"
    ReflectingArmor.savingThrow = "none"
    ReflectingArmor.spellResistance = "No"
    ReflectingArmor.content = "You create a shimmering skin-like coating of mystical force that covers your body, allowing you to reflect damage you take back against your attacker. At any time during this spell’s duration, when you take Hit Point damage from an attack made with a weapon by a foe within 100 feet, you can choose to dismiss the spell as a reaction. If you do, the armor crackles with energy as it disappears, arcing through the air to strike the attacking creature, which takes an amount of force damage equal to the damage dealt to you at the time this spell was dismissed (maximum 10). The target can attempt a Reflex save for half damage."

    let RemoveConditionLesser = CompendiumSpell(context: context)
    RemoveConditionLesser.name = "Remove Condition, Lesser"
    RemoveConditionLesser.type = "M"
    RemoveConditionLesser.level = 1
    RemoveConditionLesser.school = "Conjuration [healing]"
    RemoveConditionLesser.castingTime = "1 standard action"
    RemoveConditionLesser.range = "touch"
    RemoveConditionLesser.targets =  "one creature"
    RemoveConditionLesser.duration = "instantaneous"
    RemoveConditionLesser.savingThrow = "Fortitude negates (harmless)"
    RemoveConditionLesser.spellResistance = "No"
    RemoveConditionLesser.content = "You remove any one of the following conditions affecting the target: shaken, sickened, or staggered. If the condition is the result of a disease or another ongoing effect, this spell removes the condition but does not cure the disease or ongoing effect, and the target can regain the condition from that effect as normal, potentially immediately. Lesser remove condition also doesn’t cure or remove other damage or conditions the target is suffering from any source, even the same source that caused the removed condition. Since this spell’s duration is instantaneous, it does not prevent the target from gaining the condition again.\n\nCasting this spell doesn’t provoke attacks of opportunity."

    let SeekingShot = CompendiumSpell(context: context)
    SeekingShot.name = "Seeking Shot"
    SeekingShot.type = "M"
    SeekingShot.level = 0
    SeekingShot.school = "Divination"
    SeekingShot.castingTime = "1 standard action"
    SeekingShot.range = "touch"
    SeekingShot.targets =  "one weapon"
    SeekingShot.duration = "see text"
    SeekingShot.savingThrow = "none"
    SeekingShot.spellResistance = "No"
    SeekingShot.content = "You create a spiritual link between a weapon you touch and one target you can perceive with a precise sense at the time of casting. The next attack made with that weapon against that target (as long as it is within 1 minute) ignores cover and concealment. If the attack is a ranged attack, it does not need a line of effect as long as some route exists between the weapon and the target (regardless of how circuitous that route is). The attack is subject to the normal penalties from range increments."

    let ShareLanguage = CompendiumSpell(context: context)
    ShareLanguage.name = "Share Language"
    ShareLanguage.type = "M"
    ShareLanguage.level = 1
    ShareLanguage.school = "Divination"
    ShareLanguage.castingTime = "1 standard action"
    ShareLanguage.range = "touch"
    ShareLanguage.targets =  "one creature"
    ShareLanguage.duration = "24 hourse"
    ShareLanguage.savingThrow = "Will negates (harmless)"
    ShareLanguage.spellResistance = "Yes (harmless)"
    ShareLanguage.content = "For 24 hours, the target can read, understand, and communicate to the best of its ability in up to three languages that you already know. This doesn’t change the physical nature of the creature (if it lacks a means of speech, it still can’t talk) or its attitude toward you. It does, however, allow intelligent creatures that normally have no language to understand and (if physically capable) communicate in the languages granted by this spell."

    let SummonCreature1 = CompendiumSpell(context: context)
    SummonCreature1.name = "Summon Creature 1"
    SummonCreature1.type = "MT"
    SummonCreature1.level = 1
    SummonCreature1.school = "Conjuration [summoning]"
    SummonCreature1.castingTime = "1 round"
    SummonCreature1.range = "medium (100 ft. + 10 ft./level)"
    SummonCreature1.effect = "one or more summoned creatures"
    SummonCreature1.duration = "1 round/level (D)"
    SummonCreature1.savingThrow = "none"
    SummonCreature1.spellResistance = "No"
    SummonCreature1.content = "This spell summons an extraplanar creature (typically an elemental, magical beast native to another plane, or outsider, but also occasionally even extraplanar constructs). The summoned creature appears where you designate and acts immediately on your turn. It attacks your opponents to the best of its ability. If you can communicate with the creature, you can direct it to not attack, to attack particular enemies, or to perform other actions.\n\nWhen you gain this spell as a spell known, select four creatures from the appropriate list in Table 8: Summon Creature for each level at which you can cast this spell. For example, for the 1st-level summon creature spell, you could choose Tiny air, earth, fire, and water elementals. Note that a particular alignment or class is sometimes required to choose certain creatures, as listed in Table 8. In place of a single selection, you can choose a creature from a lower-level summoning list; doing so allows you the option of summoning multiple such creatures at a time. Each time you gain a character level, you can change these selections.\n\nYou can gain summon creature a second time at the highest spell level you know, selecting four additional appropriate creatures at each level you can cast this spell.\n\nYou choose which of the selected creatures you summon each time you cast the spell.\n\nWhen you cast summon creature as a 1st-level spell, you summon one creature from your selection of creatures from the 1st-level summoning list.\n\nWhen you cast summon creature as a 2nd or higher level spell, you summon one creature from your selection of creatures from the  appropriate level summoning list. If the chosen creature is from a lower-level summoning list, you summon three such creatures instead.\n\nA summoned creature can’t use teleportation or planar travel abilities or magical divination abilities. Creatures can’t be summoned into an environment that can’t support them (such as summoning a breathing creature into a vacuum). Creatures summoned using this spell can’t use spells or spell-like abilities that duplicate spells that require expending Resolve Points or expensive materials to cast (such as raise dead).\n\nTo generate statistics for a summoned creature, first check the Stat Block column of Table 8: Summon Creature.\n\nOtherwise, if the entry is Tiny, Small, Medium, Large, Huge, or elder, use the elemental stat block of the same name and apply the appropriate graft, listed in the Applied Graft column. Non-elemental creatures lose elemental immunities and do not gain an elemental graft.\n\nFor example, to get the statistics of an angel from the 1st-level list, you use the tiny elemental stat block and apply the angel summoning graft."

    let SummonCreature2 = CompendiumSpell(context: context)
    SummonCreature2.name = "Summon Creature 2"
    SummonCreature2.type = "MT"
    SummonCreature2.level = 2
    SummonCreature2.school = "Conjuration [summoning]"
    SummonCreature2.castingTime = "1 round"
    SummonCreature2.range = "medium (100 ft. + 10 ft./level)"
    SummonCreature2.effect = "one or more summoned creatures"
    SummonCreature2.duration = "1 round/level (D)"
    SummonCreature2.savingThrow = "none"
    SummonCreature2.spellResistance = "No"
    SummonCreature2.content = "This spell summons an extraplanar creature (typically an elemental, magical beast native to another plane, or outsider, but also occasionally even extraplanar constructs). The summoned creature appears where you designate and acts immediately on your turn. It attacks your opponents to the best of its ability. If you can communicate with the creature, you can direct it to not attack, to attack particular enemies, or to perform other actions.\n\nWhen you gain this spell as a spell known, select four creatures from the appropriate list in Table 8: Summon Creature for each level at which you can cast this spell. For example, for the 1st-level summon creature spell, you could choose Tiny air, earth, fire, and water elementals. Note that a particular alignment or class is sometimes required to choose certain creatures, as listed in Table 8. In place of a single selection, you can choose a creature from a lower-level summoning list; doing so allows you the option of summoning multiple such creatures at a time. Each time you gain a character level, you can change these selections.\n\nYou can gain summon creature a second time at the highest spell level you know, selecting four additional appropriate creatures at each level you can cast this spell.\n\nYou choose which of the selected creatures you summon each time you cast the spell.\n\nWhen you cast summon creature as a 1st-level spell, you summon one creature from your selection of creatures from the 1st-level summoning list.\n\nWhen you cast summon creature as a 2nd or higher level spell, you summon one creature from your selection of creatures from the  appropriate level summoning list. If the chosen creature is from a lower-level summoning list, you summon three such creatures instead.\n\nA summoned creature can’t use teleportation or planar travel abilities or magical divination abilities. Creatures can’t be summoned into an environment that can’t support them (such as summoning a breathing creature into a vacuum). Creatures summoned using this spell can’t use spells or spell-like abilities that duplicate spells that require expending Resolve Points or expensive materials to cast (such as raise dead).\n\nTo generate statistics for a summoned creature, first check the Stat Block column of Table 8: Summon Creature.\n\nOtherwise, if the entry is Tiny, Small, Medium, Large, Huge, or elder, use the elemental stat block of the same name and apply the appropriate graft, listed in the Applied Graft column. Non-elemental creatures lose elemental immunities and do not gain an elemental graft.\n\nFor example, to get the statistics of an angel from the 1st-level list, you use the tiny elemental stat block and apply the angel summoning graft."

    let SummonCreature3 = CompendiumSpell(context: context)
    SummonCreature3.name = "Summon Creature 3"
    SummonCreature3.type = "MT"
    SummonCreature3.level = 3
    SummonCreature3.school = "Conjuration [summoning]"
    SummonCreature3.castingTime = "1 round"
    SummonCreature3.range = "medium (100 ft. + 10 ft./level)"
    SummonCreature3.effect = "one or more summoned creatures"
    SummonCreature3.duration = "1 round/level (D)"
    SummonCreature3.savingThrow = "none"
    SummonCreature3.spellResistance = "No"
    SummonCreature3.content = "This spell summons an extraplanar creature (typically an elemental, magical beast native to another plane, or outsider, but also occasionally even extraplanar constructs). The summoned creature appears where you designate and acts immediately on your turn. It attacks your opponents to the best of its ability. If you can communicate with the creature, you can direct it to not attack, to attack particular enemies, or to perform other actions.\n\nWhen you gain this spell as a spell known, select four creatures from the appropriate list in Table 8: Summon Creature for each level at which you can cast this spell. For example, for the 1st-level summon creature spell, you could choose Tiny air, earth, fire, and water elementals. Note that a particular alignment or class is sometimes required to choose certain creatures, as listed in Table 8. In place of a single selection, you can choose a creature from a lower-level summoning list; doing so allows you the option of summoning multiple such creatures at a time. Each time you gain a character level, you can change these selections.\n\nYou can gain summon creature a second time at the highest spell level you know, selecting four additional appropriate creatures at each level you can cast this spell.\n\nYou choose which of the selected creatures you summon each time you cast the spell.\n\nWhen you cast summon creature as a 1st-level spell, you summon one creature from your selection of creatures from the 1st-level summoning list.\n\nWhen you cast summon creature as a 2nd or higher level spell, you summon one creature from your selection of creatures from the  appropriate level summoning list. If the chosen creature is from a lower-level summoning list, you summon three such creatures instead.\n\nA summoned creature can’t use teleportation or planar travel abilities or magical divination abilities. Creatures can’t be summoned into an environment that can’t support them (such as summoning a breathing creature into a vacuum). Creatures summoned using this spell can’t use spells or spell-like abilities that duplicate spells that require expending Resolve Points or expensive materials to cast (such as raise dead).\n\nTo generate statistics for a summoned creature, first check the Stat Block column of Table 8: Summon Creature.\n\nOtherwise, if the entry is Tiny, Small, Medium, Large, Huge, or elder, use the elemental stat block of the same name and apply the appropriate graft, listed in the Applied Graft column. Non-elemental creatures lose elemental immunities and do not gain an elemental graft.\n\nFor example, to get the statistics of an angel from the 1st-level list, you use the tiny elemental stat block and apply the angel summoning graft."

    let SummonCreature4 = CompendiumSpell(context: context)
    SummonCreature4.name = "Summon Creature 4"
    SummonCreature4.type = "MT"
    SummonCreature4.level = 4
    SummonCreature4.school = "Conjuration [summoning]"
    SummonCreature4.castingTime = "1 round"
    SummonCreature4.range = "medium (100 ft. + 10 ft./level)"
    SummonCreature4.effect = "one or more summoned creatures"
    SummonCreature4.duration = "1 round/level (D)"
    SummonCreature4.savingThrow = "none"
    SummonCreature4.spellResistance = "No"
    SummonCreature4.content = "This spell summons an extraplanar creature (typically an elemental, magical beast native to another plane, or outsider, but also occasionally even extraplanar constructs). The summoned creature appears where you designate and acts immediately on your turn. It attacks your opponents to the best of its ability. If you can communicate with the creature, you can direct it to not attack, to attack particular enemies, or to perform other actions.\n\nWhen you gain this spell as a spell known, select four creatures from the appropriate list in Table 8: Summon Creature for each level at which you can cast this spell. For example, for the 1st-level summon creature spell, you could choose Tiny air, earth, fire, and water elementals. Note that a particular alignment or class is sometimes required to choose certain creatures, as listed in Table 8. In place of a single selection, you can choose a creature from a lower-level summoning list; doing so allows you the option of summoning multiple such creatures at a time. Each time you gain a character level, you can change these selections.\n\nYou can gain summon creature a second time at the highest spell level you know, selecting four additional appropriate creatures at each level you can cast this spell.\n\nYou choose which of the selected creatures you summon each time you cast the spell.\n\nWhen you cast summon creature as a 1st-level spell, you summon one creature from your selection of creatures from the 1st-level summoning list.\n\nWhen you cast summon creature as a 2nd or higher level spell, you summon one creature from your selection of creatures from the  appropriate level summoning list. If the chosen creature is from a lower-level summoning list, you summon three such creatures instead.\n\nA summoned creature can’t use teleportation or planar travel abilities or magical divination abilities. Creatures can’t be summoned into an environment that can’t support them (such as summoning a breathing creature into a vacuum). Creatures summoned using this spell can’t use spells or spell-like abilities that duplicate spells that require expending Resolve Points or expensive materials to cast (such as raise dead).\n\nTo generate statistics for a summoned creature, first check the Stat Block column of Table 8: Summon Creature.\n\nOtherwise, if the entry is Tiny, Small, Medium, Large, Huge, or elder, use the elemental stat block of the same name and apply the appropriate graft, listed in the Applied Graft column. Non-elemental creatures lose elemental immunities and do not gain an elemental graft.\n\nFor example, to get the statistics of an angel from the 1st-level list, you use the tiny elemental stat block and apply the angel summoning graft."

    let SummonCreature5 = CompendiumSpell(context: context)
    SummonCreature5.name = "Summon Creature 5"
    SummonCreature5.type = "MT"
    SummonCreature5.level = 5
    SummonCreature5.school = "Conjuration [summoning]"
    SummonCreature5.castingTime = "1 round"
    SummonCreature5.range = "medium (100 ft. + 10 ft./level)"
    SummonCreature5.effect = "one or more summoned creatures"
    SummonCreature5.duration = "1 round/level (D)"
    SummonCreature5.savingThrow = "none"
    SummonCreature5.spellResistance = "No"
    SummonCreature5.content = "This spell summons an extraplanar creature (typically an elemental, magical beast native to another plane, or outsider, but also occasionally even extraplanar constructs). The summoned creature appears where you designate and acts immediately on your turn. It attacks your opponents to the best of its ability. If you can communicate with the creature, you can direct it to not attack, to attack particular enemies, or to perform other actions.\n\nWhen you gain this spell as a spell known, select four creatures from the appropriate list in Table 8: Summon Creature for each level at which you can cast this spell. For example, for the 1st-level summon creature spell, you could choose Tiny air, earth, fire, and water elementals. Note that a particular alignment or class is sometimes required to choose certain creatures, as listed in Table 8. In place of a single selection, you can choose a creature from a lower-level summoning list; doing so allows you the option of summoning multiple such creatures at a time. Each time you gain a character level, you can change these selections.\n\nYou can gain summon creature a second time at the highest spell level you know, selecting four additional appropriate creatures at each level you can cast this spell.\n\nYou choose which of the selected creatures you summon each time you cast the spell.\n\nWhen you cast summon creature as a 1st-level spell, you summon one creature from your selection of creatures from the 1st-level summoning list.\n\nWhen you cast summon creature as a 2nd or higher level spell, you summon one creature from your selection of creatures from the  appropriate level summoning list. If the chosen creature is from a lower-level summoning list, you summon three such creatures instead.\n\nA summoned creature can’t use teleportation or planar travel abilities or magical divination abilities. Creatures can’t be summoned into an environment that can’t support them (such as summoning a breathing creature into a vacuum). Creatures summoned using this spell can’t use spells or spell-like abilities that duplicate spells that require expending Resolve Points or expensive materials to cast (such as raise dead).\n\nTo generate statistics for a summoned creature, first check the Stat Block column of Table 8: Summon Creature.\n\nOtherwise, if the entry is Tiny, Small, Medium, Large, Huge, or elder, use the elemental stat block of the same name and apply the appropriate graft, listed in the Applied Graft column. Non-elemental creatures lose elemental immunities and do not gain an elemental graft.\n\nFor example, to get the statistics of an angel from the 1st-level list, you use the tiny elemental stat block and apply the angel summoning graft."

    let SummonCreature6 = CompendiumSpell(context: context)
    SummonCreature6.name = "Summon Creature 6"
    SummonCreature6.type = "MT"
    SummonCreature6.level = 6
    SummonCreature6.school = "Conjuration [summoning]"
    SummonCreature6.castingTime = "1 round"
    SummonCreature6.range = "medium (100 ft. + 10 ft./level)"
    SummonCreature6.effect = "one or more summoned creatures"
    SummonCreature6.duration = "1 round/level (D)"
    SummonCreature6.savingThrow = "none"
    SummonCreature6.spellResistance = "No"
    SummonCreature6.content = "This spell summons an extraplanar creature (typically an elemental, magical beast native to another plane, or outsider, but also occasionally even extraplanar constructs). The summoned creature appears where you designate and acts immediately on your turn. It attacks your opponents to the best of its ability. If you can communicate with the creature, you can direct it to not attack, to attack particular enemies, or to perform other actions.\n\nWhen you gain this spell as a spell known, select four creatures from the appropriate list in Table 8: Summon Creature for each level at which you can cast this spell. For example, for the 1st-level summon creature spell, you could choose Tiny air, earth, fire, and water elementals. Note that a particular alignment or class is sometimes required to choose certain creatures, as listed in Table 8. In place of a single selection, you can choose a creature from a lower-level summoning list; doing so allows you the option of summoning multiple such creatures at a time. Each time you gain a character level, you can change these selections.\n\nYou can gain summon creature a second time at the highest spell level you know, selecting four additional appropriate creatures at each level you can cast this spell.\n\nYou choose which of the selected creatures you summon each time you cast the spell.\n\nWhen you cast summon creature as a 1st-level spell, you summon one creature from your selection of creatures from the 1st-level summoning list.\n\nWhen you cast summon creature as a 2nd or higher level spell, you summon one creature from your selection of creatures from the  appropriate level summoning list. If the chosen creature is from a lower-level summoning list, you summon three such creatures instead.\n\nA summoned creature can’t use teleportation or planar travel abilities or magical divination abilities. Creatures can’t be summoned into an environment that can’t support them (such as summoning a breathing creature into a vacuum). Creatures summoned using this spell can’t use spells or spell-like abilities that duplicate spells that require expending Resolve Points or expensive materials to cast (such as raise dead).\n\nTo generate statistics for a summoned creature, first check the Stat Block column of Table 8: Summon Creature.\n\nOtherwise, if the entry is Tiny, Small, Medium, Large, Huge, or elder, use the elemental stat block of the same name and apply the appropriate graft, listed in the Applied Graft column. Non-elemental creatures lose elemental immunities and do not gain an elemental graft.\n\nFor example, to get the statistics of an angel from the 1st-level list, you use the tiny elemental stat block and apply the angel summoning graft."

    let SuperchargeWeapon = CompendiumSpell(context: context)
    SuperchargeWeapon.name = "Supercharge Weapon"
    SuperchargeWeapon.type = "T"
    SuperchargeWeapon.level = 1
    SuperchargeWeapon.school = "Evocation"
    SuperchargeWeapon.castingTime = "1 standard action"
    SuperchargeWeapon.range = "touch"
    SuperchargeWeapon.targets =  "one weapon"
    SuperchargeWeapon.duration = "see text"
    SuperchargeWeapon.savingThrow = "none"
    SuperchargeWeapon.spellResistance = "No"
    SuperchargeWeapon.content = "You supercharge the target weapon. If the weapon’s next attack hits (provided it is made before the end of the next round), the attack deals 4d6 additional damage if the weapon is a single target attack or 2d6 additional damage if the weapon attacks all creatures in an area. This bonus damage is of the same type as the weapon’s normal damage."
    
    let UnseenServant = CompendiumSpell(context: context)
    UnseenServant.name = "Unseen Servant"
    UnseenServant.type = "T"
    UnseenServant.level = 1
    UnseenServant.school = "Conjuration [creation]"
    UnseenServant.castingTime = "1 standard action"
    UnseenServant.range = "close (25 ft. + 5 ft./2 levels)"
    UnseenServant.effect = "one invisible, mindless, shapeless servant"
    UnseenServant.duration = "1 hour/level"
    UnseenServant.savingThrow = "none"
    UnseenServant.spellResistance = "No"
    UnseenServant.content = "The spell conjures an invisible, mindless, shapeless force that performs simple tasks at your command (a move action). It can run and fetch things, open unstuck doors, and hold chairs, as well as clean and mend. The servant can perform only one activity at a time, but it repeats the same activity over and over again if told to do so as long as you remain within range. It has an effective Strength score of 2 (so it can lift up to 20 pounds or 2 bulk or drag up to 100 pounds or 10 bulk). It can trigger traps and such, but it can’t exert enough force to activate certain pressure plates and other devices. It can’t perform any task that requires a skill check with a DC higher than 10 or that requires a check using a skill that can’t be used untrained. This servant can’t fly, climb, or swim (though it can walk on water). Its land speed is 15 feet.\n\nThe servant can’t attack in any way; it is never allowed to make attack rolls. It can’t be killed, but it dissipates if it takes 6 or more damage from area attacks; it gets no saving throws against attacks."

    let WispAlly = CompendiumSpell(context: context)
    WispAlly.name = "Wisp Ally"
    WispAlly.type = "M"
    WispAlly.level = 1
    WispAlly.school = "Conjuration [creation]"
    WispAlly.castingTime = "1 standard action"
    WispAlly.range = "close (25 ft. + 5 ft./2 levels)"
    WispAlly.effect = "one distracting, glowing servant"
    WispAlly.duration = "1 round/level"
    WispAlly.savingThrow = "none"
    WispAlly.spellResistance = "No"
    WispAlly.content = "You draw forth otherworldly energy to create a small, spherical, floating wisp that can distract your enemies in combat. This wisp can move 60 feet per round in any direction, and you can direct it as a move action on your turn. If the wisp occupies the same space as an enemy, the wisp provides your choice of either harrying fire or covering fire against the enemy each round on your turn, and it follows that enemy within range automatically unless you direct it to change targets. The wisp is made of pure light and energy and can’t be damaged in combat, though it can be dispelled as normal.\n\nIn addition to the function described above, the wisp sheds light in a 20-foot radius in a color of your choice (chosen when you cast the spell)."

    let Augury = CompendiumSpell(context: context)
    Augury.name = "Augury"
    Augury.type = "M"
    Augury.level = 2
    Augury.school = "Divination"
    Augury.castingTime = "1 minute"
    Augury.range = "personal"
    Augury.duration = "instantaneous"
    Augury.savingThrow = "none"
    Augury.spellResistance = "No"
    Augury.content = "Casting augury can tell you whether a particular action will bring good or bad results for you in the immediate future. Casting this spell takes intense personal Focus and requires you to spend 1 Resolve Point.\n\nThe chance for successfully receiving a meaningful reply is 75%; this roll is made secretly by the GM. A question may be so straightforward that a successful result is automatic, or it may be so vague as to have no chance of success. If the augury succeeds, you get one of four results.\n\nWeal (if the action will probably bring good results).\nWoe (for bad results).\nWeal and woe (for both).\nNothing (for actions that have neither especially good nor especially bad results).\n\nIf the augury isn’t successful, you get the “nothing” result.\n\nA spellcaster who gets the “nothing” result has no way to tell whether it was the consequence of a failed or successful augury.\n\nThe augury can see only about 30 minutes into the future, so anything that might happen beyond that time frame does not affect the result. Thus, the result might not take into account the long-term consequences of a contemplated action. Multiple castings of augury by the same creature about the same topic use the same die result as the first casting."

    let CausticConversion = CompendiumSpell(context: context)
    CausticConversion.name = "Caustic Conversion"
    CausticConversion.type = "T"
    CausticConversion.level = 2
    CausticConversion.school = "Evocation [acid]"
    CausticConversion.castingTime = "1 standard action"
    CausticConversion.range = "medium (100 ft. + 10 ft./level)"
    CausticConversion.targets =  "one creature or object"
    CausticConversion.duration = "1 round + 1 round/3 levels"
    CausticConversion.savingThrow = "none"
    CausticConversion.spellResistance = "Yes"
    CausticConversion.content = "You fling magical nanites that convert water vapor around your target into deadly acid. Make a ranged attack roll against your target’s EAC. If you hit, the target takes 4d4 acid damage and it takes 5 additional acid damage at the end of its turn each round for the spell’s duration."

    
    let CommandUndead = CompendiumSpell(context: context)
    CommandUndead.name = "Command Undead"
    CommandUndead.type = "MT"
    CommandUndead.level = 2
    CommandUndead.school = "Necromancy [sense-dependent]"
    CommandUndead.castingTime = "1 standard action"
    CommandUndead.range = "close (25 ft. + 5 ft./2 levels)"
    CommandUndead.targets =  "one undead creature"
    CommandUndead.duration = "1 day/level"
    CommandUndead.savingThrow = "Will negates"
    CommandUndead.spellResistance = "Yes"
    CommandUndead.content = "This spell allows you a degree of control over an undead creature. If the target is intelligent, it perceives your words and actions favorably (treat its attitude as friendly). It will not attack you while the spell lasts. You can give the target suggestions, but you must succeed at an opposed Charisma check to convince it to do anything it wouldn’t ordinarily do. (Retries are not allowed.) An intelligent commanded undead never obeys suicidal or obviously harmful suggestions, but it might be convinced that something very dangerous is worth doing.\n\nAn unintelligent undead creature gets no saving throw against this spell. When you control a mindless being, you can communicate only basic commands, such as “Come here,” “Go there,” “Fight,” “Stand still,” and so on. Unintelligent undead won’t resist suicidal or obviously harmful orders.\n\nAny act by you or your apparent allies that threatens the commanded undead (regardless of its Intelligence) breaks the spell. You command the undead creature by voice and it understands you, no matter what language you speak."

    let Darkvision = CompendiumSpell(context: context)
    Darkvision.name = "Darkvision"
    Darkvision.type = "MT"
    Darkvision.level = 2
    Darkvision.school = "Transmutation"
    Darkvision.castingTime = "1 standard action"
    Darkvision.range = "touch"
    Darkvision.targets =  "one creature or camera"
    Darkvision.duration = "1 hour/level"
    Darkvision.savingThrow = "Will negates (harmless)"
    Darkvision.spellResistance = "Yes (harmless)"
    Darkvision.content = "The target gains the ability to see 60 feet even in total darkness. Darkvision is black and white only but otherwise like normal sight."

    let DazeMonster = CompendiumSpell(context: context)
    DazeMonster.name = "Daze Monster"
    DazeMonster.type = "MT"
    DazeMonster.level = 2
    DazeMonster.school = "Transmutation [compulsion, mind-affecting]"
    DazeMonster.castingTime = "1 standard action"
    DazeMonster.range = "medium (100 ft. + 10 ft./level)"
    DazeMonster.targets =  "one living creature of CR 5 or lower"
    DazeMonster.duration = "1 hour/level"
    DazeMonster.savingThrow = "Will negates"
    DazeMonster.spellResistance = "Yes"
    DazeMonster.content = "This spell functions like daze, but it can affect any one living creature of any type up to CR 5. Creatures of CR 6 or higher are not affected."

    let DirectedDenialofStrengthAttack = CompendiumSpell(context: context)
    DirectedDenialofStrengthAttack.name = "Directed Denial of Strength Attack"
    DirectedDenialofStrengthAttack.type = "T"
    DirectedDenialofStrengthAttack.level = 2
    DirectedDenialofStrengthAttack.school = "Transmutation"
    DirectedDenialofStrengthAttack.castingTime = "1 standard action"
    DirectedDenialofStrengthAttack.range = "medium (100 ft. + 10 ft./level)"
    DirectedDenialofStrengthAttack.targets =  "up to one creature/level, no two of which can be more than 30 ft. apart"
    DirectedDenialofStrengthAttack.duration = "1 round/level"
    DirectedDenialofStrengthAttack.savingThrow = "Will negates"
    DirectedDenialofStrengthAttack.spellResistance = "Yes"
    DirectedDenialofStrengthAttack.content = "You flood targets’ minds with a magical effect similar to a computer virus that duplicates every sensation of lifting, carrying, and being burdened. Targets become encumbered, or they become overburdened if already encumbered."
    
    let FogCloud = CompendiumSpell(context: context)
    FogCloud.name = "Fog Cloud"
    FogCloud.type = "MT"
    FogCloud.level = 2
    FogCloud.school = "Conjuration [creation]"
    FogCloud.castingTime = "1 standard action"
    FogCloud.range = "medium (100 ft. + 10 ft./level)"
    FogCloud.area = "20-ft.-radius spread"
    FogCloud.duration = "10 minutes/level"
    FogCloud.savingThrow = "none"
    FogCloud.spellResistance = "No"
    FogCloud.content = "A bank of fog billows out from the point you designate. The fog obscures all sight, including darkvision, beyond 5 feet. A creature within 5 feet has concealment (attacks have a 20% miss chance) against its attacker. Creatures farther away have total concealment (50% miss chance, and the attacker can’t use sight to locate the target) against their attackers.\n\nA Moderate wind (11+ mph) disperses the fog in 4 rounds; a strong wind (21+ mph) disperses the fog in 1 round.\n\nThis spell doesn’t function underwater or in a vacuum."

    let ForceBlast = CompendiumSpell(context: context)
    ForceBlast.name = "Force Blast"
    ForceBlast.type = "M"
    ForceBlast.level = 2
    ForceBlast.school = "Evocation [force]"
    ForceBlast.castingTime = "1 standard action"
    ForceBlast.range = "30 ft."
    ForceBlast.area = "cone-shaped burst"
    ForceBlast.duration = "instantaneous"
    ForceBlast.savingThrow = "Reflex partial"
    ForceBlast.spellResistance = "Yes"
    ForceBlast.content = "You gather mystical energy and blast it outward in a mighty wave originating from your fingertips, damaging and potentially knocking back your enemies. This spell deals 2d6 force damage to each creature in the area unless it succeeds at a Reflex saving throw for half damage.\n\nAdditionally, the force from this spell effectively attempts to bull rush all creatures in the area. Attempt a single bull rush combat maneuver, using your caster level + your key ability score modifier as your attack bonus. Compare the result to each target’s KAC + 8. If you’re successful, that creature is knocked back 5 feet, plus 5 additional feet for every 5 by which your attack exceeds the creature’s KAC + 8. If there is an obstacle in the way, the creature stops at the obstacle instead."

    let HoldPerson = CompendiumSpell(context: context)
    HoldPerson.name = "Hold Person"
    HoldPerson.type = "M"
    HoldPerson.level = 2
    HoldPerson.school = "Enchantment [compulsion, mind-affecting]"
    HoldPerson.castingTime = "1 standard action"
    HoldPerson.range = "medium (100 ft. + 10 ft./level)"
    HoldPerson.targets =  "one humanoid creature"
    HoldPerson.duration = "1 round/level (D)"
    HoldPerson.savingThrow = "Will negates"
    HoldPerson.spellResistance = "Yes"
    HoldPerson.content = "The target becomes paralyzed and freezes in place. It is aware and breathes normally but can’t take any physical actions, even speech. A held creature can’t cast spells. Each round on its turn, the target can spend a full action to attempt a new saving throw to end the effect. This does not provoke attacks of opportunity. A winged creature that is paralyzed can’t flap its wings and falls. A swimmer can’t swim and may drown."

    let HurlForcedisk = CompendiumSpell(context: context)
    HurlForcedisk.name = "Hurl Forcedisk"
    HurlForcedisk.type = "M"
    HurlForcedisk.level = 2
    HurlForcedisk.school = "Evocation [force]"
    HurlForcedisk.castingTime = "1 standard action"
    HurlForcedisk.range = "medium (100 ft. + 10 ft./level)"
    HurlForcedisk.targets =  "up to five creatures; see text"
    HurlForcedisk.duration = "instantaneous"
    HurlForcedisk.savingThrow = "none"
    HurlForcedisk.spellResistance = "Yes"
    HurlForcedisk.content = "You create a spinning disk made of pure, shimmering force and hurl it at one opponent within range, potentially striking other nearby enemies as the disk ricochets. Choose the initial target, and make a ranged attack against its EAC. If the attack hits, the disk deals 3d6 force damage. The disk then ricochets to hit up to four more creatures of your choice, each no more than 15 feet from the last target. Make a ranged attack against each successive target’s EAC in turn; the disk deals 2d6 force damage to each secondary target struck (this damage is rolled separately for each target). The disk continues to ricochet in this way until it has attempted to strike five creatures, or until there are no more valid targets, or until you voluntarily end the spell. A creature can take damage only once from a single casting of this spell.\n\nThe forcedisk is subject to spell resistance, so you must attempt a caster level check (1d20 + your caster level) against each target with spell resistance before determining whether the target might take damage. If you fail this check, the spell ends.\n\nThe exact shape of the forcedisk is superficially changeable; as part of casting this spell, a spellcaster can decide to make it shaped differently from a traditional disk."

    let ImplantData = CompendiumSpell(context: context)
    ImplantData.name = "Implant Data"
    ImplantData.type = "T"
    ImplantData.level = 2
    ImplantData.school = "Illusion"
    ImplantData.castingTime = "1 standard action"
    ImplantData.range = "touch"
    ImplantData.targets =  "one computer system or module"
    ImplantData.duration = "1 hour/level or until triggered; see text"
    ImplantData.savingThrow = "none"
    ImplantData.spellResistance = "No"
    ImplantData.content = "You subtly rearrange the internal circuitry of a computer system or module, programming it to convey a certain dataset when accessed (either normally or if it is hacked). You can implant up to one piece of data per caster level. A piece of data consists of a simple fact, such as a creature or object’s location or physical description, a creature or object’s tangible or intangible value, or another simple statement. When an affected computer system or module is accessed, this implanted data is the first data the accessing individual gains, regardless of what data the individual is actually looking for, though the accessing individual can access the system or module’s actual information if it looks beyond the implanted data. The implanted data vanishes from the system or module once the accessing individual has reviewed it. If this spell’s duration ends before an individual accesses the implanted data, the implanted data vanishes.\n\nThe implanted data can be made permanent with a special ritual, which takes 1 hour and requires materials worth 5,000 credits. Once it’s made permanent, the implanted data temporarily vanishes after it is accessed, but it returns 1 hour later."
    
    let InflictPain = CompendiumSpell(context: context)
    InflictPain.name = "Inflict Pain"
    InflictPain.type = "M"
    InflictPain.level = 2
    InflictPain.school = "Enchantment [mind-affecting, pain]"
    InflictPain.castingTime = "1 standard action"
    InflictPain.range = "close (25 ft. + 5 ft./2 levels)"
    InflictPain.targets =  "one creature"
    InflictPain.duration = "1 round/level"
    InflictPain.savingThrow = "Will partial"
    InflictPain.spellResistance = "Yes"
    InflictPain.content = "You telepathically rack the target’s mind and body with agonizing pain that imposes a –2 penalty to ability checks, attack rolls, and skill checks. A target that succeeds at a Will saving throw reduces the duration to 1 round."

    let InjectNanobots = CompendiumSpell(context: context)
    InjectNanobots.name = "Inject Nanobots"
    InjectNanobots.type = "T"
    InjectNanobots.level = 2
    InjectNanobots.school = "Necromancy"
    InjectNanobots.castingTime = "1 standard action"
    InjectNanobots.range = "touch"
    InjectNanobots.targets =  "one living creature or construct"
    InjectNanobots.duration = "instantaneous and 1 round/level; see text"
    InjectNanobots.savingThrow = "Fortitude partial and Will partial, see text"
    InjectNanobots.spellResistance = "Yes"
    InjectNanobots.content = "You concentrate key particles in your blood into tiny biological nanobots that you can inject into a foe with a touch, disrupting and damaging its natural processes. Make a melee attack against the target’s EAC; if you hit, the nanobots deal 4d8 damage and swarm through the target’s biological or mechanical systems, causing the creature to be confused, as per confusion, for 1 round per your caster level. If the target succeeds at a Fortitude save, it takes only half damage and negates the confusion effect. A confused target can attempt a Will saving throw at the beginning of its turn each round to end the confusion effect.\n\nCasting this spell doesn’t provoke attacks of opportunity."
    
    let Invisibility = CompendiumSpell(context: context)
    Invisibility.name = "Invisibility"
    Invisibility.type = "T"
    Invisibility.level = 2
    Invisibility.school = "Illusion"
    Invisibility.castingTime = "1 standard action"
    Invisibility.range = "touch"
    Invisibility.targets =  "one creature or object no more than 10 bulk/level"
    Invisibility.duration = "1 minute/level"
    Invisibility.savingThrow = "Will negates (harmless, object)"
    Invisibility.spellResistance = "Yes (harmless, object)"
    Invisibility.content = "The creature or object touched becomes invisible. If the target is a creature, any gear it is carrying vanishes as well. If you cast the spell on someone else, neither you nor your allies can see the target unless you can normally see invisible things or you employ magic to do so.\n\nThe spell ends if the target attacks any creature. For purposes of this spell, an attack includes any spell or harmful effect targeting a foe or whose area or effect includes a foe.\n\nActions directed at unattended objects don’t break the spell. Spells that specifically affect allies but not foes are not attacks for this purpose, even when they include foes in their area. Causing harm indirectly is not an attack. Thus, an invisible being can open doors, talk, eat, climb stairs, summon security forces and have them attack, start a trash compactor with foes inside, remotely trigger traps, and so forth."
    
    let Knock = CompendiumSpell(context: context)
    Knock.name = "Knock"
    Knock.type = "T"
    Knock.level = 2
    Knock.school = "Transmutation"
    Knock.castingTime = "1 standard action"
    Knock.range = "medium (100 ft. + 10 ft./level)"
    Knock.targets =  "one door, container, or portal with an area of up to 10 sq. ft./level"
    Knock.duration = "instantaneous; see text"
    Knock.savingThrow = "none"
    Knock.spellResistance = "No"
    Knock.content = "Knock opens barred, computer-sealed, locked, or stuck doors, as well as those subject to hold portal or security seal. When you complete the casting of this spell, attempt a caster level check (1d20 + your caster level) against the DC of the lock or computer seal with a +10 bonus. If successful, knock opens up to two means of closure. This spell opens secret doors (but doesn’t identify secret doors you haven’t found) as well as locked or trick-opening containers, Starship doors, and similar secured entryways. It also loosens chains, shackles, or welds (provided they serve to hold something shut). If used to open a door closed with security seal, the spell doesn’t remove the seal but simply suspends its functioning for 10 minutes. In all other cases, the door does not relock itself or become stuck again on its own. Knock does not raise barred gates or similar impediments (such as a force field barrier) or open any door or container larger than the spell’s area, nor does it affect ropes, webs, and the like."

    let LogicBomb = CompendiumSpell(context: context)
    LogicBomb.name = "Logic Bomb"
    LogicBomb.type = "T"
    LogicBomb.level = 2
    LogicBomb.school = "Abjuration"
    LogicBomb.castingTime = "1 standard action"
    LogicBomb.range = "touch"
    LogicBomb.targets =  "one computer system or module"
    LogicBomb.duration = "1 day/level or until triggered"
    LogicBomb.savingThrow = "see text"
    LogicBomb.spellResistance = "see text"
    LogicBomb.content = "You infuse one computer system or module with protective energy, inuring it against attempts to access it.\n\nAs long as this spell is in effect, the first time a creature unsuccessfully attempts to access, destroy, or manipulate the affected computer system or module (using the Computers skill or otherwise), it takes 6d6 damage (either cold, electricity, or fire damage; you choose when casting the spell, and the spell gains the appropriate descriptor). The creature can attempt a Fortitude saving throw for half damage, and spell resistance applies. This damage is in addition to any negative effects the creature suffers due to the system’s other countermeasures."
    
    let MakeWhole = CompendiumSpell(context: context)
    MakeWhole.name = "Make Whole"
    MakeWhole.type = "T"
    MakeWhole.level = 2
    MakeWhole.school = "Transmutation"
    MakeWhole.range = "close (25 ft. + 5 ft./2 levels)"
    MakeWhole.targets =  "one object of up to 1 bulk/level or one construct of any size"
    MakeWhole.content = "This spell functions as mending, except it restores 5d6 Hit Points when cast on an object or construct creature.\n\nMake whole can fix destroyed magic items, and it restores the magic properties of the item if your technomancer level is at least twice the item’s level. Items with charges (such as batteries) and single-use items (such as potions and grenades) can’t be repaired in this way. When you cast make whole on a construct, the spell bypasses any immunity to magic as if the spell did not allow spell resistance."
    
    let MicrobotAssault = CompendiumSpell(context: context)
    MicrobotAssault.name = "Microbot Assault"
    MicrobotAssault.type = "T"
    MicrobotAssault.level = 2
    MicrobotAssault.school = "Conjuration [creation]"
    MicrobotAssault.castingTime = "1 standard action"
    MicrobotAssault.range = "close (25 ft. + 5 ft./2 levels)"
    MicrobotAssault.effect = "distracting cloud of microbots"
    MicrobotAssault.duration = "concentration + 1 round"
    MicrobotAssault.savingThrow = "none"
    MicrobotAssault.spellResistance = "No"
    MicrobotAssault.content = "You pull latent technological energy from the air to form a cloud of fist-sized hindering microbots that fill an area you designate. The microbots begin in a 10-foot-square area when you create them, and you can create the cloud so that it shares the space of other creatures. If no creatures are within the cloud’s area, the microbots pursue and harass the nearest creature that is hostile to you as best they can each round. Although the microbots generally know which creatures are your enemies, you have no control over their targets or direction of travel. If there are multiple valid targets the microbots can harass, the cloud will split into a maximum of four 5-foot-square segments and pursue different targets.\n\nThe cloud (and any segments thereof) has a fly speed of 20 feet. Each round on your turn, the microbot cloud grants harrying fire against the foes in its spaces. In addition, the cloud grants covering fire to anyone attacked by foes in its spaces. The microbots constantly repair themselves and the cloud generates new microbots every few seconds, so any attack against them is essentially ineffective."
    
    let MirrorImage = CompendiumSpell(context: context)
    MirrorImage.name = "Mirror Image"
    MirrorImage.type = "T"
    MirrorImage.level = 2
    MirrorImage.school = "Illusion"
    MirrorImage.castingTime = "1 standard action"
    MirrorImage.range = "personal"
    MirrorImage.duration = "1 minute/level"
    MirrorImage.savingThrow = "none"
    MirrorImage.spellResistance = "No"
    MirrorImage.content = "This spell creates a number of illusory doubles of you that inhabit your square. These doubles make it difficult for enemies to precisely locate and attack you.\n\nWhen you cast mirror image, it creates 1d4 figment images. These images remain in your space and move with you, mimicking your movements, sounds, and actions exactly. Whenever you are attacked or are the target of a spell that requires an attack roll, there is a possibility that the attack targets one of your images instead. If the attack hits, roll randomly to see whether the selected target is real or a figment. If it is a figment, the figment is destroyed. If the attack misses by 5 or less, one of your figments is destroyed by the near miss, and an attack that misses you due to a miss chance also destroys an image. Area spells and effects that don’t require an attack roll affect you normally and don’t destroy any of your figments. Spells with a range of touch are harmlessly discharged if used to destroy a figment.\n\nAn attacker must be able to see the figments to be fooled. If you are invisible or the attacker is blind, the spell has no effect. Blindsense doesn’t help distinguish the figments from the real you, but blindsight is sufficient to do so."
    
    let Recharge = CompendiumSpell(context: context)
    Recharge.name = "Recharge"
    Recharge.type = "T"
    Recharge.level = 2
    Recharge.school = "Evocation"
    Recharge.castingTime = "1 round"
    Recharge.range = "touch"
    Recharge.targets =  "one object"
    Recharge.duration = "instantaneous"
    Recharge.savingThrow = "Fortitude negates (object)"
    Recharge.spellResistance = "Yes (object)"
    Recharge.content = "You restore up to 10 charges to a battery or 5 charges to a technological item capable of being charged by a battery. Since this spell takes your personal energy, you must spend 1 Resolve Point to cast it. If you recharge a battery, there is a 20% chance the battery is destroyed by the attempt. If you restore more charges than the item can hold, the item must succeed at a Fortitude saving throw or take 1d6 electricity damage for each excess charge. This spell provides no knowledge of how many charges an item can safely hold, but you can choose to bestow fewer charges than the maximum allowed to reduce the risk; you must declare how many charges you are restoring before casting this spell."
    
    let RemoveCondition = CompendiumSpell(context: context)
    RemoveCondition.name = "Remove Condition"
    RemoveCondition.type = "M"
    RemoveCondition.level = 2
    RemoveCondition.school = "Conjuration [healing]"
    RemoveCondition.castingTime = "1 standard action"
    RemoveCondition.range = "touch"
    RemoveCondition.targets =  "one creature"
    RemoveCondition.duration = "instantaneous"
    RemoveCondition.savingThrow = "Fortitude negates (harmless)"
    RemoveCondition.spellResistance = "Yes (harmless)"
    RemoveCondition.content = "This spell functions in the same way as lesser remove condition, except you remove any one of the following conditions affecting the target: frightened, nauseated, shaken, sickened, or staggered."

    let RestorationLesser = CompendiumSpell(context: context)
    RestorationLesser.name = "Restoration, Lesser"
    RestorationLesser.type = "M"
    RestorationLesser.level = 2
    RestorationLesser.school = "Conjuration [healing]"
    RestorationLesser.castingTime = "3 rounds"
    RestorationLesser.range = "touch"
    RestorationLesser.targets =  "one creature"
    RestorationLesser.duration = "instantaneous"
    RestorationLesser.savingThrow = "Will negates (harmless)"
    RestorationLesser.spellResistance = "Yes (harmless)"
    RestorationLesser.content = "Lesser restoration dispels any magical effects reducing one of the target’s ability scores, or it heals 1d4 temporary ability damage to one of the target’s ability scores. It also eliminates any fatigue suffered by the creature or improves an exhausted condition to fatigued, but it doesn’t remove any underlying source of fatigue or exhaustion. It also doesn’t heal permanent ability drain. A target that has benefited from the removal of fatigue or the reduction of exhaustion from lesser restoration can’t benefit from either effect again for 24 hours."

    let SecuritySeal = CompendiumSpell(context: context)
    SecuritySeal.name = "Security Seal"
    SecuritySeal.type = "T"
    SecuritySeal.level = 2
    SecuritySeal.school = "Abjuration"
    SecuritySeal.castingTime = "1 standard action"
    SecuritySeal.range = "touch"
    SecuritySeal.targets =  "one door, container, or portal up to 30 sq. ft./level in size"
    SecuritySeal.duration = "24 hours"
    SecuritySeal.savingThrow = "none"
    SecuritySeal.spellResistance = "No"
    SecuritySeal.content = "A security seal spell magically locks a single door, container with a lid or latch, portal, or computer system. Casting this spell requires you to spend 1 Resolve Point. You can freely bypass your own security seal without affecting it. If the sealed object has a lock, the DC to open that lock increases by 5 while it remains attached to the object. If the object doesn’t have a lock, this spell creates one that can only be opened with a successful DC 20 Engineering check to disable devices. If the sealed object has computer security, the DC to bypass that security increases by 5. A door or object secured with this spell can be opened only by breaking in or with a successful dispel magic or knock spell. Add 5 to the normal DC to break open a door or portal affected by this spell. A knock spell removes the security seal automatically, counting as one means of closure."
    
    let SeeInvisibility = CompendiumSpell(context: context)
    SeeInvisibility.name = "See Invisibility"
    SeeInvisibility.type = "MT"
    SeeInvisibility.level = 2
    SeeInvisibility.school = "Divination"
    SeeInvisibility.castingTime = "1 standard action"
    SeeInvisibility.range = "personal"
    SeeInvisibility.duration = "10 minutes/level (D)"
    SeeInvisibility.savingThrow = "none"
    SeeInvisibility.spellResistance = "No"
    SeeInvisibility.content = "You can see any invisible or ethereal objects or beings within your range of vision, as if they were normally visible. Such creatures are visible to you as translucent shapes, allowing you easily to discern the difference between visible and invisible or ethereal creatures.\n\nThe spell doesn’t reveal the method used to obtain invisibility, doesn’t reveal illusions or enable you to see through opaque objects, and doesn’t reveal creatures that are simply concealed, hiding, or otherwise hard to see."

    let ShieldOther = CompendiumSpell(context: context)
    ShieldOther.name = "Shield Other"
    ShieldOther.type = "M"
    ShieldOther.level = 2
    ShieldOther.school = "Abjuration"
    ShieldOther.castingTime = "1 standard action"
    ShieldOther.range = "close (25 ft. + 5 ft./2 levels)"
    ShieldOther.targets =  "one creature"
    ShieldOther.duration = "1 hour/level (D)"
    ShieldOther.savingThrow = "Will negates (harmless)"
    ShieldOther.spellResistance = "Yes (harmless)"
    ShieldOther.content = "This spell wards the target and creates a mystic connection between you and the target so that some of its wounds are transferred to you. Casting this spell requires you to spend 1 Resolve Point. The target takes only half damage from all wounds and attacks (including those dealt by special abilities) that deal Hit Point damage, and you take the amount of damage not taken by the target. Only Hit Point damage is transferred in this manner; the target’s Stamina Points are damaged as normal. If you still have Stamina Points, you take the damage to your Stamina Points before Hit Points, as with normal damage.\n\nForms of harm that do not involve Hit Points, such as charm effects, temporary ability damage, ability drain, permanent negative levels, and death effects, are not affected. When the spell ends, subsequent damage is no longer divided between the target and you, but damage already split is not reassigned to the target. If you and the target of the spell move out of range of each other, the spell ends."

    let SpiderClimb = CompendiumSpell(context: context)
    SpiderClimb.name = "Spider Climb"
    SpiderClimb.type = "MT"
    SpiderClimb.level = 2
    SpiderClimb.school = "Transmutation"
    SpiderClimb.castingTime = "1 standard action"
    SpiderClimb.range = "touch"
    SpiderClimb.targets =  "one creature"
    SpiderClimb.duration = "10 minutes/level (D)"
    SpiderClimb.savingThrow = "Will negates (harmless)"
    SpiderClimb.spellResistance = "Yes (harmless)"
    SpiderClimb.content = "The target can climb and travel on vertical surfaces or even traverse ceilings as well as a spider does. An affected creature with four limbs must have three limbs free (not holding equipment or being used to perform skills and so on) to climb in this manner. A creature with six limbs needs only four available. In general, other creatures must have 75% of their limbs available to benefit from this spell. The target gains a climb speed of 20 feet (and the +8 racial bonus to Athletics checks to climb granted by that climb speed); furthermore, it doesn’t need to attempt Athletics checks to climb to traverse a vertical or horizontal surface (even upside down). An affected creature climbing in this way is not flat-footed while climbing, and opponents get no special bonus to their attacks against it. The creature, however, can’t use the run action while climbing."

    let Status = CompendiumSpell(context: context)
    Status.name = "Status"
    Status.type = "M"
    Status.level = 2
    Status.school = "Divination"
    Status.castingTime = "1 standard action"
    Status.range = "touch"
    Status.targets =  "up to one living creature touched/3 levels"
    Status.duration = "1 hour/level"
    Status.savingThrow = "Will negates (harmless)"
    Status.spellResistance = "Yes (harmless)"
    Status.content = "When you need to keep track of comrades who get separated, status allows you to mentally monitor their relative positions and general conditions. You are aware of the direction of and distance to the creatures and any conditions or states affecting them: confused, diseased, dying, nauseated, panicked, poisoned, staggered, stunned, unconscious, unharmed, wounded, wounded and out of Stamina points, and the like. Once the spell has been cast upon the targets, the distance between them and the caster does not affect the spell as long as they are on the same plane of existence. If a target leaves the plane (including via hyperspace travel) or dies, the spell ceases to function for that creature."

    let ZoneofTruth = CompendiumSpell(context: context)
    ZoneofTruth.name = "Zone of Truth"
    ZoneofTruth.type = "M"
    ZoneofTruth.level = 2
    ZoneofTruth.school = "Enchantment [compulsion, mind-affecting]"
    ZoneofTruth.castingTime = "1 standard action"
    ZoneofTruth.range = "close (25 ft. + 5 ft./2 levels)"
    ZoneofTruth.area = "20-ft.-radius emanation"
    ZoneofTruth.duration = "1 minute/level"
    ZoneofTruth.savingThrow = "Will negates"
    ZoneofTruth.spellResistance = "Yes"
    ZoneofTruth.content = "Creatures within the emanation area can’t speak any deliberate and intentional lies. Each potentially affected creature can attempt a Will saving throw to avoid the effect when the spell is cast or when that creature first enters the emanation area. Affected creatures are aware of this enchantment, and they can therefore avoid answering questions to which they would normally respond with a lie, or they can be evasive as long as they remain within the boundaries of the truth. Creatures who leave the area are free to speak as they choose."
    
    let ArcaneSight = CompendiumSpell(context: context)
    ArcaneSight.name = "Arcane Sight"
    ArcaneSight.type = "T"
    ArcaneSight.level = 3
    ArcaneSight.school = "Divination"
    ArcaneSight.castingTime = "1 standard action"
    ArcaneSight.range = "personal"
    ArcaneSight.duration = "1 minute/level (D)"
    ArcaneSight.content = "This spell allows you to see magic sources within 120 feet of you. The effect is similar to that of a detect magic spell, but arcane sight does not require concentration and discerns information more quickly.\n\nYou know the location and caster level of all magic sources within your sight. If the magic sources are in line of sight, you can attempt a DC 28 Mysticism check (one check per source) to determine the school of magic involved in each source.\n\nIf you concentrate on a specific creature within 120 feet of you as a standard action, you can determine whether it has any spellcasting or spell-like abilities and the caster level of the most powerful spell or spell-like ability the creature currently has available for use.\n\nAs with detect magic, you can use this spell to identify the properties of magic items, but not of artifacts."
    
    let ArcingSurge = CompendiumSpell(context: context)
    ArcingSurge.name = "Arcing Surge"
    ArcingSurge.type = "T"
    ArcingSurge.level = 3
    ArcingSurge.school = "Evocation [electricity]"
    ArcingSurge.castingTime = "1 standard action"
    ArcingSurge.range = "120 ft."
    ArcingSurge.area = "line-shaped burst"
    ArcingSurge.duration = "instantaneous"
    ArcingSurge.savingThrow = "Reflex half"
    ArcingSurge.spellResistance = "Yes"
    ArcingSurge.content = "You cause an electrical device in your possession to surge in power and unleash a line of electricity from the massive oversurge. This deals 10d6 electricity damage to all creatures and objects in the area."

    let BestowCurse = CompendiumSpell(context: context)
    BestowCurse.name = "Bestow Curse"
    BestowCurse.type = "M"
    BestowCurse.level = 3
    BestowCurse.school = "Necromancy [curse]"
    BestowCurse.castingTime = "1 standard action"
    BestowCurse.range = "touch"
    BestowCurse.targets =  "one creature"
    BestowCurse.duration = "permanent"
    BestowCurse.savingThrow = "Will negates"
    BestowCurse.spellResistance = "Yes"
    BestowCurse.content = "You place a terrible Curse on the target, stealing either its overall competency or its ability to think and act on its feet. Choose one of the following.\n\nThe target takes a –4 penalty to ability checks, attack rolls, saving throws, and skill checks.\n\nEach turn, the target has a 50% chance to act normally; otherwise, it takes no action.\n\nYou can also invent your own Curse (see Afflictions for a few ideas), but it should be no more powerful than those described above. The Curse bestowed by this spell cannot be dispelled, but it can be removed with a break enchantment, miracle, remove affliction, or wish spell.\n\nCasting this spell doesn’t provoke attacks of opportunity. Bestow Curse counters remove affliction."

    let CharmMonster = CompendiumSpell(context: context)
    CharmMonster.name = "Charm Monster"
    CharmMonster.type = "M"
    CharmMonster.level = 3
    CharmMonster.school = "Enchantment [charm, mind-affecting]"
    CharmMonster.castingTime = "1 standard action"
    CharmMonster.range = "close (25 ft. + 5 ft./2 levels)"
    CharmMonster.targets =  "one living creature"
    CharmMonster.duration = "1 day/level"
    CharmMonster.savingThrow = "Will negates"
    CharmMonster.spellResistance = "Yes"
    CharmMonster.content = "This spell functions like charm person, except the effect is not restricted by creature type."

    let Clairaudienceclairvoyance = CompendiumSpell(context: context)
    Clairaudienceclairvoyance.name = "Clairaudience/Clairvoyance"
    Clairaudienceclairvoyance.type = "MT"
    Clairaudienceclairvoyance.level = 3
    Clairaudienceclairvoyance.school = "Divination [scrying]"
    Clairaudienceclairvoyance.castingTime = "10 minutes"
    Clairaudienceclairvoyance.range = "long (400 ft. + 40 ft./level)"
    Clairaudienceclairvoyance.effect = "magical sensor"
    Clairaudienceclairvoyance.duration = "1 minute/level (D)"
    Clairaudienceclairvoyance.savingThrow = "none"
    Clairaudienceclairvoyance.spellResistance = "No"
    Clairaudienceclairvoyance.content = "You create an invisible magical sensor at a specific location that enables you to hear or see (your choice) almost as if you were there. You don’t need line of sight or line of effect to create this sensor in a specific spot within range, but the locale must be either a place that’s familiar to you or an obvious location, such as inside a cave whose entrance you can see.\n\nThe sensor doesn’t move, but you can rotate it in all directions to view the area as desired. This spell functions only on the plane of existence you are currently occupying."

    let DeepSlumber = CompendiumSpell(context: context)
    DeepSlumber.name = "Deep Slumber"
    DeepSlumber.type = "MT"
    DeepSlumber.level = 3
    DeepSlumber.school = "Enchantment [compulsion, mind-affecting]"
    DeepSlumber.castingTime = "1 round"
    DeepSlumber.range = "close (25 ft. + 5 ft./2 levels)"
    DeepSlumber.area = "one or more living creatures with a total CR of 8 or lower, all within a 10-ft.-radius burst"
    DeepSlumber.duration = "1 minute/level"
    DeepSlumber.savingThrow = "Will negates"
    DeepSlumber.spellResistance = "Yes"
    DeepSlumber.content = "This spell causes living creatures in the area to fall into a magical sleep, gaining the asleep condition (except normal noise doesn’t wake up the sleeping creatures). Creatures with the lowest CR are affected first. Among creatures of equal CR, those who are closest to the spell’s point of origin are affected first. Deep slumber doesn’t affect unconscious creatures, constructs, or undead creatures."
    
    let Discharge = CompendiumSpell(context: context)
    Discharge.name = "Discharge"
    Discharge.type = "T"
    Discharge.level = 3
    Discharge.school = "Abjuration"
    Discharge.castingTime = "1 standard action"
    Discharge.range = "medium (100 ft. + 10 ft./level)"
    Discharge.targets =  "one creature or technological object"
    Discharge.duration = "instantaneous"
    Discharge.savingThrow = "Fortitude negates (object)"
    Discharge.spellResistance = "No"
    Discharge.content = "You can dissipate the charges from one technological object, temporarily depower one electrically powered technological object that does not use charges, or severely hinder a construct with the technological subtype. If the spell targets an object with charges, the object loses all of its remaining charges. If the object is powered by electrical means other than charges, its functions are suppressed for 1d4 rounds. If the spell targets a creature not of the technological subtype, it affects a random charged or electrically powered item in that creature’s possession. If the target is a construct with the technological subtype, it is staggered and cannot use any energy-based attacks for 1d4 rounds. A construct with the technological subtype that is affected by this spell can attempt a Fortitude saving throw at the end of each round to shrug off the effect."

    let DispelMagic = CompendiumSpell(context: context)
    DispelMagic.name = "Dispel Magic"
    DispelMagic.type = "MT"
    DispelMagic.level = 3
    DispelMagic.school = "Abjuration"
    DispelMagic.castingTime = "1 standard action"
    DispelMagic.range = "medium (100 ft. + 10 ft./level)"
    DispelMagic.targets =  "one creature, object, spell, or spellcaster"
    DispelMagic.duration = "instantaneous"
    DispelMagic.savingThrow = "none"
    DispelMagic.spellResistance = "No"
    DispelMagic.content = "You can use dispel magic to end one ongoing spell that has been cast on a creature or object, to temporarily suppress the magical abilities of a magic item, or to counter another spellcaster’s spell. A dispelled spell ends as if its duration had expired. Some spells, as detailed in their descriptions, can’t be defeated by dispel magic. Dispel magic can dispel (but not counter) spell-like abilities just as it does spells. The effect of a spell with an instantaneous duration can’t be dispelled.\n\nYou choose to use dispel magic in one of two ways: as a targeted dispel or as a counter.\n\nTargeted Dispel: One creature, object, or spell is the target of the dispel magic spell. You can also use a targeted dispel to specifically end one spell affecting the target or one spell affecting an area (such as zone of truth). You must name the specific spell effect to be targeted in this way or otherwise uniquely identify it (such as “that burning wall” or “the spell that’s giving him those duplicates”). Attempt a dispel check (1d20 + your caster level) with a DC equal to 11 + the spell’s caster level. If you succeed, the spell ends. If you don’t specify a spell and there is more than one possible spell on the target, your targeted dispel attempts to dispel a spell at random.\n\nIf you target a force, an object, or a creature that is the effect of an ongoing spell (such as unseen servant), you attempt a dispel check to end the spell that conjured the object or creature.\n\nIf the object that you target is a magic item, you attempt a dispel check against the item level (DC = 11 + the item level). If you succeed, all the item’s magical properties are suppressed for 1d4 rounds, after which the item recovers its magical properties. A suppressed item becomes nonmagical for the duration of the effect. A magic item’s nonmagical physical properties are unchanged: a suppressed holy laser pistol is still a laser pistol. Artifacts and deities are unaffected by mortal magic such as this.\n\nYou can choose to automatically succeed at your dispel check against any spell you have cast.\n\nCounter: You can use the energy of dispel magic to disrupt the casting of other spells. First, select an opponent and take the ready action to cast dispel magic when that target casts a spell. This is considered a purely defensive action. When that readied action is triggered, you cast dispel magic and must attempt a dispel check (1d20 + your caster level) to counter the other spellcaster’s spell. The DC is equal to 11 + the other spellcaster’s caster level. If the check is successful and the target is in range, the spell fails and has no result."
    
    let Displacement = CompendiumSpell(context: context)
    Displacement.name = "Displacement"
    Displacement.type = "T"
    Displacement.level = 3
    Displacement.school = "Illusion"
    Displacement.castingTime = "1 standard action"
    Displacement.range = "touch"
    Displacement.targets =  "one creature"
    Displacement.duration = "1 round/level (D)"
    Displacement.savingThrow = "Will negates (harmless)"
    Displacement.spellResistance = "Yes (harmless)"
    Displacement.content = "The target of this spell appears to be about 2 feet away from its true location. The creature benefits from a 50% miss chance as if it had total concealment. Unlike actual total concealment, displacement doesn’t prevent enemies from targeting the creature normally. True seeing reveals the target’s true location and negates the miss chance. If a creature with blindsense can also see the displaced creature, the visual and blindsense information combined are enough for the creature with blindsense to attack the displaced creature without a miss chance, unlike normal for blindsense."
    
    let EntropicGrasp = CompendiumSpell(context: context)
    EntropicGrasp.name = "Entropic Grasp"
    EntropicGrasp.type = "T"
    EntropicGrasp.level = 3
    EntropicGrasp.school = "Transmutation"
    EntropicGrasp.castingTime = "1 standard action"
    EntropicGrasp.range = "touch"
    EntropicGrasp.targets =  "one nonmagical manufactured object (or the volume of the object within a 3-ft.-radius of the touched point) or one manufactured creature touched each round"
    EntropicGrasp.duration = "see text"
    EntropicGrasp.savingThrow = "Fortitude negates (object)"
    EntropicGrasp.spellResistance = "No"
    EntropicGrasp.content = "Any unattended, manufactured (built from component parts, including metal, wood, plastic, glass, and so on) item you touch crumbles into dust, rust, and decay. If the item is so large that it can’t fit within a 3-foot radius, a 3-foot-radius volume of the material is destroyed. This is an instantaneous effect.\n\nYou can employ entropic grasp in combat by making a melee attack against your opponent’s EAC. If you hit, you instantaneously reduce a manufactured armor’s KAC and EAC bonus by 3 (to a minimum of a +0 bonus). Damaged armor can be repaired using the Engineering skill; with a successful check, the armor’s armor bonuses are restored to their original values. Against a manufactured creature (generally constructs, but not undead), this attack instead deals 6d12 damage.\n\nWeapons and equipment in use by an opponent are more difficult to affect with this spell. You attempt a sunder combat maneuver against the item. If successful, you deal 6d6 damage to the weapon or item.\n\nUsed in combat, this spell lasts 1 round per level, and you can make one melee attack each round on future rounds as a standard action. The target can attempt a save to negate each melee attack, but success does not end the spell.\n\nCasting this spell doesn’t provoke attacks of opportunity."

    let ExplosiveBlast = CompendiumSpell(context: context)
    ExplosiveBlast.name = "Explosive Blast"
    ExplosiveBlast.type = "T"
    ExplosiveBlast.level = 3
    ExplosiveBlast.school = "Evocation [fire]"
    ExplosiveBlast.castingTime = "1 standard action"
    ExplosiveBlast.range = "medium (100 ft. + 10 ft./level)"
    ExplosiveBlast.area = "20-ft.-radius burst"
    ExplosiveBlast.duration = "instantaneous"
    ExplosiveBlast.savingThrow = "Reflex half"
    ExplosiveBlast.spellResistance = "Yes"
    ExplosiveBlast.content = "You magically transform a used battery into a powerful explosive device, propelling it in a straight line to a grid intersection within range, at which point it detonates, dealing 9d6 fire damage to all creatures and objects in the area. If you send the battery through a narrow opening, you must make a ranged attack (usually against an Armor Class of 10 for a narrow opening or an Armor Class of 15 for an extremely narrow opening) to avoid hitting the side and detonating it prematurely."
    
    let HandyJunkbot = CompendiumSpell(context: context)
    HandyJunkbot.name = "Handy Junkbot"
    HandyJunkbot.type = "T"
    HandyJunkbot.level = 3
    HandyJunkbot.school = "Transmutation"
    HandyJunkbot.castingTime = "1 round"
    HandyJunkbot.range = "touch"
    HandyJunkbot.targets =  "1 bulk of inert electronic equipment; see text"
    HandyJunkbot.duration = "1 round/level"
    HandyJunkbot.savingThrow = "none"
    HandyJunkbot.spellResistance = "No"
    HandyJunkbot.content = "You turn a pile of technological junk into a robot that can accomplish helpful tasks. You must target inert, nonworking electronic equipment of at least 1 bulk. Valid targets include a large broken computer system, nonworking or unconnected computer or robot parts, a destroyed robot or another such trashed mechanical system, or any related electronic components or combination of the above as long as the junk is found in a large enough quantity.\n\nWhile casting this spell, you use your magic and technological know-how to rearrange the junked parts and infuse them with energy and helpful programming. A handy junkbot is Small, its KAC and EAC are each equal to 10 + your caster level, and it has a number of Hit Points equal to one-quarter of your own (but no Stamina Points). It has a land speed of 30 feet and a fly speed of 15 feet with average maneuverability. It can accomplish all tasks described in the Computers, Engineering, Piloting, and Sleight of Hand skills, is considered trained in those skills, and has a total skill bonus in each equal to 3 + your caster level. The junkbot is treated as if it is using a hacker’s kit when using the Computers skill and an Engineering kit when using the Engineering skill. A handy junkbot can never attack. The junkbot uses your saving throw bonuses if it is the target of a spell or another targeted effect. For purposes of spells and effects that target the junkbot, it is treated as a construct with the technological and magical subtypes.\n\nYou can give new basic commands to your handy junkbot telepathically on your turn as a move action, and the junkbot can take actions as if it were a normal creature. You are aware when the junkbot has succeeded at or failed a skill check, as well as when it has been attacked or destroyed, but you can perceive nothing else through this basic telepathic link.\n\nWhen the handy junkbot is destroyed or this spell ends, the electronic equipment you used to create it falls apart into refuse, its circuitry fried beyond anything recognizable. You can’t use this refuse as a target to create another junkbot."
    
    let Haste = CompendiumSpell(context: context)
    Haste.name = "Haste"
    Haste.type = "MT"
    Haste.level = 3
    Haste.school = "Transmutation"
    Haste.castingTime = "1 standard action"
    Haste.range = "close (25 ft. + 5 ft./2 levels)"
    Haste.targets =  "up to one creature/level, no two of which can be more than 30 ft. apart"
    Haste.duration = "1 round/level"
    Haste.savingThrow = "Fortitude negates (harmless)"
    Haste.spellResistance = "Yes (harmless)"
    Haste.content = "The targeted creatures move and act more quickly than normal. This extra speed has several effects.\n\nWhen making a full attack, a hasted creature can also take a separate move action in order to move. The movement can occur before, after, or between the attacks from the full attack.\n\nAll movement must occur at the same time.\n\nAll of the hasted creature’s Modes of movement (including base, burrow, climb, fly, and swim speeds) increase by 30 feet, to a maximum of twice the target’s normal speed using that form of movement. This increase counts as an enhancement bonus, and it affects the creature’s jumping distance as normal for increased speed. Multiple haste effects don’t stack. Haste counters and negates slow."
    
    let HealingJunkbot = CompendiumSpell(context: context)
    HealingJunkbot.name = "Healing Junkbot"
    HealingJunkbot.type = "T"
    HealingJunkbot.level = 3
    HealingJunkbot.school = "Transmutation"
    HealingJunkbot.castingTime = "1 round"
    HealingJunkbot.range = "touch"
    HealingJunkbot.targets =  "1 bulk of inert electronic equipment; see text"
    HealingJunkbot.duration = "1 round/level"
    HealingJunkbot.savingThrow = "none"
    HealingJunkbot.spellResistance = "No"
    HealingJunkbot.content = "You turn a pile of technological junk into a robot that can perform basic healing tasks.\n\nYou must target inert, nonworking electronic equipment of at least 1 bulk. Valid targets include a large broken computer system, nonworking or unconnected computer or robot parts, a destroyed robot or another such trashed mechanical system, or any related electronic components or combination of the above as long as the junk is found in a large enough quantity. While casting this spell, you use your magic and technological know-how to rearrange the junked parts and infuse them with energy and medical skills.\n\nA healing junkbot is Small, its KAC and EAC are each equal to 10 + your caster level, and it has a number of Hit Points equal to one-quarter of your own (but no Stamina Points). It has a land speed of 30 feet and a fly speed of 15 feet with average maneuverability. It is considered trained in the Medicine skill and can perform first aid, treat deadly wounds, and treat drugs or poison as if it had a medkit (though it can’t provide long-term care or treat disease). The junkbot has a total skill bonus for Medicine checks equal to 3 + your caster level.\n\nA healing junkbot can drag or fly one unconscious creature at a time to any spot you designate. It can drag or fly a Small, Medium, or Large creature at half speed. It can drag or fly smaller creatures at normal speed, but it can’t move creatures bigger than Large. A healing junkbot can never attack. The junkbot uses your saving throw bonuses if it is the target of a spell or another targeted effect. For purposes of spells and effects that target it, the junkbot is treated as a construct with the technological and magical subtypes.\n\nYou can give new basic commands to your healing junkbot telepathically on your turn as a move action, and the junkbot can take actions as if it were a normal creature. You are aware when the bot has succeeded at or failed a skill check, as well as when it has been attacked or destroyed, but you can perceive nothing else through this basic telepathic link.\n\nWhen the healing junkbot is destroyed or this spell ends, the electronic equipment you used to create it falls apart into refuse, its components and circuitry fried beyond anything recognizable. You can’t use this refuse as a target to create another junkbot."

    let HologramMemory = CompendiumSpell(context: context)
    HologramMemory.name = "Hologram Memory"
    HologramMemory.type = "M"
    HologramMemory.level = 3
    HologramMemory.school = "Divination"
    HologramMemory.castingTime = "1 full action"
    HologramMemory.range = "touch"
    HologramMemory.targets =  "one living or deceased sentient creature; see text"
    HologramMemory.duration = "instantaneous"
    HologramMemory.savingThrow = "Will negates"
    HologramMemory.spellResistance = "No"
    HologramMemory.content = "You reach into the target’s mind, extract a specific memory, and project that memory into a small hologram that plays in front of you and is visible to all creatures who can see it. The hologram memory can be no longer than 1 minute; if the extracted memory is longer than this, the hologram simply ends. The hologram includes audio as well as visual components, but it does not contain haptic, olfactory, or other components. The hologram typically plays a memory that takes place in a single scene, though it can cut to multiple scenes, if they are accurate to the memory and its length allows. The hologram plays the memory exactly as the target experienced it and from the target’s perspective, so it often lacks context. The target creature must remain quiet and still while the hologram plays or the spell and hologram end.\n\nThis spell can target any living, unconscious, or deceased sentient creature with an Intelligence score of 3 or higher (or a modifier of –4 or higher). If the target is deceased, it cannot have been dead for longer than 1 week, or this spell fails; once a corpse has been subjected to hologram memory by any caster, any subsequent attempts to cast hologram memory on that corpse fail.\n\nIf the target is unwilling to share this memory (or if it would be unable to share the memory, in the case of an unconscious or deceased target), it can attempt a Will saving throw with a +4 bonus to negate this spell and its effects."
    
    let InstantVirus = CompendiumSpell(context: context)
    InstantVirus.name = "Instant Virus"
    InstantVirus.type = "T"
    InstantVirus.level = 3
    InstantVirus.school = "Necromancy"
    InstantVirus.castingTime = "1 standard action"
    InstantVirus.range = "touch"
    InstantVirus.targets =  "one construct with the technological subtype"
    InstantVirus.duration = "instantaneous; see text"
    InstantVirus.savingThrow = "Fortitude negates, see text"
    InstantVirus.spellResistance = "Yes"
    InstantVirus.content = "You overwhelm your target’s programming, installing a dangerous self-replicating programming virus. This works like a physical or mental disease (your choice), except it ignores the target’s immunity to diseases. The programming virus has a frequency of 1 hour and requires two consecutive saving throws to cure. Detect affliction can reveal the existence of this virus in a construct (the virus is considered a disease for purposes of that spell). Additionally, remove affliction can remove this virus."

    
    let Irradiate = CompendiumSpell(context: context)
    Irradiate.name = "Irradiate"
    Irradiate.type = "MT"
    Irradiate.level = 3
    Irradiate.school = "Conjuration [creation, disease, poison, radiation]"
    Irradiate.castingTime = "1 standard action"
    Irradiate.range = "medium (100 ft. + 10 ft./level)"
    Irradiate.area = "10-ft.-radius spread; see text"
    Irradiate.duration = "instantaneous"
    Irradiate.savingThrow = "Fortitude partial"
    Irradiate.spellResistance = "No"
    Irradiate.content = "This spell floods the area of effect with dangerous radiation. The strength of the radiation you create depends on your caster level, as detailed below. The central irradiated area is always a 10-foot-radius spread that expands normally per the rules for radiation areas of effect. Creatures within the area are exposed to the radiation only once; the radiation does not linger in the area. The saving throw to resist the radiation effects is set by the spell rather than the standard save DC for radiation.\n\nCaster Level\t\tRadiation Level\n6th or lower\t\tLow\n7th-9th\t\t\t\tMedium\n10th-16th\t\t\tHigh\n17th or higher\t\tSevere"

    let MentalBlock = CompendiumSpell(context: context)
    MentalBlock.name = "Mental Block"
    MentalBlock.type = "M"
    MentalBlock.level = 3
    MentalBlock.school = "Enchantment [mind-affecting]"
    MentalBlock.castingTime = "1 standard action"
    MentalBlock.range = "medium (100 ft. + 10 ft./level)"
    MentalBlock.targets =  "up to one creature/level, no two of which can be more than 30 ft. apart"
    MentalBlock.duration = "1 round/level"
    MentalBlock.savingThrow = "Will negates"
    MentalBlock.spellResistance = "No"
    MentalBlock.content = "You cause targets of this spell to lose access to their procedural memory, preventing them from using any feat, extraordinary ability, spell, spell-like ability, or supernatural ability that requires an action of any kind. Each round at the end a target’s turn, that target can attempt another Will save to end this effect."
    
    let Nondetection = CompendiumSpell(context: context)
    Nondetection.name = "Nondetection"
    Nondetection.type = "T"
    Nondetection.level = 3
    Nondetection.school = "Abjuration"
    Nondetection.castingTime = "1 standard action"
    Nondetection.range = "touch"
    Nondetection.targets =  "one creature or object"
    Nondetection.duration = "1 hour/level"
    Nondetection.savingThrow = "Will negates (harmless)"
    Nondetection.spellResistance = "Yes (harmless)"
    Nondetection.content = "The warded creature or object becomes difficult to detect by divination spells such as clairaudience/clairvoyance and spells with the word “detect” in their names. Nondetection also prevents location by magic items such as crystal balls and technological items such as cameras and surveillance systems. Casting this spell places significant stress on you, and requires you to spend 1 Resolve Point.\n\nIf a magic divination is attempted against the warded creature or item, the caster of the divination must succeed at a caster level check (1d20 + caster level) against a DC equal to 11 + your caster level. If surveillance is attempted with remote cameras or sensors, the viewer must succeed at a Perception check against a DC equal to 11 + your caster level to see the target. If you cast nondetection on yourself or on an item currently in your possession, the DC for each these checks is equal to 15 + your caster level. If cast on a creature, nondetection wards the creature’s gear as well as the creature itself.\n\nNondetection protects the target only from discovery by items and remote sensors, not by creatures. A camera mounted to a wall and monitored from a security booth is subject to nondetection, but a camera in a creature (including constructs) is not."
    
    let ProbabilityPrediction = CompendiumSpell(context: context)
    ProbabilityPrediction.name = "Probability Prediction"
    ProbabilityPrediction.type = "T"
    ProbabilityPrediction.level = 3
    ProbabilityPrediction.school = "Divination"
    ProbabilityPrediction.castingTime = "1 standard action"
    ProbabilityPrediction.range = "personal"
    ProbabilityPrediction.duration = "1 round/level (D); see text"
    ProbabilityPrediction.content = "You open your mind to read the underlying probability of the universe. At any point during the duration of this spell, you can discharge it to reroll any d20 roll (attack roll, saving throw, skill check, etc.). This takes no action, but you must choose to do it before you learn the results of the first roll. You must take the result of the second roll, even if it is worse."

    let PsychokineticStrangulation = CompendiumSpell(context: context)
    PsychokineticStrangulation.name = "Psychokinetic Strangulation"
    PsychokineticStrangulation.type = "M"
    PsychokineticStrangulation.level = 3
    PsychokineticStrangulation.school = "Transmutation"
    PsychokineticStrangulation.castingTime = "1 standard action"
    PsychokineticStrangulation.range = "close (25 ft. + 5 ft./2 levels)"
    PsychokineticStrangulation.targets =  "up to one creature that breathes"
    PsychokineticStrangulation.duration = "concentration up to 1 round/level"
    PsychokineticStrangulation.savingThrow = "Fortitude partial"
    PsychokineticStrangulation.spellResistance = "Yes"
    PsychokineticStrangulation.content = "You manipulate the mystical energy around a creature’s throat into a viselike grip, potentially choking the life out of your victim.\n\nEach round you concentrate on this spell, it deals 3d8 bludgeoning damage and immobilizes the target. A creature immobilized in this way cannot move and must hold its breath. The creature can still attack with any of its weapons (except any bite attacks), cast spells, and so on. Each round the spell affects the target, the target can attempt a Fortitude saving throw to halve the damage and avoid being immobilized."

    let RayofExhaustion = CompendiumSpell(context: context)
    RayofExhaustion.name = "Ray of Exhaustion"
    RayofExhaustion.type = "M"
    RayofExhaustion.level = 3
    RayofExhaustion.school = "Necromancy"
    RayofExhaustion.castingTime = "1 standard action"
    RayofExhaustion.range = "close (25 ft. + 5 ft./2 levels)"
    RayofExhaustion.targets =  "one creature"
    RayofExhaustion.duration = "1 minute/level"
    RayofExhaustion.savingThrow = "Fortitude partial"
    RayofExhaustion.spellResistance = "Yes"
    RayofExhaustion.content = "You create an enervating ray of magic. You must make a ranged attack against your opponent’s EAC. On a hit, the target is immediately exhausted for the spell’s duration. A creature that succeeds at a Fortitude saving throw is only fatigued, unless it is already fatigued, in which case it instead becomes exhausted despite the saving throw.\n\nThis spell has no effect on a creature that is already exhausted. Unlike normal exhaustion or fatigue, the effect ends as soon as the spell’s duration expires."

    let RemoveAffliction = CompendiumSpell(context: context)
    RemoveAffliction.name = "Remove Affliction"
    RemoveAffliction.type = "M"
    RemoveAffliction.level = 3
    RemoveAffliction.school = "Conjuration [healing]"
    RemoveAffliction.castingTime = "1 standard action"
    RemoveAffliction.range = "touch"
    RemoveAffliction.targets =  "one creature or object"
    RemoveAffliction.duration = "instantaneous or 10 minute/level; see text"
    RemoveAffliction.savingThrow = "Will negates (harmless, object)"
    RemoveAffliction.spellResistance = "Yes (harmless)"
    RemoveAffliction.content = "You remove impurities from a creature or object, potentially neutralizing the Curses, diseases, infestations, poisons, and other harmful conditions affecting it. If the target is a creature, you must attempt a caster level check (1d20 + your caster level) for each Curse, disease, infestation, and poison affecting it (DC = 4 + the DC of the affliction). Success means that affliction is removed. Additionally, if the target is blind or deaf due to an affliction or damage, remove affliction restores vision and hearing unless the appropriate organ has been entirely removed from the creature’s body.\n\nA creature that is cured with remove affliction takes no additional effects from the Curses, diseases, infestations, or poisons removed, and any temporary effects are ended, but the spell does not reverse instantaneous effects, such as Hit Point damage, temporary ability damage, or effects that don’t go away on their own (such as poison states). This spell cannot remove the Curse from a Cursed item, though a successful caster level check enables the creature afflicted with any such Cursed item to remove the Curse and get rid of it. Since the spell’s duration is instantaneous, it does not prevent the target from suffering from the same Curse, disease, infestation, or poison after a new exposure at a later date.\n\nYou can instead cast this spell to neutralize the poison in a poisonous creature or object for 10 minutes per level. If you cast it on a creature, the creature can attempt a Will saving throw to negate the effect.\n\nRemove affliction counters bestow Curse."

    let ResistantArmorLesser = CompendiumSpell(context: context)
    ResistantArmorLesser.name = "Resistant Armor, Lesser"
    ResistantArmorLesser.type = "MT"
    ResistantArmorLesser.level = 3
    ResistantArmorLesser.school = "Abjuration"
    ResistantArmorLesser.castingTime = "1 standard action"
    ResistantArmorLesser.range = "touch"
    ResistantArmorLesser.targets =  "one creature wearing armor"
    ResistantArmorLesser.duration = "10 minute/level"
    ResistantArmorLesser.savingThrow = "Fortitude negates (harmless)"
    ResistantArmorLesser.spellResistance = "Yes (harmless)"
    ResistantArmorLesser.content = "Lesser resistant armor grants the target (and its gear) protection from your choice of either kinetic damage or energy damage. If you choose kinetic damage, the target and her gear gain DR 5/— that protects against bludgeoning, piercing, and slashing damage. If you choose energy damage, pick any two of acid, cold, electricity, fire, and sonic damage. The target and her gear gain energy resistance 5 that protects against the chosen types of energy. This damage reduction or energy resistance doesn’t stack with any damage reduction or energy resistance the target already has, and multiple castings of this spell don’t stack."

    let Slow = CompendiumSpell(context: context)
    Slow.name = "Slow"
    Slow.type = "MT"
    Slow.level = 3
    Slow.school = "Transmutation"
    Slow.castingTime = "1 standard action"
    Slow.range = "close (25 ft. + 5 ft./2 levels)"
    Slow.targets =  "up to one creature/level, no two of which can be more than 30 ft. apart"
    Slow.duration = "1 round/level"
    Slow.savingThrow = "Will negates"
    Slow.spellResistance = "Yes"
    Slow.content = "An affected creature moves and attacks at a drastically slowed rate. Creatures affected by this spell are staggered and can take only a single move action or standard action each turn, but not both, and it can’t take full actions. A slowed creature moves at half its normal speed (round down to the next 5-foot increment). Multiple slow effects don’t stack. Slow counters and negates haste."

    let SpeakwithDead = CompendiumSpell(context: context)
    SpeakwithDead.name = "Speak with Dead"
    SpeakwithDead.type = "M"
    SpeakwithDead.level = 3
    SpeakwithDead.school = "Necromancy [language-dependent]"
    SpeakwithDead.castingTime = "10 minutes"
    SpeakwithDead.range = "10 ft."
    SpeakwithDead.targets =  "one dead creature"
    SpeakwithDead.duration = "1 minute/level"
    SpeakwithDead.savingThrow = "Will negates; see text"
    SpeakwithDead.spellResistance = "No"
    SpeakwithDead.content = "You grant the semblance of life to a corpse, allowing it to answer questions. You can ask up to six questions. The corpse’s knowledge is limited to what it knew during life, including the languages it spoke. Answers are brief, cryptic, or repetitive, especially if the creature would have opposed you in life.\n\nIf the dead creature was friendly or helpful toward you in life, the spell works automatically. Otherwise, the corpse can attempt a Will saving throw to resist the spell as if it were alive. On a successful save, the corpse can refuse to answer your questions or attempt to deceive you using its Bluff skill. The target can speak only about what it knew in life. It can’t answer any questions that pertain to events that occurred after its death.\n\nIf the corpse has been subjected to speak with dead within the past week, this spell fails. You can cast this spell on a corpse that has been deceased for any amount of time, but the body must be mostly intact to be able to respond. A damaged corpse might be able to give partial answers or partially correct answers, but it must have at least a mouth in order to speak at all. This spell does not affect a corpse that has been turned into an undead creature."

    let Suggestion = CompendiumSpell(context: context)
    Suggestion.name = "Suggestion"
    Suggestion.type = "M"
    Suggestion.level = 3
    Suggestion.school = "Enchantment [compulsion, language-dependent, mind-affecting]"
    Suggestion.castingTime = "1 standard action"
    Suggestion.range = "close (25 ft. + 5 ft./2 levels)"
    Suggestion.targets =  "one living creature"
    Suggestion.duration = "1 hour/level or until completed"
    Suggestion.savingThrow = "Will negates"
    Suggestion.spellResistance = "Yes"
    Suggestion.content = "You influence the actions of the target creature by suggesting a course of activity (limited to a sentence or two). The suggestion must be worded in such a manner as to make the activity sound reasonable. Asking the creature to do some obviously harmful act automatically negates the effect of the spell.\n\nThe suggested course of activity can continue for the entire duration of the spell. If the suggested activity can be completed in a shorter time, the spell ends when the target finishes what it was asked to do. You can instead specify conditions that will trigger a special activity during the duration. If the condition is not met before the spell’s duration expires, the activity is not performed.\n\nA very reasonable suggestion imparts a penalty (such as –1 or –2) to the target’s saving throw."

    let SynapticPulse = CompendiumSpell(context: context)
    SynapticPulse.name = "Synaptic Pulse"
    SynapticPulse.type = "M"
    SynapticPulse.level = 3
    SynapticPulse.school = "Enchantment [compulsion, mind-affecting]"
    SynapticPulse.castingTime = "1 standard action"
    SynapticPulse.range = "20 ft."
    SynapticPulse.area = "20-ft.-radius spread centered on you"
    SynapticPulse.duration = "1 round"
    SynapticPulse.savingThrow = "Will negates"
    SynapticPulse.spellResistance = "Yes"
    SynapticPulse.content = "You stun all creatures in range for 1 round."
    
    let Tongues = CompendiumSpell(context: context)
    Tongues.name = "Tongues"
    Tongues.type = "MT"
    Tongues.level = 3
    Tongues.school = "Divination"
    Tongues.castingTime = "1 standard action"
    Tongues.range = "touch"
    Tongues.targets =  "one creature"
    Tongues.duration = "10 minutes/level"
    Tongues.savingThrow = "Will negates (harmless)"
    Tongues.spellResistance = "No"
    Tongues.content = "This spell grants the creature touched the ability to speak and understand the spoken or signed language of any intelligent creature, whether it is a racial tongue or a regional dialect. The target can speak only one language at a time, although it may be able to understand several languages. Tongues does not enable the target to speak with creatures who don’t speak. The target can make itself understood as far as its voice carries."

    let ViralDestruction = CompendiumSpell(context: context)
    ViralDestruction.name = "Viral Destruction"
    ViralDestruction.type = "M"
    ViralDestruction.level = 3
    ViralDestruction.school = "Necromancy"
    ViralDestruction.range = "close (25 ft. + 5 ft./2 levels)"
    ViralDestruction.targets =  "One newly dead creature; See Text"
    ViralDestruction.duration = "Instantaneous; See Text"
    ViralDestruction.savingThrow = "Will negates; See Text"
    ViralDestruction.spellResistance = "Yes"
    ViralDestruction.content = "You can cast this spell only immediately after a creature in range dies. On its next turn in the initiative order, the corpse stands up (if applicable; this does not require a move action), can take a single move action to move up to its speed, and makes a single attack using the weapons and bonuses it had when alive (though it can’t use class features, spell-like abilities, or spells). You can choose the target of the affected creature’s attack or allow the target corpse to select a target entirely at random. If the target of this spell was friendly or helpful toward you in life, the spell works automatically; otherwise, the corpse can attempt a Will saving throw to negate this spell, as if the creature were still alive. After making its attack, the creature that you have targeted with viral destruction falls and is dead as normal. However, if this attack kills the affected creature’s target or if it knocks it unconscious, that target must succeed at a Will saving throw (using the spell’s DC) or be subject to viral destruction and make a single attack on its next turn before returning to its normal dead or unconscious state. If the secondary target of viral destruction is merely unconscious and becomes conscious again before its next action, that creature is freed from the viral destruction effect and the spell ends. Each attack caused by this spell can transfer the viral destruction effect to its target if that target is knocked unconscious or killed by the attack, until the spell has affected a number of creatures equal to your mystic level."

    let AnimateDead = CompendiumSpell(context: context)
    AnimateDead.name = "Animate Dead"
    AnimateDead.type = "MT"
    AnimateDead.level = 4
    AnimateDead.school = "Necromancy"
    AnimateDead.castingTime = "1 standard action"
    AnimateDead.range = "touch"
    AnimateDead.targets =  "One or more corpses"
    AnimateDead.duration = "Instantaneous"
    AnimateDead.savingThrow = "none"
    AnimateDead.spellResistance = "No"
    AnimateDead.content = "This spell turns corpses into undead creatures that obey your spoken commands. The undead can be made to follow you, or they can be made to remain in place and attack any creature (or a specific kind of creature) entering the area. They remain animated until they are destroyed. A destroyed undead can’t be animated again.\n\nYou can create one or more undead creatures with a total CR of no more than half your caster level. You can only create one type of undead with each casting of this spell. Creating undead requires special materials worth 1,000 credits × the total CR of the undead created; these materials are consumed as part of casting the spell.\n\nThe undead you create remain under your control indefinitely. No matter how many times you use this spell, however, you can control only a number of undead whose total CR is no greater than your caster level. If you exceed this number, all the newly created creatures fall under your control and any excess undead from previous castings become uncontrolled. You choose which creatures are released. Once released, such undead have no particular feelings of loyalty to you, and in time they may grow in power beyond the undead you can create.\n\nThe corpses you use must be as intact as the typical undead of the type you choose to create. For example, a skeleton can be created only from a mostly intact corpse (that has bones) or skeleton. A zombie can be created only from a creature with a physical anatomy."

    let ArcaneEye = CompendiumSpell(context: context)
    ArcaneEye.name = "Arcane Eye"
    ArcaneEye.type = "T"
    ArcaneEye.level = 4
    ArcaneEye.school = "Divination [scrying]"
    ArcaneEye.castingTime = "10 minutes"
    ArcaneEye.range = "planetary"
    ArcaneEye.effect = "magical sensor"
    ArcaneEye.duration = "1 minute/level (D)"
    ArcaneEye.savingThrow = "none"
    ArcaneEye.spellResistance = "No"
    ArcaneEye.content = "You create an invisible magical sensor that sends you visual information. The sensor appears at any point within line of sight, but it can then travel beyond your line of sight without hindrance. An arcane eye travels at 30 feet per round (300 feet per minute) if viewing an area ahead as a humanoid would (primarily looking at the floor) or 10 feet per round (100 feet per minute) if examining the ceiling and walls as well as the floor ahead. The arcane eye sees exactly as you would see if you were there.\n\nThe arcane eye can travel in any direction as long as the spell lasts. Solid barriers block its passage, but it can pass through a hole or space as small as 1 inch in diameter. The arcane eye can’t enter another plane of existence, even through hyperspace travel or a magical gate or similar magical portal.\n\nYou must concentrate to use an arcane eye. If you do not concentrate, the sensor is inert until you concentrate again."
    
    let Confusion = CompendiumSpell(context: context)
    Confusion.name = "Confusion"
    Confusion.type = "M"
    Confusion.level = 4
    Confusion.school = "Enchantment [compulsion, mind-affecting]"
    Confusion.castingTime = "1 standard action"
    Confusion.range = "medium (100 ft. + 10 ft./level)"
    Confusion.area = "15-ft.-radius burst"
    Confusion.duration = "1 round/level"
    Confusion.savingThrow = "Will negates"
    Confusion.spellResistance = "Yes"
    Confusion.content = "This spell causes confusion in all creatures in the area, making them unable to determine their actions. Any confused creature that is attacked automatically attacks or attempts to attack its attackers on its next turn, as long as it is still confused at the start of its next turn. Note that a confused creature will not make attacks of opportunity against any foe that it is not already devoted to attacking (either because of its most recent action or because it has just been attacked). For confused creatures that have not been attacked, roll on the following table at the start of each affected creature’s turn each round to see what it does in that round.\n\nd%\t\tBehavior\n1-25\tDo nothing but babble incoherently.\n51-75\tDeal 1d8 + Str modifier damage to self with item in hand.\n76-100\tAttack nearest creature.\n\nA confused creature that can’t carry out the indicated action does nothing but babble incoherently. Attackers are not at any special advantage when attacking a confused target."
    
    let CorrosiveHaze = CompendiumSpell(context: context)
    CorrosiveHaze.name = "Corrosive Haze"
    CorrosiveHaze.type = "T"
    CorrosiveHaze.level = 4
    CorrosiveHaze.school = "Evocation [acid]"
    CorrosiveHaze.castingTime = "1 standard action"
    CorrosiveHaze.range = "medium (100 ft. + 10 ft./level)"
    CorrosiveHaze.effect = "5-ft.-diameter cloud of acid"
    CorrosiveHaze.duration = "1 round/level"
    CorrosiveHaze.savingThrow = "Reflex negates"
    CorrosiveHaze.spellResistance = "Yes"
    CorrosiveHaze.content = "A 5-foot cloud of acid-resistant nanites continually converts nearby water vapor into deadly acid. You can create the cloud in the same square as a creature and move it up to 30 feet in any direction as a move action on your turn. If the cloud enters (or is created in) a square containing a creature, it can’t move any farther that round and deals 4d6 acid damage to that creature (Reflex negates). The acidic cloud also corrodes any unattended objects along its path, dealing them 4d8 acid damage.\n\nIf you don’t move the cloud, it remains where it is; if it shares its square with any creature at the beginning of your turn, that creature must succeed at a Reflex save or take 4d8 acid damage. Any creature that takes damage from the cloud takes 10 additional acid damage at the end of its next turn."


    let CosmicEddy = CompendiumSpell(context: context)
    CosmicEddy.name = "Cosmic Eddy"
    CosmicEddy.type = "M"
    CosmicEddy.level = 4
    CosmicEddy.school = "Enchantment"
    CosmicEddy.castingTime = "1 standard action"
    CosmicEddy.range = "medium (100 ft. + 10 ft./level)"
    CosmicEddy.area = "20-ft.-radius spread"
    CosmicEddy.duration = "1 round/level (D)"
    CosmicEddy.savingThrow = "Reflex partial, see text"
    CosmicEddy.spellResistance = "Yes"
    CosmicEddy.content = "You pull dormant mystical energy from the land and objects around you and use it to create a swirling eddy that batters your foes and can hinder their movement. The eddy deals 4d6 bludgeoning damage to each creature in the area. Additionally, creatures in the area are knocked prone and are reduced to half speed while the spell is in effect. A creature that succeeds at a Reflex save takes only half damage and is not knocked prone, but it is still reduced to half speed. Flying creatures within the eddy’s area must attempt an Acrobatics check to fly (DC equals the spell’s save DC) each round. Failure means the creature cannot move for that round.\n\nThe spell deals damage and knocks creatures prone only once. However, if a creature leaves the spell’s area and then returns, it is subject to the damage and other effects described above again (and can attempt another Reflex saving throw). Similarly, if a creature is not in this spell’s area when it is first cast but later moves into it, it is subject to the damage and other effects described above.\n\nSmall, unattended items (no more than light bulk) are also thrown around in the eddy’s area. At the end of the spell’s duration, such items land in a randomly determined space within the spell’s area."

    let Creation4 = CompendiumSpell(context: context)
    Creation4.name = "Creation 4"
    Creation4.type = "T"
    Creation4.level = 4
    Creation4.school = "Conjuration [creation]"
    Creation4.castingTime = "1 minute"
    Creation4.range = "0 ft."
    Creation4.effect = "one nonmagical, nontechnological object of nonliving matter, up to 1 bulk/level; see text"
    Creation4.duration = "see text"
    Creation4.savingThrow = "none"
    Creation4.spellResistance = "No"
    Creation4.content = "You create a nonmagical, nontechnological, unattended object of nonliving matter. The volume of the item created can’t exceed 1 cubic foot (or 1 bulk) per caster level. You must succeed at an appropriate Engineering or Profession check to make a complex item, and you can’t create a consumable item.\n\n4th: When you cast creation as a 4th-level spell, it creates an object made out of vegetable matter (such as wood) that has an item level no greater than one-third your caster level. The duration is 1 hour per caster level.\n\n5th: When you cast creation as a 5th-level spell, it creates an object made out of vegetable matter or material of a mineral nature: crystal, metal, stone, or the like. The object can’t have an item level greater than half your caster level. The duration depends on the hardness and rarity of the created object, as indicated on the following table.\n\nHardness and Rarity Examples: Duration\nVegetable matter: 2 hours/level\nStone, crystal, base metals: 1 hour/level\nPrecious metals: 20 minutes/level\nGems: 10 minutes/level\nRare metals*: 1 round/level\n\n* Includes adamantine, alchemical silver, mithral, and skymetal alloys. You can’t use a 5th-level creation spell to create a cold iron item."


    
    let DeathWard = CompendiumSpell(context: context)
    DeathWard.name = "Death Ward"
    DeathWard.type = "M"
    DeathWard.level = 4
    DeathWard.school = "Necromancy"
    DeathWard.castingTime = "1 standard action"
    DeathWard.range = "touch"
    DeathWard.targets =  "one living creature"
    DeathWard.duration = "1 minute/level"
    DeathWard.savingThrow = "Reflex negates (harmless)"
    DeathWard.spellResistance = "Yes (harmless)"
    DeathWard.content = "The target gains a +4 morale bonus to saving throws against all spells and effects with the death descriptor. The target can attempt a save to negate such effects even if one is not normally allowed. The target can’t gain negative levels and is immune to any negative energy effects. This spell does not remove negative levels the target has already gained, but it does remove the penalties from negative levels for the duration of its effect.\n\nDeath ward does not protect against other sorts of attacks, even if those attacks might be lethal."

    let DiscernLies = CompendiumSpell(context: context)
    DiscernLies.name = "Discern Lies"
    DiscernLies.type = "M"
    DiscernLies.level = 4
    DiscernLies.school = "Divination"
    DiscernLies.castingTime = "1 standard action"
    DiscernLies.range = "close (25 ft. + 5 ft./2 levels)"
    DiscernLies.targets =  "up to one creature/level, no two of which can be more than 30 ft. apart"
    DiscernLies.duration = "concentration, up to 1 round/level"
    DiscernLies.savingThrow = "Will negates"
    DiscernLies.spellResistance = "No"
    DiscernLies.content = "Each round, you concentrate on one target within range. You know if the target deliberately and knowingly speaks a lie by discerning disturbances in its aura caused by lying. The spell does not reveal the truth or uncover unintentional inaccuracies, and it doesn’t necessarily reveal evasions. Each round, you can concentrate on a different target."

    let Dismissal4 = CompendiumSpell(context: context)
    Dismissal4.name = "Dismissal 4"
    Dismissal4.type = "MT"
    Dismissal4.level = 4
    Dismissal4.school = "Abjuration"
    Dismissal4.castingTime = "1 standard action"
    Dismissal4.range = "close (25 ft. + 5 ft./2 levels)"
    Dismissal4.targets =  "see text"
    Dismissal4.duration = "instantaneous"
    Dismissal4.savingThrow = "Will negates, see text;"
    Dismissal4.spellResistance = "Yes"
    Dismissal4.content = "The spell instantly forces one or more extraplanar creatures off your current plane, whisking them away instantly—usually to the creature’s home plane, but there is a 20% chance of sending the target to a random plane other than its own. You can improve the spell’s chance of success by presenting one object or substance that the target fears, hates, or otherwise opposes; you gain a +1 circumstance bonus to your caster level check to overcome the target’s spell resistance (if any), and the save DC of the spell increases by 2. At the GM’s discretion, certain rare items might work twice as well, providing a +2 circumstance bonus to the caster level check to overcome spell resistance and increasing the spell’s save DC by 4.\n\n4th: When you cast dismissal as a 4th-level spell, it affects one extraplanar creature.\n\n5th: When you cast dismissal as a 5th-level spell, it affects a number of extraplanar creatures whose total CR can’t exceed your level + 2, no two of which can be more than 30 feet apart."

    let Dismissal5 = CompendiumSpell(context: context)
    Dismissal5.name = "Dismissal 5"
    Dismissal5.type = "MT"
    Dismissal5.level = 5
    Dismissal5.school = "Abjuration"
    Dismissal5.castingTime = "1 standard action"
    Dismissal5.range = "close (25 ft. + 5 ft./2 levels)"
    Dismissal5.targets =  "see text"
    Dismissal5.duration = "instantaneous"
    Dismissal5.savingThrow = "Will negates, see text;"
    Dismissal5.spellResistance = "Yes"
    Dismissal5.content = "The spell instantly forces one or more extraplanar creatures off your current plane, whisking them away instantly—usually to the creature’s home plane, but there is a 20% chance of sending the target to a random plane other than its own. You can improve the spell’s chance of success by presenting one object or substance that the target fears, hates, or otherwise opposes; you gain a +1 circumstance bonus to your caster level check to overcome the target’s spell resistance (if any), and the save DC of the spell increases by 2. At the GM’s discretion, certain rare items might work twice as well, providing a +2 circumstance bonus to the caster level check to overcome spell resistance and increasing the spell’s save DC by 4.\n\n4th: When you cast dismissal as a 4th-level spell, it affects one extraplanar creature.\n\n5th: When you cast dismissal as a 5th-level spell, it affects a number of extraplanar creatures whose total CR can’t exceed your level + 2, no two of which can be more than 30 feet apart."
    
    let Divination = CompendiumSpell(context: context)
    Divination.name = "Divination"
    Divination.type = "M"
    Divination.level = 4
    Divination.school = "Divination"
    Divination.castingTime = "10 minutes"
    Divination.range = "personal"
    Divination.duration = "instantaneous"
    Divination.content = "Similar to augury but more powerful, a divination spell can provide you with a useful piece of advice in reply to a question concerning a specific goal, event, or activity that is to occur within 1 week. Casting this spell requires you to expend 1 Resolve Point. The advice granted by the spell can be as simple as a short phrase, or it might take the form of a cryptic rhyme or omen. If you don’t act on the information, the conditions may change so that the information is no longer useful. The chance for a correct divination is 75%. If the die roll fails, you know the spell failed, unless specific magic yielding false information is at work.\n\nAs with augury, multiple castings of divination about the same topic by the same caster use the same die result as the first divination spell and yield the same answer each time."

    let Enervation = CompendiumSpell(context: context)
    Enervation.name = "Enervation"
    Enervation.type = "M"
    Enervation.level = 4
    Enervation.school = "Necromancy"
    Enervation.castingTime = "1 standard action"
    Enervation.range = "close (25 ft. + 5 ft./2 levels)"
    Enervation.targets =  "one creature"
    Enervation.duration = "instantaneous"
    Enervation.savingThrow = "none"
    Enervation.spellResistance = "Yes"
    Enervation.content = "You shoot a black ray at a target, making a ranged attack against the target’s EAC. If you hit, the target gains 2 temporary negative levels. Negative levels stack. If the target survives, it recovers from negative levels after a number of hours equal to your caster level (maximum 15 hours). An undead creature struck by the ray gains 10 temporary Hit Points for 1 hour."

    let HoldMonster = CompendiumSpell(context: context)
    HoldMonster.name = "Hold Monster"
    HoldMonster.type = "M"
    HoldMonster.level = 4
    HoldMonster.school = "Enchantment [compulsion, mind-affecting]"
    HoldMonster.targets =  "one living creature"
    HoldMonster.content = "This spell functions as hold person, except it can target any living creature."

    let MindProbe = CompendiumSpell(context: context)
    MindProbe.name = "Mind Probe"
    MindProbe.type = "M"
    MindProbe.level = 4
    MindProbe.school = "Divination [mind-affecting]"
    MindProbe.castingTime = "1 minute"
    MindProbe.range = "close (25 ft. + 5 ft./2 levels)"
    MindProbe.targets =  "one creature"
    MindProbe.duration = "1 round/level (D)"
    MindProbe.savingThrow = "Will negates"
    MindProbe.spellResistance = "Yes"
    MindProbe.content = "You gain access to the target’s memories and knowledge, and you can pry the information you want from them involuntarily.\n\nYou can attempt to learn the answer to one question of your choice per round; after each question, the target can attempt a Will saving throw to end the spell. If it fails, the creature can attempt a Bluff check with a DC equal to 11 + your Sense Motive modifier. If it fails its Bluff check, you gain the answer you desire. If it succeeds at its check, you gain no information. If it succeeds by 5 or more, it answers however it chooses and you believe that wrong answer to be the truth. Your questions are purely telepathic inquiries, and the answers to those questions are imparted directly into your mind. You and the target don’t need to speak the same language, though less intelligent creatures may yield up only appropriate sensory images in answer to your questions."

    let PlanarBinding4 = CompendiumSpell(context: context)
    PlanarBinding4.name = "Planar Binding 4"
    PlanarBinding4.type = "MT"
    PlanarBinding4.level = 4
    PlanarBinding4.school = "Conjuration [calling]"
    PlanarBinding4.castingTime = "10 minutes"
    PlanarBinding4.range = "close (25 ft. + 5 ft./2 levels)"
    PlanarBinding4.targets =  "see text"
    PlanarBinding4.duration = "instantaneous; see text"
    PlanarBinding4.savingThrow = "Will negates"
    PlanarBinding4.spellResistance = "Yes"
    PlanarBinding4.content = "Casting this spell attempts a dangerous act: to lure a creature from another plane to a specifically prepared trap, created by the spell within its range. The called creature is held in the trap until it agrees to perform one service in return for its freedom or breaks free. The kind of creature to be bound must be known and stated. If you wish to call a specific individual, you must use that individual’s proper name in casting the spell. The CR of the outsider you can call with planar binding depends on the spell’s level.\n\n4th: One outsider of CR 4 or lower\n\n5th: One outsider of CR 7 or lower\n\n6th: One outsider of CR 10 or lower\n\nThe target creature can attempt a Will saving throw. If the creature succeeds at the saving throw, it resists the spell. If it fails, the creature is immediately drawn to the trap (Spell resistance does not keep it from being called). The creature can escape from the trap by successfully using its spell resistance (meaning you fail a caster level check against its spell resistance), by dimensional travel, or with a successful Charisma check (DC = 15 + half your caster level + your Charisma modifier). It can try each method once per day, and a natural 20 on this check always succeeds (and a natural 1 on your caster level check always fails). If it breaks loose, it can flee or attack you. A planar barrier spell cast in the area prevents the creature from escaping via dimensional travel.\n\nIf the creature does not break free of the trap, you can keep it bound for as long as you dare. You can attempt to convince the creature to perform a task for you in exchange for release and perhaps some sort of reward. The creature decides which terms it is willing to accept, and it must willingly agree to the terms; magical compulsion isn’t sufficient. This continues until the creature promises to serve, until it breaks free, or until you decide to get rid of it by means of some other spell. It never agrees to unreasonable commands.\n\nOnce the requested service has been completed, the creature need only to inform you to be instantly sent back to its home plane. The creature might later seek revenge against you for having imprisoned it. If you assign some open-ended task that the creature can’t complete through its own actions, the spell remains in effect for 10 days and the creature gains an immediate chance to break free. A defined task that will take longer than 10 days usually counts as unreasonable. Note that a clever recipient can subvert some instructions.\n\nWhen you use this spell to call a creature with the air, chaotic, earth, evil, fire, good, lawful, or water subtype, the spell gains that descriptor."

    let PlanarBinding5 = CompendiumSpell(context: context)
    PlanarBinding5.name = "Planar Binding 5"
    PlanarBinding5.type = "MT"
    PlanarBinding5.level = 5
    PlanarBinding5.school = "Conjuration [calling]"
    PlanarBinding5.castingTime = "10 minutes"
    PlanarBinding5.range = "close (25 ft. + 5 ft./2 levels)"
    PlanarBinding5.targets =  "see text"
    PlanarBinding5.duration = "instantaneous; see text"
    PlanarBinding5.savingThrow = "Will negates"
    PlanarBinding5.spellResistance = "Yes"
    PlanarBinding5.content = "Casting this spell attempts a dangerous act: to lure a creature from another plane to a specifically prepared trap, created by the spell within its range. The called creature is held in the trap until it agrees to perform one service in return for its freedom or breaks free. The kind of creature to be bound must be known and stated. If you wish to call a specific individual, you must use that individual’s proper name in casting the spell. The CR of the outsider you can call with planar binding depends on the spell’s level.\n\n4th: One outsider of CR 4 or lower\n\n5th: One outsider of CR 7 or lower\n\n6th: One outsider of CR 10 or lower\n\nThe target creature can attempt a Will saving throw. If the creature succeeds at the saving throw, it resists the spell. If it fails, the creature is immediately drawn to the trap (Spell resistance does not keep it from being called). The creature can escape from the trap by successfully using its spell resistance (meaning you fail a caster level check against its spell resistance), by dimensional travel, or with a successful Charisma check (DC = 15 + half your caster level + your Charisma modifier). It can try each method once per day, and a natural 20 on this check always succeeds (and a natural 1 on your caster level check always fails). If it breaks loose, it can flee or attack you. A planar barrier spell cast in the area prevents the creature from escaping via dimensional travel.\n\nIf the creature does not break free of the trap, you can keep it bound for as long as you dare. You can attempt to convince the creature to perform a task for you in exchange for release and perhaps some sort of reward. The creature decides which terms it is willing to accept, and it must willingly agree to the terms; magical compulsion isn’t sufficient. This continues until the creature promises to serve, until it breaks free, or until you decide to get rid of it by means of some other spell. It never agrees to unreasonable commands.\n\nOnce the requested service has been completed, the creature need only to inform you to be instantly sent back to its home plane. The creature might later seek revenge against you for having imprisoned it. If you assign some open-ended task that the creature can’t complete through its own actions, the spell remains in effect for 10 days and the creature gains an immediate chance to break free. A defined task that will take longer than 10 days usually counts as unreasonable. Note that a clever recipient can subvert some instructions.\n\nWhen you use this spell to call a creature with the air, chaotic, earth, evil, fire, good, lawful, or water subtype, the spell gains that descriptor."

    let PlanarBinding6 = CompendiumSpell(context: context)
    PlanarBinding6.name = "Planar Binding 6"
    PlanarBinding6.type = "MT"
    PlanarBinding6.level = 6
    PlanarBinding6.school = "Conjuration [calling]"
    PlanarBinding6.castingTime = "10 minutes"
    PlanarBinding6.range = "close (25 ft. + 5 ft./2 levels)"
    PlanarBinding6.targets =  "see text"
    PlanarBinding6.duration = "instantaneous; see text"
    PlanarBinding6.savingThrow = "Will negates"
    PlanarBinding6.spellResistance = "Yes"
    PlanarBinding6.content = "Casting this spell attempts a dangerous act: to lure a creature from another plane to a specifically prepared trap, created by the spell within its range. The called creature is held in the trap until it agrees to perform one service in return for its freedom or breaks free. The kind of creature to be bound must be known and stated. If you wish to call a specific individual, you must use that individual’s proper name in casting the spell. The CR of the outsider you can call with planar binding depends on the spell’s level.\n\n4th: One outsider of CR 4 or lower\n\n5th: One outsider of CR 7 or lower\n\n6th: One outsider of CR 10 or lower\n\nThe target creature can attempt a Will saving throw. If the creature succeeds at the saving throw, it resists the spell. If it fails, the creature is immediately drawn to the trap (Spell resistance does not keep it from being called). The creature can escape from the trap by successfully using its spell resistance (meaning you fail a caster level check against its spell resistance), by dimensional travel, or with a successful Charisma check (DC = 15 + half your caster level + your Charisma modifier). It can try each method once per day, and a natural 20 on this check always succeeds (and a natural 1 on your caster level check always fails). If it breaks loose, it can flee or attack you. A planar barrier spell cast in the area prevents the creature from escaping via dimensional travel.\n\nIf the creature does not break free of the trap, you can keep it bound for as long as you dare. You can attempt to convince the creature to perform a task for you in exchange for release and perhaps some sort of reward. The creature decides which terms it is willing to accept, and it must willingly agree to the terms; magical compulsion isn’t sufficient. This continues until the creature promises to serve, until it breaks free, or until you decide to get rid of it by means of some other spell. It never agrees to unreasonable commands.\n\nOnce the requested service has been completed, the creature need only to inform you to be instantly sent back to its home plane. The creature might later seek revenge against you for having imprisoned it. If you assign some open-ended task that the creature can’t complete through its own actions, the spell remains in effect for 10 days and the creature gains an immediate chance to break free. A defined task that will take longer than 10 days usually counts as unreasonable. Note that a clever recipient can subvert some instructions.\n\nWhen you use this spell to call a creature with the air, chaotic, earth, evil, fire, good, lawful, or water subtype, the spell gains that descriptor."

    let Reincarnate = CompendiumSpell(context: context)
    Reincarnate.name = "Reincarnate"
    Reincarnate.type = "M"
    Reincarnate.level = 4
    Reincarnate.school = "Transmutation"
    Reincarnate.castingTime = "10 minutes"
    Reincarnate.range = "touch"
    Reincarnate.targets =  "one dead creature"
    Reincarnate.duration = "instantaneous; see text"
    Reincarnate.savingThrow = "none; see text"
    Reincarnate.spellResistance = "Yes (harmless)"
    Reincarnate.content = "Casting this spell attempts a dangerous act: to lure a creature from another plane to a specifically prepared trap, created by the spell within its range. The called creature is held in the trap until it agrees to perform one service in return for its freedom or breaks free. The kind of creature to be bound must be known and stated. If you wish to call a specific individual, you must use that individual’s proper name in casting the spell. The CR of the outsider you can call with planar binding depends on the spell’s level.\n\n4th: One outsider of CR 4 or lower\n\n5th: One outsider of CR 7 or lower\n\n6th: One outsider of CR 10 or lower\n\nThe target creature can attempt a Will saving throw. If the creature succeeds at the saving throw, it resists the spell. If it fails, the creature is immediately drawn to the trap (Spell resistance does not keep it from being called). The creature can escape from the trap by successfully using its spell resistance (meaning you fail a caster level check against its spell resistance), by dimensional travel, or with a successful Charisma check (DC = 15 + half your caster level + your Charisma modifier). It can try each method once per day, and a natural 20 on this check always succeeds (and a natural 1 on your caster level check always fails). If it breaks loose, it can flee or attack you. A planar barrier spell cast in the area prevents the creature from escaping via dimensional travel.\n\nIf the creature does not break free of the trap, you can keep it bound for as long as you dare. You can attempt to convince the creature to perform a task for you in exchange for release and perhaps some sort of reward. The creature decides which terms it is willing to accept, and it must willingly agree to the terms; magical compulsion isn’t sufficient. This continues until the creature promises to serve, until it breaks free, or until you decide to get rid of it by means of some other spell. It never agrees to unreasonable commands.\n\nOnce the requested service has been completed, the creature need only to inform you to be instantly sent back to its home plane. The creature might later seek revenge against you for having imprisoned it. If you assign some open-ended task that the creature can’t complete through its own actions, the spell remains in effect for 10 days and the creature gains an immediate chance to break free. A defined task that will take longer than 10 days usually counts as unreasonable. Note that a clever recipient can subvert some instructions.\n\nWhen you use this spell to call a creature with the air, chaotic, earth, evil, fire, good, lawful, or water subtype, the spell gains that descriptor."

    let RemoveRadioactivity = CompendiumSpell(context: context)
    RemoveRadioactivity.name = "Remove Radioactivity"
    RemoveRadioactivity.type = "MT"
    RemoveRadioactivity.level = 4
    RemoveRadioactivity.school = "Conjuration [healing]"
    RemoveRadioactivity.castingTime = "1 standard action"
    RemoveRadioactivity.range = "touch"
    RemoveRadioactivity.targets =  "one creature or object or one 20-ft.-radius area"
    RemoveRadioactivity.duration = "instantaneous"
    RemoveRadioactivity.savingThrow = "Fortitude negates (harmless)"
    RemoveRadioactivity.spellResistance = "Yes (harmless)"
    RemoveRadioactivity.content = "You remove all ongoing effects of radiation from a single target if you succeed at a caster level check (DC = the DC associated with the radiation effect). The target is cured of both the radiation’s poison effects and the radiation sickness disease, moving the target to the healthy state on both tracks. When cast on an area, a single casting of remove radioactivity removes radiation from a 20-foot-radius area around the point you touch. This spell has no power to negate naturally radioactive materials, and as long as such materials remain in an area, the radiation that was removed may return."

    let ResistantArmor = CompendiumSpell(context: context)
    ResistantArmor.name = "Resistant Armor"
    ResistantArmor.type = "MT"
    ResistantArmor.level = 4
    ResistantArmor.school = "Abjuration"
    ResistantArmor.content = "This spell functions as lesser resistant armor, but the target and her gear gain DR 10/— or energy resistance 10 that protects against three energy types."

    let Restoration = CompendiumSpell(context: context)
    Restoration.name = "Restoration"
    Restoration.type = "M"
    Restoration.level = 4
    Restoration.school = "Conjuration [healing]"
    Restoration.castingTime = "3 rounds"
    Restoration.range = "touch"
    Restoration.targets =  "one creature"
    Restoration.duration = "instantaneous"
    Restoration.savingThrow = "Will negates (harmless)"
    Restoration.spellResistance = "Yes (harmless)"
    Restoration.content = "This spell functions as lesser restoration, except it also removes temporary negative levels or 1 permanent negative level. You must spend 5 Resolve Points when casting this spell to remove a permanent negative level. This spell can’t be used to remove more than 1 permanent negative level from a target in a 1-week period.\n\nRestoration heals all temporary ability damage, and it restores all points permanently drained from a single ability score (your choice if more than one is drained). It also eliminates any fatigue or exhaustion suffered by the target, but it doesn’t remove any underlying source of fatigue or exhaustion. A target that has benefited from the removal of fatigue or exhaustion from this spell can’t benefit from either effect again for 24 hours."

    let TelepathicBond = CompendiumSpell(context: context)
    TelepathicBond.name = "Telepathic Bond"
    TelepathicBond.type = "M"
    TelepathicBond.level = 4
    TelepathicBond.school = "Divination"
    TelepathicBond.castingTime = "1 standard action"
    TelepathicBond.range = "close (25 ft. + 5 ft./2 levels)"
    TelepathicBond.targets =  "you plus up to one willing creature per 3 levels, no two of which can be more than 30 ft. apart"
    TelepathicBond.duration = "10 minutes/level (D)"
    TelepathicBond.savingThrow = "none"
    TelepathicBond.spellResistance = "No"
    TelepathicBond.content = "You forge a telepathic bond between yourself and a number of willing creatures, each of which must have an Intelligence score of 3 or higher (or a modifier of –4 or higher). Each creature included in the link is linked to all the others. The creatures can communicate telepathically through the bond regardless of language. No special power or influence is established as a result of the bond. Once the bond is formed, it works over any distance (although not from one plane to another).\n\nIf desired, you can leave yourself out of the telepathic bond forged. This decision must be made at the time of casting."

    let BreakEnchantment = CompendiumSpell(context: context)
    BreakEnchantment.name = "Break Enchantment"
    BreakEnchantment.type = "MT"
    BreakEnchantment.level = 5
    BreakEnchantment.school = "Abjuration"
    BreakEnchantment.castingTime = "1 minute"
    BreakEnchantment.range = "close (25 ft. + 5 ft./2 levels)"
    BreakEnchantment.targets =  "up to one creature per level, no two of which can be more than 30 ft. apart"
    BreakEnchantment.duration = "instantaneous"
    BreakEnchantment.savingThrow = "none"
    BreakEnchantment.spellResistance = "No"
    BreakEnchantment.content = "This spell frees victims from Curses, enchantments, and transmutations. Break enchantment can reverse even an instantaneous effect. For each such effect, you attempt a caster level check (1d20 + your caster level, maximum +15) against a DC equal to 11 + the caster level of the effect. Success means that the creature is free of the spell, curse, or effect. For a Cursed magic item, the DC of the caster level check is equal to the DC of the Curse.\n\nIf the spell is one that can’t be dispelled by dispel magic, break enchantment works only if that spell is 5th level or lower. If the effect comes from a permanent magic item, break enchantment doesn’t remove the Curse from the item but it does free the victim from the item’s effects."

    let CallCosmos = CompendiumSpell(context: context)
    CallCosmos.name = "Call Cosmos"
    CallCosmos.type = "M"
    CallCosmos.level = 5
    CallCosmos.school = "Evocation"
    CallCosmos.castingTime = "1 standard action"
    CallCosmos.range = "long (400 ft. + 40 ft./level)"
    CallCosmos.area = "cylinder (20-ft. radius, 40 ft. high)"
    CallCosmos.duration = "1 round/level (D)"
    CallCosmos.savingThrow = "none"
    CallCosmos.spellResistance = "Yes"
    CallCosmos.content = "You evoke a vertical column of dangerous material from across the universe that rains down upon creatures in the area. This matter is made up of bits of burning stars and chunks of frozen comets, and it deals 4d6 fire damage and 3d6 cold damage to every creature in the area. This damage occurs only once, when the spell is cast. For the spell’s remaining duration, the fallen starstuff makes the entire area difficult terrain, and thick, swirling clouds of particulate space matter magically block vision. This obscures all sight beyond 5 feet, including darkvision and other vision-based senses (including vision-based blindsight and sense through), but doesn’t prevent blindsense. A creature within 5 feet of its attacker has concealment (attacks have a 20% miss chance). Creatures farther away have total concealment (50% miss chance, and the attacker can’t use sight to locate the target). Additionally, the swirling cosmic particles are distracting to spellcasters in the area, who have a 20% chance of losing any spell they attempt to cast in the area. At the end of the duration, the starstuff disappears, leaving no aftereffects (other than the damage dealt)."

    let CommandGreater = CompendiumSpell(context: context)
    CommandGreater.name = "Command, Greater"
    CommandGreater.type = "M"
    CommandGreater.level = 5
    CommandGreater.school = "Enchantment [compulsion, language-dependent, mind-affecting]"
    CommandGreater.targets =  "up to one creature/level, no two of which can be more than 30 ft. apart"
    CommandGreater.duration = "1 round/level"
    CommandGreater.content = "This spell functions like command, except you can affect up to one creature per level and the targets continue the specified activity beyond 1 round. At the start of each commanded creature’s action after the first, it can attempt another Will saving throw to break free from the spell. Each creature must receive the same command."

    let CommuneWithNature = CompendiumSpell(context: context)
    CommuneWithNature.name = "Commune With Nature"
    CommuneWithNature.type = "M"
    CommuneWithNature.level = 5
    CommuneWithNature.school = "Divination"
    CommuneWithNature.castingTime = "10 minutes"
    CommuneWithNature.range = "personal"
    CommuneWithNature.duration = "instantaneous"
    CommuneWithNature.content = "You become one with nature, attaining knowledge of the surrounding territory. You instantly gain knowledge of up to three facts from among the following subjects: The ground or terrain, plants, minerals, bodies of water, people, general animal population, presence of native creatures, presence of powerful unnatural creatures, or general state of the natural setting.\n\nIn outdoor settings, the spell operates in a radius of 1 mile per caster level. In natural underground settings—caves, caverns, and the like—the spell is less powerful and its radius is limited to 100 feet per caster level. The spell does not function where nature has been replaced by construction or settlements, such as in cities, factories, and Starships."

    let ContactOtherPlane = CompendiumSpell(context: context)
    ContactOtherPlane.name = "Contact Other Plane"
    ContactOtherPlane.type = "MT"
    ContactOtherPlane.level = 5
    ContactOtherPlane.school = "Divination"
    ContactOtherPlane.castingTime = "10 minutes"
    ContactOtherPlane.duration = "concentration"
    ContactOtherPlane.savingThrow = "none"
    ContactOtherPlane.spellResistance = "Yes"
    ContactOtherPlane.content = "You send your mind to another plane of existence (an Elemental Plane or some plane further removed) in order to receive advice and information from powers there. The powers reply in a language you understand, but they resent such contact and give only brief answers to your questions. All questions are answered with “Yes,” “No,” “Maybe,” “Never,” “Irrelevant,” or some other one-word answer.\n\nYou must concentrate on maintaining the spell in order to ask questions at the rate of one per round. A question is answered by the power during the same round. You can ask one question for every 2 caster levels. On rare occasions, this divination may be blocked by an act of certain deities or forces.\n\nContacting a minor planar power is relatively safe but may not result in useful answers. For each question you ask, the GM secretly rolls 1d20.\n\n1-2: The power gives you no answer, the spell ends, and you must attempt a DC 7 Intelligence check. On a failed check, your Intelligence and Charisma scores each fall to 8 for a week and you are unable to cast spells for that period.\n3-5: You receive a random answer to the question.\n6-10: You receive an incorrect answer to the question. Based on the nature and needs of the creature contacted, this may be a lie designed to harm you.\n11-15: You receive no answer to the question.\n16 or more: You receive a truthful and useful one-word answer. If the question can’t be truthfully answered in this way, no answer is received.\n\nContact with minds further removed from your home plane increases the probability that you will incur a decrease in Intelligence and Charisma due to your brain being overwhelmed by the power’s sheer strangeness and force, but it also increases the chance of the power knowing the answer and answering correctly. You can add any value from +1 to +5 to the d20 roll to represent contacting increasingly powerful planar beings. However, on a roll of 1 or 2, the result is still no answer, the spell ends, and you must attempt an Intelligence check to avoid losing Intelligence and Charisma. The DC of this Intelligence check is increased by the same amount added to the d20 check to contact a planar creature."

    let CrushSkull = CompendiumSpell(context: context)
    CrushSkull.name = "Crush Skull"
    CrushSkull.type = "M"
    CrushSkull.level = 5
    CrushSkull.school = "Necromancy [death]"
    CrushSkull.castingTime = "1 standard action"
    CrushSkull.range = "close (25 ft. + 5 ft./2 levels)"
    CrushSkull.targets =  "one living creature"
    CrushSkull.duration = "instantaneous"
    CrushSkull.savingThrow = "Fortitude partial"
    CrushSkull.spellResistance = "Yes"
    CrushSkull.content = "You manipulate the energy that swirls around the target’s head, pulling it inward and potentially crushing its skull. You must make a ranged attack against the target’s EAC to ensure this spell hits the necessary weak spots in the target’s head, but you can add your key ability score modifier to this attack roll instead of your Dexterity modifier if it is higher. If you hit and the target fails a Fortitude saving throw, it takes 18d8 damage. If the target succeeds at its saving throw, it instead takes 4d8 damage. The target might die from damage even if it succeeds at its saving throw; in this case, the spell is not a death effect. This spell has no effect against living creatures that don’t have an anatomical head."

    let DispelMagicGreater = CompendiumSpell(context: context)
    DispelMagicGreater.name = "Dispel Magic, Greater"
    DispelMagicGreater.type = "MT"
    DispelMagicGreater.level = 5
    DispelMagicGreater.school = "Abjuration"
    DispelMagicGreater.targets =  "one creature, object, spell, or spellcaster; or a 20-ft.-radius burst"
    DispelMagicGreater.content = "This spell functions like dispel magic, except it can end more than one spell on a target and it can be used to target multiple creatures. You choose to use greater dispel magic in one of three ways: a targeted dispel, an area dispel, or a counter.\n\n\tTargeted Dispel: This functions as a targeted dispel magic, but you can dispel one spell for every 4 caster levels you have, attempting a separate dispel check for each spell. Additionally, greater dispel magic has a chance to dispel any Curse that remove affliction can remove, even if dispel magic can’t dispel that effect. The DC of this check is equal to the Curse’s DC.\n\n\tArea Dispel: When greater dispel magic is used in this way, the spell affects everything within a 20-foot-radius burst. Attempt one dispel check and apply that check to each creature or object in the area, as if it were targeted by dispel magic. If you don’t specify spells and there is more than one possible spell on the target, your targeted dispel attempts to dispel spells at random. Magic items themselves are not affected by an area dispel but additional magical effects on them may be dispelled.\n\nFor each ongoing spell effect whose point of origin is within the area of the greater dispel magic spell, apply the result of the dispel check to dispel the spell. For each ongoing spell whose area overlaps that of the greater dispel magic spell, apply the result of the dispel check to end the effect, but only within the overlapping area.\n\nIf an object or a creature that is the effect of an ongoing spell is in the area, apply the result of the dispel check to end the spell that conjured that object or creature (returning it whence it came) in addition to attempting to dispel one spell targeting the creature or object.\n\nYou can choose to automatically succeed at your dispel check against any spell you have cast.\n\n\tCounter: This functions as countering with dispel magic, but you receive a +4 bonus to your dispel check to counter the other spellcaster’s spell."

    let DominatePerson = CompendiumSpell(context: context)
    DominatePerson.name = "Dominate Person"
    DominatePerson.type = "M"
    DominatePerson.level = 5
    DominatePerson.school = "Abjuration [compulsion, mind-affecting]"
    DominatePerson.castingTime = "1 round"
    DominatePerson.range = "close (25 ft. + 5 ft./2 levels)"
    DominatePerson.targets =  "one humanoid"
    DominatePerson.duration = "1 day/level; see text"
    DominatePerson.savingThrow = "Will negates"
    DominatePerson.spellResistance = "Yes"
    DominatePerson.content = "You fire a bright purple ray at your target, making a ranged attack against your target’s EAC, but you can add your key ability score bonus to this attack instead of your Dexterity modifier if it is higher.\n\nIf you hit and your target fails its Will saving throw, you establish a telepathic link with the target’s mind and can control its actions. If you and the target have a common language, you can generally force the target to perform as you desire, within the limits of its abilities. If no common language exists, you can communicate only basic commands, such as “Come here,” “Go there,” “Fight,” and “Stand still.” You know what the target is experiencing, but you don’t receive direct sensory input from it, nor can it communicate with you telepathically. Once you have given a dominated creature a command, it continues to attempt to carry out that command to the exclusion of all other activities except those necessary for day-to-day survival (such as sleeping, eating, and so forth). Changing your orders or giving a dominated creature a new command is a move action.\n\nBy concentrating fully on the spell (a standard action), you can receive full sensory input as interpreted by the mind of the target, though it still can’t communicate with you. You don’t actually see through the target’s eyes, but you still get a good idea of what’s going on.\n\nThe target resists this control, and any target forced to take actions against its nature can attempt a new saving throw with a +2 bonus. Obviously self-destructive orders are not carried out. Once control is established, the range at which it can be exercised is unlimited as long as you and the target are on the same plane. You don’t need to see the target to control it.\n\nIf you don’t spend at least 1 round concentrating on the spell each following day, the target can attempt a new saving throw to throw off the domination. You can be prevented from exercising control or using the telepathic link while the target is under the effects of some spells, but such effects don’t automatically dispel the domination."

    let Feeblemind = CompendiumSpell(context: context)
    Feeblemind.name = "Feeblemind"
    Feeblemind.type = "M"
    Feeblemind.level = 5
    Feeblemind.school = "Enchantment [compulsion, mind-affecting]"
    Feeblemind.castingTime = "1 standard"
    Feeblemind.range = "medium (100 ft. + 10 ft./level)"
    Feeblemind.targets =  "one creature"
    Feeblemind.duration = "instantaneous"
    Feeblemind.savingThrow = "Will negates"
    Feeblemind.spellResistance = "Yes"
    Feeblemind.content = "You fire a bright purple ray at your target, making a ranged attack against your target’s EAC, but you can add your key ability score bonus to this attack instead of your Dexterity modifier if it is higher.\n\nIf you hit and your target fails its Will saving throw, you establish a telepathic link with the target’s mind and can control its actions. If you and the target have a common language, you can generally force the target to perform as you desire, within the limits of its abilities. If no common language exists, you can communicate only basic commands, such as “Come here,” “Go there,” “Fight,” and “Stand still.” You know what the target is experiencing, but you don’t receive direct sensory input from it, nor can it communicate with you telepathically. Once you have given a dominated creature a command, it continues to attempt to carry out that command to the exclusion of all other activities except those necessary for day-to-day survival (such as sleeping, eating, and so forth). Changing your orders or giving a dominated creature a new command is a move action.\n\nBy concentrating fully on the spell (a standard action), you can receive full sensory input as interpreted by the mind of the target, though it still can’t communicate with you. You don’t actually see through the target’s eyes, but you still get a good idea of what’s going on.\n\nThe target resists this control, and any target forced to take actions against its nature can attempt a new saving throw with a +2 bonus. Obviously self-destructive orders are not carried out. Once control is established, the range at which it can be exercised is unlimited as long as you and the target are on the same plane. You don’t need to see the target to control it.\n\nIf you don’t spend at least 1 round concentrating on the spell each following day, the target can attempt a new saving throw to throw off the domination. You can be prevented from exercising control or using the telepathic link while the target is under the effects of some spells, but such effects don’t automatically dispel the domination."

    let ModifyMemory = CompendiumSpell(context: context)
    ModifyMemory.name = "Modify Memory"
    ModifyMemory.type = "M"
    ModifyMemory.level = 5
    ModifyMemory.school = "Enchantment [compulsion, mind-affecting]"
    ModifyMemory.castingTime = "1 round; see text"
    ModifyMemory.range = "close (25 ft. + 5 ft./2 levels)"
    ModifyMemory.targets =  "one living creature"
    ModifyMemory.duration = "permanent"
    ModifyMemory.savingThrow = "Will negates"
    ModifyMemory.spellResistance = "Yes"
    ModifyMemory.content = "You reach into the target’s mind and modify up to 5 minutes of its memories in one of the following ways.\n- Eliminate all memory of an event the target actually experienced. This spell cannot negate charm person, suggestion, or similar spells.\n- Allow the target to recall with perfect clarity an event it actually experienced.\n- Change the details of an event the target actually experienced.\n- Implant a memory of an event the target never experienced.\n\nCasting the spell takes 1 round. If the target fails its saving throw, you proceed with the spell by spending as much as 5 minutes (a period of time equal to the amount of memory you want to modify) visualizing the memory you wish to modify in the target. If your concentration is disturbed before the visualization is complete, or if the target moves beyond the spell’s range at any point during this time, the spell fails.\n\nA modified memory does not necessarily affect the target’s actions, particularly if it contradicts the creature’s natural inclinations. An illogical modified memory is usually dismissed as a bad dream, a hallucination, or another similar excuse."

    let MysticCureMass5 = CompendiumSpell(context: context)
    MysticCureMass5.name = "Mystic Cure Mass 5"
    MysticCureMass5.type = "M"
    MysticCureMass5.level = 5
    MysticCureMass5.school = "Conjuration [healing]"
    MysticCureMass5.castingTime = "1 standard"
    MysticCureMass5.range = "close (25 ft. + 5 ft./2 levels)"
    MysticCureMass5.targets =  "up to one creature/level, no two of which can be more than 30 ft. apart"
    MysticCureMass5.duration = "instantaneous"
    MysticCureMass5.savingThrow = "Will half (harmless)"
    MysticCureMass5.spellResistance = "Yes (harmless)"
    MysticCureMass5.content = "You restore a number of Hit Points to a number of targets. Choose one of these targets within 10 feet of you; if that target regains all of its Hit Points as a result of this healing, you can apply the remaining healing to yourself, as long as you are a living creature. On the other hand, if this isn’t enough to restore all of that target’s Hit Points, you can transfer any number of your own Hit Points to that target, healing the target that amount. You can’t transfer more Hit Points than you have or more Hit Points than the target is missing.\n\nThe number of Hit Points mass mystic cure restores to each target depends on the spell’s level.\n\n5th: 3d8 + your Wisdom modifier\n\n6th: 5d8 + your Wisdom modifier"

    let MysticCureMass6 = CompendiumSpell(context: context)
    MysticCureMass6.name = "Mystic Cure Mass 6"
    MysticCureMass6.type = "M"
    MysticCureMass6.level = 6
    MysticCureMass6.school = "Conjuration [healing]"
    MysticCureMass6.castingTime = "1 standard"
    MysticCureMass6.range = "close (25 ft. + 5 ft./2 levels)"
    MysticCureMass6.targets =  "up to one creature/level, no two of which can be more than 30 ft. apart"
    MysticCureMass6.duration = "instantaneous"
    MysticCureMass6.savingThrow = "Will half (harmless)"
    MysticCureMass6.spellResistance = "Yes (harmless)"
    MysticCureMass6.content = "You restore a number of Hit Points to a number of targets. Choose one of these targets within 10 feet of you; if that target regains all of its Hit Points as a result of this healing, you can apply the remaining healing to yourself, as long as you are a living creature. On the other hand, if this isn’t enough to restore all of that target’s Hit Points, you can transfer any number of your own Hit Points to that target, healing the target that amount. You can’t transfer more Hit Points than you have or more Hit Points than the target is missing.\n\nThe number of Hit Points mass mystic cure restores to each target depends on the spell’s level.\n\n5th: 3d8 + your Wisdom modifier\n\n6th: 5d8 + your Wisdom modifier"

    let RaiseDead = CompendiumSpell(context: context)
    RaiseDead.name = "Raise Dead"
    RaiseDead.type = "M"
    RaiseDead.level = 5
    RaiseDead.school = "Conjuration [healing]"
    RaiseDead.castingTime = "1 minute"
    RaiseDead.range = "touch"
    RaiseDead.targets =  "one dead creature"
    RaiseDead.duration = "instantaneous"
    RaiseDead.savingThrow = "none, see text;"
    RaiseDead.spellResistance = "Yes (harmless)"
    RaiseDead.content = "You restore life to a deceased creature. You can raise a creature that has been dead for no longer than 1 day per caster level. In addition, the target’s soul must be free and willing to return. If the target’s soul is not willing to return, the spell fails; therefore, a target that wants to return to life receives no saving throw against this spell. Casting this spell requires you to create a complex representation of the target deceased creature, worth at least 5,000 credits, to serve as a beacon for the creature’s soul. This object is consumed when you cast the spell.\n\nComing back from the dead is an ordeal. The target of the spell gains 2 permanent negative levels when it is raised, just as if it had been hit by a creature’s ability that bestows permanent negative levels. If the target is 1st level, it takes 2 Constitution drain instead (if this would reduce its Constitution to 0 or less, it can’t be raised). A raised creature returns with no Resolve Points, no Stamina Points, and no spell slots (until it rests to recover them normally). It has 5 Hit Points. Any ability scores reduced to 0 are raised to 1. Normal poison and normal disease are cured in the process of raising the target, but magical diseases and Curses are not undone. While the spell closes mortal wounds and repairs lethal damage of most kinds, the body of the creature to be raised must be whole. Otherwise, missing parts are still missing when the creature is brought back to life.\n\nThe spell can’t bring back a creature that has died of old age. Constructs, elementals, and outsiders can’t be raised by this spell. It is possible to bring back a creature that has been turned into an undead creature, but the beacon for the creature’s soul must be more powerful, and must be worth at least 15,000 credits."

    let RemoveConditionGreater = CompendiumSpell(context: context)
    RemoveConditionGreater.name = "Remove Condition, Greater"
    RemoveConditionGreater.type = "M"
    RemoveConditionGreater.level = 5
    RemoveConditionGreater.school = "Conjuration [healing]"
    RemoveConditionGreater.castingTime = "1 standard action"
    RemoveConditionGreater.range = "touch"
    RemoveConditionGreater.targets =  "one creature"
    RemoveConditionGreater.duration = "instantaneous"
    RemoveConditionGreater.savingThrow = "Fortitude negates (harmless)"
    RemoveConditionGreater.spellResistance = "Yes (harmless)"
    RemoveConditionGreater.content = "This spell functions as lesser remove condition, except you remove all of the following conditions affecting the target: cowering, dazed, frightened, nauseated, panicked, paralyzed, shaken, sickened, staggered, and stunned."

    let ResistantAegis = CompendiumSpell(context: context)
    ResistantAegis.name = "Resistant Aegis"
    ResistantAegis.type = "MT"
    ResistantAegis.level = 5
    ResistantAegis.school = "Abjuration"
    ResistantAegis.castingTime = "1 standard action"
    ResistantAegis.range = "30 ft."
    ResistantAegis.targets =  "up to 10 creatures wearing armor within range"
    ResistantAegis.duration = "1 minute/level"
    ResistantAegis.savingThrow = "Fortitude negates (harmless)"
    ResistantAegis.spellResistance = "Yes (harmless)"
    ResistantAegis.content = "This spell functions as lesser resistant armor, except as indicated above, and the wearers and their gear gain DR 5/— or energy resistance 5 that protects against all five energy types."

    let Retrocognition = CompendiumSpell(context: context)
    Retrocognition.name = "Retrocognition"
    Retrocognition.type = "M"
    Retrocognition.level = 5
    Retrocognition.school = "Divination"
    Retrocognition.castingTime = "1 minute"
    Retrocognition.range = "personal"
    Retrocognition.duration = "concentration, up to 1 minute/level"
    Retrocognition.savingThrow = "none"
    Retrocognition.spellResistance = "Yes"
    Retrocognition.content = "This spell allows you to gain psychic impressions from past events that occurred in your current location. Retrocognition reveals psychic impressions from events that occurred over the course of the last hour throughout the first minute of the spell’s duration, followed by impressions from the next hour back throughout the next minute you concentrate, and so on. If a psychically traumatic or turbulent event happened during that period, you must succeed at a Will saving throw (DC = 15, 20, or 25, depending on the severity of the traumatic or turbulent event) or lose your concentration on the spell. If you fail this saving throw, the spell ends.\n\nAt mystic level 16th and higher, you can choose to collect impressions from over the course of a longer interval of time than an hour, beginning at 1 week per minute of concentration (as listed on the table below). The amount of detail you receive diminishes, so this eventually makes it harder to distinguish impressions left by anything but the most major events. In most circumstances, you can’t glean information about what occurred during the lost or hidden times with this spell.\n\nMystic Level\tPeriod\n16th-17th\t1 week per minute\n18th-19th\t1 year per minute\n20th\t\t1 decade per minute"

    let SynapticPulseGreater = CompendiumSpell(context: context)
    SynapticPulseGreater.name = "Synaptic Pulse, Greater"
    SynapticPulseGreater.type = "M"
    SynapticPulseGreater.level = 5
    SynapticPulseGreater.school = "Enchantment [compulsion, mind-affecting]"
    SynapticPulseGreater.castingTime = "1 standard action"
    SynapticPulseGreater.range = "20 ft."
    SynapticPulseGreater.area = "20-ft.-radius spread centered on you"
    SynapticPulseGreater.duration = "1d4 rounds"
    SynapticPulseGreater.savingThrow = "Will partial"
    SynapticPulseGreater.spellResistance = "Yes"
    SynapticPulseGreater.content = "You stun all creatures in range for 1d4 rounds. With a successful Will saving throw, a creature is instead sickened for 1 round."

    let Telepathy = CompendiumSpell(context: context)
    Telepathy.name = "Telepathy"
    Telepathy.type = "M"
    Telepathy.level = 5
    Telepathy.school = "Divination [mind-affecting]"
    Telepathy.castingTime = "1 standard action"
    Telepathy.range = "personal"
    Telepathy.duration = "10 minute/level"
    Telepathy.content = "You can mentally communicate with any other creature within 100 feet that has a language. It is possible to address multiple creatures at once telepathically, although maintaining a telepathic conversation with more than one creature at a time is just as difficult as speaking and listening to multiple people simultaneously. You can’t use telepathy to locate creatures to communicate with them, but once you’ve established telepathic communication, you don’t require line of effect to maintain it."

    let WavesofFatigue = CompendiumSpell(context: context)
    WavesofFatigue.name = "Waves of Fatigue"
    WavesofFatigue.type = "M"
    WavesofFatigue.level = 5
    WavesofFatigue.school = "Necromancy"
    WavesofFatigue.castingTime = "1 standard action"
    WavesofFatigue.range = "30 ft."
    WavesofFatigue.area = "cone-shaped burst"
    WavesofFatigue.duration = "instantaneous"
    WavesofFatigue.savingThrow = "none"
    WavesofFatigue.spellResistance = "Yes"
    WavesofFatigue.content = "Waves of negative energy render all living creatures in the spell’s area fatigued. This spell has no effect on a creature that is already fatigued."

    let ControlGravity = CompendiumSpell(context: context)
    ControlGravity.name = "Control Gravity"
    ControlGravity.type = "MT"
    ControlGravity.level = 6
    ControlGravity.school = "Transmutation"
    ControlGravity.castingTime = "1 standard action"
    ControlGravity.range = "medium (100 ft. + 10 ft./level)"
    ControlGravity.area = "up to one 10-ft. cube/2 levels (S)"
    ControlGravity.duration = "1 round/level (D)"
    ControlGravity.savingThrow = "Fortitude negates"
    ControlGravity.spellResistance = "No"
    ControlGravity.content = "You can control gravity in an area, causing it to reverse, become zero-g, or become extremely strong. A creature or object within the area that succeeds at its saving throw is unaffected (though if it stays in the area, it must succeed at a new save each round or become affected), but it might still suffer secondary effects (such as an object flying up from reversed gravity, or an object falling upon it when the spell ends). You choose how to have this spell affect gravity when you cast it, and you cannot change it without recasting the spell. If two control gravity spells affect the same area, they negate each other in the area of overlap.\n\nIf you reverse gravity in an area, you cause unattached objects and creatures in the area to fall upward and reach the top of the affected area in 1 round. If a solid object (such as a ceiling) is encountered in this fall, falling objects and creatures strike it in the same manner as they would during a normal downward fall. If an object or creature reaches the top of the spell’s area without striking anything, it remains there, oscillating slightly, until the spell ends. At the end of the spell’s duration, affected objects and creatures fall downward. Creatures who can fly or levitate can keep themselves from falling in either direction.\n\nIf you increase gravity in the area, creatures and objects weigh twice as much as normal, move at half speed, can jump only half as far as normal, and can lift and carry only half as much as normal. Any flying target has its maneuverability worsened by one step (from average to clumsy, for example; minimum clumsy) and plummets to the ground unless it succeeds at a DC 25 Acrobatics check to fly to remain in the air.\n\nAn area of zero-g works like the zero-g environment. You can also use this spell to make areas of zero-g, heavy gravity, or light gravity act as normal gravity for the duration."

    let ControlUndead = CompendiumSpell(context: context)
    ControlUndead.name = "Control Undead"
    ControlUndead.type = "MT"
    ControlUndead.level = 6
    ControlUndead.school = "Necromancy"
    ControlUndead.castingTime = "1 standard action"
    ControlUndead.range = "close (25 ft. + 5 ft./2 levels)"
    ControlUndead.targets =  "undead creatures with individual CRs no greater than your level + 1 and a total CR no greater than twice your level, no two of which can be more than 30 ft. apart"
    ControlUndead.duration = "1 minute/level"
    ControlUndead.savingThrow = "Will negates"
    ControlUndead.spellResistance = "Yes"
    ControlUndead.content = "This spell enables you to control undead creatures for a short period of time. You command them by voice and they understand you, no matter what language you speak. No matter what, the controlled undead do not attack you. At the end of the spell, the targets revert to their normal behavior.\n\nIf any of the undead are under the control of a hostile creature, that controlling creature can attempt a Will saving throw (DC = the spell’s DC) to negate this spell’s effect if the creature failed its initial saving throw. Each undead under the control of another creature grants its controlling creature a separate saving throw to negate the effect for that undead.\n\nIntelligent undead creatures remember that you controlled them, and they may seek revenge after the spell’s duration ends."

    let EnshriningRefuge = CompendiumSpell(context: context)
    EnshriningRefuge.name = "Enshrining Refuge"
    EnshriningRefuge.type = "M"
    EnshriningRefuge.level = 6
    EnshriningRefuge.school = "Abjuration"
    EnshriningRefuge.castingTime = "1 standard action"
    EnshriningRefuge.range = "close (25 ft. + 5 ft./2 levels)"
    EnshriningRefuge.area = "all creatures in 40-ft. radius burst"
    EnshriningRefuge.duration = "1 round/level"
    EnshriningRefuge.savingThrow = "Will negates, see text"
    EnshriningRefuge.spellResistance = "No"
    EnshriningRefuge.content = "All creatures within a 40-foot radius of the spell’s point of origin are protected from violence. Any opponent attempting to directly attack a warded creature, even with a targeted spell, must attempt a Will saving throw. If the opponent succeeds, it can attack that creature normally, though it takes a –2 penalty to attacks against that creature for the duration of the spell. On a failed save, the opponent can’t follow through with the attack, loses that action, and can’t directly attack the warded creature for the duration of the spell. Those not attempting to attack a warded creature remain unaffected.\n\nThis spell doesn’t prevent warded creatures from being affected by an attack with an area of effect, though a warded creature receives a +2 bonus to saving throws against such attacks.\n\nEach warded creature can breathe normally, no matter the surrounding atmosphere, and it suffers no harm from being in a hot or cold environment. A warded creature can’t attack without breaking the spell for itself, but it can use harmless spells and abilities that don’t require attack rolls, and it can act otherwise."

    let EtherealJaunt = CompendiumSpell(context: context)
    EtherealJaunt.name = "Ethereal Jaunt"
    EtherealJaunt.type = "MT"
    EtherealJaunt.level = 6
    EtherealJaunt.school = "Transmutation"
    EtherealJaunt.castingTime = "1 standard action"
    EtherealJaunt.range = "personal"
    EtherealJaunt.duration = "1 round/level (D)"
    EtherealJaunt.content = "You become ethereal, along with your equipment. For the duration of the spell, you are on the Ethereal Plane, which overlaps the Material Plane. When the spell expires, you return to material existence.\n\nAn ethereal creature is invisible, insubstantial, and capable of moving in any direction, even up or down, albeit at half normal speed. As an insubstantial creature, you can move through solid objects, including living creatures. An ethereal creature can see and hear events and creatures on the Material Plane, but everything looks gray and ephemeral. Sight and hearing on the Material Plane are limited to 60 feet and many kinds of senses (such as blindsense and blindsight) don’t work across the planar boundary.\n\nForce effects and abjurations affect an ethereal creature normally, but force effects originating on the Ethereal Plane don’t affect targets on the Material Plane. An ethereal creature can’t attack material creatures, and spells you cast while ethereal affect only other ethereal things. Certain material creatures and objects have attacks or effects that work on the Ethereal Plane. Treat other ethereal creatures and ethereal objects as you would if you were both on the Material Plane.\n\nIf you end the spell and become material while inside a material object (such as a solid wall), you are shunted to the nearest open space and take 1d6 damage per 5 feet that you so travel."

    let FleshtoStone = CompendiumSpell(context: context)
    FleshtoStone.name = "Flesh to Stone"
    FleshtoStone.type = "M"
    FleshtoStone.level = 6
    FleshtoStone.school = "Transmutation"
    FleshtoStone.castingTime = "1 standard action"
    FleshtoStone.range = "close (25 ft. + 5 ft./2 levels)"
    FleshtoStone.targets =  "one creature"
    FleshtoStone.duration = "instantaneous"
    FleshtoStone.savingThrow = "Fortitude negates"
    FleshtoStone.spellResistance = "Yes"
    FleshtoStone.content = "You fire a dull gray ray at your target, making a ranged attack against your target’s EAC, but you can add your key ability score bonus to this attack instead of your Dexterity modifier if it is higher. If you hit and the target fails its Fortitude save, the target, along with all its carried gear, turns into a mindless, inert statue. If the statue resulting from this spell is broken or damaged, the target (if ever returned to its original state)\n\nhas similar damage or deformities. The creature is not dead, but it gives off no sign of life even upon close inspection. Only creatures made of flesh are affected by this spell.\n\nIf this spell is cast upon a stone creature that was once flesh, it reverses the petrification."

    let GravitationalSingularity = CompendiumSpell(context: context)
    GravitationalSingularity.name = "Gravitational Singularity"
    GravitationalSingularity.type = "M"
    GravitationalSingularity.level = 6
    GravitationalSingularity.school = "Conjuration [creation]"
    GravitationalSingularity.castingTime = "1 round"
    GravitationalSingularity.range = "medium (100 ft. + 10 ft./level)"
    GravitationalSingularity.effect = "5-ft.-cube gravitational singularity; see text"
    GravitationalSingularity.duration = "1 round/level (D)"
    GravitationalSingularity.savingThrow = "none"
    GravitationalSingularity.spellResistance = "No"
    GravitationalSingularity.content = "You call into being a tiny particle of mass with infinite density. You must conjure the singularity in a square that is unoccupied by any creatures or objects. When you finish casting this spell, the singularity immediately draws all Medium and smaller creatures and unattended objects of no more than light bulk within 30 feet toward it. Each round on your turn, the singularity makes a single special combat maneuver against creatures within 30 feet with an attack bonus equal to 4 + your caster level + your key ability modifier. Compare the result to each creature’s KAC + 8. If the singularity is successful, that creature is moved 5 feet toward the singularity plus 5 additional feet for every 5 by which the result exceeds a target’s KAC + 8. Unattended objects are automatically moved 10 feet toward the singularity each round. If a creature or object is moved into the square that contains the singularity, it is sucked inside it and takes 12d6 damage at the end of its turn each round it remains within that space.\n\nA creature drawn into the singularity can take no actions except a full action to try to escape (it still takes damage during the rounds it attempts to escape). A creature must succeed at either an Athletics check (DC = 15 + 1-1/2 × your mystic level) or a DC 22 Strength check to escape the singularity. The singularity can hold up to four Medium creatures or objects (two Small creatures or objects count as one Medium creature, and so on); if it would pull in additional creatures, those creatures are simply pulled into a square adjacent to the singularity.\n\nA creature within 50 feet of the singularity has its speed reduced by half when it moves away from the singularity. However, it can move at double its normal speed when moving toward the singularity. If a creature moves within 30 feet of the singularity at any point in its movement, it is subject to the combat maneuver described above. A creature that moves neither toward nor away from the singularity moves at its normal speed.\n\nWhen this spell ends, the singularity disappears, and creatures and objects that were sucked into the singularity appear in the space where you conjured it (or as close as possible to that space, if they can’t all fit within it)."

    let InflictPainMass = CompendiumSpell(context: context)
    InflictPainMass.name = "Inflict Pain, Mass"
    InflictPainMass.type = "M"
    InflictPainMass.level = 6
    InflictPainMass.school = "Enchantment [mind-affecting, pain]"
    InflictPainMass.targets =  "up to one creature/level, no two of which can be more than 30 ft. apart"
    InflictPainMass.content = "This spell functions as inflict pain, except as noted above."

    let PlanarBarrier = CompendiumSpell(context: context)
    PlanarBarrier.name = "Planar Barrier"
    PlanarBarrier.type = "MT"
    PlanarBarrier.level = 6
    PlanarBarrier.school = "Abjuration"
    PlanarBarrier.castingTime = "6 rounds"
    PlanarBarrier.range = "medium (100 ft. + 10 ft./level)"
    PlanarBarrier.area = "one 60-ft. cube/level (S)"
    PlanarBarrier.duration = "24 hours"
    PlanarBarrier.savingThrow = "none"
    PlanarBarrier.spellResistance = "Yes"
    PlanarBarrier.content = "Planar barrier seals an area against all planar travel into or within it. This includes all teleportation spells, summoning spells, plane shifting, astral travel, and ethereal travel. Such effects simply fail automatically. Starships cannot enter or emerge from hyperspace travel in an area affected by this spell.\n\nDispel magic does not dispel your planar barrier effect unless the caster level of the creature attempting to dispel it is at least as high as your own. You can’t have multiple overlapping planar barrier effects. If planar barrier effects would overlap, the more recent effect stops at the boundary of the older effect.\n\nA planar barrier can be made permanent with a special ritual, which takes 1 hour and requires materials worth 15,000 credits per 60-foot cube."

    let PlaneShift = CompendiumSpell(context: context)
    PlaneShift.name = "Plane Shift"
    PlaneShift.type = "MT"
    PlaneShift.level = 6
    PlaneShift.school = "Conjuration [teleportation]"
    PlaneShift.castingTime = "1 standard action"
    PlaneShift.range = "touch"
    PlaneShift.targets =  "one creature, or up to eight willing or unconscious creatures"
    PlaneShift.duration = "instantaneous"
    PlaneShift.savingThrow = "Will negates"
    PlaneShift.spellResistance = "Yes"
    PlaneShift.content = "You move yourself or some other creature to another plane of existence or alternate dimension. If several willing or unconscious creatures are linked by hand in a circle, as many as eight can be affected by a single casting of plane shift. Arriving at a precise location on the intended plane is nigh impossible. From the Material Plane, you can reach any other plane (except for hyperspace), though you appear 5 to 500 miles (5d%) from the last place one of the targets (your choice) was located last time that target traveled to that plane. If it’s the first time traveling to a particular plane for all targets, you appear at a random location on the plane, though you can use other means of transit, such as interplanetary teleport, to travel on the new plane. Mystics must have an object attuned to a specific plane or native to that plane in order to use plane shift to travel to a plane. A technomancer requires a planar navigational program for a specific plane in order to travel to that plane with plane shift. Special rituals, jealously hoarded by powerful technomancers and mystics, can allow you to travel to specific locations on the chosen plane, or even to unknown worlds."

    let PsychicSurgery = CompendiumSpell(context: context)
    PsychicSurgery.name = "Psychic Surgery"
    PsychicSurgery.type = "M"
    PsychicSurgery.level = 6
    PsychicSurgery.school = "Enchantment [mind-affecting]"
    PsychicSurgery.castingTime = "10 minutes"
    PsychicSurgery.range = "touch"
    PsychicSurgery.targets =  "one willing or unconscious, living creature"
    PsychicSurgery.duration = "instantaneous"
    PsychicSurgery.savingThrow = "none"
    PsychicSurgery.spellResistance = "No"
    PsychicSurgery.content = "Psychic surgery heals the target of all Intelligence, Wisdom, and Charisma damage, and it restores all points permanently drained from the target’s Intelligence, Wisdom, and Charisma scores. It also eliminates all ongoing confusion, fear, and insanity effects. Psychic surgery also removes any mental afflictions that could be removed with dispel magi c , as well as mental diseases. Psychic surgery removes all effects magically altering the target’s memory, even instantaneous effects, and it can restore a memory to perfect clarity (even if the memory loss is due to the mundane passage of time)."

    let ReanimateM = CompendiumSpell(context: context)
    ReanimateM.name = "Reanimate"
    ReanimateM.type = "M"
    ReanimateM.level = 5
    ReanimateM.school = "Necromancy"
    ReanimateM.castingTime = "1 minute"
    ReanimateM.range = "touch"
    ReanimateM.targets =  "one dead construct or undead creature"
    ReanimateM.duration = "instantaneous"
    ReanimateM.savingThrow = "none"
    ReanimateM.spellResistance = "Yes"
    ReanimateM.content = "You can reanimate a dead construct or destroyed undead creature that has been dead or destroyed for no longer than 1 day per caster level. If the target had a soul, that soul must be free and willing to return; a target that wants to be reanimated receives no saving throw against this spell, but if the target’s soul is not willing to return, the spell fails. Casting this spell requires you to create a complex representation of the target deceased creature worth at least 7,500 credits to serve as a blueprint regarding its reanimation. This object is consumed when you cast the spell. If the target is an undead whose existence is tied to an object (such as a necrovite and its electroencephalon), it cannot be brought back without a new version of that object (with at least the same price as the original).\n\nA reanimated creature returns with no Resolve Points, no Stamina Points, and no spell slots (until it rests to recover them normally). It has 5 Hit Points. Any ability scores reduced to 0 are raised to 1 (though any ability score it normally does not have is unchanged). Diseases, poisons, curses, and computer programming or viruses that affected the target at the time of its destruction remain in effect after reanimation. The spell closes wounds and repairs lethal damage of most kinds, but if the body of the creature to be reanimated isn’t whole, any missing parts are still missing when the creature is brought back to life.\n\nThis spell can reanimate constructs and undead but cannot raise outsiders or restore life to other creatures. Reanimated undead return to unlife as the same type of undead that they were prior to their destruction."

    let ReanimateT = CompendiumSpell(context: context)
    ReanimateT.name = "Reanimate"
    ReanimateT.type = "T"
    ReanimateT.level = 6
    ReanimateT.school = "Necromancy"
    ReanimateT.castingTime = "1 minute"
    ReanimateT.range = "touch"
    ReanimateT.targets =  "one dead construct or undead creature"
    ReanimateT.duration = "instantaneous"
    ReanimateT.savingThrow = "none"
    ReanimateT.spellResistance = "Yes"
    ReanimateT.content = "You can reanimate a dead construct or destroyed undead creature that has been dead or destroyed for no longer than 1 day per caster level. If the target had a soul, that soul must be free and willing to return; a target that wants to be reanimated receives no saving throw against this spell, but if the target’s soul is not willing to return, the spell fails. Casting this spell requires you to create a complex representation of the target deceased creature worth at least 7,500 credits to serve as a blueprint regarding its reanimation. This object is consumed when you cast the spell. If the target is an undead whose existence is tied to an object (such as a necrovite and its electroencephalon), it cannot be brought back without a new version of that object (with at least the same price as the original).\n\nA reanimated creature returns with no Resolve Points, no Stamina Points, and no spell slots (until it rests to recover them normally). It has 5 Hit Points. Any ability scores reduced to 0 are raised to 1 (though any ability score it normally does not have is unchanged). Diseases, poisons, curses, and computer programming or viruses that affected the target at the time of its destruction remain in effect after reanimation. The spell closes wounds and repairs lethal damage of most kinds, but if the body of the creature to be reanimated isn’t whole, any missing parts are still missing when the creature is brought back to life.\n\nThis spell can reanimate constructs and undead but cannot raise outsiders or restore life to other creatures. Reanimated undead return to unlife as the same type of undead that they were prior to their destruction."

    let Regenerate = CompendiumSpell(context: context)
    Regenerate.name = "Regenerate"
    Regenerate.type = "M"
    Regenerate.level = 6
    Regenerate.school = "Conjuration [healing]"
    Regenerate.castingTime = "3 rounds"
    Regenerate.range = "touch"
    Regenerate.targets =  "one living creature"
    Regenerate.duration = "instantaneous"
    Regenerate.savingThrow = "Fortitude negates (harmless)"
    Regenerate.spellResistance = "Yes (harmless)"
    Regenerate.content = "The target’s severed body members (fingers, toes, hands, feet, arms, legs, tails, or even heads of multiheaded creatures), broken bones, and ruined organs (including eyes) grow back. After the spell is cast, the physical regeneration is complete in 1 round if the severed members are present and touching the creature. It takes 2d10 rounds otherwise.\n\nRegenerate also restores 12d8 Hit Points, rids the target of exhaustion and fatigue, and eliminates all nonlethal damage the target has taken. It has no effect on nonliving creatures (including undead)."

    let ResistantArmorGreater = CompendiumSpell(context: context)
    ResistantArmorGreater.name = "Resistant Armor, Greater"
    ResistantArmorGreater.type = "MT"
    ResistantArmorGreater.level = 6
    ResistantArmorGreater.school = "Abjuration"
    ResistantArmorGreater.content = "This spell functions as lesser resistant armor, but the target and her gear gain DR 15/— or energy resistance 15 that protects against four energy types."
    
    let ShadowWalk = CompendiumSpell(context: context)
    ShadowWalk.name = "Shadow Walk"
    ShadowWalk.type = "MT"
    ShadowWalk.level = 6
    ShadowWalk.school = "Illusion [shadow]"
    ShadowWalk.castingTime = "1 standard action"
    ShadowWalk.range = "touch"
    ShadowWalk.targets =  "up to one Medium creature or vehicle/level"
    ShadowWalk.duration = "1 hour/level (D)"
    ShadowWalk.savingThrow = "Will negates (object);"
    ShadowWalk.spellResistance = "Yes (object)"
    ShadowWalk.content = "To use shadow walk, you must be in an area of dim light. You and any creature or vehicle you touch are then transported along a coiling path of shadowstuff to the edge of the Material Plane where it borders the Plane of Shadow. The effect is largely illusory, but the path is quasi-real.\n\nAll targets affected must be in direct contact with one another. A Large target counts as two Medium targets, a Huge target counts as four Medium targets, and so forth. Creatures you transport this way can opt to follow you, wander off through the plane, or stumble back into the Material Plane (50% chance for either of the latter results if the creatures are lost or abandoned by you). Creatures unwilling to accompany you into the Plane of Shadow can attempt a Will saving throw to negate the effect.\n\nIn the region of shadow, you move at a rate of 200 miles per hour. Because of the blurring of reality between the Plane of Shadow and the Material Plane, you can’t make out details of the terrain or areas you pass over during transit nor can you predict perfectly where your travel will end. It’s impossible to judge distances accurately, making the spell virtually useless for scouting or spying. Furthermore, when the spell effect ends, you are shunted 1d10 × 100 feet in a random horizontal direction from your desired endpoint. If this would place you within a solid object, you (and any creatures with you) are shunted to the nearest empty space available, but the strain of this activity renders each creature fatigued (no saving throw).\n\nShadow walk can also be used to travel to other planes that border on the Plane of Shadow (except for hyperspace), but this usage requires you to travel across the Plane of Shadow to arrive at a border with another plane of reality, which takes 1d4 hours."

    let SnuffLife = CompendiumSpell(context: context)
    SnuffLife.name = "Snuff Life"
    SnuffLife.type = "M"
    SnuffLife.level = 6
    SnuffLife.school = "Necromancy [death]"
    SnuffLife.castingTime = "1 standard action"
    SnuffLife.range = "medium (100 ft. + 10 ft./level)"
    SnuffLife.targets =  "up to one creature/2 levels, no two of which can be more than 30 ft. apart"
    SnuffLife.duration = "instantaneous"
    SnuffLife.savingThrow = "Fortitude partial, see text;"
    SnuffLife.spellResistance = "Yes"
    SnuffLife.content = "You twist the essence of life that flows through your targets, snuffing the spark out of weaker creatures and debilitating or disabling others. This spell’s effects depend on each target’s CR.\n\nA creature of CR 5 or lower is slain by this spell. If it succeeds at a Fortitude saving throw, it is instead reduced to 1 Hit Point.\n\nA creature of CR 6–10 takes 10d20 damage and is stunned for 3 rounds. If it succeeds at a Fortitude saving throw, it takes half damage and negates the stunned effect.\n\nA creature of CR 11–14 takes 8d20 damage and is staggered for 3 rounds. If it succeeds at a Fortitude saving throw, it takes half damage and negates the staggered effect.\n\nA creature of CR 15 or higher takes 6d20 damage. If it succeeds at a Fortitude saving throw, it takes half damage.\n\nRegardless of whether the target succeeds at its saving throw, it still might die from the damage this spell deals, though in this case the spell is not a death effect."

    let SubjectiveReality = CompendiumSpell(context: context)
    SubjectiveReality.name = "Subjective Reality"
    SubjectiveReality.type = "M"
    SubjectiveReality.level = 6
    SubjectiveReality.school = "Illusion [mind-affecting]"
    SubjectiveReality.castingTime = "1 standard action"
    SubjectiveReality.range = "personal"
    SubjectiveReality.duration = "1 round/level (D)"
    SubjectiveReality.content = "Choose one object or creature you can see within long range (400 feet + 40 feet/level). You alter your perceptions to become convinced the target is an illusion. For you, the target becomes transparent and does not create sound or smell. Until the spell ends, you can move through the target unimpeded and the target can move through you. The target’s nonmagical attacks can’t harm you, and the target’s magical attacks deal half damage to you. The target’s non-damaging magical abilities have only a 50% chance of affecting you, and you are immune to all its sonic, language-dependent, and scent-based attacks. However, your attacks deal no damage to the target, and your magical abilities don’t affect the target at all. You or the target can affect each other normally through intermediaries. For instance, while the target would be immune to the direct effects of your charm monster spell, if you charmed another creature that then attacked the target creature, the target would not be immune to the damage from that attack."

    let SuggestionMass = CompendiumSpell(context: context)
    SuggestionMass.name = "Suggestion, Mass"
    SuggestionMass.type = "M"
    SuggestionMass.level = 6
    SuggestionMass.school = "Enchantment [compulsion, language-dependent, mind-affecting]"
    SuggestionMass.range = "medium (100 ft. + 10 ft./level)"
    SuggestionMass.targets =  "up to one creature/level, no two of which can be more than 30 ft. apart"
    SuggestionMass.content = "This spell functions as suggestion, except it can affect more creatures. All of the affected creatures are subject to the same suggestion."

    let TelepathicJaunt = CompendiumSpell(context: context)
    TelepathicJaunt.name = "Telepathic Jaunt"
    TelepathicJaunt.type = "M"
    TelepathicJaunt.level = 6
    TelepathicJaunt.school = "Conjuration [teleportation]"
    TelepathicJaunt.castingTime = "1 standard action"
    TelepathicJaunt.range = "touch"
    TelepathicJaunt.targets =  "you and touched objects and other touched willing or unconscious creatures"
    TelepathicJaunt.duration = "instantaneous"
    TelepathicJaunt.savingThrow = "none, Will negates (object)"
    TelepathicJaunt.spellResistance = "No, Yes (object)"
    TelepathicJaunt.content = "Telepathic jaunt thrums along the mental connection you have with a creature with which you currently have an active telepathic bond via your mystic telepathic bond class feature (but not via the telepathic bond spell), and it instantly teleports you to that creature. This spell teleports you to a random, unoccupied square adjacent to the creature with which you have the telepathic bond. If no such square is available, you teleport to the closest eligible square; if the nearest eligible square is more than 50 feet away from the creature, this spell fails.\n\nYou can be transported any distance within a plane, even across the galaxy, but you can’t travel between planes, and you can’t transport yourself to a creature if one of you is traveling via hyperspace travel and the other isn’t. In addition to yourself, you can transport any objects you carry as long as their weight doesn’t exceed your maximum load. You can also bring up to six additional willing or unconscious Medium or smaller creatures (each carrying gear or objects up to its maximum load) or their equivalent. A Large creature counts as two Medium creatures, and a Huge creature counts as two Large creatures. All creatures to be transported must be in contact with one another, and at least one of those creatures must be in contact with you. Exceeding this limit causes the spell to fail. There must be sufficient space near the creature with which you have the telepathic bond for all the creatures you are teleporting, or this spell fails."

    let TrueSeeing = CompendiumSpell(context: context)
    TrueSeeing.name = "True Seeing"
    TrueSeeing.type = "MT"
    TrueSeeing.level = 6
    TrueSeeing.school = "Divination"
    TrueSeeing.castingTime = "1 standard action"
    TrueSeeing.range = "touch"
    TrueSeeing.targets =  "one creature"
    TrueSeeing.duration = "1 minute/level"
    TrueSeeing.savingThrow = "Will negates (harmless)"
    TrueSeeing.spellResistance = "Yes (harmless)"
    TrueSeeing.content = "You confer upon the target the ability to see all things within 120 feet as they actually are. The target sees through normal and magical darkness, notices secret doors hidden by magic, sees the exact locations of creatures or objects that are invisible or displaced, sees through illusions, and sees the true form of changed or transmuted things. Further, the target can Focus its vision to see into the Ethereal Plane (but not into extradimensional spaces).\n\nTrue seeing, however, does not penetrate solid objects. It in no way confers X-ray vision or its equivalent. It does not negate concealment, including that caused by fog and the like. True seeing does not help the viewer see through mundane disguises, spot creatures who are simply hiding, or notice secret doors hidden by mundane means."

    let Vision = CompendiumSpell(context: context)
    Vision.name = "Vision"
    Vision.type = "M"
    Vision.level = 6
    Vision.school = "Divination"
    Vision.castingTime = "1 standard action"
    Vision.range = "personal"
    Vision.duration = "see text"
    Vision.savingThrow = "none"
    Vision.spellResistance = "Yes"
    Vision.content = "You pose a question about some person, place, or object while casting this spell. If the person or object is at hand or if you are in the place in question and you succeed at a caster level check (1d20 + your caster level, DC 20), you receive a vision about that person, place, or object. The information gained includes everything available about the target that could be discovered by spending weeks in dedicated research with excellent-quality but standard reference works.\n\nIf the person or object is not at hand or you are not in the place and you know only detailed information about the person, place, or object, the DC of the caster level check is 25 and the information gained is incomplete (though it often provides enough information to help you find the person, place, or thing, thus allowing a better vision result next time). If you know only rumors, the DC is 30 and the information gained is vague (though it often directs you to more detailed information, thus allowing a better vision result next time). In most circumstances, you can’t glean information about what occurred during lost or hidden times with this spell.\n\nCasting this spell requires access to a computer or similar device, which displays the information gained. Additionally, casting this spell places considerable strain on you, requiring you to spend 1 Resolve Point."

    
    
    
    
    
    
    
    
    
    
    
    
    
    
}


//Armor  ################################################################################################################

func loadArmor() {
    
    let EstexSuitI = CompendiumArmor(context: context)
    EstexSuitI.name = "Estex Suit I"
    EstexSuitI.level = 1
    EstexSuitI.price = 410
    EstexSuitI.type = "Light"
    let EstexSuitIEAC = Bonus(context: context)
    EstexSuitIEAC.type = "EAC"
    EstexSuitIEAC.bonus = 0
    EstexSuitI.addToArmorBonus(EstexSuitIEAC)
    let EstexSuitIKAC = Bonus(context: context)
    EstexSuitIKAC.type = "KAC"
    EstexSuitIKAC.bonus = 1
    EstexSuitI.addToArmorBonus(EstexSuitIKAC)
    EstexSuitI.maxDexBonus = 5
    EstexSuitI.checkPenalty = -1
    EstexSuitI.upgradeSlots = 2
    EstexSuitI.bulk = 1.0
    EstexSuitI.content = "Estex is a thick, durable fabric most often used to make flight suits and environmental suits. Estex suits cover the wearer from the neck down and can be modified with armor upgrades as needed. Higher-quality estex suits grant a better level of protection and allow for more upgrades, though they are often bulkier than comparable suits of light armor."
    
    let EstexSuitII = CompendiumArmor(context: context)
    EstexSuitII.name = "Estex Suit II"
    EstexSuitII.level = 5
    EstexSuitII.price = 2700
    EstexSuitII.type = "Light"
    let EstexSuitIIEAC = Bonus(context: context)
    EstexSuitIIEAC.type = "EAC"
    EstexSuitIIEAC.bonus = 4
    EstexSuitII.addToArmorBonus(EstexSuitIIEAC)
    let EstexSuitIIKAC = Bonus(context: context)
    EstexSuitIIKAC.type = "KAC"
    EstexSuitIIKAC.bonus = 5
    EstexSuitII.addToArmorBonus(EstexSuitIIKAC)
    EstexSuitII.maxDexBonus = 5
    EstexSuitII.checkPenalty = -1
    EstexSuitII.upgradeSlots = 3
    EstexSuitII.bulk = 1.0
    EstexSuitII.content = "Estex is a thick, durable fabric most often used to make flight suits and environmental suits. Estex suits cover the wearer from the neck down and can be modified with armor upgrades as needed. Higher-quality estex suits grant a better level of protection and allow for more upgrades, though they are often bulkier than comparable suits of light armor."
    
    let EstexSuitIII = CompendiumArmor(context: context)
    EstexSuitIII.name = "Estex Suit III"
    EstexSuitIII.level = 7
    EstexSuitIII.price = 5500
    EstexSuitIII.type = "Light"
    let EstexSuitIIIEAC = Bonus(context: context)
    EstexSuitIIIEAC.type = "EAC"
    EstexSuitIIIEAC.bonus = 7
    EstexSuitIII.addToArmorBonus(EstexSuitIIIEAC)
    let EstexSuitIIIKAC = Bonus(context: context)
    EstexSuitIIIKAC.type = "KAC"
    EstexSuitIIIKAC.bonus = 8
    EstexSuitIII.addToArmorBonus(EstexSuitIIIKAC)
    EstexSuitIII.maxDexBonus = 5
    EstexSuitIII.checkPenalty = -1
    EstexSuitIII.upgradeSlots = 4
    EstexSuitIII.bulk = 1.0
    EstexSuitIII.content = "Estex is a thick, durable fabric most often used to make flight suits and environmental suits. Estex suits cover the wearer from the neck down and can be modified with armor upgrades as needed. Higher-quality estex suits grant a better level of protection and allow for more upgrades, though they are often bulkier than comparable suits of light armor."
    
    let EstexSuitIV = CompendiumArmor(context: context)
    EstexSuitIV.name = "Estex Suit IV"
    EstexSuitIV.level = 13
    EstexSuitIV.price = 49250
    EstexSuitIV.type = "Light"
    let EstexSuitIVEAC = Bonus(context: context)
    EstexSuitIVEAC.type = "EAC"
    EstexSuitIVEAC.bonus = 15
    EstexSuitIV.addToArmorBonus(EstexSuitIVEAC)
    let EstexSuitIVKAC = Bonus(context: context)
    EstexSuitIVKAC.type = "KAC"
    EstexSuitIVKAC.bonus = 16
    EstexSuitIV.addToArmorBonus(EstexSuitIVKAC)
    EstexSuitIV.maxDexBonus = 6
    EstexSuitIV.checkPenalty = -1
    EstexSuitIV.upgradeSlots = 6
    EstexSuitIV.bulk = 1.0
    EstexSuitIV.content = "Estex is a thick, durable fabric most often used to make flight suits and environmental suits. Estex suits cover the wearer from the neck down and can be modified with armor upgrades as needed. Higher-quality estex suits grant a better level of protection and allow for more upgrades, though they are often bulkier than comparable suits of light armor."

    let Secondskin = CompendiumArmor(context: context)
    Secondskin.name = "Second skin"
    Secondskin.level = 1
    Secondskin.price = 250
    Secondskin.type = "Light"
    let SecondskinEAC = Bonus(context: context)
    SecondskinEAC.type = "EAC"
    SecondskinEAC.bonus = 1
    Secondskin.addToArmorBonus(SecondskinEAC)
    let SecondskinKAC = Bonus(context: context)
    SecondskinKAC.type = "KAC"
    SecondskinKAC.bonus = 2
    Secondskin.addToArmorBonus(SecondskinKAC)
    Secondskin.maxDexBonus = 5
    Secondskin.checkPenalty = 0
    Secondskin.upgradeSlots = 1
    Secondskin.bulk = 0.1
    Secondskin.content = "This flexible body stocking fits tightly against its wearer and can be worn under ordinary clothes. If a second skin matches the wearer’s skin tone, this type of light armor can be difficult to detect. A second skin can also accept upgrades, making it popular for celebrities, diplomats, and other individuals who want protection without appearing to wear armor."

    let Stationwearflightsuit = CompendiumArmor(context: context)
    Stationwearflightsuit.name = "Stationwear, flight suit"
    Stationwearflightsuit.level = 1
    Stationwearflightsuit.price = 95
    Stationwearflightsuit.type = "Light"
    let StationwearflightsuitEAC = Bonus(context: context)
    StationwearflightsuitEAC.type = "EAC"
    StationwearflightsuitEAC.bonus = 0
    Stationwearflightsuit.addToArmorBonus(StationwearflightsuitEAC)
    let StationwearflightsuitKAC = Bonus(context: context)
    StationwearflightsuitKAC.type = "KAC"
    StationwearflightsuitKAC.bonus = 1
    Stationwearflightsuit.addToArmorBonus(StationwearflightsuitKAC)
    Stationwearflightsuit.maxDexBonus = 6
    Stationwearflightsuit.checkPenalty = 0
    Stationwearflightsuit.upgradeSlots = 0
    Stationwearflightsuit.bulk = 0.1
    Stationwearflightsuit.content = "Many types of reinforced clothing afford protection without sacrificing comfort or fashion. The prevalence of this kind of light armor on Central Station has led to the colloquial term “stationwear.” Stationwear ranges in style from casual wear to business suits and more formal garb. The usual environmental protections of armor are concealed in the design of these outfits. The grades of armor—business, casual, elite, and flight suit—refer to the quality of the garments, not the style."

    let Stationwearcasual = CompendiumArmor(context: context)
    Stationwearcasual.name = "Stationwear, casual"
    Stationwearcasual.level = 3
    Stationwearcasual.price = 1300
    Stationwearcasual.type = "Light"
    let StationwearcasualEAC = Bonus(context: context)
    StationwearcasualEAC.type = "EAC"
    StationwearcasualEAC.bonus = 1
    Stationwearcasual.addToArmorBonus(StationwearcasualEAC)
    let StationwearcasualKAC = Bonus(context: context)
    StationwearcasualKAC.type = "KAC"
    StationwearcasualKAC.bonus = 2
    Stationwearcasual.addToArmorBonus(StationwearcasualKAC)
    Stationwearcasual.maxDexBonus = 6
    Stationwearcasual.checkPenalty = 0
    Stationwearcasual.upgradeSlots = 0
    Stationwearcasual.bulk = 0.1
    Stationwearcasual.content = "Many types of reinforced clothing afford protection without sacrificing comfort or fashion. The prevalence of this kind of light armor on Central Station has led to the colloquial term “stationwear.” Stationwear ranges in style from casual wear to business suits and more formal garb. The usual environmental protections of armor are concealed in the design of these outfits. The grades of armor—business, casual, elite, and flight suit—refer to the quality of the garments, not the style."

    let Stationwearbusiness = CompendiumArmor(context: context)
    Stationwearbusiness.name = "Stationwear, business"
    Stationwearbusiness.level = 5
    Stationwearbusiness.price = 2600
    Stationwearbusiness.type = "Light"
    let StationwearbusinessEAC = Bonus(context: context)
    StationwearbusinessEAC.type = "EAC"
    StationwearbusinessEAC.bonus = 2
    Stationwearbusiness.addToArmorBonus(StationwearbusinessEAC)
    let StationwearbusinessKAC = Bonus(context: context)
    StationwearbusinessKAC.type = "KAC"
    StationwearbusinessKAC.bonus = 3
    Stationwearbusiness.addToArmorBonus(StationwearbusinessKAC)
    Stationwearbusiness.maxDexBonus = 6
    Stationwearbusiness.checkPenalty = 0
    Stationwearbusiness.upgradeSlots = 0
    Stationwearbusiness.bulk = 0.1
    Stationwearbusiness.content = "Many types of reinforced clothing afford protection without sacrificing comfort or fashion. The prevalence of this kind of light armor on Central Station has led to the colloquial term “stationwear.” Stationwear ranges in style from casual wear to business suits and more formal garb. The usual environmental protections of armor are concealed in the design of these outfits. The grades of armor—business, casual, elite, and flight suit—refer to the quality of the garments, not the style."

    let Stationwearelite = CompendiumArmor(context: context)
    Stationwearelite.name = "Stationwear, elite"
    Stationwearelite.level = 6
    Stationwearelite.price = 4100
    Stationwearelite.type = "Light"
    let StationweareliteEAC = Bonus(context: context)
    StationweareliteEAC.type = "EAC"
    StationweareliteEAC.bonus = 4
    Stationwearelite.addToArmorBonus(StationweareliteEAC)
    let StationweareliteKAC = Bonus(context: context)
    StationweareliteKAC.type = "KAC"
    StationweareliteKAC.bonus = 5
    Stationwearelite.addToArmorBonus(StationweareliteKAC)
    Stationwearelite.maxDexBonus = 7
    Stationwearelite.checkPenalty = -1
    Stationwearelite.upgradeSlots = 1
    Stationwearelite.bulk = 1.0
    Stationwearelite.content = "Many types of reinforced clothing afford protection without sacrificing comfort or fashion. The prevalence of this kind of light armor on Central Station has led to the colloquial term “stationwear.” Stationwear ranges in style from casual wear to business suits and more formal garb. The usual environmental protections of armor are concealed in the design of these outfits. The grades of armor—business, casual, elite, and flight suit—refer to the quality of the garments, not the style."

    let FreebooterarmorI = CompendiumArmor(context: context)
    FreebooterarmorI.name = "Freebooter armor I"
    FreebooterarmorI.level = 1
    FreebooterarmorI.price = 750
    FreebooterarmorI.type = "Light"
    let FreebooterarmorIEAC = Bonus(context: context)
    FreebooterarmorIEAC.type = "EAC"
    FreebooterarmorIEAC.bonus = 2
    FreebooterarmorI.addToArmorBonus(FreebooterarmorIEAC)
    let FreebooterarmorIKAC = Bonus(context: context)
    FreebooterarmorIKAC.type = "KAC"
    FreebooterarmorIKAC.bonus = 3
    FreebooterarmorI.addToArmorBonus(FreebooterarmorIKAC)
    FreebooterarmorI.maxDexBonus = 4
    FreebooterarmorI.checkPenalty = 0
    FreebooterarmorI.upgradeSlots = 0
    FreebooterarmorI.bulk = 0.1
    FreebooterarmorI.content = """
    Popularized by the Free Captains of the Diaspora, freebooter armor features an armored jacket or breastplate, heavy boots and gloves, numerous straps and hidden weapons, and a helmet. Novice explorers and mercenaries beginning their career sometimes choose freebooter armor for the air of rakish experience this light armor lends its wearer.
    """
    
    let FreebooterarmorII = CompendiumArmor(context: context)
    FreebooterarmorII.name = "Freebooter armor II"
    FreebooterarmorII.level = 6
    FreebooterarmorII.price = 4720
    FreebooterarmorII.type = "Light"
    let FreebooterarmorIIEAC = Bonus(context: context)
    FreebooterarmorIIEAC.type = "EAC"
    FreebooterarmorIIEAC.bonus = 6
    FreebooterarmorII.addToArmorBonus(FreebooterarmorIIEAC)
    let FreebooterarmorIIKAC = Bonus(context: context)
    FreebooterarmorIIKAC.type = "KAC"
    FreebooterarmorIIKAC.bonus = 8
    FreebooterarmorII.addToArmorBonus(FreebooterarmorIIKAC)
    FreebooterarmorII.maxDexBonus = 5
    FreebooterarmorII.checkPenalty = 0
    FreebooterarmorII.upgradeSlots = 1
    FreebooterarmorII.bulk = 0.1
    FreebooterarmorII.content = """
    Popularized by the Free Captains of the Diaspora, freebooter armor features an armored jacket or breastplate, heavy boots and gloves, numerous straps and hidden weapons, and a helmet. Novice explorers and mercenaries beginning their career sometimes choose freebooter armor for the air of rakish experience this light armor lends its wearer.
    """

    let FreebooterarmorIII = CompendiumArmor(context: context)
    FreebooterarmorIII.name = "Freebooter armor III"
    FreebooterarmorIII.level = 10
    FreebooterarmorIII.price = 16900
    FreebooterarmorIII.type = "Light"
    let FreebooterarmorIIIEAC = Bonus(context: context)
    FreebooterarmorIIIEAC.type = "EAC"
    FreebooterarmorIIIEAC.bonus = 12
    FreebooterarmorIII.addToArmorBonus(FreebooterarmorIIIEAC)
    let FreebooterarmorIIIKAC = Bonus(context: context)
    FreebooterarmorIIIKAC.type = "KAC"
    FreebooterarmorIIIKAC.bonus = 13
    FreebooterarmorIII.addToArmorBonus(FreebooterarmorIIIKAC)
    FreebooterarmorIII.maxDexBonus = 6
    FreebooterarmorIII.checkPenalty = 0
    FreebooterarmorIII.upgradeSlots = 3
    FreebooterarmorIII.bulk = 0.1
    FreebooterarmorIII.content = """
    Popularized by the Free Captains of the Diaspora, freebooter armor features an armored jacket or breastplate, heavy boots and gloves, numerous straps and hidden weapons, and a helmet. Novice explorers and mercenaries beginning their career sometimes choose freebooter armor for the air of rakish experience this light armor lends its wearer.
    """

    let FreebooterarmorIV = CompendiumArmor(context: context)
    FreebooterarmorIV.name = "Freebooter armor IV"
    FreebooterarmorIV.level = 14
    FreebooterarmorIV.price = 60600
    FreebooterarmorIV.type = "Light"
    let FreebooterarmorIVEAC = Bonus(context: context)
    FreebooterarmorIVEAC.type = "EAC"
    FreebooterarmorIVEAC.bonus = 17
    FreebooterarmorIV.addToArmorBonus(FreebooterarmorIVEAC)
    let FreebooterarmorIVKAC = Bonus(context: context)
    FreebooterarmorIVKAC.type = "KAC"
    FreebooterarmorIVKAC.bonus = 18
    FreebooterarmorIV.addToArmorBonus(FreebooterarmorIVKAC)
    FreebooterarmorIV.maxDexBonus = 6
    FreebooterarmorIV.checkPenalty = 0
    FreebooterarmorIV.upgradeSlots = 4
    FreebooterarmorIV.bulk = 0.1
    FreebooterarmorIV.content = """
    Popularized by the Free Captains of the Diaspora, freebooter armor features an armored jacket or breastplate, heavy boots and gloves, numerous straps and hidden weapons, and a helmet. Novice explorers and mercenaries beginning their career sometimes choose freebooter armor for the air of rakish experience this light armor lends its wearer.
    """

    let FreebooterarmorV = CompendiumArmor(context: context)
    FreebooterarmorV.name = "Freebooter armor V"
    FreebooterarmorV.level = 18
    FreebooterarmorV.price = 367650
    FreebooterarmorV.type = "Light"
    let FreebooterarmorVEAC = Bonus(context: context)
    FreebooterarmorVEAC.type = "EAC"
    FreebooterarmorVEAC.bonus = 20
    FreebooterarmorV.addToArmorBonus(FreebooterarmorVEAC)
    let FreebooterarmorVKAC = Bonus(context: context)
    FreebooterarmorVKAC.type = "KAC"
    FreebooterarmorVKAC.bonus = 21
    FreebooterarmorV.addToArmorBonus(FreebooterarmorVKAC)
    FreebooterarmorV.maxDexBonus = 8
    FreebooterarmorV.checkPenalty = 0
    FreebooterarmorV.upgradeSlots = 5
    FreebooterarmorV.bulk = 0.1
    FreebooterarmorV.content = """
    Popularized by the Free Captains of the Diaspora, freebooter armor features an armored jacket or breastplate, heavy boots and gloves, numerous straps and hidden weapons, and a helmet. Novice explorers and mercenaries beginning their career sometimes choose freebooter armor for the air of rakish experience this light armor lends its wearer.
    """

    let KasathamicrocordI = CompendiumArmor(context: context)
    KasathamicrocordI.name = "Kasatha microcord I"
    KasathamicrocordI.level = 2
    KasathamicrocordI.price = 460
    KasathamicrocordI.type = "Light"
    let KasathamicrocordIEAC = Bonus(context: context)
    KasathamicrocordIEAC.type = "EAC"
    KasathamicrocordIEAC.bonus = 1
    KasathamicrocordI.addToArmorBonus(KasathamicrocordIEAC)
    let KasathamicrocordIKAC = Bonus(context: context)
    KasathamicrocordIKAC.type = "KAC"
    KasathamicrocordIKAC.bonus = 3
    KasathamicrocordI.addToArmorBonus(KasathamicrocordIKAC)
    KasathamicrocordI.maxDexBonus = 3
    KasathamicrocordI.checkPenalty = -1
    KasathamicrocordI.upgradeSlots = 0
    KasathamicrocordI.bulk = 1.0
    KasathamicrocordI.content = """
    These suits of ribbed protective fabric are slightly less advanced than comparable light armor but still provide good-quality protection at an affordable price. Kasatha-made microcord suits are typically one-piece outfits of dark colors, sometimes with glowing trim, but other manufacturers produce such suits in a variety of colors and styles.
    """

    let KasathamicrocordII = CompendiumArmor(context: context)
    KasathamicrocordII.name = "Kasatha microcord II"
    KasathamicrocordII.level = 6
    KasathamicrocordII.price = 3670
    KasathamicrocordII.type = "Light"
    let KasathamicrocordIIEAC = Bonus(context: context)
    KasathamicrocordIIEAC.type = "EAC"
    KasathamicrocordIIEAC.bonus = 6
    KasathamicrocordII.addToArmorBonus(KasathamicrocordIIEAC)
    let KasathamicrocordIIKAC = Bonus(context: context)
    KasathamicrocordIIKAC.type = "KAC"
    KasathamicrocordIIKAC.bonus = 8
    KasathamicrocordII.addToArmorBonus(KasathamicrocordIIKAC)
    KasathamicrocordII.maxDexBonus = 4
    KasathamicrocordII.checkPenalty = -1
    KasathamicrocordII.upgradeSlots = 1
    KasathamicrocordII.bulk = 1.0
    KasathamicrocordII.content = """
    These suits of ribbed protective fabric are slightly less advanced than comparable light armor but still provide good-quality protection at an affordable price. Kasatha-made microcord suits are typically one-piece outfits of dark colors, sometimes with glowing trim, but other manufacturers produce such suits in a variety of colors and styles.
    """

    let KasathamicrocordIII = CompendiumArmor(context: context)
    KasathamicrocordIII.name = "Kasatha microcord III"
    KasathamicrocordIII.level = 8
    KasathamicrocordIII.price = 9000
    KasathamicrocordIII.type = "Light"
    let KasathamicrocordIIIEAC = Bonus(context: context)
    KasathamicrocordIIIEAC.type = "EAC"
    KasathamicrocordIIIEAC.bonus = 9
    KasathamicrocordIII.addToArmorBonus(KasathamicrocordIIIEAC)
    let KasathamicrocordIIIKAC = Bonus(context: context)
    KasathamicrocordIIIKAC.type = "KAC"
    KasathamicrocordIIIKAC.bonus = 11
    KasathamicrocordIII.addToArmorBonus(KasathamicrocordIIIKAC)
    KasathamicrocordIII.maxDexBonus = 5
    KasathamicrocordIII.checkPenalty = -1
    KasathamicrocordIII.upgradeSlots = 2
    KasathamicrocordIII.bulk = 1.0
    KasathamicrocordIII.content = """
    These suits of ribbed protective fabric are slightly less advanced than comparable light armor but still provide good-quality protection at an affordable price. Kasatha-made microcord suits are typically one-piece outfits of dark colors, sometimes with glowing trim, but other manufacturers produce such suits in a variety of colors and styles.
    """

    let KasathamicrocordIV = CompendiumArmor(context: context)
    KasathamicrocordIV.name = "Kasatha microcord IV"
    KasathamicrocordIV.level = 11
    KasathamicrocordIV.price = 23800
    KasathamicrocordIV.type = "Light"
    let KasathamicrocordIVEAC = Bonus(context: context)
    KasathamicrocordIVEAC.type = "EAC"
    KasathamicrocordIVEAC.bonus = 13
    KasathamicrocordIV.addToArmorBonus(KasathamicrocordIVEAC)
    let KasathamicrocordIVKAC = Bonus(context: context)
    KasathamicrocordIVKAC.type = "KAC"
    KasathamicrocordIVKAC.bonus = 15
    KasathamicrocordIV.addToArmorBonus(KasathamicrocordIVKAC)
    KasathamicrocordIV.maxDexBonus = 5
    KasathamicrocordIV.checkPenalty = -1
    KasathamicrocordIV.upgradeSlots = 3
    KasathamicrocordIV.bulk = 1.0
    KasathamicrocordIV.content = """
    These suits of ribbed protective fabric are slightly less advanced than comparable light armor but still provide good-quality protection at an affordable price. Kasatha-made microcord suits are typically one-piece outfits of dark colors, sometimes with glowing trim, but other manufacturers produce such suits in a variety of colors and styles.
    """

    let ZDiffractorI = CompendiumArmor(context: context)
    ZDiffractorI.name = "Z Diffractor I"
    ZDiffractorI.level = 2
    ZDiffractorI.price = 650
    ZDiffractorI.type = "Light"
    let ZDiffractorIEAC = Bonus(context: context)
    ZDiffractorIEAC.type = "EAC"
    ZDiffractorIEAC.bonus = 2
    ZDiffractorI.addToArmorBonus(ZDiffractorIEAC)
    let ZDiffractorIKAC = Bonus(context: context)
    ZDiffractorIKAC.type = "KAC"
    ZDiffractorIKAC.bonus = 2
    ZDiffractorI.addToArmorBonus(ZDiffractorIKAC)
    ZDiffractorI.maxDexBonus = 4
    ZDiffractorI.checkPenalty = 0
    ZDiffractorI.upgradeSlots = 0
    ZDiffractorI.bulk = 0.1
    ZDiffractorI.content = """
    Crafted by the talented smiths of the drow, this armor is designed to be light and supple. Its refractive planes are all at the molecular level, resulting in armor that appears to almost absorb light.
    """

    let ZDiffractorII = CompendiumArmor(context: context)
    ZDiffractorII.name = "Z Diffractor II"
    ZDiffractorII.level = 6
    ZDiffractorII.price = 4150
    ZDiffractorII.type = "Light"
    let ZDiffractorIIEAC = Bonus(context: context)
    ZDiffractorIIEAC.type = "EAC"
    ZDiffractorIIEAC.bonus = 6
    ZDiffractorII.addToArmorBonus(ZDiffractorIIEAC)
    let ZDiffractorIIKAC = Bonus(context: context)
    ZDiffractorIIKAC.type = "KAC"
    ZDiffractorIIKAC.bonus = 6
    ZDiffractorII.addToArmorBonus(ZDiffractorIIKAC)
    ZDiffractorII.maxDexBonus = 6
    ZDiffractorII.checkPenalty = 0
    ZDiffractorII.upgradeSlots = 1
    ZDiffractorII.bulk = 0.1
    ZDiffractorII.content = """
    Crafted by the talented smiths of the drow, this armor is designed to be light and supple. Its refractive planes are all at the molecular level, resulting in armor that appears to almost absorb light.
    """

    let ZDiffractorIII = CompendiumArmor(context: context)
    ZDiffractorIII.name = "Z Diffractor III"
    ZDiffractorIII.level = 9
    ZDiffractorIII.price = 12500
    ZDiffractorIII.type = "Light"
    let ZDiffractorIIIEAC = Bonus(context: context)
    ZDiffractorIIIEAC.type = "EAC"
    ZDiffractorIIIEAC.bonus = 11
    ZDiffractorIII.addToArmorBonus(ZDiffractorIIIEAC)
    let ZDiffractorIIIKAC = Bonus(context: context)
    ZDiffractorIIIKAC.type = "KAC"
    ZDiffractorIIIKAC.bonus = 11
    ZDiffractorIII.addToArmorBonus(ZDiffractorIIIKAC)
    ZDiffractorIII.maxDexBonus = 7
    ZDiffractorIII.checkPenalty = 0
    ZDiffractorIII.upgradeSlots = 2
    ZDiffractorIII.bulk = 0.1
    ZDiffractorIII.content = """
    Crafted by the talented smiths of the drow, this armor is designed to be light and supple. Its refractive planes are all at the molecular level, resulting in armor that appears to almost absorb light.
    """

    let ZDiffractorIV = CompendiumArmor(context: context)
    ZDiffractorIV.name = "Z Diffractor IV"
    ZDiffractorIV.level = 13
    ZDiffractorIV.price = 48500
    ZDiffractorIV.type = "Light"
    let ZDiffractorIVEAC = Bonus(context: context)
    ZDiffractorIVEAC.type = "EAC"
    ZDiffractorIVEAC.bonus = 15
    ZDiffractorIV.addToArmorBonus(ZDiffractorIVEAC)
    let ZDiffractorIVKAC = Bonus(context: context)
    ZDiffractorIVKAC.type = "KAC"
    ZDiffractorIVKAC.bonus = 15
    ZDiffractorIV.addToArmorBonus(ZDiffractorIVKAC)
    ZDiffractorIV.maxDexBonus = 8
    ZDiffractorIV.checkPenalty = 0
    ZDiffractorIV.upgradeSlots = 0
    ZDiffractorIV.bulk = 0.1
    ZDiffractorIV.content = """
    Crafted by the talented smiths of the drow, this armor is designed to be light and supple. Its refractive planes are all at the molecular level, resulting in armor that appears to almost absorb light.
    """

    let ZDiffractorV = CompendiumArmor(context: context)
    ZDiffractorV.name = "Z Diffractor V"
    ZDiffractorV.level = 18
    ZDiffractorV.price = 340000
    ZDiffractorV.type = "Light"
    let ZDiffractorVEAC = Bonus(context: context)
    ZDiffractorVEAC.type = "EAC"
    ZDiffractorVEAC.bonus = 20
    ZDiffractorV.addToArmorBonus(ZDiffractorVEAC)
    let ZDiffractorVKAC = Bonus(context: context)
    ZDiffractorVKAC.type = "KAC"
    ZDiffractorVKAC.bonus = 20
    ZDiffractorV.addToArmorBonus(ZDiffractorVKAC)
    ZDiffractorV.maxDexBonus = 9
    ZDiffractorV.checkPenalty = 0
    ZDiffractorV.upgradeSlots = 4
    ZDiffractorV.bulk = 0.1
    ZDiffractorV.content = """
    Crafted by the talented smiths of the drow, this armor is designed to be light and supple. Its refractive planes are all at the molecular level, resulting in armor that appears to almost absorb light.
    """

    let Carbonskingraphite = CompendiumArmor(context: context)
    Carbonskingraphite.name = "Carbon skin, graphite"
    Carbonskingraphite.level = 3
    Carbonskingraphite.price = 1220
    Carbonskingraphite.type = "Light"
    let CarbonskingraphiteEAC = Bonus(context: context)
    CarbonskingraphiteEAC.type = "EAC"
    CarbonskingraphiteEAC.bonus = 3
    Carbonskingraphite.addToArmorBonus(CarbonskingraphiteEAC)
    let CarbonskingraphiteKAC = Bonus(context: context)
    CarbonskingraphiteKAC.type = "KAC"
    CarbonskingraphiteKAC.bonus = 4
    Carbonskingraphite.addToArmorBonus(CarbonskingraphiteKAC)
    Carbonskingraphite.maxDexBonus = 4
    Carbonskingraphite.checkPenalty = -1
    Carbonskingraphite.upgradeSlots = 1
    Carbonskingraphite.bulk = 1.0
    Carbonskingraphite.content = """
    Though these suits of light armor appear to be made of stiff fabric, they are actually woven from carbon fibers. Higher-quality carbon skins are reinforced with carbon allotypes, such as white carbon or diamond, and the heightened sheen of the fabric hints at their expensive construction.
    """
    
    let Carbonskinwhitecarbon = CompendiumArmor(context: context)
    Carbonskinwhitecarbon.name = "Carbon skin, white carbon"
    Carbonskinwhitecarbon.level = 10
    Carbonskinwhitecarbon.price = 19650
    Carbonskinwhitecarbon.type = "Light"
    let CarbonskinwhitecarbonEAC = Bonus(context: context)
    CarbonskinwhitecarbonEAC.type = "EAC"
    CarbonskinwhitecarbonEAC.bonus = 12
    Carbonskinwhitecarbon.addToArmorBonus(CarbonskinwhitecarbonEAC)
    let CarbonskinwhitecarbonKAC = Bonus(context: context)
    CarbonskinwhitecarbonKAC.type = "KAC"
    CarbonskinwhitecarbonKAC.bonus = 14
    Carbonskinwhitecarbon.addToArmorBonus(CarbonskinwhitecarbonKAC)
    Carbonskinwhitecarbon.maxDexBonus = 5
    Carbonskinwhitecarbon.checkPenalty = -1
    Carbonskinwhitecarbon.upgradeSlots = 3
    Carbonskinwhitecarbon.bulk = 1.0
    Carbonskinwhitecarbon.content = """
    Though these suits of light armor appear to be made of stiff fabric, they are actually woven from carbon fibers. Higher-quality carbon skins are reinforced with carbon allotypes, such as white carbon or diamond, and the heightened sheen of the fabric hints at their expensive construction.
    """
    
    let Carbonskindiamond = CompendiumArmor(context: context)
    Carbonskindiamond.name = "Carbon skin, diamond"
    Carbonskindiamond.level = 15
    Carbonskindiamond.price = 126400
    Carbonskindiamond.type = "Light"
    let CarbonskindiamondEAC = Bonus(context: context)
    CarbonskindiamondEAC.type = "EAC"
    CarbonskindiamondEAC.bonus = 17
    Carbonskindiamond.addToArmorBonus(CarbonskindiamondEAC)
    let CarbonskindiamondKAC = Bonus(context: context)
    CarbonskindiamondKAC.type = "KAC"
    CarbonskindiamondKAC.bonus = 19
    Carbonskindiamond.addToArmorBonus(CarbonskindiamondKAC)
    Carbonskindiamond.maxDexBonus = 7
    Carbonskindiamond.checkPenalty = -1
    Carbonskindiamond.upgradeSlots = 4
    Carbonskindiamond.bulk = 1.0
    Carbonskindiamond.content = """
    Though these suits of light armor appear to be made of stiff fabric, they are actually woven from carbon fibers. Higher-quality carbon skins are reinforced with carbon allotypes, such as white carbon or diamond, and the heightened sheen of the fabric hints at their expensive construction.
    """
    
    let Carbonskinnanotube = CompendiumArmor(context: context)
    Carbonskinnanotube.name = "Carbon skin, nanotube"
    Carbonskinnanotube.level = 20
    Carbonskinnanotube.price = 825000
    Carbonskinnanotube.type = "Light"
    let CarbonskinnanotubeEAC = Bonus(context: context)
    CarbonskinnanotubeEAC.type = "EAC"
    CarbonskinnanotubeEAC.bonus = 21
    Carbonskinnanotube.addToArmorBonus(CarbonskinnanotubeEAC)
    let CarbonskinnanotubeKAC = Bonus(context: context)
    CarbonskinnanotubeKAC.type = "KAC"
    CarbonskinnanotubeKAC.bonus = 23
    Carbonskinnanotube.addToArmorBonus(CarbonskinnanotubeKAC)
    Carbonskinnanotube.maxDexBonus = 8
    Carbonskinnanotube.checkPenalty = -1
    Carbonskinnanotube.upgradeSlots = 6
    Carbonskinnanotube.bulk = 1.0
    Carbonskinnanotube.content = """
    Though these suits of light armor appear to be made of stiff fabric, they are actually woven from carbon fibers. Higher-quality carbon skins are reinforced with carbon allotypes, such as white carbon or diamond, and the heightened sheen of the fabric hints at their expensive construction.
    """
    
    let HardenedResin = CompendiumArmor(context: context)
    HardenedResin.name = "Hardened Resin"
    HardenedResin.level = 3
    HardenedResin.price = 1200
    HardenedResin.type = "Light"
    let HardenedResinEAC = Bonus(context: context)
    HardenedResinEAC.type = "EAC"
    HardenedResinEAC.bonus = 2
    HardenedResin.addToArmorBonus(HardenedResinEAC)
    let HardenedResinKAC = Bonus(context: context)
    HardenedResinKAC.type = "KAC"
    HardenedResinKAC.bonus = 3
    HardenedResin.addToArmorBonus(HardenedResinKAC)
    HardenedResin.maxDexBonus = 5
    HardenedResin.checkPenalty = -1
    HardenedResin.upgradeSlots = 1
    HardenedResin.bulk = 1.0
    HardenedResin.content = """
    Many insectile haans shun all but the simplest tools, but some skilled armorsmiths among them incorporate pieces of their own molted exoskeletons into simple protective shells. While the armor usually built to fit Large creatures, suits designed for smaller wearers can sometimes be found.
    """

    let Defrexhide = CompendiumArmor(context: context)
    Defrexhide.name = "Defrex hide"
    Defrexhide.level = 4
    Defrexhide.price = 2250
    Defrexhide.type = "Light"
    let DefrexhideEAC = Bonus(context: context)
    DefrexhideEAC.type = "EAC"
    DefrexhideEAC.bonus = 5
    Defrexhide.addToArmorBonus(DefrexhideEAC)
    let DefrexhideKAC = Bonus(context: context)
    DefrexhideKAC.type = "KAC"
    DefrexhideKAC.bonus = 5
    Defrexhide.addToArmorBonus(DefrexhideKAC)
    Defrexhide.maxDexBonus = 4
    Defrexhide.checkPenalty = 0
    Defrexhide.upgradeSlots = 1
    Defrexhide.bulk = 0.1
    Defrexhide.content = """
    Made from the hide of a ferocious mammal, this light armor is popular among vesk but less often worn by other races. Tanned stretches of the creature’s thick hide are stitched together with metal wires, and the suits are reinforced with metal studs or scales.
    """

    let Lashuntatempweavebasic = CompendiumArmor(context: context)
    Lashuntatempweavebasic.name = "Lashunta tempweave, basic"
    Lashuntatempweavebasic.level = 4
    Lashuntatempweavebasic.price = 1950
    Lashuntatempweavebasic.type = "Light"
    let LashuntatempweavebasicEAC = Bonus(context: context)
    LashuntatempweavebasicEAC.type = "EAC"
    LashuntatempweavebasicEAC.bonus = 4
    Lashuntatempweavebasic.addToArmorBonus(LashuntatempweavebasicEAC)
    let LashuntatempweavebasicKAC = Bonus(context: context)
    LashuntatempweavebasicKAC.type = "KAC"
    LashuntatempweavebasicKAC.bonus = 4
    Lashuntatempweavebasic.addToArmorBonus(LashuntatempweavebasicKAC)
    Lashuntatempweavebasic.maxDexBonus = 5
    Lashuntatempweavebasic.checkPenalty = 0
    Lashuntatempweavebasic.upgradeSlots = 1
    Lashuntatempweavebasic.bulk = 0.1
    Lashuntatempweavebasic.content = """
    Lashuntas developed tempweave light armor by threading temperature-regulating wires through reinforced clothing. The result is a protective, flexible outfit that maintains a comfortable temperature for the wearer. Most tempweave outfits feature a fitted tunic over breeches, making them a popular choice for explorers venturing to hot or humid environments.
    """

    let Lashuntatempweaveadvanced = CompendiumArmor(context: context)
    Lashuntatempweaveadvanced.name = "Lashunta tempweave advanced"
    Lashuntatempweaveadvanced.level = 8
    Lashuntatempweaveadvanced.price = 8500
    Lashuntatempweaveadvanced.type = "Light"
    let LashuntatempweaveadvancedEAC = Bonus(context: context)
    LashuntatempweaveadvancedEAC.type = "EAC"
    LashuntatempweaveadvancedEAC.bonus = 9
    Lashuntatempweaveadvanced.addToArmorBonus(LashuntatempweaveadvancedEAC)
    let LashuntatempweaveadvancedKAC = Bonus(context: context)
    LashuntatempweaveadvancedKAC.type = "KAC"
    LashuntatempweaveadvancedKAC.bonus = 10
    Lashuntatempweaveadvanced.addToArmorBonus(LashuntatempweaveadvancedKAC)
    Lashuntatempweaveadvanced.maxDexBonus = 6
    Lashuntatempweaveadvanced.checkPenalty = 0
    Lashuntatempweaveadvanced.upgradeSlots = 3
    Lashuntatempweaveadvanced.bulk = 0.1
    Lashuntatempweaveadvanced.content = """
    Lashuntas developed tempweave light armor by threading temperature-regulating wires through reinforced clothing. The result is a protective, flexible outfit that maintains a comfortable temperature for the wearer. Most tempweave outfits feature a fitted tunic over breeches, making them a popular choice for explorers venturing to hot or humid environments.
    """

    let DsuitI = CompendiumArmor(context: context)
    DsuitI.name = "D-suit I"
    DsuitI.level = 5
    DsuitI.price = 2980
    DsuitI.type = "Light"
    let DsuitIEAC = Bonus(context: context)
    DsuitIEAC.type = "EAC"
    DsuitIEAC.bonus = 5
    DsuitI.addToArmorBonus(DsuitIEAC)
    let DsuitIKAC = Bonus(context: context)
    DsuitIKAC.type = "KAC"
    DsuitIKAC.bonus = 6
    DsuitI.addToArmorBonus(DsuitIKAC)
    DsuitI.maxDexBonus = 5
    DsuitI.checkPenalty = 0
    DsuitI.upgradeSlots = 1
    DsuitI.bulk = 0.1
    DsuitI.content = """
    Disembarkment suits, or d-suits, are designed for spacefarers who expect to leave their ship and visit a planet’s surface. Most d-suits are jumpsuits or flight suits worn under reinforced breeches, heavy boots, and a thick jacket. A helmet or rebreather and a utility belt with an attached holster complete the outfit.
    """

    let DsuitII = CompendiumArmor(context: context)
    DsuitII.name = "D-suit II"
    DsuitII.level = 7
    DsuitII.price = 6900
    DsuitII.type = "Light"
    let DsuitIIEAC = Bonus(context: context)
    DsuitIIEAC.type = "EAC"
    DsuitIIEAC.bonus = 8
    DsuitII.addToArmorBonus(DsuitIIEAC)
    let DsuitIIKAC = Bonus(context: context)
    DsuitIIKAC.type = "KAC"
    DsuitIIKAC.bonus = 9
    DsuitII.addToArmorBonus(DsuitIIKAC)
    DsuitII.maxDexBonus = 5
    DsuitII.checkPenalty = 0
    DsuitII.upgradeSlots = 2
    DsuitII.bulk = 0.1
    DsuitII.content = """
    Disembarkment suits, or d-suits, are designed for spacefarers who expect to leave their ship and visit a planet’s surface. Most d-suits are jumpsuits or flight suits worn under reinforced breeches, heavy boots, and a thick jacket. A helmet or rebreather and a utility belt with an attached holster complete the outfit.
    """
    
    let DsuitIII = CompendiumArmor(context: context)
    DsuitIII.name = "D-suit III"
    DsuitIII.level = 9
    DsuitIII.price = 13300
    DsuitIII.type = "Light"
    let DsuitIIIEAC = Bonus(context: context)
    DsuitIIIEAC.type = "EAC"
    DsuitIIIEAC.bonus = 11
    DsuitIII.addToArmorBonus(DsuitIIIEAC)
    let DsuitIIIKAC = Bonus(context: context)
    DsuitIIIKAC.type = "KAC"
    DsuitIIIKAC.bonus = 12
    DsuitIII.addToArmorBonus(DsuitIIIKAC)
    DsuitIII.maxDexBonus = 6
    DsuitIII.checkPenalty = 0
    DsuitIII.upgradeSlots = 3
    DsuitIII.bulk = 0.1
    DsuitIII.content = """
    Disembarkment suits, or d-suits, are designed for spacefarers who expect to leave their ship and visit a planet’s surface. Most d-suits are jumpsuits or flight suits worn under reinforced breeches, heavy boots, and a thick jacket. A helmet or rebreather and a utility belt with an attached holster complete the outfit.
    """


    let DsuitIV = CompendiumArmor(context: context)
    DsuitIV.name = "D-suit IV"
    DsuitIV.level = 13
    DsuitIV.price = 45800
    DsuitIV.type = "Light"
    let DsuitIVEAC = Bonus(context: context)
    DsuitIVEAC.type = "EAC"
    DsuitIVEAC.bonus = 16
    DsuitIV.addToArmorBonus(DsuitIVEAC)
    let DsuitIVKAC = Bonus(context: context)
    DsuitIVKAC.type = "KAC"
    DsuitIVKAC.bonus = 17
    DsuitIV.addToArmorBonus(DsuitIVKAC)
    DsuitIV.maxDexBonus = 6
    DsuitIV.checkPenalty = 0
    DsuitIV.upgradeSlots = 4
    DsuitIV.bulk = 0.1
    DsuitIV.content = """
    Disembarkment suits, or d-suits, are designed for spacefarers who expect to leave their ship and visit a planet’s surface. Most d-suits are jumpsuits or flight suits worn under reinforced breeches, heavy boots, and a thick jacket. A helmet or rebreather and a utility belt with an attached holster complete the outfit.
    """
    
    let DsuitV = CompendiumArmor(context: context)
    DsuitV.name = "Dsuit V"
    DsuitV.level = 17
    DsuitV.price = 244300
    DsuitV.type = "Light"
    let DsuitVEAC = Bonus(context: context)
    DsuitVEAC.type = "EAC"
    DsuitVEAC.bonus = 20
    DsuitV.addToArmorBonus(DsuitVEAC)
    let DsuitVKAC = Bonus(context: context)
    DsuitVKAC.type = "KAC"
    DsuitVKAC.bonus = 21
    DsuitV.addToArmorBonus(DsuitVKAC)
    DsuitV.maxDexBonus = 7
    DsuitV.checkPenalty = 0
    DsuitV.upgradeSlots = 5
    DsuitV.bulk = 0.1
    DsuitV.content = """
    Disembarkment suits, or d-suits, are designed for spacefarers who expect to leave their ship and visit a planet’s surface. Most d-suits are jumpsuits or flight suits worn under reinforced breeches, heavy boots, and a thick jacket. A helmet or rebreather and a utility belt with an attached holster complete the outfit.
    """

    let DsuitVI = CompendiumArmor(context: context)
    DsuitVI.name = "D-suit VI"
    DsuitVI.level = 19
    DsuitVI.price = 552000
    DsuitVI.type = "Light"
    let DsuitVIEAC = Bonus(context: context)
    DsuitVIEAC.type = "EAC"
    DsuitVIEAC.bonus = 21
    DsuitVI.addToArmorBonus(DsuitVIEAC)
    let DsuitVIKAC = Bonus(context: context)
    DsuitVIKAC.type = "KAC"
    DsuitVIKAC.bonus = 22
    DsuitVI.addToArmorBonus(DsuitVIKAC)
    DsuitVI.maxDexBonus = 8
    DsuitVI.checkPenalty = 0
    DsuitVI.upgradeSlots = 6
    DsuitVI.bulk = 0.1
    DsuitVI.content = """
    Disembarkment suits, or d-suits, are designed for spacefarers who expect to leave their ship and visit a planet’s surface. Most d-suits are jumpsuits or flight suits worn under reinforced breeches, heavy boots, and a thick jacket. A helmet or rebreather and a utility belt with an attached holster complete the outfit.
    """

    let Ysokirefractorsuit = CompendiumArmor(context: context)
    Ysokirefractorsuit.name = "Ysoki refractor suit"
    Ysokirefractorsuit.level = 6
    Ysokirefractorsuit.price = 4120
    Ysokirefractorsuit.type = "Light"
    let YsokirefractorsuitEAC = Bonus(context: context)
    YsokirefractorsuitEAC.type = "EAC"
    YsokirefractorsuitEAC.bonus = 7
    Ysokirefractorsuit.addToArmorBonus(YsokirefractorsuitEAC)
    let YsokirefractorsuitKAC = Bonus(context: context)
    YsokirefractorsuitKAC.type = "KAC"
    YsokirefractorsuitKAC.bonus = 7
    Ysokirefractorsuit.addToArmorBonus(YsokirefractorsuitKAC)
    Ysokirefractorsuit.maxDexBonus = 5
    Ysokirefractorsuit.checkPenalty = 0
    Ysokirefractorsuit.upgradeSlots = 2
    Ysokirefractorsuit.bulk = 0.1
    Ysokirefractorsuit.content = """
    The innovative ysoki created this reinforced jumpsuit layered with energy-reflective foil. This light armor is undeniably noticeable, but it also protects against energy attacks with the same efficacy as it does kinetic attacks. Ysoki refractor suits are popular among all races now and can be tinted in different metallic shades.
    """

    let RedTangSpiceGuildtravelsuitsilver = CompendiumArmor(context: context)
    RedTangSpiceGuildtravelsuitsilver.name = "Red Tang Spice Guild travel suit, silver"
    RedTangSpiceGuildtravelsuitsilver.level = 7
    RedTangSpiceGuildtravelsuitsilver.price = 7250
    RedTangSpiceGuildtravelsuitsilver.type = "Light"
    let RedTangSpiceGuildtravelsuitsilverEAC = Bonus(context: context)
    RedTangSpiceGuildtravelsuitsilverEAC.type = "EAC"
    RedTangSpiceGuildtravelsuitsilverEAC.bonus = 6
    RedTangSpiceGuildtravelsuitsilver.addToArmorBonus(RedTangSpiceGuildtravelsuitsilverEAC)
    let RedTangSpiceGuildtravelsuitsilverKAC = Bonus(context: context)
    RedTangSpiceGuildtravelsuitsilverKAC.type = "KAC"
    RedTangSpiceGuildtravelsuitsilverKAC.bonus = 7
    RedTangSpiceGuildtravelsuitsilver.addToArmorBonus(RedTangSpiceGuildtravelsuitsilverKAC)
    RedTangSpiceGuildtravelsuitsilver.maxDexBonus = 7
    RedTangSpiceGuildtravelsuitsilver.checkPenalty = 0
    RedTangSpiceGuildtravelsuitsilver.upgradeSlots = 0
    RedTangSpiceGuildtravelsuitsilver.bulk = 0.1
    RedTangSpiceGuildtravelsuitsilver.content = """
    Red Tang Spice Guild executives popularized these light armor business suits for boardrooms and diplomatic meetings. Contingent force fields and concealed rebreathers protect the wearer in hostile environmental conditions. Higher grades of travel suits offer more protection—along with a designer label.
    """

    let RedTangSpiceGuildtravelsuitgold = CompendiumArmor(context: context)
    RedTangSpiceGuildtravelsuitgold.name = "Red Tang Spice Guild travel suit, gold"
    RedTangSpiceGuildtravelsuitgold.level = 9
    RedTangSpiceGuildtravelsuitgold.price = 12100
    RedTangSpiceGuildtravelsuitgold.type = "Light"
    let RedTangSpiceGuildtravelsuitgoldEAC = Bonus(context: context)
    RedTangSpiceGuildtravelsuitgoldEAC.type = "EAC"
    RedTangSpiceGuildtravelsuitgoldEAC.bonus = 9
    RedTangSpiceGuildtravelsuitgold.addToArmorBonus(RedTangSpiceGuildtravelsuitgoldEAC)
    let RedTangSpiceGuildtravelsuitgoldKAC = Bonus(context: context)
    RedTangSpiceGuildtravelsuitgoldKAC.type = "KAC"
    RedTangSpiceGuildtravelsuitgoldKAC.bonus = 10
    RedTangSpiceGuildtravelsuitgold.addToArmorBonus(RedTangSpiceGuildtravelsuitgoldKAC)
    RedTangSpiceGuildtravelsuitgold.maxDexBonus = 8
    RedTangSpiceGuildtravelsuitgold.checkPenalty = 0
    RedTangSpiceGuildtravelsuitgold.upgradeSlots = 0
    RedTangSpiceGuildtravelsuitgold.bulk = 0.1
    RedTangSpiceGuildtravelsuitgold.content = """
    Red Tang Spice Guild executives popularized these light armor business suits for boardrooms and diplomatic meetings. Contingent force fields and concealed rebreathers protect the wearer in hostile environmental conditions. Higher grades of travel suits offer more protection—along with a designer label.
    """

    let RedTangSpiceGuildtravelsuitplatinum = CompendiumArmor(context: context)
    RedTangSpiceGuildtravelsuitplatinum.name = "Red Tang Spice Guild travel suit, platinum"
    RedTangSpiceGuildtravelsuitplatinum.level = 12
    RedTangSpiceGuildtravelsuitplatinum.price = 34600
    RedTangSpiceGuildtravelsuitplatinum.type = "Light"
    let RedTangSpiceGuildtravelsuitplatinumEAC = Bonus(context: context)
    RedTangSpiceGuildtravelsuitplatinumEAC.type = "EAC"
    RedTangSpiceGuildtravelsuitplatinumEAC.bonus = 12
    RedTangSpiceGuildtravelsuitplatinum.addToArmorBonus(RedTangSpiceGuildtravelsuitplatinumEAC)
    let RedTangSpiceGuildtravelsuitplatinumKAC = Bonus(context: context)
    RedTangSpiceGuildtravelsuitplatinumKAC.type = "KAC"
    RedTangSpiceGuildtravelsuitplatinumKAC.bonus = 13
    RedTangSpiceGuildtravelsuitplatinum.addToArmorBonus(RedTangSpiceGuildtravelsuitplatinumKAC)
    RedTangSpiceGuildtravelsuitplatinum.maxDexBonus = 8
    RedTangSpiceGuildtravelsuitplatinum.checkPenalty = 0
    RedTangSpiceGuildtravelsuitplatinum.upgradeSlots = 0
    RedTangSpiceGuildtravelsuitplatinum.bulk = 0.1
    RedTangSpiceGuildtravelsuitplatinum.content = """
    Red Tang Spice Guild executives popularized these light armor business suits for boardrooms and diplomatic meetings. Contingent force fields and concealed rebreathers protect the wearer in hostile environmental conditions. Higher grades of travel suits offer more protection—along with a designer label.
    """

    let Hardlightseriessquad = CompendiumArmor(context: context)
    Hardlightseriessquad.name = "Hardlight series, squad"
    Hardlightseriessquad.level = 12
    Hardlightseriessquad.price = 30750
    Hardlightseriessquad.type = "Light"
    let HardlightseriessquadEAC = Bonus(context: context)
    HardlightseriessquadEAC.type = "EAC"
    HardlightseriessquadEAC.bonus = 15
    Hardlightseriessquad.addToArmorBonus(HardlightseriessquadEAC)
    let HardlightseriessquadKAC = Bonus(context: context)
    HardlightseriessquadKAC.type = "KAC"
    HardlightseriessquadKAC.bonus = 15
    Hardlightseriessquad.addToArmorBonus(HardlightseriessquadKAC)
    Hardlightseriessquad.maxDexBonus = 6
    Hardlightseriessquad.checkPenalty = 0
    Hardlightseriessquad.upgradeSlots = 4
    Hardlightseriessquad.bulk = 0.1
    Hardlightseriessquad.content = """
    The last word in light infantry armor, hardlight series armor features an inflexible, lightweight breastplate, limb guards, and a helmet over a smooth and formfitting jumpsuit. Manufacturers often make custom armor for military organizations, but off-the-rack armor of differing qualities is also available to mercenaries and explorers.
    """

    let Hardlightserieselite = CompendiumArmor(context: context)
    Hardlightserieselite.name = "Hardlight series, elite"
    Hardlightserieselite.level = 15
    Hardlightserieselite.price = 123500
    Hardlightserieselite.type = "Light"
    let HardlightserieseliteEAC = Bonus(context: context)
    HardlightserieseliteEAC.type = "EAC"
    HardlightserieseliteEAC.bonus = 18
    Hardlightserieselite.addToArmorBonus(HardlightserieseliteEAC)
    let HardlightserieseliteKAC = Bonus(context: context)
    HardlightserieseliteKAC.type = "KAC"
    HardlightserieseliteKAC.bonus = 18
    Hardlightserieselite.addToArmorBonus(HardlightserieseliteKAC)
    Hardlightserieselite.maxDexBonus = 7
    Hardlightserieselite.checkPenalty = 0
    Hardlightserieselite.upgradeSlots = 4
    Hardlightserieselite.bulk = 0.1
    Hardlightserieselite.content = """
    The last word in light infantry armor, hardlight series armor features an inflexible, lightweight breastplate, limb guards, and a helmet over a smooth and formfitting jumpsuit. Manufacturers often make custom armor for military organizations, but off-the-rack armor of differing qualities is also available to mercenaries and explorers.
    """

    let Hardlightseriesspecialist = CompendiumArmor(context: context)
    Hardlightseriesspecialist.name = "Hardlight series, specialist"
    Hardlightseriesspecialist.level = 20
    Hardlightseriesspecialist.price = 928000
    Hardlightseriesspecialist.type = "Light"
    let HardlightseriesspecialistEAC = Bonus(context: context)
    HardlightseriesspecialistEAC.type = "EAC"
    HardlightseriesspecialistEAC.bonus = 22
    Hardlightseriesspecialist.addToArmorBonus(HardlightseriesspecialistEAC)
    let HardlightseriesspecialistKAC = Bonus(context: context)
    HardlightseriesspecialistKAC.type = "KAC"
    HardlightseriesspecialistKAC.bonus = 22
    Hardlightseriesspecialist.addToArmorBonus(HardlightseriesspecialistKAC)
    Hardlightseriesspecialist.maxDexBonus = 8
    Hardlightseriesspecialist.checkPenalty = 0
    Hardlightseriesspecialist.upgradeSlots = 6
    Hardlightseriesspecialist.bulk = 0.1
    Hardlightseriesspecialist.content = """
    The last word in light infantry armor, hardlight series armor features an inflexible, lightweight breastplate, limb guards, and a helmet over a smooth and formfitting jumpsuit. Manufacturers often make custom armor for military organizations, but off-the-rack armor of differing qualities is also available to mercenaries and explorers.
    """

    let Echelonfashionreadytowear = CompendiumArmor(context: context)
    Echelonfashionreadytowear.name = "Echelon fashion, ready to wear"
    Echelonfashionreadytowear.level = 14
    Echelonfashionreadytowear.price = 71300
    Echelonfashionreadytowear.type = "Light"
    let EchelonfashionreadytowearEAC = Bonus(context: context)
    EchelonfashionreadytowearEAC.type = "EAC"
    EchelonfashionreadytowearEAC.bonus = 15
    Echelonfashionreadytowear.addToArmorBonus(EchelonfashionreadytowearEAC)
    let EchelonfashionreadytowearKAC = Bonus(context: context)
    EchelonfashionreadytowearKAC.type = "KAC"
    EchelonfashionreadytowearKAC.bonus = 16
    Echelonfashionreadytowear.addToArmorBonus(EchelonfashionreadytowearKAC)
    Echelonfashionreadytowear.maxDexBonus = 8
    Echelonfashionreadytowear.checkPenalty = 0
    Echelonfashionreadytowear.upgradeSlots = 0
    Echelonfashionreadytowear.bulk = 0.1
    Echelonfashionreadytowear.content = """
    Modeled after the universe’s most cutting-edge fashions, this lightly armored clothing is available in daring Modern designs, using force fields and the highest-tech fibers to create any sort of outfit imaginable. Bespoke echelon fashions are often tailor-made for the orderer and meant to look unique.
    """

    let Echelonfashionbespoke = CompendiumArmor(context: context)
    Echelonfashionbespoke.name = "Echelon fashion, bespoke"
    Echelonfashionbespoke.level = 17
    Echelonfashionbespoke.price = 285000
    Echelonfashionbespoke.type = "Light"
    let EchelonfashionbespokeEAC = Bonus(context: context)
    EchelonfashionbespokeEAC.type = "EAC"
    EchelonfashionbespokeEAC.bonus = 18
    Echelonfashionbespoke.addToArmorBonus(EchelonfashionbespokeEAC)
    let EchelonfashionbespokeKAC = Bonus(context: context)
    EchelonfashionbespokeKAC.type = "KAC"
    EchelonfashionbespokeKAC.bonus = 19
    Echelonfashionbespoke.addToArmorBonus(EchelonfashionbespokeKAC)
    Echelonfashionbespoke.maxDexBonus = 8
    Echelonfashionbespoke.checkPenalty = 0
    Echelonfashionbespoke.upgradeSlots = 0
    Echelonfashionbespoke.bulk = 0.1
    Echelonfashionbespoke.content = """
    Modeled after the universe’s most cutting-edge fashions, this lightly armored clothing is available in daring Modern designs, using force fields and the highest-tech fibers to create any sort of outfit imaginable. Bespoke echelon fashions are often tailor-made for the orderer and meant to look unique.
    """

    let Swarmsuit = CompendiumArmor(context: context)
    Swarmsuit.name = "Swarmsuit"
    Swarmsuit.level = 15
    Swarmsuit.price = 95200
    Swarmsuit.type = "Light"
    let SwarmsuitEAC = Bonus(context: context)
    SwarmsuitEAC.type = "EAC"
    SwarmsuitEAC.bonus = 18
    Swarmsuit.addToArmorBonus(SwarmsuitEAC)
    let SwarmsuitKAC = Bonus(context: context)
    SwarmsuitKAC.type = "KAC"
    SwarmsuitKAC.bonus = 19
    Swarmsuit.addToArmorBonus(SwarmsuitKAC)
    Swarmsuit.maxDexBonus = 6
    Swarmsuit.checkPenalty = 0
    Swarmsuit.upgradeSlots = 4
    Swarmsuit.bulk = 0.1
    Swarmsuit.content = """
    Inspired by Swarm technology and designed specifically for shirrens, a swarmsuit is a collection of ablative plates backed with reinforced padding and linked with mesh straps. The light armor’s unique arrangement makes it perfect for creatures with unusual physiologies. The wearer arranges the straps in a comfortable formation and slides the ablative plates to cover vulnerable areas.
    """
    
    let Shotalashuarmor = CompendiumArmor(context: context)
    Shotalashuarmor.name = "Shotalashu armor"
    Shotalashuarmor.level = 16
    Shotalashuarmor.price = 149500
    Shotalashuarmor.type = "Light"
    let ShotalashuarmorEAC = Bonus(context: context)
    ShotalashuarmorEAC.type = "EAC"
    ShotalashuarmorEAC.bonus = 19
    Shotalashuarmor.addToArmorBonus(ShotalashuarmorEAC)
    let ShotalashuarmorKAC = Bonus(context: context)
    ShotalashuarmorKAC.type = "KAC"
    ShotalashuarmorKAC.bonus = 20
    Shotalashuarmor.addToArmorBonus(ShotalashuarmorKAC)
    Shotalashuarmor.maxDexBonus = 7
    Shotalashuarmor.checkPenalty = 0
    Shotalashuarmor.upgradeSlots = 5
    Shotalashuarmor.bulk = 0.1
    Shotalashuarmor.content = """
    The lashunta shotalashu cavalry wear this protective gear while riding their bonded saurian mounts. Layers of thin, ablative plates make for light armor that moves with the rider while providing maximum protection. Military merchants have taken to creating knock-off shotalashu armor in more Modern styles, as some of the traditional nature themes are no longer fashionable.
    """

    
    
    
    
    // HEAVY ARMOR //////////////////////////////////////////////////////////////////

    let Ceremonialplatetroop = CompendiumArmor(context: context)
    Ceremonialplatetroop.name = "Ceremonial plate, troop"
    Ceremonialplatetroop.level = 1
    Ceremonialplatetroop.price = 110
    Ceremonialplatetroop.type = "Heavy"
    let CeremonialplatetroopEAC = Bonus(context: context)
    CeremonialplatetroopEAC.type = "EAC"
    CeremonialplatetroopEAC.bonus = 1
    Ceremonialplatetroop.addToArmorBonus(CeremonialplatetroopEAC)
    let CeremonialplatetroopKAC = Bonus(context: context)
    CeremonialplatetroopKAC.type = "KAC"
    CeremonialplatetroopKAC.bonus = 3
    Ceremonialplatetroop.addToArmorBonus(CeremonialplatetroopKAC)
    Ceremonialplatetroop.maxDexBonus = 2
    Ceremonialplatetroop.checkPenalty = -3
    let Ceremonialplatetroopspeed = Bonus(context: context)
    Ceremonialplatetroopspeed.type = "Speed"
    Ceremonialplatetroopspeed.bonus = -10
    Ceremonialplatetroop.addToArmorBonus(Ceremonialplatetroopspeed)
    Ceremonialplatetroop.upgradeSlots = 3
    Ceremonialplatetroop.bulk = 3.0
    Ceremonialplatetroop.content = """
    While this heavy armor of sculpted metal plates offers good protection to the wearer, its main purpose is to intimidate enemies. Often used for honor guards, military exercises, or parades, ceremonial plate is usually brightly colored or made of shining metal, with elaborate helmets.
    """

    let Ceremonialplateofficer = CompendiumArmor(context: context)
    Ceremonialplateofficer.name = "Ceremonial plate, officer"
    Ceremonialplateofficer.level = 4
    Ceremonialplateofficer.price = 2275
    Ceremonialplateofficer.type = "Heavy"
    let CeremonialplateofficerEAC = Bonus(context: context)
    CeremonialplateofficerEAC.type = "EAC"
    CeremonialplateofficerEAC.bonus = 6
    Ceremonialplateofficer.addToArmorBonus(CeremonialplateofficerEAC)
    let CeremonialplateofficerKAC = Bonus(context: context)
    CeremonialplateofficerKAC.type = "KAC"
    CeremonialplateofficerKAC.bonus = 8
    Ceremonialplateofficer.addToArmorBonus(CeremonialplateofficerKAC)
    Ceremonialplateofficer.maxDexBonus = 2
    Ceremonialplateofficer.checkPenalty = -2
    let Ceremonialplateofficerspeed = Bonus(context: context)
    Ceremonialplateofficerspeed.type = "Speed"
    Ceremonialplateofficerspeed.bonus = -5
    Ceremonialplateofficer.addToArmorBonus(Ceremonialplateofficerspeed)
    Ceremonialplateofficer.upgradeSlots = 1
    Ceremonialplateofficer.bulk = 2.0
    Ceremonialplateofficer.content = """
    While this heavy armor of sculpted metal plates offers good protection to the wearer, its main purpose is to intimidate enemies. Often used for honor guards, military exercises, or parades, ceremonial plate is usually brightly colored or made of shining metal, with elaborate helmets.
    """

    let Ceremonialplatecommander = CompendiumArmor(context: context)
    Ceremonialplatecommander.name = "Ceremonial plate, commander"
    Ceremonialplatecommander.level = 7
    Ceremonialplatecommander.price = 7350
    Ceremonialplatecommander.type = "Heavy"
    let CeremonialplatecommanderEAC = Bonus(context: context)
    CeremonialplatecommanderEAC.type = "EAC"
    CeremonialplatecommanderEAC.bonus = 10
    Ceremonialplatecommander.addToArmorBonus(CeremonialplatecommanderEAC)
    let CeremonialplatecommanderKAC = Bonus(context: context)
    CeremonialplatecommanderKAC.type = "KAC"
    CeremonialplatecommanderKAC.bonus = 12
    Ceremonialplatecommander.addToArmorBonus(CeremonialplatecommanderKAC)
    Ceremonialplatecommander.maxDexBonus = 2
    Ceremonialplatecommander.checkPenalty = -3
    let Ceremonialplatecommanderspeed = Bonus(context: context)
    Ceremonialplatecommanderspeed.type = "Speed"
    Ceremonialplatecommanderspeed.bonus = -10
    Ceremonialplatecommander.addToArmorBonus(Ceremonialplatecommanderspeed)
    Ceremonialplatecommander.upgradeSlots = 5
    Ceremonialplatecommander.bulk = 3.0
    Ceremonialplatecommander.content = """
    While this heavy armor of sculpted metal plates offers good protection to the wearer, its main purpose is to intimidate enemies. Often used for honor guards, military exercises, or parades, ceremonial plate is usually brightly colored or made of shining metal, with elaborate helmets.
    """

    let GolemforgedplatingI = CompendiumArmor(context: context)
    GolemforgedplatingI.name = "Golemforged plating I"
    GolemforgedplatingI.level = 1
    GolemforgedplatingI.price = 250
    GolemforgedplatingI.type = "Heavy"
    let GolemforgedplatingIEAC = Bonus(context: context)
    GolemforgedplatingIEAC.type = "EAC"
    GolemforgedplatingIEAC.bonus = 2
    GolemforgedplatingI.addToArmorBonus(GolemforgedplatingIEAC)
    let GolemforgedplatingIKAC = Bonus(context: context)
    GolemforgedplatingIKAC.type = "KAC"
    GolemforgedplatingIKAC.bonus = 5
    GolemforgedplatingI.addToArmorBonus(GolemforgedplatingIKAC)
    GolemforgedplatingI.maxDexBonus = 0
    GolemforgedplatingI.checkPenalty = -3
    let GolemforgedplatingIspeed = Bonus(context: context)
    GolemforgedplatingIspeed.type = "Speed"
    GolemforgedplatingIspeed.bonus = -10
    GolemforgedplatingI.addToArmorBonus(GolemforgedplatingIspeed)
    GolemforgedplatingI.upgradeSlots = 0
    GolemforgedplatingI.bulk = 3.0
    GolemforgedplatingI.content = """
    An economical choice for many mercenaries, golemforged plating is one of the universe’s most popular heavy armors. Golemforged plating consists of a close-fitting polycarbonate suit fitted with ports and sockets to fit most armor customization options. Suits of golemforged plating include flexible boots and gloves as well as a standard helmet with a clear visor.
    """

    let GolemforgedplatingII = CompendiumArmor(context: context)
    GolemforgedplatingII.name = "Golemforged plating II"
    GolemforgedplatingII.level = 3
    GolemforgedplatingII.price = 1610
    GolemforgedplatingII.type = "Heavy"
    let GolemforgedplatingIIEAC = Bonus(context: context)
    GolemforgedplatingIIEAC.type = "EAC"
    GolemforgedplatingIIEAC.bonus = 5
    GolemforgedplatingII.addToArmorBonus(GolemforgedplatingIIEAC)
    let GolemforgedplatingIIKAC = Bonus(context: context)
    GolemforgedplatingIIKAC.type = "KAC"
    GolemforgedplatingIIKAC.bonus = 7
    GolemforgedplatingII.addToArmorBonus(GolemforgedplatingIIKAC)
    GolemforgedplatingII.maxDexBonus = 2
    GolemforgedplatingII.checkPenalty = -2
    let GolemforgedplatingIIspeed = Bonus(context: context)
    GolemforgedplatingIIspeed.type = "Speed"
    GolemforgedplatingIIspeed.bonus = -10
    GolemforgedplatingII.addToArmorBonus(GolemforgedplatingIIspeed)
    GolemforgedplatingII.upgradeSlots = 1
    GolemforgedplatingII.bulk = 3.0
    GolemforgedplatingII.content = """
    An economical choice for many mercenaries, golemforged plating is one of the universe’s most popular heavy armors. Golemforged plating consists of a close-fitting polycarbonate suit fitted with ports and sockets to fit most armor customization options. Suits of golemforged plating include flexible boots and gloves as well as a standard helmet with a clear visor.
    """

    let GolemforgedplatingIII = CompendiumArmor(context: context)
    GolemforgedplatingIII.name = "Golemforged plating III"
    GolemforgedplatingIII.level = 7
    GolemforgedplatingIII.price = 5500
    GolemforgedplatingIII.type = "Heavy"
    let GolemforgedplatingIIIEAC = Bonus(context: context)
    GolemforgedplatingIIIEAC.type = "EAC"
    GolemforgedplatingIIIEAC.bonus = 10
    GolemforgedplatingIII.addToArmorBonus(GolemforgedplatingIIIEAC)
    let GolemforgedplatingIIIKAC = Bonus(context: context)
    GolemforgedplatingIIIKAC.type = "KAC"
    GolemforgedplatingIIIKAC.bonus = 12
    GolemforgedplatingIII.addToArmorBonus(GolemforgedplatingIIIKAC)
    GolemforgedplatingIII.maxDexBonus = 3
    GolemforgedplatingIII.checkPenalty = -2
    let GolemforgedplatingIIIspeed = Bonus(context: context)
    GolemforgedplatingIIIspeed.type = "Speed"
    GolemforgedplatingIIIspeed.bonus = -5
    GolemforgedplatingIII.addToArmorBonus(GolemforgedplatingIIIspeed)
    GolemforgedplatingIII.upgradeSlots = 2
    GolemforgedplatingIII.bulk = 2.0
    GolemforgedplatingIII.content = """
    An economical choice for many mercenaries, golemforged plating is one of the universe’s most popular heavy armors. Golemforged plating consists of a close-fitting polycarbonate suit fitted with ports and sockets to fit most armor customization options. Suits of golemforged plating include flexible boots and gloves as well as a standard helmet with a clear visor.
    """
    
    let GolemforgedplatingIV = CompendiumArmor(context: context)
    GolemforgedplatingIV.name = "Golemforged plating IV"
    GolemforgedplatingIV.level = 11
    GolemforgedplatingIV.price = 24800
    GolemforgedplatingIV.type = "Heavy"
    let GolemforgedplatingIVEAC = Bonus(context: context)
    GolemforgedplatingIVEAC.type = "EAC"
    GolemforgedplatingIVEAC.bonus = 15
    GolemforgedplatingIV.addToArmorBonus(GolemforgedplatingIVEAC)
    let GolemforgedplatingIVKAC = Bonus(context: context)
    GolemforgedplatingIVKAC.type = "KAC"
    GolemforgedplatingIVKAC.bonus = 17
    GolemforgedplatingIV.addToArmorBonus(GolemforgedplatingIVKAC)
    GolemforgedplatingIV.maxDexBonus = 3
    GolemforgedplatingIV.checkPenalty = -3
    let GolemforgedplatingIVspeed = Bonus(context: context)
    GolemforgedplatingIVspeed.type = "Speed"
    GolemforgedplatingIVspeed.bonus = -10
    GolemforgedplatingIV.addToArmorBonus(GolemforgedplatingIVspeed)
    GolemforgedplatingIV.upgradeSlots = 6
    GolemforgedplatingIV.bulk = 3.0
    GolemforgedplatingIV.content = """
    An economical choice for many mercenaries, golemforged plating is one of the universe’s most popular heavy armors. Golemforged plating consists of a close-fitting polycarbonate suit fitted with ports and sockets to fit most armor customization options. Suits of golemforged plating include flexible boots and gloves as well as a standard helmet with a clear visor.
    """

    let GolemforgedplatingV = CompendiumArmor(context: context)
    GolemforgedplatingV.name = "Golemforged plating V"
    GolemforgedplatingV.level = 14
    GolemforgedplatingV.price = 63750
    GolemforgedplatingV.type = "Heavy"
    let GolemforgedplatingVEAC = Bonus(context: context)
    GolemforgedplatingVEAC.type = "EAC"
    GolemforgedplatingVEAC.bonus = 18
    GolemforgedplatingV.addToArmorBonus(GolemforgedplatingVEAC)
    let GolemforgedplatingVKAC = Bonus(context: context)
    GolemforgedplatingVKAC.type = "KAC"
    GolemforgedplatingVKAC.bonus = 20
    GolemforgedplatingV.addToArmorBonus(GolemforgedplatingVKAC)
    GolemforgedplatingV.maxDexBonus = 4
    GolemforgedplatingV.checkPenalty = -3
    let GolemforgedplatingVspeed = Bonus(context: context)
    GolemforgedplatingVspeed.type = "Speed"
    GolemforgedplatingVspeed.bonus = -10
    GolemforgedplatingV.addToArmorBonus(GolemforgedplatingVspeed)
    GolemforgedplatingV.upgradeSlots = 7
    GolemforgedplatingV.bulk = 3.0
    GolemforgedplatingV.content = """
    An economical choice for many mercenaries, golemforged plating is one of the universe’s most popular heavy armors. Golemforged plating consists of a close-fitting polycarbonate suit fitted with ports and sockets to fit most armor customization options. Suits of golemforged plating include flexible boots and gloves as well as a standard helmet with a clear visor.
    """

    let LashuntaringwearI = CompendiumArmor(context: context)
    LashuntaringwearI.name = "Lashunta ringwear I"
    LashuntaringwearI.level = 1
    LashuntaringwearI.price = 415
    LashuntaringwearI.type = "Heavy"
    let LashuntaringwearIEAC = Bonus(context: context)
    LashuntaringwearIEAC.type = "EAC"
    LashuntaringwearIEAC.bonus = 2
    LashuntaringwearI.addToArmorBonus(LashuntaringwearIEAC)
    let LashuntaringwearIKAC = Bonus(context: context)
    LashuntaringwearIKAC.type = "KAC"
    LashuntaringwearIKAC.bonus = 4
    LashuntaringwearI.addToArmorBonus(LashuntaringwearIKAC)
    LashuntaringwearI.maxDexBonus = 2
    LashuntaringwearI.checkPenalty = -2
    let LashuntaringwearIspeed = Bonus(context: context)
    LashuntaringwearIspeed.type = "Speed"
    LashuntaringwearIspeed.bonus = -5
    LashuntaringwearI.addToArmorBonus(LashuntaringwearIspeed)
    LashuntaringwearI.upgradeSlots = 0
    LashuntaringwearI.bulk = 2.0
    LashuntaringwearI.content = """
    These beautiful suits of heavy armor feature engraved metal bands that fit above and below the body’s major joints. Metal guards, woven chain sheets, and force fields stretch between the bands to form a complete set of protective gear. Tinted crystals are often added during the forging process to the ore used for ringwear to create glimmering suits of different hues.
    """

    let LashuntaringwearII = CompendiumArmor(context: context)
    LashuntaringwearII.name = "Lashunta ringwear II"
    LashuntaringwearII.level = 5
    LashuntaringwearII.price = 2970
    LashuntaringwearII.type = "Heavy"
    let LashuntaringwearIIEAC = Bonus(context: context)
    LashuntaringwearIIEAC.type = "EAC"
    LashuntaringwearIIEAC.bonus = 8
    LashuntaringwearII.addToArmorBonus(LashuntaringwearIIEAC)
    let LashuntaringwearIIKAC = Bonus(context: context)
    LashuntaringwearIIKAC.type = "KAC"
    LashuntaringwearIIKAC.bonus = 10
    LashuntaringwearII.addToArmorBonus(LashuntaringwearIIKAC)
    LashuntaringwearII.maxDexBonus = 2
    LashuntaringwearII.checkPenalty = -2
    let LashuntaringwearIIspeed = Bonus(context: context)
    LashuntaringwearIIspeed.type = "Speed"
    LashuntaringwearIIspeed.bonus = -5
    LashuntaringwearII.addToArmorBonus(LashuntaringwearIIspeed)
    LashuntaringwearII.upgradeSlots = 1
    LashuntaringwearII.bulk = 2.0
    LashuntaringwearII.content = """
    These beautiful suits of heavy armor feature engraved metal bands that fit above and below the body’s major joints. Metal guards, woven chain sheets, and force fields stretch between the bands to form a complete set of protective gear. Tinted crystals are often added during the forging process to the ore used for ringwear to create glimmering suits of different hues.
    """

    let LashuntaringwearIII = CompendiumArmor(context: context)
    LashuntaringwearIII.name = "Lashunta ringwear III"
    LashuntaringwearIII.level = 8
    LashuntaringwearIII.price = 8420
    LashuntaringwearIII.type = "Heavy"
    let LashuntaringwearIIIEAC = Bonus(context: context)
    LashuntaringwearIIIEAC.type = "EAC"
    LashuntaringwearIIIEAC.bonus = 12
    LashuntaringwearIII.addToArmorBonus(LashuntaringwearIIIEAC)
    let LashuntaringwearIIIKAC = Bonus(context: context)
    LashuntaringwearIIIKAC.type = "KAC"
    LashuntaringwearIIIKAC.bonus = 14
    LashuntaringwearIII.addToArmorBonus(LashuntaringwearIIIKAC)
    LashuntaringwearIII.maxDexBonus = 3
    LashuntaringwearIII.checkPenalty = -2
    let LashuntaringwearIIIspeed = Bonus(context: context)
    LashuntaringwearIIIspeed.type = "Speed"
    LashuntaringwearIIIspeed.bonus = -5
    LashuntaringwearIII.addToArmorBonus(LashuntaringwearIIIspeed)
    LashuntaringwearIII.upgradeSlots = 3
    LashuntaringwearIII.bulk = 2.0
    LashuntaringwearIII.content = """
    These beautiful suits of heavy armor feature engraved metal bands that fit above and below the body’s major joints. Metal guards, woven chain sheets, and force fields stretch between the bands to form a complete set of protective gear. Tinted crystals are often added during the forging process to the ore used for ringwear to create glimmering suits of different hues.
    """

    let LashuntaringwearIV = CompendiumArmor(context: context)
    LashuntaringwearIV.name = "Lashunta ringwear IV"
    LashuntaringwearIV.level = 11
    LashuntaringwearIV.price = 27100
    LashuntaringwearIV.type = "Heavy"
    let LashuntaringwearIVEAC = Bonus(context: context)
    LashuntaringwearIVEAC.type = "EAC"
    LashuntaringwearIVEAC.bonus = 16
    LashuntaringwearIV.addToArmorBonus(LashuntaringwearIVEAC)
    let LashuntaringwearIVKAC = Bonus(context: context)
    LashuntaringwearIVKAC.type = "KAC"
    LashuntaringwearIVKAC.bonus = 18
    LashuntaringwearIV.addToArmorBonus(LashuntaringwearIVKAC)
    LashuntaringwearIV.maxDexBonus = 4
    LashuntaringwearIV.checkPenalty = -3
    let LashuntaringwearIVspeed = Bonus(context: context)
    LashuntaringwearIVspeed.type = "Speed"
    LashuntaringwearIVspeed.bonus = -5
    LashuntaringwearIV.addToArmorBonus(LashuntaringwearIVspeed)
    LashuntaringwearIV.upgradeSlots = 4
    LashuntaringwearIV.bulk = 2.0
    LashuntaringwearIV.content = """
    These beautiful suits of heavy armor feature engraved metal bands that fit above and below the body’s major joints. Metal guards, woven chain sheets, and force fields stretch between the bands to form a complete set of protective gear. Tinted crystals are often added during the forging process to the ore used for ringwear to create glimmering suits of different hues.
    """

    let LashuntaringwearV = CompendiumArmor(context: context)
    LashuntaringwearV.name = "Lashunta ringwear V"
    LashuntaringwearV.level = 15
    LashuntaringwearV.price = 94200
    LashuntaringwearV.type = "Heavy"
    let LashuntaringwearVEAC = Bonus(context: context)
    LashuntaringwearVEAC.type = "EAC"
    LashuntaringwearVEAC.bonus = 20
    LashuntaringwearV.addToArmorBonus(LashuntaringwearVEAC)
    let LashuntaringwearVKAC = Bonus(context: context)
    LashuntaringwearVKAC.type = "KAC"
    LashuntaringwearVKAC.bonus = 22
    LashuntaringwearV.addToArmorBonus(LashuntaringwearVKAC)
    LashuntaringwearV.maxDexBonus = 4
    LashuntaringwearV.checkPenalty = -2
    let LashuntaringwearVspeed = Bonus(context: context)
    LashuntaringwearVspeed.type = "Speed"
    LashuntaringwearVspeed.bonus = -5
    LashuntaringwearV.addToArmorBonus(LashuntaringwearVspeed)
    LashuntaringwearV.upgradeSlots = 5
    LashuntaringwearV.bulk = 2.0
    LashuntaringwearV.content = """
    These beautiful suits of heavy armor feature engraved metal bands that fit above and below the body’s major joints. Metal guards, woven chain sheets, and force fields stretch between the bands to form a complete set of protective gear. Tinted crystals are often added during the forging process to the ore used for ringwear to create glimmering suits of different hues.
    """

    let Hellknightplatearmiger = CompendiumArmor(context: context)
    Hellknightplatearmiger.name = "Hellknight plate, armiger"
    Hellknightplatearmiger.level = 2
    Hellknightplatearmiger.price = 980
    Hellknightplatearmiger.type = "Heavy"
    let HellknightplatearmigerEAC = Bonus(context: context)
    HellknightplatearmigerEAC.type = "EAC"
    HellknightplatearmigerEAC.bonus = 4
    Hellknightplatearmiger.addToArmorBonus(HellknightplatearmigerEAC)
    let HellknightplatearmigerKAC = Bonus(context: context)
    HellknightplatearmigerKAC.type = "KAC"
    HellknightplatearmigerKAC.bonus = 5
    Hellknightplatearmiger.addToArmorBonus(HellknightplatearmigerKAC)
    Hellknightplatearmiger.maxDexBonus = 2
    Hellknightplatearmiger.checkPenalty = -2
    let Hellknightplatearmigerspeed = Bonus(context: context)
    Hellknightplatearmigerspeed.type = "Speed"
    Hellknightplatearmigerspeed.bonus = -10
    Hellknightplatearmiger.addToArmorBonus(Hellknightplatearmigerspeed)
    Hellknightplatearmiger.upgradeSlots = 2
    Hellknightplatearmiger.bulk = 3.0
    Hellknightplatearmiger.content = """
    The stern and unrelenting hell knights are known as much for their distinctive plate armor as for their fearsome adherence to rigid order. This variant of ceremonial plate is predominantly black with protruding spikes, and each hell knight order has its own distinct design.
    """

    let Hellknightplatelictor = CompendiumArmor(context: context)
    Hellknightplatelictor.name = "Hellknight plate, lictor"
    Hellknightplatelictor.level = 5
    Hellknightplatelictor.price = 3300
    Hellknightplatelictor.type = "Heavy"
    let HellknightplatelictorEAC = Bonus(context: context)
    HellknightplatelictorEAC.type = "EAC"
    HellknightplatelictorEAC.bonus = 9
    Hellknightplatelictor.addToArmorBonus(HellknightplatelictorEAC)
    let HellknightplatelictorKAC = Bonus(context: context)
    HellknightplatelictorKAC.type = "KAC"
    HellknightplatelictorKAC.bonus = 10
    Hellknightplatelictor.addToArmorBonus(HellknightplatelictorKAC)
    Hellknightplatelictor.maxDexBonus = 2
    Hellknightplatelictor.checkPenalty = -2
    let Hellknightplatelictorspeed = Bonus(context: context)
    Hellknightplatelictorspeed.type = "Speed"
    Hellknightplatelictorspeed.bonus = -10
    Hellknightplatelictor.addToArmorBonus(Hellknightplatelictorspeed)
    Hellknightplatelictor.upgradeSlots = 2
    Hellknightplatelictor.bulk = 3.0
    Hellknightplatelictor.content = """
    The stern and unrelenting hell knights are known as much for their distinctive plate armor as for their fearsome adherence to rigid order. This variant of ceremonial plate is predominantly black with protruding spikes, and each hell knight order has its own distinct design.
    """

    let Hellknightplatemaralictor = CompendiumArmor(context: context)
    Hellknightplatemaralictor.name = "Hellknight plate, maralictor"
    Hellknightplatemaralictor.level = 9
    Hellknightplatemaralictor.price = 14500
    Hellknightplatemaralictor.type = "Heavy"
    let HellknightplatemaralictorEAC = Bonus(context: context)
    HellknightplatemaralictorEAC.type = "EAC"
    HellknightplatemaralictorEAC.bonus = 16
    Hellknightplatemaralictor.addToArmorBonus(HellknightplatemaralictorEAC)
    let HellknightplatemaralictorKAC = Bonus(context: context)
    HellknightplatemaralictorKAC.type = "KAC"
    HellknightplatemaralictorKAC.bonus = 17
    Hellknightplatemaralictor.addToArmorBonus(HellknightplatemaralictorKAC)
    Hellknightplatemaralictor.maxDexBonus = 2
    Hellknightplatemaralictor.checkPenalty = -2
    let Hellknightplatemaralictorspeed = Bonus(context: context)
    Hellknightplatemaralictorspeed.type = "Speed"
    Hellknightplatemaralictorspeed.bonus = -10
    Hellknightplatemaralictor.addToArmorBonus(Hellknightplatemaralictorspeed)
    Hellknightplatemaralictor.upgradeSlots = 4
    Hellknightplatemaralictor.bulk = 3.0
    Hellknightplatemaralictor.content = """
    The stern and unrelenting hell knights are known as much for their distinctive plate armor as for their fearsome adherence to rigid order. This variant of ceremonial plate is predominantly black with protruding spikes, and each hell knight order has its own distinct design.
    """

    let Hellknightplateparalictor = CompendiumArmor(context: context)
    Hellknightplateparalictor.name = "Hellknight plate, paralictor"
    Hellknightplateparalictor.level = 14
    Hellknightplateparalictor.price = 80000
    Hellknightplateparalictor.type = "Heavy"
    let HellknightplateparalictorEAC = Bonus(context: context)
    HellknightplateparalictorEAC.type = "EAC"
    HellknightplateparalictorEAC.bonus = 21
    Hellknightplateparalictor.addToArmorBonus(HellknightplateparalictorEAC)
    let HellknightplateparalictorKAC = Bonus(context: context)
    HellknightplateparalictorKAC.type = "KAC"
    HellknightplateparalictorKAC.bonus = 22
    Hellknightplateparalictor.addToArmorBonus(HellknightplateparalictorKAC)
    Hellknightplateparalictor.maxDexBonus = 3
    Hellknightplateparalictor.checkPenalty = -2
    let Hellknightplateparalictorspeed = Bonus(context: context)
    Hellknightplateparalictorspeed.type = "Speed"
    Hellknightplateparalictorspeed.bonus = -10
    Hellknightplateparalictor.addToArmorBonus(Hellknightplateparalictorspeed)
    Hellknightplateparalictor.upgradeSlots = 6
    Hellknightplateparalictor.bulk = 3.0
    Hellknightplateparalictor.content = """
    The stern and unrelenting hell knights are known as much for their distinctive plate armor as for their fearsome adherence to rigid order. This variant of ceremonial plate is predominantly black with protruding spikes, and each hell knight order has its own distinct design.
    """

    let Hiddensoldierarmor = CompendiumArmor(context: context)
    Hiddensoldierarmor.name = "Hidden soldier armor"
    Hiddensoldierarmor.level = 2
    Hiddensoldierarmor.price = 465
    Hiddensoldierarmor.type = "Heavy"
    let HiddensoldierarmorEAC = Bonus(context: context)
    HiddensoldierarmorEAC.type = "EAC"
    HiddensoldierarmorEAC.bonus = 3
    Hiddensoldierarmor.addToArmorBonus(HiddensoldierarmorEAC)
    let HiddensoldierarmorKAC = Bonus(context: context)
    HiddensoldierarmorKAC.type = "KAC"
    HiddensoldierarmorKAC.bonus = 5
    Hiddensoldierarmor.addToArmorBonus(HiddensoldierarmorKAC)
    Hiddensoldierarmor.maxDexBonus = 2
    Hiddensoldierarmor.checkPenalty = -2
    let Hiddensoldierarmorspeed = Bonus(context: context)
    Hiddensoldierarmorspeed.type = "Speed"
    Hiddensoldierarmorspeed.bonus = -5
    Hiddensoldierarmor.addToArmorBonus(Hiddensoldierarmorspeed)
    Hiddensoldierarmor.upgradeSlots = 1
    Hiddensoldierarmor.bulk = 2.0
    Hiddensoldierarmor.content = """
    Made by the kasatha, these suits of heavy armor are so named for their slitted helmets, which reveal only the eyes. A rebreather lets the wearer keep their faces completely covered. A ceramic breastplate, shoulder guards, bracers, and greaves protect the wearer while facilitating the graceful kasathan close-combat style.
    """

    let Iridishellbasic = CompendiumArmor(context: context)
    Iridishellbasic.name = "Iridishell, basic"
    Iridishellbasic.level = 2
    Iridishellbasic.price = 755
    Iridishellbasic.type = "Heavy"
    let IridishellbasicEAC = Bonus(context: context)
    IridishellbasicEAC.type = "EAC"
    IridishellbasicEAC.bonus = 3
    Iridishellbasic.addToArmorBonus(IridishellbasicEAC)
    let IridishellbasicKAC = Bonus(context: context)
    IridishellbasicKAC.type = "KAC"
    IridishellbasicKAC.bonus = 6
    Iridishellbasic.addToArmorBonus(IridishellbasicKAC)
    Iridishellbasic.maxDexBonus = 2
    Iridishellbasic.checkPenalty = -2
    let Iridishellbasicspeed = Bonus(context: context)
    Iridishellbasicspeed.type = "Speed"
    Iridishellbasicspeed.bonus = -5
    Iridishellbasic.addToArmorBonus(Iridishellbasicspeed)
    Iridishellbasic.upgradeSlots = 0
    Iridishellbasic.bulk = 2.0
    Iridishellbasic.content = """
    These gleaming metal plates lock together to form a suit of heavy armor reminiscent of an insect’s shell. Although the iridishell was initially designed for shirrens, its beauty combined and functionality makes it a popular choice for many. More expensive suits of iridishell not only offer more protection but feature elaborate designs with gold or silver trim and embedded jewels.
    """

    let Iridishelladvanced = CompendiumArmor(context: context)
    Iridishelladvanced.name = "Iridishell, advanced"
    Iridishelladvanced.level = 9
    Iridishelladvanced.price = 13100
    Iridishelladvanced.type = "Heavy"
    let IridishelladvancedEAC = Bonus(context: context)
    IridishelladvancedEAC.type = "EAC"
    IridishelladvancedEAC.bonus = 13
    Iridishelladvanced.addToArmorBonus(IridishelladvancedEAC)
    let IridishelladvancedKAC = Bonus(context: context)
    IridishelladvancedKAC.type = "KAC"
    IridishelladvancedKAC.bonus = 15
    Iridishelladvanced.addToArmorBonus(IridishelladvancedKAC)
    Iridishelladvanced.maxDexBonus = 3
    Iridishelladvanced.checkPenalty = 0
    Iridishelladvanced.upgradeSlots = 3
    Iridishelladvanced.bulk = 2.0
    Iridishelladvanced.content = """
    These gleaming metal plates lock together to form a suit of heavy armor reminiscent of an insect’s shell. Although the iridishell was initially designed for shirrens, its beauty combined and functionality makes it a popular choice for many. More expensive suits of iridishell not only offer more protection but feature elaborate designs with gold or silver trim and embedded jewels.
    """

    let Iridishellsuperior = CompendiumArmor(context: context)
    Iridishellsuperior.name = "Iridishell, superior"
    Iridishellsuperior.level = 12
    Iridishellsuperior.price = 42250
    Iridishellsuperior.type = "Heavy"
    let IridishellsuperiorEAC = Bonus(context: context)
    IridishellsuperiorEAC.type = "EAC"
    IridishellsuperiorEAC.bonus = 14
    Iridishellsuperior.addToArmorBonus(IridishellsuperiorEAC)
    let IridishellsuperiorKAC = Bonus(context: context)
    IridishellsuperiorKAC.type = "KAC"
    IridishellsuperiorKAC.bonus = 18
    Iridishellsuperior.addToArmorBonus(IridishellsuperiorKAC)
    Iridishellsuperior.maxDexBonus = 4
    Iridishellsuperior.checkPenalty = 0
    Iridishellsuperior.upgradeSlots = 4
    Iridishellsuperior.bulk = 2.0
    Iridishellsuperior.content = """
    These gleaming metal plates lock together to form a suit of heavy armor reminiscent of an insect’s shell. Although the iridishell was initially designed for shirrens, its beauty combined and functionality makes it a popular choice for many. More expensive suits of iridishell not only offer more protection but feature elaborate designs with gold or silver trim and embedded jewels.
    """

    let Thinplate = CompendiumArmor(context: context)
    Thinplate.name = "Thinplate"
    Thinplate.level = 2
    Thinplate.price = 1000
    Thinplate.type = "Heavy"
    let ThinplateEAC = Bonus(context: context)
    ThinplateEAC.type = "EAC"
    ThinplateEAC.bonus = 4
    Thinplate.addToArmorBonus(ThinplateEAC)
    let ThinplateKAC = Bonus(context: context)
    ThinplateKAC.type = "KAC"
    ThinplateKAC.bonus = 6
    Thinplate.addToArmorBonus(ThinplateKAC)
    Thinplate.maxDexBonus = 2
    Thinplate.checkPenalty = -3
    let Thinplatespeed = Bonus(context: context)
    Thinplatespeed.type = "Speed"
    Thinplatespeed.bonus = -10
    Thinplate.addToArmorBonus(Thinplatespeed)
    Thinplate.upgradeSlots = 1
    Thinplate.bulk = 3.0
    Thinplate.content = """
    Devised by androids, thinplate is a dense polyethylene layer that looks lightweight while providing significant protection. This type of heavy armor is thin enough to be worn under loose outfits, but the rigid polyethylene restricts movement and slows the wearer. Thinplate can be molded into a variety of styles, though a simple breastplate plus limb guards is the most common form.
    """

    let Defianceseriessquad = CompendiumArmor(context: context)
    Defianceseriessquad.name = "Defiance series, squad"
    Defianceseriessquad.level = 3
    Defianceseriessquad.price = 1220
    Defianceseriessquad.type = "Heavy"
    let DefianceseriessquadEAC = Bonus(context: context)
    DefianceseriessquadEAC.type = "EAC"
    DefianceseriessquadEAC.bonus = 5
    Defianceseriessquad.addToArmorBonus(DefianceseriessquadEAC)
    let DefianceseriessquadKAC = Bonus(context: context)
    DefianceseriessquadKAC.type = "KAC"
    DefianceseriessquadKAC.bonus = 8
    Defianceseriessquad.addToArmorBonus(DefianceseriessquadKAC)
    Defianceseriessquad.maxDexBonus = 1
    Defianceseriessquad.checkPenalty = -4
    let Defianceseriessquadspeed = Bonus(context: context)
    Defianceseriessquadspeed.type = "Speed"
    Defianceseriessquadspeed.bonus = -10
    Defianceseriessquad.addToArmorBonus(Defianceseriessquadspeed)
    Defianceseriessquad.upgradeSlots = 1
    Defianceseriessquad.bulk = 3.0
    Defianceseriessquad.content = """
    The defiance series of heavy armor is the workhorse of squad armor. A formed hard shell overlays a suit of para-aramids, creating a bulky and solid protective outfit. Defiance series helmets have wide, tinted visors to allow peripheral vision.
    """

    let Defianceserieselite = CompendiumArmor(context: context)
    Defianceserieselite.name = "Defiance series, elite"
    Defianceserieselite.level = 7
    Defianceserieselite.price = 6300
    Defianceserieselite.type = "Heavy"
    let DefianceserieseliteEAC = Bonus(context: context)
    DefianceserieseliteEAC.type = "EAC"
    DefianceserieseliteEAC.bonus = 10
    Defianceserieselite.addToArmorBonus(DefianceserieseliteEAC)
    let DefianceserieseliteKAC = Bonus(context: context)
    DefianceserieseliteKAC.type = "KAC"
    DefianceserieseliteKAC.bonus = 13
    Defianceserieselite.addToArmorBonus(DefianceserieseliteKAC)
    Defianceserieselite.maxDexBonus = 2
    Defianceserieselite.checkPenalty = -4
    let Defianceserieselitespeed = Bonus(context: context)
    Defianceserieselitespeed.type = "Speed"
    Defianceserieselitespeed.bonus = -10
    Defianceserieselite.addToArmorBonus(Defianceserieselitespeed)
    Defianceserieselite.upgradeSlots = 2
    Defianceserieselite.bulk = 3.0
    Defianceserieselite.content = """
    The defiance series of heavy armor is the workhorse of squad armor. A formed hard shell overlays a suit of para-aramids, creating a bulky and solid protective outfit. Defiance series helmets have wide, tinted visors to allow peripheral vision.
    """

    let Defianceseriesspecialist = CompendiumArmor(context: context)
    Defianceseriesspecialist.name = "Defiance series, specialist"
    Defianceseriesspecialist.level = 10
    Defianceseriesspecialist.price = 16950
    Defianceseriesspecialist.type = "Heavy"
    let DefianceseriesspecialistEAC = Bonus(context: context)
    DefianceseriesspecialistEAC.type = "EAC"
    DefianceseriesspecialistEAC.bonus = 15
    Defianceseriesspecialist.addToArmorBonus(DefianceseriesspecialistEAC)
    let DefianceseriesspecialistKAC = Bonus(context: context)
    DefianceseriesspecialistKAC.type = "KAC"
    DefianceseriesspecialistKAC.bonus = 18
    Defianceseriesspecialist.addToArmorBonus(DefianceseriesspecialistKAC)
    Defianceseriesspecialist.maxDexBonus = 2
    Defianceseriesspecialist.checkPenalty = -4
    let Defianceseriesspecialistspeed = Bonus(context: context)
    Defianceseriesspecialistspeed.type = "Speed"
    Defianceseriesspecialistspeed.bonus = -10
    Defianceseriesspecialist.addToArmorBonus(Defianceseriesspecialistspeed)
    Defianceseriesspecialist.upgradeSlots = 3
    Defianceseriesspecialist.bulk = 3.0
    Defianceseriesspecialist.content = """
    The defiance series of heavy armor is the workhorse of squad armor. A formed hard shell overlays a suit of para-aramids, creating a bulky and solid protective outfit. Defiance series helmets have wide, tinted visors to allow peripheral vision.
    """

    let Formianhidebasic = CompendiumArmor(context: context)
    Formianhidebasic.name = "Formian hide, basic"
    Formianhidebasic.level = 4
    Formianhidebasic.price = 2400
    Formianhidebasic.type = "Heavy"
    let FormianhidebasicEAC = Bonus(context: context)
    FormianhidebasicEAC.type = "EAC"
    FormianhidebasicEAC.bonus = 7
    Formianhidebasic.addToArmorBonus(FormianhidebasicEAC)
    let FormianhidebasicKAC = Bonus(context: context)
    FormianhidebasicKAC.type = "KAC"
    FormianhidebasicKAC.bonus = 8
    Formianhidebasic.addToArmorBonus(FormianhidebasicKAC)
    Formianhidebasic.maxDexBonus = 2
    Formianhidebasic.checkPenalty = -3
    let Formianhidebasicspeed = Bonus(context: context)
    Formianhidebasicspeed.type = "Speed"
    Formianhidebasicspeed.bonus = -5
    Formianhidebasic.addToArmorBonus(Formianhidebasicspeed)
    Formianhidebasic.upgradeSlots = 2
    Formianhidebasic.bulk = 2.0
    Formianhidebasic.content = """
    The vicious wars between lashuntas and formians drove many technomagical advances, including this armor made to emulate the chitinous skins of formians. The armor includes a helmet that boosts the wearer’s natural telepathy; if you have the limited telepathy racial trait, you add 10 feet to the range of that ability. This increase doesn’t stack with other effects that extend the range of your telepathy, such as a psychic booster.
    """

    let Formianhideadvanced = CompendiumArmor(context: context)
    Formianhideadvanced.name = "Formian hide, advanced"
    Formianhideadvanced.level = 7
    Formianhideadvanced.price = 6100
    Formianhideadvanced.type = "Heavy"
    let FormianhideadvancedEAC = Bonus(context: context)
    FormianhideadvancedEAC.type = "EAC"
    FormianhideadvancedEAC.bonus = 10
    Formianhideadvanced.addToArmorBonus(FormianhideadvancedEAC)
    let FormianhideadvancedKAC = Bonus(context: context)
    FormianhideadvancedKAC.type = "KAC"
    FormianhideadvancedKAC.bonus = 12
    Formianhideadvanced.addToArmorBonus(FormianhideadvancedKAC)
    Formianhideadvanced.maxDexBonus = 3
    Formianhideadvanced.checkPenalty = -3
    let Formianhideadvancedspeed = Bonus(context: context)
    Formianhideadvancedspeed.type = "Speed"
    Formianhideadvancedspeed.bonus = -5
    Formianhideadvanced.addToArmorBonus(Formianhideadvancedspeed)
    Formianhideadvanced.upgradeSlots = 3
    Formianhideadvanced.bulk = 2.0
    Formianhideadvanced.content = """
    The vicious wars between lashuntas and formians drove many technomagical advances, including this armor made to emulate the chitinous skins of formians. The armor includes a helmet that boosts the wearer’s natural telepathy; if you have the limited telepathy racial trait, you add 10 feet to the range of that ability. This increase doesn’t stack with other effects that extend the range of your telepathy, such as a psychic booster.
    """

    let Formianhidesuperior = CompendiumArmor(context: context)
    Formianhidesuperior.name = "Formian hide, superior"
    Formianhidesuperior.level = 10
    Formianhidesuperior.price = 16500
    Formianhidesuperior.type = "Heavy"
    let FormianhidesuperiorEAC = Bonus(context: context)
    FormianhidesuperiorEAC.type = "EAC"
    FormianhidesuperiorEAC.bonus = 15
    Formianhidesuperior.addToArmorBonus(FormianhidesuperiorEAC)
    let FormianhidesuperiorKAC = Bonus(context: context)
    FormianhidesuperiorKAC.type = "KAC"
    FormianhidesuperiorKAC.bonus = 17
    Formianhidesuperior.addToArmorBonus(FormianhidesuperiorKAC)
    Formianhidesuperior.maxDexBonus = 3
    Formianhidesuperior.checkPenalty = -4
    let Formianhidesuperiorspeed = Bonus(context: context)
    Formianhidesuperiorspeed.type = "Speed"
    Formianhidesuperiorspeed.bonus = -5
    Formianhidesuperior.addToArmorBonus(Formianhidesuperiorspeed)
    Formianhidesuperior.upgradeSlots = 3
    Formianhidesuperior.bulk = 2.0
    Formianhidesuperior.content = """
    The vicious wars between lashuntas and formians drove many technomagical advances, including this armor made to emulate the chitinous skins of formians. The armor includes a helmet that boosts the wearer’s natural telepathy; if you have the limited telepathy racial trait, you add 10 feet to the range of that ability. This increase doesn’t stack with other effects that extend the range of your telepathy, such as a psychic booster.
    """

    let VeskoverplateI = CompendiumArmor(context: context)
    VeskoverplateI.name = "Vesk overplate I"
    VeskoverplateI.level = 6
    VeskoverplateI.price = 3910
    VeskoverplateI.type = "Heavy"
    let VeskoverplateIEAC = Bonus(context: context)
    VeskoverplateIEAC.type = "EAC"
    VeskoverplateIEAC.bonus = 9
    VeskoverplateI.addToArmorBonus(VeskoverplateIEAC)
    let VeskoverplateIKAC = Bonus(context: context)
    VeskoverplateIKAC.type = "KAC"
    VeskoverplateIKAC.bonus = 11
    VeskoverplateI.addToArmorBonus(VeskoverplateIKAC)
    VeskoverplateI.maxDexBonus = 3
    VeskoverplateI.checkPenalty = -2
    let VeskoverplateIspeed = Bonus(context: context)
    VeskoverplateIspeed.type = "Speed"
    VeskoverplateIspeed.bonus = -5
    VeskoverplateI.addToArmorBonus(VeskoverplateIspeed)
    VeskoverplateI.upgradeSlots = 1
    VeskoverplateI.bulk = 2.0
    VeskoverplateI.content = """
    These utilitarian suits of heavy armor reflect the brute strength of their inventors. Overplate makes no concession to comfort. Instead, each polycarbonate suit is solid, dense, and often unadorned, though the high-quality craftsmanship of each suit is apparent. Overplate has a reputation for withstanding any sort of trauma, thanks to its coating of thermoplastic resin.
    """

    let VeskoverplateII = CompendiumArmor(context: context)
    VeskoverplateII.name = "Vesk overplate II"
    VeskoverplateII.level = 8
    VeskoverplateII.price = 10250
    VeskoverplateII.type = "Heavy"
    let VeskoverplateIIEAC = Bonus(context: context)
    VeskoverplateIIEAC.type = "EAC"
    VeskoverplateIIEAC.bonus = 13
    VeskoverplateII.addToArmorBonus(VeskoverplateIIEAC)
    let VeskoverplateIIKAC = Bonus(context: context)
    VeskoverplateIIKAC.type = "KAC"
    VeskoverplateIIKAC.bonus = 15
    VeskoverplateII.addToArmorBonus(VeskoverplateIIKAC)
    VeskoverplateII.maxDexBonus = 2
    VeskoverplateII.checkPenalty = -3
    let VeskoverplateIIspeed = Bonus(context: context)
    VeskoverplateIIspeed.type = "Speed"
    VeskoverplateIIspeed.bonus = -10
    VeskoverplateII.addToArmorBonus(VeskoverplateIIspeed)
    VeskoverplateII.upgradeSlots = 3
    VeskoverplateII.bulk = 3.0
    VeskoverplateII.content = """
    These utilitarian suits of heavy armor reflect the brute strength of their inventors. Overplate makes no concession to comfort. Instead, each polycarbonate suit is solid, dense, and often unadorned, though the high-quality craftsmanship of each suit is apparent. Overplate has a reputation for withstanding any sort of trauma, thanks to its coating of thermoplastic resin.
    """

    let VeskoverplateIII = CompendiumArmor(context: context)
    VeskoverplateIII.name = "Vesk overplate III"
    VeskoverplateIII.level = 11
    VeskoverplateIII.price = 23400
    VeskoverplateIII.type = "Heavy"
    let VeskoverplateIIIEAC = Bonus(context: context)
    VeskoverplateIIIEAC.type = "EAC"
    VeskoverplateIIIEAC.bonus = 16
    VeskoverplateIII.addToArmorBonus(VeskoverplateIIIEAC)
    let VeskoverplateIIIKAC = Bonus(context: context)
    VeskoverplateIIIKAC.type = "KAC"
    VeskoverplateIIIKAC.bonus = 18
    VeskoverplateIII.addToArmorBonus(VeskoverplateIIIKAC)
    VeskoverplateIII.maxDexBonus = 3
    VeskoverplateIII.checkPenalty = -2
    let VeskoverplateIIIspeed = Bonus(context: context)
    VeskoverplateIIIspeed.type = "Speed"
    VeskoverplateIIIspeed.bonus = -5
    VeskoverplateIII.addToArmorBonus(VeskoverplateIIIspeed)
    VeskoverplateIII.upgradeSlots = 4
    VeskoverplateIII.bulk = 2.0
    VeskoverplateIII.content = """
    These utilitarian suits of heavy armor reflect the brute strength of their inventors. Overplate makes no concession to comfort. Instead, each polycarbonate suit is solid, dense, and often unadorned, though the high-quality craftsmanship of each suit is apparent. Overplate has a reputation for withstanding any sort of trauma, thanks to its coating of thermoplastic resin.
    """

    let VeskoverplateIV = CompendiumArmor(context: context)
    VeskoverplateIV.name = "Vesk overplate IV"
    VeskoverplateIV.level = 14
    VeskoverplateIV.price = 71850
    VeskoverplateIV.type = "Heavy"
    let VeskoverplateIVEAC = Bonus(context: context)
    VeskoverplateIVEAC.type = "EAC"
    VeskoverplateIVEAC.bonus = 19
    VeskoverplateIV.addToArmorBonus(VeskoverplateIVEAC)
    let VeskoverplateIVKAC = Bonus(context: context)
    VeskoverplateIVKAC.type = "KAC"
    VeskoverplateIVKAC.bonus = 21
    VeskoverplateIV.addToArmorBonus(VeskoverplateIVKAC)
    VeskoverplateIV.maxDexBonus = 4
    VeskoverplateIV.checkPenalty = -2
    let VeskoverplateIVspeed = Bonus(context: context)
    VeskoverplateIVspeed.type = "Speed"
    VeskoverplateIVspeed.bonus = -5
    VeskoverplateIV.addToArmorBonus(VeskoverplateIVspeed)
    VeskoverplateIV.upgradeSlots = 5
    VeskoverplateIV.bulk = 2.0
    VeskoverplateIV.content = """
    These utilitarian suits of heavy armor reflect the brute strength of their inventors. Overplate makes no concession to comfort. Instead, each polycarbonate suit is solid, dense, and often unadorned, though the high-quality craftsmanship of each suit is apparent. Overplate has a reputation for withstanding any sort of trauma, thanks to its coating of thermoplastic resin.
    """

    let VeskoverplateV = CompendiumArmor(context: context)
    VeskoverplateV.name = "Vesk overplate V"
    VeskoverplateV.level = 18
    VeskoverplateV.price = 415800
    VeskoverplateV.type = "Heavy"
    let VeskoverplateVEAC = Bonus(context: context)
    VeskoverplateVEAC.type = "EAC"
    VeskoverplateVEAC.bonus = 24
    VeskoverplateV.addToArmorBonus(VeskoverplateVEAC)
    let VeskoverplateVKAC = Bonus(context: context)
    VeskoverplateVKAC.type = "KAC"
    VeskoverplateVKAC.bonus = 26
    VeskoverplateV.addToArmorBonus(VeskoverplateVKAC)
    VeskoverplateV.maxDexBonus = 4
    VeskoverplateV.checkPenalty = -3
    let VeskoverplateVspeed = Bonus(context: context)
    VeskoverplateVspeed.type = "Speed"
    VeskoverplateVspeed.bonus = -5
    VeskoverplateV.addToArmorBonus(VeskoverplateVspeed)
    VeskoverplateV.upgradeSlots = 7
    VeskoverplateV.bulk = 2.0
    VeskoverplateV.content = """
    These utilitarian suits of heavy armor reflect the brute strength of their inventors. Overplate makes no concession to comfort. Instead, each polycarbonate suit is solid, dense, and often unadorned, though the high-quality craftsmanship of each suit is apparent. Overplate has a reputation for withstanding any sort of trauma, thanks to its coating of thermoplastic resin.
    """

    let Starfirearmorpinion = CompendiumArmor(context: context)
    Starfirearmorpinion.name = "Starfire armor, pinion"
    Starfirearmorpinion.level = 9
    Starfirearmorpinion.price = 14200
    Starfirearmorpinion.type = "Heavy"
    let StarfirearmorpinionEAC = Bonus(context: context)
    StarfirearmorpinionEAC.type = "EAC"
    StarfirearmorpinionEAC.bonus = 14
    Starfirearmorpinion.addToArmorBonus(StarfirearmorpinionEAC)
    let StarfirearmorpinionKAC = Bonus(context: context)
    StarfirearmorpinionKAC.type = "KAC"
    StarfirearmorpinionKAC.bonus = 16
    Starfirearmorpinion.addToArmorBonus(StarfirearmorpinionKAC)
    Starfirearmorpinion.maxDexBonus = 3
    Starfirearmorpinion.checkPenalty = -2
    let Starfirearmorpinionspeed = Bonus(context: context)
    Starfirearmorpinionspeed.type = "Speed"
    Starfirearmorpinionspeed.bonus = -5
    Starfirearmorpinion.addToArmorBonus(Starfirearmorpinionspeed)
    Starfirearmorpinion.upgradeSlots = 4
    Starfirearmorpinion.bulk = 2.0
    Starfirearmorpinion.content = """
    These suits of interlocking metal and ceramic plates are usually highly decorated. Gold trim, exaggerated shoulder guards, and stylized logos on the breastplates are common. These iconic outfits are worn by the storied members of the Infinite Star Legion, though other groups and individuals have copied the Legion’s distinctively decorated heavy armor. Starfire armor ordinarily comes with force fields that encase the wearer’s head when needed.
    """

    let Starfirearmorexident = CompendiumArmor(context: context)
    Starfirearmorexident.name = "Starfire armor, exident"
    Starfirearmorexident.level = 13
    Starfirearmorexident.price = 53600
    Starfirearmorexident.type = "Heavy"
    let StarfirearmorexidentEAC = Bonus(context: context)
    StarfirearmorexidentEAC.type = "EAC"
    StarfirearmorexidentEAC.bonus = 18
    Starfirearmorexident.addToArmorBonus(StarfirearmorexidentEAC)
    let StarfirearmorexidentKAC = Bonus(context: context)
    StarfirearmorexidentKAC.type = "KAC"
    StarfirearmorexidentKAC.bonus = 20
    Starfirearmorexident.addToArmorBonus(StarfirearmorexidentKAC)
    Starfirearmorexident.maxDexBonus = 4
    Starfirearmorexident.checkPenalty = -2
    let Starfirearmorexidentspeed = Bonus(context: context)
    Starfirearmorexidentspeed.type = "Speed"
    Starfirearmorexidentspeed.bonus = -5
    Starfirearmorexident.addToArmorBonus(Starfirearmorexidentspeed)
    Starfirearmorexident.upgradeSlots = 5
    Starfirearmorexident.bulk = 2.0
    Starfirearmorexident.content = """
    These suits of interlocking metal and ceramic plates are usually highly decorated. Gold trim, exaggerated shoulder guards, and stylized logos on the breastplates are common. These iconic outfits are worn by the storied members of the Infinite Star Legion, though other groups and individuals have copied the Legion’s distinctively decorated heavy armor. Starfire armor ordinarily comes with force fields that encase the wearer’s head when needed.
    """

    let Aegisseriessquad = CompendiumArmor(context: context)
    Aegisseriessquad.name = "Aegis series, squad"
    Aegisseriessquad.level = 12
    Aegisseriessquad.price = 45200
    Aegisseriessquad.type = "Heavy"
    let AegisseriessquadEAC = Bonus(context: context)
    AegisseriessquadEAC.type = "EAC"
    AegisseriessquadEAC.bonus = 17
    Aegisseriessquad.addToArmorBonus(AegisseriessquadEAC)
    let AegisseriessquadKAC = Bonus(context: context)
    AegisseriessquadKAC.type = "KAC"
    AegisseriessquadKAC.bonus = 19
    Aegisseriessquad.addToArmorBonus(AegisseriessquadKAC)
    Aegisseriessquad.maxDexBonus = 3
    Aegisseriessquad.checkPenalty = -5
    let Aegisseriessquadspeed = Bonus(context: context)
    Aegisseriessquadspeed.type = "Speed"
    Aegisseriessquadspeed.bonus = -10
    Aegisseriessquad.addToArmorBonus(Aegisseriessquadspeed)
    Aegisseriessquad.upgradeSlots = 5
    Aegisseriessquad.bulk = 3.0
    Aegisseriessquad.content = """
    Aegis suits of heavy armor cover wearers entirely, leading to the suits’ nickname of “personal tanks.” Helmet visors are narrow or nonexistent, instead projecting video and audio feeds to the wearer. Power-assisted limbs allow the wearer to move intuitively with the suit on.
    """

    let Aegisserieselite = CompendiumArmor(context: context)
    Aegisserieselite.name = "Aegis series, elite"
    Aegisserieselite.level = 17
    Aegisserieselite.price = 209000
    Aegisserieselite.type = "Heavy"
    let AegisserieseliteEAC = Bonus(context: context)
    AegisserieseliteEAC.type = "EAC"
    AegisserieseliteEAC.bonus = 23
    Aegisserieselite.addToArmorBonus(AegisserieseliteEAC)
    let AegisserieseliteKAC = Bonus(context: context)
    AegisserieseliteKAC.type = "KAC"
    AegisserieseliteKAC.bonus = 27
    Aegisserieselite.addToArmorBonus(AegisserieseliteKAC)
    Aegisserieselite.maxDexBonus = 3
    Aegisserieselite.checkPenalty = -5
    let Aegisserieselitespeed = Bonus(context: context)
    Aegisserieselitespeed.type = "Speed"
    Aegisserieselitespeed.bonus = -10
    Aegisserieselite.addToArmorBonus(Aegisserieselitespeed)
    Aegisserieselite.upgradeSlots = 6
    Aegisserieselite.bulk = 3.0
    Aegisserieselite.content = """
    Aegis suits of heavy armor cover wearers entirely, leading to the suits’ nickname of “personal tanks.” Helmet visors are narrow or nonexistent, instead projecting video and audio feeds to the wearer. Power-assisted limbs allow the wearer to move intuitively with the suit on.
    """

    let Aegisseriesspecialist = CompendiumArmor(context: context)
    Aegisseriesspecialist.name = "Aegis series, specialist"
    Aegisseriesspecialist.level = 20
    Aegisseriesspecialist.price = 932000
    Aegisseriesspecialist.type = "Heavy"
    let AegisseriesspecialistEAC = Bonus(context: context)
    AegisseriesspecialistEAC.type = "EAC"
    AegisseriesspecialistEAC.bonus = 25
    Aegisseriesspecialist.addToArmorBonus(AegisseriesspecialistEAC)
    let AegisseriesspecialistKAC = Bonus(context: context)
    AegisseriesspecialistKAC.type = "KAC"
    AegisseriesspecialistKAC.bonus = 28
    Aegisseriesspecialist.addToArmorBonus(AegisseriesspecialistKAC)
    Aegisseriesspecialist.maxDexBonus = 4
    Aegisseriesspecialist.checkPenalty = -4
    let Aegisseriesspecialistspeed = Bonus(context: context)
    Aegisseriesspecialistspeed.type = "Speed"
    Aegisseriesspecialistspeed.bonus = -10
    Aegisseriesspecialist.addToArmorBonus(Aegisseriesspecialistspeed)
    Aegisseriesspecialist.upgradeSlots = 7
    Aegisseriesspecialist.bulk = 3.0
    Aegisseriesspecialist.content = """
    Aegis suits of heavy armor cover wearers entirely, leading to the suits’ nickname of “personal tanks.” Helmet visors are narrow or nonexistent, instead projecting video and audio feeds to the wearer. Power-assisted limbs allow the wearer to move intuitively with the suit on.
    """

    let VeskmonolithI = CompendiumArmor(context: context)
    VeskmonolithI.name = "Vesk monolith I"
    VeskmonolithI.level = 12
    VeskmonolithI.price = 39650
    VeskmonolithI.type = "Heavy"
    let VeskmonolithIEAC = Bonus(context: context)
    VeskmonolithIEAC.type = "EAC"
    VeskmonolithIEAC.bonus = 16
    VeskmonolithI.addToArmorBonus(VeskmonolithIEAC)
    let VeskmonolithIKAC = Bonus(context: context)
    VeskmonolithIKAC.type = "KAC"
    VeskmonolithIKAC.bonus = 18
    VeskmonolithI.addToArmorBonus(VeskmonolithIKAC)
    VeskmonolithI.maxDexBonus = 4
    VeskmonolithI.checkPenalty = -2
    let VeskmonolithIspeed = Bonus(context: context)
    VeskmonolithIspeed.type = "Speed"
    VeskmonolithIspeed.bonus = -5
    VeskmonolithI.addToArmorBonus(VeskmonolithIspeed)
    VeskmonolithI.upgradeSlots = 5
    VeskmonolithI.bulk = 2.0
    VeskmonolithI.content = """
    The ultimate battle gear, pioneered by the vesk, these suits of heavy armor have a dappled polycarbonate shell that resembles stone in texture. A monolith suit looks like a massive articulated golem formed of stone plates. Despite its size, monolith armor moves easily thanks to its power-assisted joints. Sigils and personal emblems can be “chiseled” on the breastplate or shoulder guards of a monolith suit to signal the wearer’s allegiance.
    """

    let VeskmonolithII = CompendiumArmor(context: context)
    VeskmonolithII.name = "Vesk monolith II"
    VeskmonolithII.level = 16
    VeskmonolithII.price = 163400
    VeskmonolithII.type = "Heavy"
    let VeskmonolithIIEAC = Bonus(context: context)
    VeskmonolithIIEAC.type = "EAC"
    VeskmonolithIIEAC.bonus = 22
    VeskmonolithII.addToArmorBonus(VeskmonolithIIEAC)
    let VeskmonolithIIKAC = Bonus(context: context)
    VeskmonolithIIKAC.type = "KAC"
    VeskmonolithIIKAC.bonus = 24
    VeskmonolithII.addToArmorBonus(VeskmonolithIIKAC)
    VeskmonolithII.maxDexBonus = 4
    VeskmonolithII.checkPenalty = -3
    let VeskmonolithIIspeed = Bonus(context: context)
    VeskmonolithIIspeed.type = "Speed"
    VeskmonolithIIspeed.bonus = -5
    VeskmonolithII.addToArmorBonus(VeskmonolithIIspeed)
    VeskmonolithII.upgradeSlots = 6
    VeskmonolithII.bulk = 2.0
    VeskmonolithII.content = """
    The ultimate battle gear, pioneered by the vesk, these suits of heavy armor have a dappled polycarbonate shell that resembles stone in texture. A monolith suit looks like a massive articulated golem formed of stone plates. Despite its size, monolith armor moves easily thanks to its power-assisted joints. Sigils and personal emblems can be “chiseled” on the breastplate or shoulder guards of a monolith suit to signal the wearer’s allegiance.
    """

    let VeskmonolithIII = CompendiumArmor(context: context)
    VeskmonolithIII.name = "Vesk monolith III"
    VeskmonolithIII.level = 20
    VeskmonolithIII.price = 827250
    VeskmonolithIII.type = "Heavy"
    let VeskmonolithIIIEAC = Bonus(context: context)
    VeskmonolithIIIEAC.type = "EAC"
    VeskmonolithIIIEAC.bonus = 26
    VeskmonolithIII.addToArmorBonus(VeskmonolithIIIEAC)
    let VeskmonolithIIIKAC = Bonus(context: context)
    VeskmonolithIIIKAC.type = "KAC"
    VeskmonolithIIIKAC.bonus = 27
    VeskmonolithIII.addToArmorBonus(VeskmonolithIIIKAC)
    VeskmonolithIII.maxDexBonus = 5
    VeskmonolithIII.checkPenalty = -2
    let VeskmonolithIIIspeed = Bonus(context: context)
    VeskmonolithIIIspeed.type = "Speed"
    VeskmonolithIIIspeed.bonus = -5
    VeskmonolithIII.addToArmorBonus(VeskmonolithIIIspeed)
    VeskmonolithIII.upgradeSlots = 7
    VeskmonolithIII.bulk = 2.0
    VeskmonolithIII.content = """
    The ultimate battle gear, pioneered by the vesk, these suits of heavy armor have a dappled polycarbonate shell that resembles stone in texture. A monolith suit looks like a massive articulated golem formed of stone plates. Despite its size, monolith armor moves easily thanks to its power-assisted joints. Sigils and personal emblems can be “chiseled” on the breastplate or shoulder guards of a monolith suit to signal the wearer’s allegiance.
    """

    let Enginerunner = CompendiumArmor(context: context)
    Enginerunner.name = "Enginerunner"
    Enginerunner.level = 15
    Enginerunner.price = 120900
    Enginerunner.type = "Heavy"
    let EnginerunnerEAC = Bonus(context: context)
    EnginerunnerEAC.type = "EAC"
    EnginerunnerEAC.bonus = 21
    Enginerunner.addToArmorBonus(EnginerunnerEAC)
    let EnginerunnerKAC = Bonus(context: context)
    EnginerunnerKAC.type = "KAC"
    EnginerunnerKAC.bonus = 22
    Enginerunner.addToArmorBonus(EnginerunnerKAC)
    Enginerunner.maxDexBonus = 4
    Enginerunner.checkPenalty = 0
    Enginerunner.upgradeSlots = 5
    Enginerunner.bulk = 2.0
    Enginerunner.content = """
    The ysoki popularized this seemingly lightweight but incredibly durable heavy armor. Small squares of dense metal lie between two layers of reinforced fiber weave, giving the appearance of a padded flight suit but offering considerably more protection.
    """

    let Steelbones = CompendiumArmor(context: context)
    Steelbones.name = "Steelbones"
    Steelbones.level = 16
    Steelbones.price = 145500
    Steelbones.type = "Heavy"
    let SteelbonesEAC = Bonus(context: context)
    SteelbonesEAC.type = "EAC"
    SteelbonesEAC.bonus = 21
    Steelbones.addToArmorBonus(SteelbonesEAC)
    let SteelbonesKAC = Bonus(context: context)
    SteelbonesKAC.type = "KAC"
    SteelbonesKAC.bonus = 23
    Steelbones.addToArmorBonus(SteelbonesKAC)
    Steelbones.maxDexBonus = 4
    Steelbones.checkPenalty = -3
    let Steelbonesspeed = Bonus(context: context)
    Steelbonesspeed.type = "Speed"
    Steelbonesspeed.bonus = -5
    Steelbones.addToArmorBonus(Steelbonesspeed)
    Steelbones.upgradeSlots = 6
    Steelbones.bulk = 2.0
    Steelbones.content = """
    A framework of metal ribs covers this suit of heavy armor. Force fields bridge the gaps between the metal ribs, which give the armor the macabre look of a metal skeleton. Officers of the Corpse Fleet favor this armor for its unsettling appearance, but steelbones can be worn by anyone who values an intimidating style.
    """

    let Vitrumplate = CompendiumArmor(context: context)
    Vitrumplate.name = "Vitrum plate"
    Vitrumplate.level = 18
    Vitrumplate.price = 365650
    Vitrumplate.type = "Heavy"
    let VitrumplateEAC = Bonus(context: context)
    VitrumplateEAC.type = "EAC"
    VitrumplateEAC.bonus = 23
    Vitrumplate.addToArmorBonus(VitrumplateEAC)
    let VitrumplateKAC = Bonus(context: context)
    VitrumplateKAC.type = "KAC"
    VitrumplateKAC.bonus = 24
    Vitrumplate.addToArmorBonus(VitrumplateKAC)
    Vitrumplate.maxDexBonus = 5
    Vitrumplate.checkPenalty = 0
    Vitrumplate.upgradeSlots = 4
    Vitrumplate.bulk = 1.0
    Vitrumplate.content = """
    Made of transparent polyethylene, vitrum plate resembles a suit of carved crystal. Though the material is hard as metal, it shimmers and refracts light like glass. The Difficulty of compressing polyethylene to preserve its lightness while affording such protection makes this type of heavy armor expensive.
    """

    let Voidshieldarmor = CompendiumArmor(context: context)
    Voidshieldarmor.name = "Voidshield armor"
    Voidshieldarmor.level = 19
    Voidshieldarmor.price = 610250
    Voidshieldarmor.type = "Heavy"
    let VoidshieldarmorEAC = Bonus(context: context)
    VoidshieldarmorEAC.type = "EAC"
    VoidshieldarmorEAC.bonus = 25
    Voidshieldarmor.addToArmorBonus(VoidshieldarmorEAC)
    let VoidshieldarmorKAC = Bonus(context: context)
    VoidshieldarmorKAC.type = "KAC"
    VoidshieldarmorKAC.bonus = 26
    Voidshieldarmor.addToArmorBonus(VoidshieldarmorKAC)
    Voidshieldarmor.maxDexBonus = 5
    Voidshieldarmor.checkPenalty = -3
    let Voidshieldarmorspeed = Bonus(context: context)
    Voidshieldarmorspeed.type = "Speed"
    Voidshieldarmorspeed.bonus = -5
    Voidshieldarmor.addToArmorBonus(Voidshieldarmorspeed)
    Voidshieldarmor.upgradeSlots = 7
    Voidshieldarmor.bulk = 2.0
    Voidshieldarmor.content = """
    Constructed from interlocking carbon nanotubes, voidshield armor is a matte black and remarkably thin. Android armorsmiths were the first to develop this heavy armor, and most suits bear a mechanical, robotic design. Voidshield armor sets are suitable for many upgrades and are popular among experienced explorers.
    """

    
    // POWER ARMOR ////////////////////////////////////////////////////////////////
    
    
    
    

    
    

    


    
    
}


//Weapons  ################################################################################################################

func loadWeapons() {
    basicOne()
    basicTwo()
    advancedOne()
    advancedTwo()
    smallArms()
    longArms()
    heavyWeapons()
    snipers()
    grenades()
    specialWeapons()
}

func basicOne() {
    let UnarmedStrike = CompendiumWeapon(context: context)
    UnarmedStrike.type = "Basic Melee One-Handed"
    UnarmedStrike.name = "UnarmedStrike"
    UnarmedStrike.damage = "1d3+STR"
    UnarmedStrike.damageType = "B"
    UnarmedStrike.bulk = 0.0
    UnarmedStrike.special = "Archaic, Nonlethal"
    UnarmedStrike.content = """
    An unarmed strike can be dealt with any limb or appendage. Unarmed strikes deal nonlethal damage, and the damage from an unarmed strike is considered weapon damage for the purposes of effects that give you a bonus to weapon damage rolls.
    """
    
    let Club = CompendiumWeapon(context: context)
    Club.name = "Club"
    Club.type = "Basic Melee One-Handed"
    Club.level = 0
    Club.price = 0
    Club.damage = "1d6+STR"
    Club.damageType = "B"
    Club.critical = "—"
    Club.bulk = 0.1
    Club.special = "Analog, archaic"
    Club.content = """
    A club is any sort of blunt, oblong instrument with a haft suitable for gripping. Clubs can be made of stone, wood, or similar materials. Metal clubs exist as well, and they are usually hollow to keep them from being too heavy. Some Free Captains refer to clubs as belaying pins, though those archaic items are not required on Starships.
    """
    
    let BatonTactical = CompendiumWeapon(context: context)
    BatonTactical.name = "Baton, Tactical"
    BatonTactical.type = "Basic Melee One-Handed"
    BatonTactical.level = 1
    BatonTactical.price = 90
    BatonTactical.damage = "1d4+STR"
    BatonTactical.damageType = "B"
    BatonTactical.critical = "—"
    BatonTactical.bulk = 0.1
    BatonTactical.special = "Analog, operative"
    BatonTactical.content = """
    A baton is a thin, solid metal shaft, usually with a textured rubber grip. A Tactical baton can be used to inflict precise bludgeoning blows. An advanced baton, used by elite mercenary and security companies, often has an additional shaft, as well as a weighted end that can be powered to connect with substantially more force than a Tactical baton.
    """
    
    let Battleglovecestus = CompendiumWeapon(context: context)
    Battleglovecestus.name = "Battleglove, cestus"
    Battleglovecestus.type = "Basic Melee One-Handed"
    Battleglovecestus.level = 1
    Battleglovecestus.price = 100
    Battleglovecestus.damage = "1d4+STR"
    Battleglovecestus.damageType = "B"
    Battleglovecestus.critical = "—"
    Battleglovecestus.bulk = 0.1
    Battleglovecestus.special = "Analog"
    Battleglovecestus.content = """
    Battlegloves are popular, economical choices for mercenaries and guards. These durable nylon-web or para-aramid gloves hold a weighted plate over the wearer’s knuckles. You can hold other objects or weapons in a hand wearing a glove, but you can’t use the glove to make attacks while doing so.
    """
    
    let Knifesurvival = CompendiumWeapon(context: context)
    Knifesurvival.name = "Knife, survival"
    Knifesurvival.type = "Basic Melee One-Handed"
    Knifesurvival.level = 1
    Knifesurvival.price = 95
    Knifesurvival.damage = "1d4+STR"
    Knifesurvival.damageType = "S"
    Knifesurvival.critical = "—"
    Knifesurvival.bulk = 0.1
    Knifesurvival.special = "Analog, operative"
    Knifesurvival.content = """
    These light blades can be used for both mundane tasks and combat. A typical survival knife has a fixed, single-edged, carbon-steel or ceramic blade and is treated against corrosion. Tactical knives have large, double-edged blades, often with a section of serrated blade near the haft, and they come in both fixed- and folding-blade designs; users may prefer one style or the other, but the two are identical in terms of price, weight, and damage dealt.
    """
    
    let Swordcanetactical = CompendiumWeapon(context: context)
    Swordcanetactical.name = "Sword cane, tactical"
    Swordcanetactical.type = "Basic Melee One-Handed"
    Swordcanetactical.level = 1
    Swordcanetactical.price = 250
    Swordcanetactical.damage = "1d4+STR"
    Swordcanetactical.damageType = "P"
    Swordcanetactical.critical = "Bleed 1d3"
    Swordcanetactical.bulk = 0.1
    Swordcanetactical.special = "Analog, operative"
    Swordcanetactical.content = """
    This thin blade comes with a scabbard that makes it resemble a stylish cane. A sword cane can incorporate one of the following at the standard price for that item: 20 feet of retractable cable line, a personal comm unit, or a spotlight. A successful Perception check (DC = 15 + the weapon’s item level) is required to identify a sword cane as a weapon when it is sheathed.
    """
    
    let Duelingswordtactical = CompendiumWeapon(context: context)
    Duelingswordtactical.name = "Dueling sword, tactical"
    Duelingswordtactical.type = "Basic Melee One-Handed"
    Duelingswordtactical.level = 2
    Duelingswordtactical.price = 475
    Duelingswordtactical.damage = "1d6+STR"
    Duelingswordtactical.damageType = "S"
    Duelingswordtactical.critical = "—"
    Duelingswordtactical.bulk = 0.1
    Duelingswordtactical.special = "Analog"
    Duelingswordtactical.content = """
    While dueling swords are crafted to be aesthetically pleasing and are often seen as a mark of rank or tradition, many warriors still train with them to deadly effect. The powered blades of both buzzblade and ripper dueling swords bring this danger into the Modern era, while the molecular rift sword—though unpowered—uses a field of disrupted molecules along its blade to slice through nearly anything, and must be stored in a magnetic sheath that never actually touches the blade.
    """
    
    let Swordcaneadvanced = CompendiumWeapon(context: context)
    Swordcaneadvanced.name = "Sword cane, advanced"
    Swordcaneadvanced.type = "Basic Melee One-Handed"
    Swordcaneadvanced.level = 4
    Swordcaneadvanced.price = 2100
    Swordcaneadvanced.damage = "1d4+STR"
    Swordcaneadvanced.damageType = "P"
    Swordcaneadvanced.critical = "Bleed 1d4"
    Swordcaneadvanced.bulk = 0.1
    Swordcaneadvanced.special = "Analog, operative"
    Swordcaneadvanced.content = """
    This thin blade comes with a scabbard that makes it resemble a stylish cane. A sword cane can incorporate one of the following at the standard price for that item: 20 feet of retractable cable line, a personal comm unit, or a spotlight. A successful Perception check (DC = 15 + the weapon’s item level) is required to identify a sword cane as a weapon when it is sheathed.
    """
    
    let Knifetactical = CompendiumWeapon(context: context)
    Knifetactical.name = "Knife, tactical"
    Knifetactical.type = "Basic Melee One-Handed"
    Knifetactical.level = 7
    Knifetactical.price = 6000
    Knifetactical.damage = "2d4+STR"
    Knifetactical.damageType = "S"
    Knifetactical.critical = "—"
    Knifetactical.bulk = 0.1
    Knifetactical.special = "Analog, operative"
    Knifetactical.content = """
    Four tapered metal blades surround the central ring of a starknife, which can be thrown or used to stab opponents. Accelerated and lightspeed starknives have gas-powered jets that fire when the starknife is wielded. Solid auras surround the blades of a dimensional slice starknife, which are manufactured with cutting-edge metallurgic techniques. In a sintered starknife, the metal blades are replaced with compressed ceramic blades.
    """
    
    let Swordcaneultrathin = CompendiumWeapon(context: context)
    Swordcaneultrathin.name = "Sword cane, ultrathin"
    Swordcaneultrathin.type = "Basic Melee One-Handed"
    Swordcaneultrathin.level = 7
    Swordcaneultrathin.price = 7000
    Swordcaneultrathin.damage = "2d4+STR"
    Swordcaneultrathin.damageType = "P"
    Swordcaneultrathin.critical = "Bleed 1d3"
    Swordcaneultrathin.bulk = 0.1
    Swordcaneultrathin.special = "Analog, operative"
    Swordcaneultrathin.content = """
    This thin blade comes with a scabbard that makes it resemble a stylish cane. A sword cane can incorporate one of the following at the standard price for that item: 20 feet of retractable cable line, a personal comm unit, or a spotlight. A successful Perception check (DC = 15 + the weapon’s item level) is required to identify a sword cane as a weapon when it is sheathed.
    """
    
    let Duelingswordbuzzblade = CompendiumWeapon(context: context)
    Duelingswordbuzzblade.name = "Dueling sword, buzzblade"
    Duelingswordbuzzblade.type = "Basic Melee One-Handed"
    Duelingswordbuzzblade.level = 8
    Duelingswordbuzzblade.price = 9500
    Duelingswordbuzzblade.damage = "2d6+STR"
    Duelingswordbuzzblade.damageType = "S"
    Duelingswordbuzzblade.critical = "—"
    Duelingswordbuzzblade.bulk = 0.1
    Duelingswordbuzzblade.special = "Powered (capacity 20, usage 1)"
    Duelingswordbuzzblade.content = """
    While dueling swords are crafted to be aesthetically pleasing and are often seen as a mark of rank or tradition, many warriors still train with them to deadly effect. The powered blades of both buzzblade and ripper dueling swords bring this danger into the Modern era, while the molecular rift sword—though unpowered—uses a field of disrupted molecules along its blade to slice through nearly anything, and must be stored in a magnetic sheath that never actually touches the blade.
    """
    
    let Incapacitator = CompendiumWeapon(context: context)
    Incapacitator.name = "Incapacitator"
    Incapacitator.type = "Basic Melee One-Handed"
    Incapacitator.level = 9
    Incapacitator.price = 14200
    Incapacitator.damage = "3d4+STR"
    Incapacitator.damageType = "B"
    Incapacitator.critical = "Staggered"
    Incapacitator.bulk = 0.1
    Incapacitator.special = "Nonlethal, operative, powered (capacity 20, usage 2)"
    Incapacitator.content = """
    When this nonreflective, dark-gray baton connects with a target, it discharges an electrical pulse that can stagger its victim.
    """
    
    let Battleglovepower = CompendiumWeapon(context: context)
    Battleglovepower.name = "Battleglove, power"
    Battleglovepower.type = "Basic Melee One-Handed"
    Battleglovepower.level = 10
    Battleglovepower.price = 16100
    Battleglovepower.damage = "2d8+STR"
    Battleglovepower.damageType = "B"
    Battleglovepower.critical = "—"
    Battleglovepower.bulk = 0.1
    Battleglovepower.special = "Powered (capacity 20, usage 1)"
    Battleglovepower.content = """
    Battlegloves are popular, economical choices for mercenaries and guards. These durable nylon-web or para-aramid gloves hold a weighted plate over the wearer’s knuckles. You can hold other objects or weapons in a hand wearing a glove, but you can’t use the glove to make attacks while doing so.
    """
    
    let SwordcanezeroEdge = CompendiumWeapon(context: context)
    SwordcanezeroEdge.name = "Sword cane, zero-Edge"
    SwordcanezeroEdge.type = "Basic Melee One-Handed"
    SwordcanezeroEdge.level = 10
    SwordcanezeroEdge.price = 18000
    SwordcanezeroEdge.damage = "2d6+STR"
    SwordcanezeroEdge.damageType = "P"
    SwordcanezeroEdge.critical = "Bleed 1d6"
    SwordcanezeroEdge.bulk = 0.1
    SwordcanezeroEdge.special = "Analog, operative"
    SwordcanezeroEdge.content = """
    This thin blade comes with a scabbard that makes it resemble a stylish cane. A sword cane can incorporate one of the following at the standard price for that item: 20 feet of retractable cable line, a personal comm unit, or a spotlight. A successful Perception check (DC = 15 + the weapon’s item level) is required to identify a sword cane as a weapon when it is sheathed.
    """
    
    let Duelingswordultrathin = CompendiumWeapon(context: context)
    Duelingswordultrathin.name = "Dueling sword, ultrathin"
    Duelingswordultrathin.type = "Basic Melee One-Handed"
    Duelingswordultrathin.level = 11
    Duelingswordultrathin.price = 26000
    Duelingswordultrathin.damage = "3d6+STR"
    Duelingswordultrathin.damageType = "S"
    Duelingswordultrathin.critical = "—"
    Duelingswordultrathin.bulk = 0.1
    Duelingswordultrathin.special = "Analog"
    Duelingswordultrathin.content = """
    While dueling swords are crafted to be aesthetically pleasing and are often seen as a mark of rank or tradition, many warriors still train with them to deadly effect. The powered blades of both buzzblade and ripper dueling swords bring this danger into the Modern era, while the molecular rift sword—though unpowered—uses a field of disrupted molecules along its blade to slice through nearly anything, and must be stored in a magnetic sheath that never actually touches the blade.
    """
    
    let Daggerultrathin = CompendiumWeapon(context: context)
    Daggerultrathin.name = "Dagger, ultrathin"
    Daggerultrathin.type = "Basic Melee One-Handed"
    Daggerultrathin.level = 12
    Daggerultrathin.price = 32800
    Daggerultrathin.damage = "4d4+STR"
    Daggerultrathin.damageType = "S"
    Daggerultrathin.critical = "—"
    Daggerultrathin.bulk = 0.1
    Daggerultrathin.special = "Analog, operative"
    Daggerultrathin.content = """
    The thinness and lightness of daggers make them easy to carry or conceal. Ultrathin daggers have sharp, double-edged blades. Zero-edge daggers have blades—crafted with quantum technology—that are so fine, their edges blur. The blade of a molecular rift dagger looks translucent, as if it’s made of glass, and its vibrating particles allow the dagger to slice through almost any substance. Most daggers are available with fixed, folding, or retractable blades.
    """
    
    let Battleglovenova = CompendiumWeapon(context: context)
    Battleglovenova.name = "Battleglove, nova"
    Battleglovenova.type = "Basic Melee One-Handed"
    Battleglovenova.level = 13
    Battleglovenova.price = 52500
    Battleglovenova.damage = "3d10+STR"
    Battleglovenova.damageType = "B"
    Battleglovenova.critical = "—"
    Battleglovenova.bulk = 0.1
    Battleglovenova.special = "Powered (capacity 20, usage 1)"
    Battleglovenova.content = """
    Battlegloves are popular, economical choices for mercenaries and guards. These durable nylon-web or para-aramid gloves hold a weighted plate over the wearer’s knuckles. You can hold other objects or weapons in a hand wearing a glove, but you can’t use the glove to make attacks while doing so.
    """
    
    let Swordcanemolecularrift = CompendiumWeapon(context: context)
    Swordcanemolecularrift.name = "Sword cane, molecular rift"
    Swordcanemolecularrift.type = "Basic Melee One-Handed"
    Swordcanemolecularrift.level = 13
    Swordcanemolecularrift.price = 50900
    Swordcanemolecularrift.damage = "3d8+STR"
    Swordcanemolecularrift.damageType = "P"
    Swordcanemolecularrift.critical = "Bleed 1d8"
    Swordcanemolecularrift.bulk = 0.1
    Swordcanemolecularrift.special = "Analog, operative"
    Swordcanemolecularrift.content = """
    This thin blade comes with a scabbard that makes it resemble a stylish cane. A sword cane can incorporate one of the following at the standard price for that item: 20 feet of retractable cable line, a personal comm unit, or a spotlight. A successful Perception check (DC = 15 + the weapon’s item level) is required to identify a sword cane as a weapon when it is sheathed.
    """
    
    let Daggerzeroedge = CompendiumWeapon(context: context)
    Daggerzeroedge.name = "Dagger, zero-edge"
    Daggerzeroedge.type = "Basic Melee One-Handed"
    Daggerzeroedge.level = 14
    Daggerzeroedge.price = 64400
    Daggerzeroedge.damage = "6d4+STR"
    Daggerzeroedge.damageType = "S"
    Daggerzeroedge.critical = "—"
    Daggerzeroedge.bulk = 0.1
    Daggerzeroedge.special = "Analog, operative"
    Daggerzeroedge.content = """
    The thinness and lightness of daggers make them easy to carry or conceal. Ultrathin daggers have sharp, double-edged blades. Zero-edge daggers have blades—crafted with quantum technology—that are so fine, their edges blur. The blade of a molecular rift dagger looks translucent, as if it’s made of glass, and its vibrating particles allow the dagger to slice through almost any substance. Most daggers are available with fixed, folding, or retractable blades.
    """
    
    let Duelingswordripper = CompendiumWeapon(context: context)
    Duelingswordripper.name = "Dueling sword, ripper"
    Duelingswordripper.type = "Basic Melee One-Handed"
    Duelingswordripper.level = 15
    Duelingswordripper.price = 109250
    Duelingswordripper.damage = "7d6+STR"
    Duelingswordripper.damageType = "S"
    Duelingswordripper.critical = "—"
    Duelingswordripper.bulk = 0.1
    Duelingswordripper.special = "Powered (capacity 20, usage 1)"
    Duelingswordripper.content = """
    While dueling swords are crafted to be aesthetically pleasing and are often seen as a mark of rank or tradition, many warriors still train with them to deadly effect. The powered blades of both buzzblade and ripper dueling swords bring this danger into the Modern era, while the molecular rift sword—though unpowered—uses a field of disrupted molecules along its blade to slice through nearly anything, and must be stored in a magnetic sheath that never actually touches the blade.
    """
    
    let Peacemaker = CompendiumWeapon(context: context)
    Peacemaker.name = "Peacemaker"
    Peacemaker.type = "Basic Melee One-Handed"
    Peacemaker.level = 16
    Peacemaker.price = 185300
    Peacemaker.damage = "6d6+STR"
    Peacemaker.damageType = "B"
    Peacemaker.critical = "Knockdown"
    Peacemaker.bulk = 0.1
    Peacemaker.special = "Operative, powered (capacity 20, usage 2), stun"
    Peacemaker.content = """
    This more advanced combat baton, known as a peacemaker, is a light metal rod that discharges a pulse that can be strong enough to knock a target to the ground.
    """
    
    let SwordcanemolecularriftII = CompendiumWeapon(context: context)
    SwordcanemolecularriftII.name = "Sword cane, molecular rift"
    SwordcanemolecularriftII.type = "Basic Melee One-Handed"
    SwordcanemolecularriftII.level = 16
    SwordcanemolecularriftII.price = 160000
    SwordcanemolecularriftII.damage = "5d8+STR"
    SwordcanemolecularriftII.damageType = "P"
    SwordcanemolecularriftII.critical = "Bleed 2d6"
    SwordcanemolecularriftII.bulk = 0.1
    SwordcanemolecularriftII.special = "Analog, operative"
    SwordcanemolecularriftII.content = """
    This thin blade comes with a scabbard that makes it resemble a stylish cane. A sword cane can incorporate one of the following at the standard price for that item: 20 feet of retractable cable line, a personal comm unit, or a spotlight. A successful Perception check (DC = 15 + the weapon’s item level) is required to identify a sword cane as a weapon when it is sheathed.
    """
    
    let Battleglovegravity = CompendiumWeapon(context: context)
    Battleglovegravity.name = "Battleglove, gravity"
    Battleglovegravity.type = "Basic Melee One-Handed"
    Battleglovegravity.level = 17
    Battleglovegravity.price = 214850
    Battleglovegravity.damage = "5d10+STR"
    Battleglovegravity.damageType = "B"
    Battleglovegravity.critical = "—"
    Battleglovegravity.bulk = 0.1
    Battleglovegravity.special = "Powered (capacity 20, usage 1)"
    Battleglovegravity.content = """
    Battlegloves are popular, economical choices for mercenaries and guards. These durable nylon-web or para-aramid gloves hold a weighted plate over the wearer’s knuckles. You can hold other objects or weapons in a hand wearing a glove, but you can’t use the glove to make attacks while doing so.
    """
    
    let Daggermolecularrift = CompendiumWeapon(context: context)
    Daggermolecularrift.name = "Dagger, molecular rift"
    Daggermolecularrift.type = "Basic Melee One-Handed"
    Daggermolecularrift.level = 17
    Daggermolecularrift.price = 275000
    Daggermolecularrift.damage = "10d4+STR"
    Daggermolecularrift.damageType = "S"
    Daggermolecularrift.critical = "—"
    Daggermolecularrift.bulk = 0.1
    Daggermolecularrift.special = "Analog, operative"
    Daggermolecularrift.content = """
    The thinness and lightness of daggers make them easy to carry or conceal. Ultrathin daggers have sharp, double-edged blades. Zero-edge daggers have blades—crafted with quantum technology—that are so fine, their edges blur. The blade of a molecular rift dagger looks translucent, as if it’s made of glass, and its vibrating particles allow the dagger to slice through almost any substance. Most daggers are available with fixed, folding, or retractable blades.
    """
    
    let Duelingswordmolecularrift = CompendiumWeapon(context: context)
    Duelingswordmolecularrift.name = "Dueling sword, molecular rift"
    Duelingswordmolecularrift.type = "Basic Melee One-Handed"
    Duelingswordmolecularrift.level = 18
    Duelingswordmolecularrift.price = 331200
    Duelingswordmolecularrift.damage = "10d6+STR"
    Duelingswordmolecularrift.damageType = "S"
    Duelingswordmolecularrift.critical = "—"
    Duelingswordmolecularrift.bulk = 0.1
    Duelingswordmolecularrift.special = "Analog"
    Duelingswordmolecularrift.content = """
    While dueling swords are crafted to be aesthetically pleasing and are often seen as a mark of rank or tradition, many warriors still train with them to deadly effect. The powered blades of both buzzblade and ripper dueling swords bring this danger into the Modern era, while the molecular rift sword—though unpowered—uses a field of disrupted molecules along its blade to slice through nearly anything, and must be stored in a magnetic sheath that never actually touches the blade.
    """
    
    let Batonadvanced = CompendiumWeapon(context: context)
    Batonadvanced.name = "Baton, advanced"
    Batonadvanced.type = "Basic Melee One-Handed"
    Batonadvanced.level = 19
    Batonadvanced.price = 540000
    Batonadvanced.damage = "8d6+STR"
    Batonadvanced.damageType = "B"
    Batonadvanced.critical = "—"
    Batonadvanced.bulk = 0.1
    Batonadvanced.special = "Operative, powered (capacity 20, usage 1)"
    Batonadvanced.content = """
    A baton is a thin, solid metal shaft, usually with a textured rubber grip. A Tactical baton can be used to inflict precise bludgeoning blows. An advanced baton, used by elite mercenary and security companies, often has an additional shaft, as well as a weighted end that can be powered to connect with substantially more force than a Tactical baton.
    """
    

    
    
}

func basicTwo() {
    let SpearTactical = CompendiumWeapon(context: context)
    SpearTactical.name = "Spear, Tactical"
    SpearTactical.type = "Basic Melee Two-Handed"
    SpearTactical.level = 1
    SpearTactical.price = 375
    SpearTactical.damage = "1d6+STR"
    SpearTactical.damageType = "P"
    SpearTactical.critical = "—"
    SpearTactical.bulk = 1
    SpearTactical.special = "Analog, block, thrown (20 ft.)"
    SpearTactical.content = """
    Spears come in many varieties. Buzzblade spears vibrate at high frequency. Zero-edge spears employ quantum manufacturing to hone an edge so fine that it seems indistinct. The gravity spear uses a tiny gravity field generator to accelerate the weapon at the moment of impact.
    """
    
    let Staffbattle = CompendiumWeapon(context: context)
    Staffbattle.name = "Staff, battle"
    Staffbattle.type = "Basic Melee Two-Handed"
    Staffbattle.level = 1
    Staffbattle.price = 80
    Staffbattle.damage = "1d4+STR"
    Staffbattle.damageType = "B"
    Staffbattle.critical = "Knockdown"
    Staffbattle.bulk = 1
    Staffbattle.special = "Analog, block"
    Staffbattle.content = """
    Staves are long and flexible, weighted on the end to provide extra striking power. Most staves are made from aluminum or fiberglass, though some are still made from wood.
    """
    
    let Staffcarbon = CompendiumWeapon(context: context)
    Staffcarbon.name = "Staff, carbon"
    Staffcarbon.type = "Basic Melee Two-Handed"
    Staffcarbon.level = 7
    Staffcarbon.price = 6150
    Staffcarbon.damage = "1d8+STR"
    Staffcarbon.damageType = "B"
    Staffcarbon.critical = "Knockdown"
    Staffcarbon.bulk = 1
    Staffcarbon.special = "Analog, block"
    Staffcarbon.content = """
    Staves are long and flexible, weighted on the end to provide extra striking power. Most staves are made from aluminum or fiberglass, though some are still made from wood.
    """
    
    let Spearsentinel = CompendiumWeapon(context: context)
    Spearsentinel.name = "Spear, sentinel"
    Spearsentinel.type = "Basic Melee Two-Handed"
    Spearsentinel.level = 8
    Spearsentinel.price = 10000
    Spearsentinel.damage = "2d6+STR"
    Spearsentinel.damageType = "P"
    Spearsentinel.critical = "—"
    Spearsentinel.bulk = 1
    Spearsentinel.special = "Analog, block, thrown (20 ft.)"
    Spearsentinel.content = """
    Spears come in many varieties. Buzzblade spears vibrate at high frequency. Zero-edge spears employ quantum manufacturing to hone an edge so fine that it seems indistinct. The gravity spear uses a tiny gravity field generator to accelerate the weapon at the moment of impact.
    """
    
    let Spearbuzzblade = CompendiumWeapon(context: context)
    Spearbuzzblade.name = "Spear, buzzblade"
    Spearbuzzblade.type = "Basic Melee Two-Handed"
    Spearbuzzblade.level = 11
    Spearbuzzblade.price = 22650
    Spearbuzzblade.damage = "3d6+STR"
    Spearbuzzblade.damageType = "P"
    Spearbuzzblade.critical = "—"
    Spearbuzzblade.bulk = 1
    Spearbuzzblade.special = "Block, powered (capacity 40, usage 2), thrown (20 ft.)"
    Spearbuzzblade.content = """
    Spears come in many varieties. Buzzblade spears vibrate at high frequency. Zero-edge spears employ quantum manufacturing to hone an edge so fine that it seems indistinct. The gravity spear uses a tiny gravity field generator to accelerate the weapon at the moment of impact.
    """
    
    let Spearzeroedge = CompendiumWeapon(context: context)
    Spearzeroedge.name = "Spear, zero-edge"
    Spearzeroedge.type = "Basic Melee Two-Handed"
    Spearzeroedge.level = 15
    Spearzeroedge.price = 107350
    Spearzeroedge.damage = "7d6+STR"
    Spearzeroedge.damageType = "P"
    Spearzeroedge.critical = "—"
    Spearzeroedge.bulk = 1
    Spearzeroedge.special = "Analog, block, thrown (20 ft.)"
    Spearzeroedge.content = """
    Spears come in many varieties. Buzzblade spears vibrate at high frequency. Zero-edge spears employ quantum manufacturing to hone an edge so fine that it seems indistinct. The gravity spear uses a tiny gravity field generator to accelerate the weapon at the moment of impact.
    """
    
    let Staffhardlight = CompendiumWeapon(context: context)
    Staffhardlight.name = "Staff, hardlight"
    Staffhardlight.type = "Basic Melee Two-Handed"
    Staffhardlight.level = 18
    Staffhardlight.price = 320800
    Staffhardlight.damage = "8d8+STR"
    Staffhardlight.damageType = "B"
    Staffhardlight.critical = "Knockdown"
    Staffhardlight.bulk = 1
    Staffhardlight.special = "Analog, block"
    Staffhardlight.content = """
    Staves are long and flexible, weighted on the end to provide extra striking power. Most staves are made from aluminum or fiberglass, though some are still made from wood.
    """
    
    let Speargravity = CompendiumWeapon(context: context)
    Speargravity.name = "Spear, gravity"
    Speargravity.type = "Basic Melee Two-Handed"
    Speargravity.level = 19
    Speargravity.price = 552000
    Speargravity.damage = "12d6+STR"
    Speargravity.damageType = "P"
    Speargravity.critical = "—"
    Speargravity.bulk = 1
    Speargravity.special = "Block, powered (capacity 40, usage 2), thrown (20 ft.)"
    Speargravity.content = """
    Spears come in many varieties. Buzzblade spears vibrate at high frequency. Zero-edge spears employ quantum manufacturing to hone an edge so fine that it seems indistinct. The gravity spear uses a tiny gravity field generator to accelerate the weapon at the moment of impact.
    """
    

    
    
    
}

func advancedOne() {
    let StarfireswordTactical = CompendiumWeapon(context: context)
    StarfireswordTactical.name = "Starfire sword, Tactical"
    StarfireswordTactical.type = "Advanced Melee One-Handed"
    StarfireswordTactical.level = 7
    StarfireswordTactical.price = 6120
    StarfireswordTactical.damage = "2d4+STR"
    StarfireswordTactical.damageType = "F"
    StarfireswordTactical.critical = "Burn 1d8"
    StarfireswordTactical.bulk = 1
    StarfireswordTactical.special = "Powered (capacity 20, usage 2)"
    StarfireswordTactical.capacity = 20
    StarfireswordTactical.usage = 2
    StarfireswordTactical.content = """
    Originally, these swords were known by their manufacturing ID, BSB–1750. Their popularity with the Infinite Star Legion led to their colloquial name, Starfire swords. Vents for burning gas jets line one edge of the hollow blade. When powered, magnetic fields contain and ignite the gases into a glowing corona of flames.
    """
    
    let Starfireswordinferno = CompendiumWeapon(context: context)
    Starfireswordinferno.name = "Starfire sword, inferno"
    Starfireswordinferno.type = "Advanced Melee One-Handed"
    Starfireswordinferno.level = 17
    Starfireswordinferno.price = 246000
    Starfireswordinferno.damage = "7d8+STR"
    Starfireswordinferno.damageType = "F"
    Starfireswordinferno.critical = "Burn 4d12"
    Starfireswordinferno.bulk = 1
    Starfireswordinferno.special = "Powered (capacity 20, usage 1)"
    Starfireswordinferno.capacity = 20
    Starfireswordinferno.usage = 1
    Starfireswordinferno.content = """
    Originally, these swords were known by their manufacturing ID, BSB–1750. Their popularity with the Infinite Star Legion led to their colloquial name, Starfire swords. Vents for burning gas jets line one edge of the hollow blade. When powered, magnetic fields contain and ignite the gases into a glowing corona of flames.
    """
    
    let PlasmaswordTactical = CompendiumWeapon(context: context)
    PlasmaswordTactical.name = "Plasma sword, Tactical"
    PlasmaswordTactical.type = "Advanced Melee One-Handed"
    PlasmaswordTactical.level = 9
    PlasmaswordTactical.price = 14550
    PlasmaswordTactical.damage = "2d8+STR"
    PlasmaswordTactical.damageType = "EF"
    PlasmaswordTactical.critical = "Severe wound"
    PlasmaswordTactical.bulk = 1
    PlasmaswordTactical.special = "Powered (capacity 20, usage 2)"
    PlasmaswordTactical.capacity = 20
    PlasmaswordTactical.usage = 2
    PlasmaswordTactical.content = """
    A plasma generator is seated within this sword’s hilt. A plasma-resistant ceramic housing focuses the beam with the assistance of a localized force field, either in a single straight beam or along a magnetized blunted blade or wire-like lines. When the sword is unpowered, the plasma beam disappears.
    """
    
    let Plasmaswordredstar = CompendiumWeapon(context: context)
    Plasmaswordredstar.name = "Plasma sword, red star"
    Plasmaswordredstar.type = "Advanced Melee One-Handed"
    Plasmaswordredstar.level = 13
    Plasmaswordredstar.price = 54300
    Plasmaswordredstar.damage = "4d8+STR"
    Plasmaswordredstar.damageType = "EF"
    Plasmaswordredstar.critical = "Severe wound"
    Plasmaswordredstar.bulk = 1
    Plasmaswordredstar.special = "Powered (capacity 40, usage 4)"
    Plasmaswordredstar.capacity = 40
    Plasmaswordredstar.usage = 4
    Plasmaswordredstar.content = """
    A plasma generator is seated within this sword’s hilt. A plasma-resistant ceramic housing focuses the beam with the assistance of a localized force field, either in a single straight beam or along a magnetized blunted blade or wire-like lines. When the sword is unpowered, the plasma beam disappears.
    """
    
    let Plasmaswordyellowstar = CompendiumWeapon(context: context)
    Plasmaswordyellowstar.name = "Plasma sword, yellow star"
    Plasmaswordyellowstar.type = "Advanced Melee One-Handed"
    Plasmaswordyellowstar.level = 15
    Plasmaswordyellowstar.price = 127000
    Plasmaswordyellowstar.damage = "5d8+STR"
    Plasmaswordyellowstar.damageType = "EF"
    Plasmaswordyellowstar.critical = "Severe wound"
    Plasmaswordyellowstar.bulk = 1
    Plasmaswordyellowstar.special = "Powered (capacity 40, usage 4)"
    Plasmaswordyellowstar.capacity = 40
    Plasmaswordyellowstar.usage = 4
    Plasmaswordyellowstar.content = """
    A plasma generator is seated within this sword’s hilt. A plasma-resistant ceramic housing focuses the beam with the assistance of a localized force field, either in a single straight beam or along a magnetized blunted blade or wire-like lines. When the sword is unpowered, the plasma beam disappears.
    """
    
    let Plasmaswordwhitestar = CompendiumWeapon(context: context)
    Plasmaswordwhitestar.name = "Plasma sword, white star"
    Plasmaswordwhitestar.type = "Advanced Melee One-Handed"
    Plasmaswordwhitestar.level = 18
    Plasmaswordwhitestar.price = 415600
    Plasmaswordwhitestar.damage = "8d8+STR"
    Plasmaswordwhitestar.damageType = "EF"
    Plasmaswordwhitestar.critical = "Severe wound"
    Plasmaswordwhitestar.bulk = 1
    Plasmaswordwhitestar.special = "Powered (capacity 40, usage 4)"
    Plasmaswordwhitestar.capacity = 40
    Plasmaswordwhitestar.usage = 4
    Plasmaswordwhitestar.content = """
    A plasma generator is seated within this sword’s hilt. A plasma-resistant ceramic housing focuses the beam with the assistance of a localized force field, either in a single straight beam or along a magnetized blunted blade or wire-like lines. When the sword is unpowered, the plasma beam disappears.
    """
    
    let Plasmaswordbluestar = CompendiumWeapon(context: context)
    Plasmaswordbluestar.name = "Plasma sword, blue star"
    Plasmaswordbluestar.type = "Advanced Melee One-Handed"
    Plasmaswordbluestar.level = 20
    Plasmaswordbluestar.price = 920250
    Plasmaswordbluestar.damage = "10d8+STR"
    Plasmaswordbluestar.damageType = "EF"
    Plasmaswordbluestar.critical = "Severe wound"
    Plasmaswordbluestar.bulk = 1
    Plasmaswordbluestar.special = "Powered (capacity 40, usage 4)"
    Plasmaswordbluestar.capacity = 40
    Plasmaswordbluestar.usage = 4
    Plasmaswordbluestar.content = """
    A plasma generator is seated within this sword’s hilt. A plasma-resistant ceramic housing focuses the beam with the assistance of a localized force field, either in a single straight beam or along a magnetized blunted blade or wire-like lines. When the sword is unpowered, the plasma beam disappears.
    """
    
    let Shocktruncheonstatic = CompendiumWeapon(context: context)
    Shocktruncheonstatic.name = "Shock truncheon, static"
    Shocktruncheonstatic.type = "Advanced Melee One-Handed"
    Shocktruncheonstatic.level = 8
    Shocktruncheonstatic.price = 9150
    Shocktruncheonstatic.damage = "1d12+STR"
    Shocktruncheonstatic.damageType = "E"
    Shocktruncheonstatic.critical = "Arc 1d4"
    Shocktruncheonstatic.bulk = 1
    Shocktruncheonstatic.special = "Powered (capacity 20, usage 2), stun"
    Shocktruncheonstatic.capacity = 20
    Shocktruncheonstatic.usage = 2
    Shocktruncheonstatic.content = """
    These polycarbonate batons have a side-handle grip and a electrode-lined striking surface that delivers an electrical charge.
    """
    
    let Shocktruncheonaurora = CompendiumWeapon(context: context)
    Shocktruncheonaurora.name = "Shock truncheon, aurora"
    Shocktruncheonaurora.type = "Advanced Melee One-Handed"
    Shocktruncheonaurora.level = 11
    Shocktruncheonaurora.price = 23000
    Shocktruncheonaurora.damage = "2d12+STR"
    Shocktruncheonaurora.damageType = "E"
    Shocktruncheonaurora.critical = "Arc 2d4"
    Shocktruncheonaurora.bulk = 1
    Shocktruncheonaurora.special = "Powered (capacity 20, usage 2), stun"
    Shocktruncheonaurora.capacity = 20
    Shocktruncheonaurora.usage = 2
    Shocktruncheonaurora.content = """
    These polycarbonate batons have a side-handle grip and a electrode-lined striking surface that delivers an electrical charge.
    """
    
    let Shocktruncheonstorm = CompendiumWeapon(context: context)
    Shocktruncheonstorm.name = "Shock truncheon, storm"
    Shocktruncheonstorm.type = "Advanced Melee One-Handed"
    Shocktruncheonstorm.level = 16
    Shocktruncheonstorm.price = 80200
    Shocktruncheonstorm.damage = "3d12+STR"
    Shocktruncheonstorm.damageType = "E"
    Shocktruncheonstorm.critical = "Arc 3d4"
    Shocktruncheonstorm.bulk = 1
    Shocktruncheonstorm.special = "Powered (capacity 40, usage 2), stun"
    Shocktruncheonstorm.capacity = 40
    Shocktruncheonstorm.usage = 2
    Shocktruncheonstorm.content = """
    These polycarbonate batons have a side-handle grip and a electrode-lined striking surface that delivers an electrical charge.
    """
    
    let Shocktruncheontempest = CompendiumWeapon(context: context)
    Shocktruncheontempest.name = "Shock truncheon, tempest"
    Shocktruncheontempest.type = "Advanced Melee One-Handed"
    Shocktruncheontempest.level = 19
    Shocktruncheontempest.price = 545000
    Shocktruncheontempest.damage = "6d12+STR"
    Shocktruncheontempest.damageType = "E"
    Shocktruncheontempest.critical = "Arc 6d4"
    Shocktruncheontempest.bulk = 1
    Shocktruncheontempest.special = "Powered (capacity 40, usage 2), stun"
    Shocktruncheontempest.capacity = 40
    Shocktruncheontempest.usage = 2
    Shocktruncheontempest.content = """
    These polycarbonate batons have a side-handle grip and a electrode-lined striking surface that delivers an electrical charge.
    """
    
    let Pulsegauntletthunderstrike = CompendiumWeapon(context: context)
    Pulsegauntletthunderstrike.name = "Pulse gauntlet, thunderstrike"
    Pulsegauntletthunderstrike.type = "Advanced Melee One-Handed"
    Pulsegauntletthunderstrike.level = 2
    Pulsegauntletthunderstrike.price = 475
    Pulsegauntletthunderstrike.damage = "1d6+STR"
    Pulsegauntletthunderstrike.damageType = "BO"
    Pulsegauntletthunderstrike.critical = "Knockdown"
    Pulsegauntletthunderstrike.bulk = 1
    Pulsegauntletthunderstrike.special = "Powered (capacity 20, usage 1)"
    Pulsegauntletthunderstrike.capacity = 20
    Pulsegauntletthunderstrike.usage = 1
    Pulsegauntletthunderstrike.content = """
    When a pulse gauntlet strikes its target, it releases a surge of sonic energy that can knock the target down. Pulse gauntlets are made of heavy-duty nylon with reinforced pads over the items’ knuckles.
    """
    
    let PulsegauntletLFD = CompendiumWeapon(context: context)
    PulsegauntletLFD.name = "Pulse gauntlet, LFD"
    PulsegauntletLFD.type = "Advanced Melee One-Handed"
    PulsegauntletLFD.level = 7
    PulsegauntletLFD.price = 7340
    PulsegauntletLFD.damage = "2d6+STR"
    PulsegauntletLFD.damageType = "BO"
    PulsegauntletLFD.critical = "Knockdown"
    PulsegauntletLFD.bulk = 1
    PulsegauntletLFD.special = "Powered (capacity 20, usage 1)"
    PulsegauntletLFD.capacity = 20
    PulsegauntletLFD.usage = 1
    PulsegauntletLFD.content = """
    When a pulse gauntlet strikes its target, it releases a surge of sonic energy that can knock the target down. Pulse gauntlets are made of heavy-duty nylon with reinforced pads over the items’ knuckles.
    """
    
    let PulsegauntletHFD = CompendiumWeapon(context: context)
    PulsegauntletHFD.name = "Pulse gauntlet, HFD"
    PulsegauntletHFD.type = "Advanced Melee One-Handed"
    PulsegauntletHFD.level = 12
    PulsegauntletHFD.price = 31300
    PulsegauntletHFD.damage = "5d6+STR"
    PulsegauntletHFD.damageType = "BO"
    PulsegauntletHFD.critical = "Knockdown"
    PulsegauntletHFD.bulk = 1
    PulsegauntletHFD.special = "Powered (capacity 20, usage 1)"
    PulsegauntletHFD.capacity = 20
    PulsegauntletHFD.usage = 1
    PulsegauntletHFD.content = """
    When a pulse gauntlet strikes its target, it releases a surge of sonic energy that can knock the target down. Pulse gauntlets are made of heavy-duty nylon with reinforced pads over the items’ knuckles.
    """
    
    let Pulsegauntletbanshee = CompendiumWeapon(context: context)
    Pulsegauntletbanshee.name = "Pulse gauntlet, banshee"
    Pulsegauntletbanshee.type = "Advanced Melee One-Handed"
    Pulsegauntletbanshee.level = 16
    Pulsegauntletbanshee.price = 148200
    Pulsegauntletbanshee.damage = "10d6+STR"
    Pulsegauntletbanshee.damageType = "BO"
    Pulsegauntletbanshee.critical = "Knockdown"
    Pulsegauntletbanshee.bulk = 1
    Pulsegauntletbanshee.special = "Powered (capacity 20, usage 1)"
    Pulsegauntletbanshee.capacity = 20
    Pulsegauntletbanshee.usage = 1
    Pulsegauntletbanshee.content = """
    When a pulse gauntlet strikes its target, it releases a surge of sonic energy that can knock the target down. Pulse gauntlets are made of heavy-duty nylon with reinforced pads over the items’ knuckles.
    """
    
    let Hammerassault = CompendiumWeapon(context: context)
    Hammerassault.name = "Hammer, assault"
    Hammerassault.type = "Advanced Melee One-Handed"
    Hammerassault.level = 1
    Hammerassault.price = 95
    Hammerassault.damage = "1d6+STR"
    Hammerassault.damageType = "B"
    Hammerassault.critical = "—"
    Hammerassault.bulk = 1
    Hammerassault.special = "Analog"
    Hammerassault.content = """
    Assault hammers have heavily weighted metal heads and relatively light aluminum or polycarbonate grips. Hammer heads can be custom-made with designs or logos imprinted on the surface. Comet, gravity well, and meteoric hammers have weighted or pneumatically driven heads that deliver accelerated blows.
    """
    
    let Longsword = CompendiumWeapon(context: context)
    Longsword.name = "Longsword"
    Longsword.type = "Advanced Melee One-Handed"
    Longsword.level = 1
    Longsword.price = 375
    Longsword.damage = "1d8+STR"
    Longsword.damageType = "S"
    Longsword.critical = "—"
    Longsword.bulk = 1
    Longsword.special = "Analog"
    Longsword.content = """
    Crafted with quantum technology, the blade of this sword seems blurry due to its exceptionally fine edge.
    """
    
    let StarknifeTactical = CompendiumWeapon(context: context)
    StarknifeTactical.name = "Starknife, Tactical"
    StarknifeTactical.type = "Advanced Melee One-Handed"
    StarknifeTactical.level = 1
    StarknifeTactical.price = 110
    StarknifeTactical.damage = "1d4+STR"
    StarknifeTactical.damageType = "P"
    StarknifeTactical.critical = "—"
    StarknifeTactical.bulk = 0.1
    StarknifeTactical.special = "Analog, thrown (20 ft.)"
    StarknifeTactical.content = """
    Four tapered metal blades surround the central ring of a starknife, which can be thrown or used to stab opponents. Accelerated and lightspeed starknives have gas-powered jets that fire when the starknife is wielded. Solid auras surround the blades of a dimensional slice starknife, which are manufactured with cutting-edge metallurgic techniques. In a sintered starknife, the metal blades are replaced with compressed ceramic blades.
    """
    
    let Taclashstandard = CompendiumWeapon(context: context)
    Taclashstandard.name = "Taclash, standard"
    Taclashstandard.type = "Advanced Melee One-Handed"
    Taclashstandard.level = 1
    Taclashstandard.price = 240
    Taclashstandard.damage = "1d4+STR"
    Taclashstandard.damageType = "S"
    Taclashstandard.critical = "—"
    Taclashstandard.bulk = 0.1
    Taclashstandard.special = "Analog, disarm, nonlethal, reach, trip"
    Taclashstandard.content = """
    A Tactical lash, or taclash as it is commonly called, is a length of nylon cord reinforced with carbon fibers. Taclashes were originally used by military organizations as a form of crowd control, and explorers and mercenaries came to appreciate the utility of the weapon. When a numbing taclash connects, a low electrical shock transmits through the lash. The shock is too mild to deal damage, but it can stun the target.
    """
    
    let Injectionglove = CompendiumWeapon(context: context)
    Injectionglove.name = "Injection glove"
    Injectionglove.type = "Advanced Melee One-Handed"
    Injectionglove.level = 2
    Injectionglove.price = 490
    Injectionglove.damage = "1d4+STR"
    Injectionglove.damageType = "P"
    Injectionglove.critical = "Injection DC +2"
    Injectionglove.bulk = 0.1
    Injectionglove.special = "Analog, injection"
    Injectionglove.content = """
    Injection gloves were originally designed for medical use, but they have been heavily altered to serve in combat as well. A flat cartridge containing an injectable substance (such as a medicinal or poison) is inserted into a slot in the pointer finger of the glove, where it connects with a retractable needle. When the pointer finger encounters resistance, the needle pops out and injects its contents. The needle is reset by pressing it against a hard surface (which can be done as part of reloading it).
    """
    
    let Xenolashimmature = CompendiumWeapon(context: context)
    Xenolashimmature.name = "Xenolash, immature"
    Xenolashimmature.type = "Advanced Melee One-Handed"
    Xenolashimmature.level = 4
    Xenolashimmature.price = 2430
    Xenolashimmature.damage = "2d4+STR"
    Xenolashimmature.damageType = "AS"
    Xenolashimmature.critical = "Corrode 1d4"
    Xenolashimmature.bulk = 1
    Xenolashimmature.special = "Analog, disarm, entangle, reach, trip"
    Xenolashimmature.content = """
    A xenolash is a genetically engineered vine that weeps caustic, quick-hardening sap from the razor-sharp thorns along its length. Because the sap (rather than the weapon itself) entangles creatures, targets are not anchored to the xenolash. Grown in extraordinary conditions by Xenowardens and primarily sold only to those they trust, the plants derive their sustenance and amber-like sap from light, ambient energy, and atmospheric chemicals.
    """
    
    let Fangblade = CompendiumWeapon(context: context)
    Fangblade.name = "Fangblade"
    Fangblade.type = "Advanced Melee One-Handed"
    Fangblade.level = 7
    Fangblade.price = 5430
    Fangblade.damage = "1d12+STR"
    Fangblade.damageType = "S"
    Fangblade.critical = "Bleed 1d8"
    Fangblade.bulk = 1
    Fangblade.special = "Powered (capacity 20, usage 1)"
    Fangblade.capacity = 20
    Fangblade.usage = 1
    Fangblade.content = """
    Cheaper and less elegant than a ripper dueling sword, a fangblade is closer to an industrial chainsaw, with a toothed, motor-driven chain wrapped around its blade.
    """
    
    let Longswordsintered = CompendiumWeapon(context: context)
    Longswordsintered.name = "Longsword, sintered"
    Longswordsintered.type = "Advanced Melee One-Handed"
    Longswordsintered.level = 7
    Longswordsintered.price = 8420
    Longswordsintered.damage = "2d8+STR"
    Longswordsintered.damageType = "S"
    Longswordsintered.critical = "—"
    Longswordsintered.bulk = 1
    Longswordsintered.special = "Analog"
    Longswordsintered.content = """
    A sintered longsword is made of compacted ceramics, forming a durable and finely edged blade.
    """
    
    let Starknifesintered = CompendiumWeapon(context: context)
    Starknifesintered.name = "Starknife, sintered"
    Starknifesintered.type = "Advanced Melee One-Handed"
    Starknifesintered.level = 8
    Starknifesintered.price = 9810
    Starknifesintered.damage = "4d4+STR"
    Starknifesintered.damageType = "P"
    Starknifesintered.critical = "—"
    Starknifesintered.bulk = 0.1
    Starknifesintered.special = "Analog, thrown (50 ft.)"
    Starknifesintered.content = """
    Four tapered metal blades surround the central ring of a starknife, which can be thrown or used to stab opponents. Accelerated and lightspeed starknives have gas-powered jets that fire when the starknife is wielded. Solid auras surround the blades of a dimensional slice starknife, which are manufactured with cutting-edge metallurgic techniques. In a sintered starknife, the metal blades are replaced with compressed ceramic blades.
    """
    
    let Longswordmicroserrated = CompendiumWeapon(context: context)
    Longswordmicroserrated.name = "Longsword, microserrated"
    Longswordmicroserrated.type = "Advanced Melee One-Handed"
    Longswordmicroserrated.level = 9
    Longswordmicroserrated.price = 12100
    Longswordmicroserrated.damage = "2d10+STR"
    Longswordmicroserrated.damageType = "S"
    Longswordmicroserrated.critical = "Bleed 2d6"
    Longswordmicroserrated.bulk = 1
    Longswordmicroserrated.special = "Analog"
    Longswordmicroserrated.content = """
    The single edge of this sword looks homogeneous to the naked eye, but it is actually made of thousands of microscopic teeth. The teeth tear through organic matter, causing significant damage and bleeding.
    """
    
    let Hammercomet = CompendiumWeapon(context: context)
    Hammercomet.name = "Hammer, comet"
    Hammercomet.type = "Advanced Melee One-Handed"
    Hammercomet.level = 10
    Hammercomet.price = 16900
    Hammercomet.damage = "4d6+STR"
    Hammercomet.damageType = "B"
    Hammercomet.critical = "—"
    Hammercomet.bulk = 1
    Hammercomet.special = "Powered (capacity 20, usage 2)"
    Hammercomet.capacity = 20
    Hammercomet.usage = 2
    Hammercomet.content = """
    Assault hammers have heavily weighted metal heads and relatively light aluminum or polycarbonate grips. Hammer heads can be custom-made with designs or logos imprinted on the surface. Comet, gravity well, and meteoric hammers have weighted or pneumatically driven heads that deliver accelerated blows.
    """
    
    let Xenolashmature = CompendiumWeapon(context: context)
    Xenolashmature.name = "Xenolash, mature"
    Xenolashmature.type = "Advanced Melee One-Handed"
    Xenolashmature.level = 10
    Xenolashmature.price = 17000
    Xenolashmature.damage = "5d4+STR"
    Xenolashmature.damageType = "AS"
    Xenolashmature.critical = "Corrode 2d4"
    Xenolashmature.bulk = 1
    Xenolashmature.special = "Analog, disarm, entangle, reach, trip"
    Xenolashmature.content = """
    A xenolash is a genetically engineered vine that weeps caustic, quick-hardening sap from the razor-sharp thorns along its length. Because the sap (rather than the weapon itself) entangles creatures, targets are not anchored to the xenolash. Grown in extraordinary conditions by Xenowardens and primarily sold only to those they trust, the plants derive their sustenance and amber-like sap from light, ambient energy, and atmospheric chemicals.
    """
    
    let Longswordultrathin = CompendiumWeapon(context: context)
    Longswordultrathin.name = "Longsword, ultrathin"
    Longswordultrathin.type = "Advanced Melee One-Handed"
    Longswordultrathin.level = 11
    Longswordultrathin.price = 26300
    Longswordultrathin.damage = "4d8+STR"
    Longswordultrathin.damageType = "S"
    Longswordultrathin.critical = "—"
    Longswordultrathin.bulk = 1
    Longswordultrathin.special = "Analog"
    Longswordultrathin.content = """
    The double-edged blade of an ultrathin longsword is made of dense metal that holds its edge and adds heft to a swing. The blade appears exceptionally thin and light, belying the damage it can deal.
    """
    
    let Taclashnumbing = CompendiumWeapon(context: context)
    Taclashnumbing.name = "Taclash, numbing"
    Taclashnumbing.type = "Advanced Melee One-Handed"
    Taclashnumbing.level = 11
    Taclashnumbing.price = 24800
    Taclashnumbing.damage = "5d4+STR"
    Taclashnumbing.damageType = "S"
    Taclashnumbing.critical = "—"
    Taclashnumbing.bulk = 0.1
    Taclashnumbing.special = "Disarm, powered (capacity 20, usage 2), reach, stun, trip"
    Taclashnumbing.capacity = 20
    Taclashnumbing.usage = 2
    Taclashnumbing.content = """
    A Tactical lash, or taclash as it is commonly called, is a length of nylon cord reinforced with carbon fibers. Taclashes were originally used by military organizations as a form of crowd control, and explorers and mercenaries came to appreciate the utility of the weapon. When a numbing taclash connects, a low electrical shock transmits through the lash. The shock is too mild to deal damage, but it can stun the target.
    """
    
    let Starknifeaccelerated = CompendiumWeapon(context: context)
    Starknifeaccelerated.name = "Starknife, accelerated"
    Starknifeaccelerated.type = "Advanced Melee One-Handed"
    Starknifeaccelerated.level = 12
    Starknifeaccelerated.price = 40400
    Starknifeaccelerated.damage = "4d8+STR"
    Starknifeaccelerated.damageType = "FP"
    Starknifeaccelerated.critical = "—"
    Starknifeaccelerated.bulk = 0.1
    Starknifeaccelerated.special = "Powered (capacity 20, usage 1), thrown (30 ft.)"
    Starknifeaccelerated.capacity = 20
    Starknifeaccelerated.usage = 1
    Starknifeaccelerated.content = """
    Four tapered metal blades surround the central ring of a starknife, which can be thrown or used to stab opponents. Accelerated and lightspeed starknives have gas-powered jets that fire when the starknife is wielded. Solid auras surround the blades of a dimensional slice starknife, which are manufactured with cutting-edge metallurgic techniques. In a sintered starknife, the metal blades are replaced with compressed ceramic blades.
    """
    
    let Grindblade = CompendiumWeapon(context: context)
    Grindblade.name = "Grindblade"
    Grindblade.type = "Advanced Melee One-Handed"
    Grindblade.level = 13
    Grindblade.price = 45700
    Grindblade.damage = "4d10+STR"
    Grindblade.damageType = "S"
    Grindblade.critical = "Bleed 2d8"
    Grindblade.bulk = 1
    Grindblade.special = "Analog"
    Grindblade.content = """
    The sharp edge of a grindblade has been crafted with advanced micropitting technology that turns it into a destructive rasp at close to the molecular level, capable of inflicting hideous damage. So sharp and savage is their edge that most grindblade designers don’t even bother giving them a point.
    """
    
    let Longswordzeroedge = CompendiumWeapon(context: context)
    Longswordzeroedge.name = "Longsword, zero-edge"
    Longswordzeroedge.type = "Advanced Melee One-Handed"
    Longswordzeroedge.level = 14
    Longswordzeroedge.price = 79500
    Longswordzeroedge.damage = "7d8+STR"
    Longswordzeroedge.damageType = "S"
    Longswordzeroedge.critical = "Severe wound"
    Longswordzeroedge.bulk = 0.1
    Longswordzeroedge.special = "Analog"
    Longswordzeroedge.content = """
    Crafted with quantum technology, the blade of this sword seems blurry due to its exceptionally fine edge.
    """
    
    let Xenolashblooming = CompendiumWeapon(context: context)
    Xenolashblooming.name = "Xenolash, blooming"
    Xenolashblooming.type = "Advanced Melee One-Handed"
    Xenolashblooming.level = 14
    Xenolashblooming.price = 70000
    Xenolashblooming.damage = "9d4+STR"
    Xenolashblooming.damageType = "AS"
    Xenolashblooming.critical = "Corrode 4d4"
    Xenolashblooming.bulk = 1
    Xenolashblooming.special = "Analog, disarm, entangle, reach, trip"
    Xenolashblooming.content = """
    A xenolash is a genetically engineered vine that weeps caustic, quick-hardening sap from the razor-sharp thorns along its length. Because the sap (rather than the weapon itself) entangles creatures, targets are not anchored to the xenolash. Grown in extraordinary conditions by Xenowardens and primarily sold only to those they trust, the plants derive their sustenance and amber-like sap from light, ambient energy, and atmospheric chemicals.
    """
    
    let Monowhip = CompendiumWeapon(context: context)
    Monowhip.name = "Monowhip"
    Monowhip.type = "Advanced Melee One-Handed"
    Monowhip.level = 15
    Monowhip.price = 107000
    Monowhip.damage = "10d4+STR"
    Monowhip.damageType = "S"
    Monowhip.critical = "Severe wound"
    Monowhip.bulk = 0.1
    Monowhip.special = "Analog, disarm, reach, trip"
    Monowhip.content = """
    Designed to deal maximum damage, a monowhip is woven of monofilament fibers reinforced with carbon particles. Weighted at one end and spooled from a tough carbon-fiber grip, it delivers surgical-quality lacerations with minimal strength. The cuts delivered are so clean that victims sometimes fail to notice a severed limb until they are overwhelmed by a rush of blood loss.
    """
    
    let Hammermeteoric = CompendiumWeapon(context: context)
    Hammermeteoric.name = "Hammer, meteoric"
    Hammermeteoric.type = "Advanced Melee One-Handed"
    Hammermeteoric.level = 16
    Hammermeteoric.price = 164500
    Hammermeteoric.damage = "11d6+STR"
    Hammermeteoric.damageType = "B"
    Hammermeteoric.critical = "—"
    Hammermeteoric.bulk = 1
    Hammermeteoric.special = "Analog"
    Hammermeteoric.content = """
    Assault hammers have heavily weighted metal heads and relatively light aluminum or polycarbonate grips. Hammer heads can be custom-made with designs or logos imprinted on the surface. Comet, gravity well, and meteoric hammers have weighted or pneumatically driven heads that deliver accelerated blows.
    """
    
    let Starknifelightspeed = CompendiumWeapon(context: context)
    Starknifelightspeed.name = "Starknife, lightspeed"
    Starknifelightspeed.type = "Advanced Melee One-Handed"
    Starknifelightspeed.level = 16
    Starknifelightspeed.price = 183400
    Starknifelightspeed.damage = "8d8+STR"
    Starknifelightspeed.damageType = "FP"
    Starknifelightspeed.critical = "—"
    Starknifelightspeed.bulk = 0.1
    Starknifelightspeed.special = "Powered (capacity 20, usage 2), thrown (50 ft.)"
    Starknifelightspeed.capacity = 20
    Starknifelightspeed.usage = 2
    Starknifelightspeed.content = """
    Four tapered metal blades surround the central ring of a starknife, which can be thrown or used to stab opponents. Accelerated and lightspeed starknives have gas-powered jets that fire when the starknife is wielded. Solid auras surround the blades of a dimensional slice starknife, which are manufactured with cutting-edge metallurgic techniques. In a sintered starknife, the metal blades are replaced with compressed ceramic blades.
    """
    
    let Longswordmolecularrift = CompendiumWeapon(context: context)
    Longswordmolecularrift.name = "Longsword, molecular rift"
    Longswordmolecularrift.type = "Advanced Melee One-Handed"
    Longswordmolecularrift.level = 17
    Longswordmolecularrift.price = 245200
    Longswordmolecularrift.damage = "10d8+STR"
    Longswordmolecularrift.damageType = "S"
    Longswordmolecularrift.critical = "—"
    Longswordmolecularrift.bulk = 1
    Longswordmolecularrift.special = "Analog"
    Longswordmolecularrift.content = """
    The molecules of this longsword have been Artificially agitated, creating a devastating disruption field along its blade. It must be stored in a magnetic sheath to avoid cuts and damage from casual contact.
    """
    
    let Longswordultraserrated = CompendiumWeapon(context: context)
    Longswordultraserrated.name = "Longsword, ultraserrated"
    Longswordultraserrated.type = "Advanced Melee One-Handed"
    Longswordultraserrated.level = 18
    Longswordultraserrated.price = 368100
    Longswordultraserrated.damage = "8d10+STR"
    Longswordultraserrated.damageType = "S"
    Longswordultraserrated.critical = "Bleed 6d6"
    Longswordultraserrated.bulk = 1
    Longswordultraserrated.special = "Analog"
    Longswordultraserrated.content = """
    The single edge of this sword looks homogeneous to the naked eye, but it is actually made of thousands of microscopic teeth. The teeth tear through organic matter, causing significant damage and bleeding.
    """
    
    let Xenolashseeded = CompendiumWeapon(context: context)
    Xenolashseeded.name = "Xenolash, seeded"
    Xenolashseeded.type = "Advanced Melee One-Handed"
    Xenolashseeded.level = 18
    Xenolashseeded.price = 409000
    Xenolashseeded.damage = "9d4+STR"
    Xenolashseeded.damageType = "AS"
    Xenolashseeded.critical = "Corrode 6d4"
    Xenolashseeded.bulk = 1
    Xenolashseeded.special = "Analog, disarm, entangle, reach, trip"
    Xenolashseeded.content = """
    A xenolash is a genetically engineered vine that weeps caustic, quick-hardening sap from the razor-sharp thorns along its length. Because the sap (rather than the weapon itself) entangles creatures, targets are not anchored to the xenolash. Grown in extraordinary conditions by Xenowardens and primarily sold only to those they trust, the plants derive their sustenance and amber-like sap from light, ambient energy, and atmospheric chemicals.
    """
    
    let Hammergravitywell = CompendiumWeapon(context: context)
    Hammergravitywell.name = "Hammer, gravity well"
    Hammergravitywell.type = "Advanced Melee One-Handed"
    Hammergravitywell.level = 19
    Hammergravitywell.price = 551000
    Hammergravitywell.damage = "15d6+STR"
    Hammergravitywell.damageType = "B"
    Hammergravitywell.critical = "—"
    Hammergravitywell.bulk = 1
    Hammergravitywell.special = "Powered (capacity 40, usage 2)"
    Hammergravitywell.capacity = 40
    Hammergravitywell.usage = 2
    Hammergravitywell.content = """
    Assault hammers have heavily weighted metal heads and relatively light aluminum or polycarbonate grips. Hammer heads can be custom-made with designs or logos imprinted on the surface. Comet, gravity well, and meteoric hammers have weighted or pneumatically driven heads that deliver accelerated blows.
    """
    
    let Starknifedimensionalslice = CompendiumWeapon(context: context)
    Starknifedimensionalslice.name = "Starknife, dimensional slice"
    Starknifedimensionalslice.type = "Advanced Melee One-Handed"
    Starknifedimensionalslice.level = 19
    Starknifedimensionalslice.price = 602200
    Starknifedimensionalslice.damage = "8d12+STR"
    Starknifedimensionalslice.damageType = "P"
    Starknifedimensionalslice.critical = "—"
    Starknifedimensionalslice.bulk = 0.1
    Starknifedimensionalslice.special = "Analog, thrown (80 ft.)"
    Starknifedimensionalslice.content = """
    Four tapered metal blades surround the central ring of a starknife, which can be thrown or used to stab opponents. Accelerated and lightspeed starknives have gas-powered jets that fire when the starknife is wielded. Solid auras surround the blades of a dimensional slice starknife, which are manufactured with cutting-edge metallurgic techniques. In a sintered starknife, the metal blades are replaced with compressed ceramic blades.
    """
    
    let Longsworddimensionalslice = CompendiumWeapon(context: context)
    Longsworddimensionalslice.name = "Longsword, dimensional slice"
    Longsworddimensionalslice.type = "Advanced Melee One-Handed"
    Longsworddimensionalslice.level = 20
    Longsworddimensionalslice.price = 727300
    Longsworddimensionalslice.damage = "14d8+STR"
    Longsworddimensionalslice.damageType = "S"
    Longsworddimensionalslice.critical = "—"
    Longsworddimensionalslice.bulk = 1
    Longsworddimensionalslice.special = "Analog"
    Longsworddimensionalslice.content = """
    The ultimate advancement in metallurgic technology, a dimensional slice blade looks like an elongated stiletto surrounded by a blade-shaped aura. The aura is solid to the touch and can slice through almost any material.
    """
    

    
    
}

func advancedTwo() {
    let CryopikeTactical = CompendiumWeapon(context: context)
    CryopikeTactical.name = "Cryopike, Tactical"
    CryopikeTactical.type = "Advanced Melee Two-Handed"
    CryopikeTactical.level = 5
    CryopikeTactical.price = 3360
    CryopikeTactical.damage = "1d8+STR"
    CryopikeTactical.damageType = "C"
    CryopikeTactical.critical = "—"
    CryopikeTactical.bulk = 2
    CryopikeTactical.special = "Powered (capacity 40, usage 2), reach"
    CryopikeTactical.capacity = 40
    CryopikeTactical.usage = 2
    CryopikeTactical.content = """
    The haft of a cryopike is a long aluminum or carbon-steel shaft with an adjustable rubber grip. A cryopike emits a blast of supercooled gas from its tip that acts as a freezing blade.
    """
    
    let Cryopikeadvanced = CompendiumWeapon(context: context)
    Cryopikeadvanced.name = "Cryopike, advanced"
    Cryopikeadvanced.type = "Advanced Melee Two-Handed"
    Cryopikeadvanced.level = 12
    Cryopikeadvanced.price = 34800
    Cryopikeadvanced.damage = "2d8+STR"
    Cryopikeadvanced.damageType = "C"
    Cryopikeadvanced.critical = "Staggered"
    Cryopikeadvanced.bulk = 2
    Cryopikeadvanced.special = "Powered (capacity 40, usage 2), reach"
    Cryopikeadvanced.capacity = 40
    Cryopikeadvanced.usage = 2
    Cryopikeadvanced.content = """
    The haft of a cryopike is a long aluminum or carbon-steel shaft with an adjustable rubber grip. A cryopike emits a blast of supercooled gas from its tip that acts as a freezing blade.
    """
    
    let Flamedoshkoember = CompendiumWeapon(context: context)
    Flamedoshkoember.name = "Flame doshko, ember"
    Flamedoshkoember.type = "Advanced Melee Two-Handed"
    Flamedoshkoember.level = 2
    Flamedoshkoember.price = 750
    Flamedoshkoember.damage = "1d8+STR"
    Flamedoshkoember.damageType = "F"
    Flamedoshkoember.critical = "Wound"
    Flamedoshkoember.bulk = 1
    Flamedoshkoember.special = "Powered (capacity 20, usage 1)"
    Flamedoshkoember.capacity = 20
    Flamedoshkoember.usage = 1
    Flamedoshkoember.content = """
    When activated, the blade of this doshko heats up by means of internal heating coils. The doshko deals fire damage and can also cause traumatic injuries.
    """
    
    let Flamedoshkoblaze = CompendiumWeapon(context: context)
    Flamedoshkoblaze.name = "Flame doshko, blaze"
    Flamedoshkoblaze.type = "Advanced Melee Two-Handed"
    Flamedoshkoblaze.level = 8
    Flamedoshkoblaze.price = 8500
    Flamedoshkoblaze.damage = "2d8+STR"
    Flamedoshkoblaze.damageType = "F"
    Flamedoshkoblaze.critical = "Wound"
    Flamedoshkoblaze.bulk = 1
    Flamedoshkoblaze.special = "Powered (capacity 20, usage 1)"
    Flamedoshkoblaze.capacity = 20
    Flamedoshkoblaze.usage = 1
    Flamedoshkoblaze.content = """
    When activated, the blade of this doshko heats up by means of internal heating coils. The doshko deals fire damage and can also cause traumatic injuries.
    """
    
    let Flamedoshkoinferno = CompendiumWeapon(context: context)
    Flamedoshkoinferno.name = "Flame doshko, inferno"
    Flamedoshkoinferno.type = "Advanced Melee Two-Handed"
    Flamedoshkoinferno.level = 13
    Flamedoshkoinferno.price = 53200
    Flamedoshkoinferno.damage = "5d8+STR"
    Flamedoshkoinferno.damageType = "F"
    Flamedoshkoinferno.critical = "Wound"
    Flamedoshkoinferno.bulk = 1
    Flamedoshkoinferno.special = "Powered (capacity 20, usage 1)"
    Flamedoshkoinferno.capacity = 20
    Flamedoshkoinferno.usage = 1
    Flamedoshkoinferno.content = """
    When activated, the blade of this doshko heats up by means of internal heating coils. The doshko deals fire damage and can also cause traumatic injuries.
    """
    
    let FlamedoshkoSolarflare = CompendiumWeapon(context: context)
    FlamedoshkoSolarflare.name = "Flame doshko, Solar flare"
    FlamedoshkoSolarflare.type = "Advanced Melee Two-Handed"
    FlamedoshkoSolarflare.level = 19
    FlamedoshkoSolarflare.price = 595000
    FlamedoshkoSolarflare.damage = "10d8+STR"
    FlamedoshkoSolarflare.damageType = "F"
    FlamedoshkoSolarflare.critical = "Severe wound"
    FlamedoshkoSolarflare.bulk = 1
    FlamedoshkoSolarflare.special = "Powered (capacity 20, usage 1)"
    FlamedoshkoSolarflare.capacity = 20
    FlamedoshkoSolarflare.usage = 1
    FlamedoshkoSolarflare.content = """
    When activated, the blade of this doshko heats up by means of internal heating coils. The doshko deals fire damage and can also cause traumatic injuries.
    """
    
    let Plasmadoshkoredstar = CompendiumWeapon(context: context)
    Plasmadoshkoredstar.name = "Plasma doshko, red star"
    Plasmadoshkoredstar.type = "Advanced Melee Two-Handed"
    Plasmadoshkoredstar.level = 6
    Plasmadoshkoredstar.price = 4650
    Plasmadoshkoredstar.damage = "1d10+STR"
    Plasmadoshkoredstar.damageType = "EF"
    Plasmadoshkoredstar.critical = "Severe wound"
    Plasmadoshkoredstar.bulk = 1
    Plasmadoshkoredstar.special = "Powered (capacity 20, usage 2)"
    Plasmadoshkoredstar.capacity = 20
    Plasmadoshkoredstar.usage = 2
    Plasmadoshkoredstar.content = """
    The plasma versions of these traditional vesk weapons use the same popular naming convention as other plasma weapons.
    """
    
    let Plasmadoshkoyellowstar = CompendiumWeapon(context: context)
    Plasmadoshkoyellowstar.name = "Plasma doshko, yellow star"
    Plasmadoshkoyellowstar.type = "Advanced Melee Two-Handed"
    Plasmadoshkoyellowstar.level = 10
    Plasmadoshkoyellowstar.price = 17000
    Plasmadoshkoyellowstar.damage = "2d10+STR"
    Plasmadoshkoyellowstar.damageType = "EF"
    Plasmadoshkoyellowstar.critical = "Severe wound"
    Plasmadoshkoyellowstar.bulk = 1
    Plasmadoshkoyellowstar.special = "Powered (capacity 20, usage 2)"
    Plasmadoshkoyellowstar.capacity = 20
    Plasmadoshkoyellowstar.usage = 2
    Plasmadoshkoyellowstar.content = """
    The plasma versions of these traditional vesk weapons use the same popular naming convention as other plasma weapons.
    """
    
    let Plasmadoshkowhitestar = CompendiumWeapon(context: context)
    Plasmadoshkowhitestar.name = "Plasma doshko, white star"
    Plasmadoshkowhitestar.type = "Advanced Melee Two-Handed"
    Plasmadoshkowhitestar.level = 15
    Plasmadoshkowhitestar.price = 126800
    Plasmadoshkowhitestar.damage = "5d10+STR"
    Plasmadoshkowhitestar.damageType = "EF"
    Plasmadoshkowhitestar.critical = "Severe wound"
    Plasmadoshkowhitestar.bulk = 1
    Plasmadoshkowhitestar.special = "Powered (capacity 20, usage 2)"
    Plasmadoshkowhitestar.capacity = 20
    Plasmadoshkowhitestar.usage = 2
    Plasmadoshkowhitestar.content = """
    The plasma versions of these traditional vesk weapons use the same popular naming convention as other plasma weapons.
    """
    
    let Plasmadoshkobluestar = CompendiumWeapon(context: context)
    Plasmadoshkobluestar.name = "Plasma doshko, blue star"
    Plasmadoshkobluestar.type = "Advanced Melee Two-Handed"
    Plasmadoshkobluestar.level = 18
    Plasmadoshkobluestar.price = 364100
    Plasmadoshkobluestar.damage = "7d10+STR"
    Plasmadoshkobluestar.damageType = "EF"
    Plasmadoshkobluestar.critical = "Severe wound"
    Plasmadoshkobluestar.bulk = 1
    Plasmadoshkobluestar.special = "Powered (capacity 20, usage 2)"
    Plasmadoshkobluestar.capacity = 20
    Plasmadoshkobluestar.usage = 2
    Plasmadoshkobluestar.content = """
    The plasma versions of these traditional vesk weapons use the same popular naming convention as other plasma weapons.
    """
    
    let DoshkoTactical = CompendiumWeapon(context: context)
    DoshkoTactical.name = "Doshko, Tactical"
    DoshkoTactical.type = "Advanced Melee Two-Handed"
    DoshkoTactical.level = 1
    DoshkoTactical.price = 240
    DoshkoTactical.damage = "1d12+STR"
    DoshkoTactical.damageType = "P"
    DoshkoTactical.critical = "—"
    DoshkoTactical.bulk = 1
    DoshkoTactical.special = "Analog, unwieldy"
    DoshkoTactical.content = """
    The traditional weapon of the vesk, the doshko is composed of one to four triangular blades arranged in a row and attached to a long haft. Ideal for devastating overhand blows and catching and parrying enemy weapons, its use is a highly respected art form in traditional vesk society, but it also sees use by creatures of other races as a variant axe. Traditionally, doshkos are made of steel, but in recent decades they have been crafted using advanced metallurgic techniques and even quantum technology to improve the stabbing edges.
    """
    
    let PikeTactical = CompendiumWeapon(context: context)
    PikeTactical.name = "Pike, Tactical"
    PikeTactical.type = "Advanced Melee Two-Handed"
    PikeTactical.level = 2
    PikeTactical.price = 475
    PikeTactical.damage = "1d8+STR"
    PikeTactical.damageType = "P"
    PikeTactical.critical = "—"
    PikeTactical.bulk = 2
    PikeTactical.special = "Analog, reach"
    PikeTactical.content = """
    A pike is composed of a sharpened-aluminum, stainless-steel, or carbon-steel spike atop a light metal or polycarbonate staff.
    """
    
    let Curvebladecarbonsteel = CompendiumWeapon(context: context)
    Curvebladecarbonsteel.name = "Curve blade, carbon steel"
    Curvebladecarbonsteel.type = "Advanced Melee Two-Handed"
    Curvebladecarbonsteel.level = 4
    Curvebladecarbonsteel.price = 2230
    Curvebladecarbonsteel.damage = "1d10+STR"
    Curvebladecarbonsteel.damageType = "S"
    Curvebladecarbonsteel.critical = "Bleed 1d6"
    Curvebladecarbonsteel.bulk = 2
    Curvebladecarbonsteel.special = "Analog"
    Curvebladecarbonsteel.content = """
    This graceful, curving blade further increases the drama inherent in sword fighting. Carbon steel blades bite deeply, causing bleeding wounds. The blade of an ultrathin curve blade looks delicate, but it is as hard as carbon steel and keeps a fine edge. Buzzblade curve blades vibrate when powered, tearing organic flesh and causing additional bleed damage. Dimensional slice curve blades have only a narrow visible blade area, surrounded by a solid aura; these are the sharpest and most dangerous curve blades on the market.
    """
    
    let SwoophammerTactical = CompendiumWeapon(context: context)
    SwoophammerTactical.name = "Swoop hammer, Tactical"
    SwoophammerTactical.type = "Advanced Melee Two-Handed"
    SwoophammerTactical.level = 5
    SwoophammerTactical.price = 3360
    SwoophammerTactical.damage = "1d10+STR"
    SwoophammerTactical.damageType = "B"
    SwoophammerTactical.critical = "Knockdown"
    SwoophammerTactical.bulk = 2
    SwoophammerTactical.special = "Analog, reach, unwieldy"
    SwoophammerTactical.content = """
    The combat head of a swoop hammer is affixed to an elongated haft. The extra reach of the haft allows for a greater swinging arc and accelerated damage.
    """
    
    let Devastationbladewrack = CompendiumWeapon(context: context)
    Devastationbladewrack.name = "Devastation blade, wrack"
    Devastationbladewrack.type = "Advanced Melee Two-Handed"
    Devastationbladewrack.level = 7
    Devastationbladewrack.price = 5500
    Devastationbladewrack.damage = "2d8+STR"
    Devastationbladewrack.damageType = "S"
    Devastationbladewrack.critical = "—"
    Devastationbladewrack.bulk = 1
    Devastationbladewrack.special = "Analog"
    Devastationbladewrack.content = """
    The overlarge devastation blade is a two-edged sword that creates terrifying wounds. Devastation blades are rarely subtle weapons, due to both their size and their often elaborate spiked designs.
    """
    
    let Doshkoadvanced = CompendiumWeapon(context: context)
    Doshkoadvanced.name = "Doshko, advanced"
    Doshkoadvanced.type = "Advanced Melee Two-Handed"
    Doshkoadvanced.level = 7
    Doshkoadvanced.price = 5300
    Doshkoadvanced.damage = "2d12+STR"
    Doshkoadvanced.damageType = "P"
    Doshkoadvanced.critical = "—"
    Doshkoadvanced.bulk = 1
    Doshkoadvanced.special = "Analog, unwieldy"
    Doshkoadvanced.content = """
    The traditional weapon of the vesk, the doshko is composed of one to four triangular blades arranged in a row and attached to a long haft. Ideal for devastating overhand blows and catching and parrying enemy weapons, its use is a highly respected art form in traditional vesk society, but it also sees use by creatures of other races as a variant axe. Traditionally, doshkos are made of steel, but in recent decades they have been crafted using advanced metallurgic techniques and even quantum technology to improve the stabbing edges.
    """
    
    let Staffsentinel = CompendiumWeapon(context: context)
    Staffsentinel.name = "Staff, sentinel"
    Staffsentinel.type = "Advanced Melee Two-Handed"
    Staffsentinel.level = 7
    Staffsentinel.price = 6320
    Staffsentinel.damage = "1d10+STR"
    Staffsentinel.damageType = "B"
    Staffsentinel.critical = "—"
    Staffsentinel.bulk = 1
    Staffsentinel.special = "Block, powered (capacity 20, usage 1), stun"
    Staffsentinel.capacity = 20
    Staffsentinel.usage = 1
    Staffsentinel.content = """
    Staves are long and flexible, weighted on the end to provide extra striking power. Most staves are made from aluminum or fiberglass, though some are still made from wood.
    """
    
    let Pikeadvanced = CompendiumWeapon(context: context)
    Pikeadvanced.name = "Pike, advanced"
    Pikeadvanced.type = "Advanced Melee Two-Handed"
    Pikeadvanced.level = 9
    Pikeadvanced.price = 12200
    Pikeadvanced.damage = "2d8+STR"
    Pikeadvanced.damageType = "P"
    Pikeadvanced.critical = "Bleed 1d8"
    Pikeadvanced.bulk = 2
    Pikeadvanced.special = "Analog, reach"
    Pikeadvanced.content = """
    A pike is composed of a sharpened-aluminum, stainless-steel, or carbon-steel spike atop a light metal or polycarbonate staff.
    """
    
    let Swoophammeradvanced = CompendiumWeapon(context: context)
    Swoophammeradvanced.name = "Swoop hammer, advanced"
    Swoophammeradvanced.type = "Advanced Melee Two-Handed"
    Swoophammeradvanced.level = 9
    Swoophammeradvanced.price = 14300
    Swoophammeradvanced.damage = "3d10+STR"
    Swoophammeradvanced.damageType = "B"
    Swoophammeradvanced.critical = "Knockdown"
    Swoophammeradvanced.bulk = 2
    Swoophammeradvanced.special = "Analog, reach, unwieldy"
    Swoophammeradvanced.content = """
    The combat head of a swoop hammer is affixed to an elongated haft. The extra reach of the haft allows for a greater swinging arc and accelerated damage.
    """
    
    let Curvebladeultrathin = CompendiumWeapon(context: context)
    Curvebladeultrathin.name = "Curve blade, ultrathin"
    Curvebladeultrathin.type = "Advanced Melee Two-Handed"
    Curvebladeultrathin.level = 10
    Curvebladeultrathin.price = 18100
    Curvebladeultrathin.damage = "3d10+STR"
    Curvebladeultrathin.damageType = "S"
    Curvebladeultrathin.critical = "Bleed 2d6"
    Curvebladeultrathin.bulk = 1
    Curvebladeultrathin.special = "Analog"
    Curvebladeultrathin.content = """
    This graceful, curving blade further increases the drama inherent in sword fighting. Carbon steel blades bite deeply, causing bleeding wounds. The blade of an ultrathin curve blade looks delicate, but it is as hard as carbon steel and keeps a fine edge. Buzzblade curve blades vibrate when powered, tearing organic flesh and causing additional bleed damage. Dimensional slice curve blades have only a narrow visible blade area, surrounded by a solid aura; these are the sharpest and most dangerous curve blades on the market.
    """
    
    let Doshkoultrathin = CompendiumWeapon(context: context)
    Doshkoultrathin.name = "Doshko, ultrathin"
    Doshkoultrathin.type = "Advanced Melee Two-Handed"
    Doshkoultrathin.level = 11
    Doshkoultrathin.price = 24600
    Doshkoultrathin.damage = "4d12+STR"
    Doshkoultrathin.damageType = "P"
    Doshkoultrathin.critical = "—"
    Doshkoultrathin.bulk = 1
    Doshkoultrathin.special = "Analog, unwieldy"
    Doshkoultrathin.content = """
    The traditional weapon of the vesk, the doshko is composed of one to four triangular blades arranged in a row and attached to a long haft. Ideal for devastating overhand blows and catching and parrying enemy weapons, its use is a highly respected art form in traditional vesk society, but it also sees use by creatures of other races as a variant axe. Traditionally, doshkos are made of steel, but in recent decades they have been crafted using advanced metallurgic techniques and even quantum technology to improve the stabbing edges.
    """
    
    let Devastationbladeruin = CompendiumWeapon(context: context)
    Devastationbladeruin.name = "Devastation blade, ruin"
    Devastationbladeruin.type = "Advanced Melee Two-Handed"
    Devastationbladeruin.level = 13
    Devastationbladeruin.price = 43900
    Devastationbladeruin.damage = "5d8+STR"
    Devastationbladeruin.damageType = "S"
    Devastationbladeruin.critical = "—"
    Devastationbladeruin.bulk = 1
    Devastationbladeruin.special = "Analog"
    Devastationbladeruin.content = """
    The overlarge devastation blade is a two-edged sword that creates terrifying wounds. Devastation blades are rarely subtle weapons, due to both their size and their often elaborate spiked designs.
    """
    
    let Staffrepeller = CompendiumWeapon(context: context)
    Staffrepeller.name = "Staff, repeller"
    Staffrepeller.type = "Advanced Melee Two-Handed"
    Staffrepeller.level = 13
    Staffrepeller.price = 45200
    Staffrepeller.damage = "3d8+STR"
    Staffrepeller.damageType = "B"
    Staffrepeller.critical = "Knockdown"
    Staffrepeller.bulk = 1
    Staffrepeller.special = "Block, powered (capacity 20, usage 1), stun"
    Staffrepeller.capacity = 20
    Staffrepeller.usage = 1
    Staffrepeller.content = """
    Staves are long and flexible, weighted on the end to provide extra striking power. Most staves are made from aluminum or fiberglass, though some are still made from wood.
    """
    
    let SwoophammermachI = CompendiumWeapon(context: context)
    SwoophammermachI.name = "Swoop hammer, mach I"
    SwoophammermachI.type = "Advanced Melee Two-Handed"
    SwoophammermachI.level = 13
    SwoophammermachI.price = 44100
    SwoophammermachI.damage = "5d10+STR"
    SwoophammermachI.damageType = "B"
    SwoophammermachI.critical = "Knockdown"
    SwoophammermachI.bulk = 2
    SwoophammermachI.special = "Powered (capacity 40, usage 4), reach, unwieldy"
    SwoophammermachI.capacity = 40
    SwoophammermachI.usage = 4
    SwoophammermachI.content = """
    The combat head of a swoop hammer is affixed to an elongated haft. The extra reach of the haft allows for a greater swinging arc and accelerated damage.
    """
    
    let Doshkozeroedge = CompendiumWeapon(context: context)
    Doshkozeroedge.name = "Doshko, zero-edge"
    Doshkozeroedge.type = "Advanced Melee Two-Handed"
    Doshkozeroedge.level = 14
    Doshkozeroedge.price = 71500
    Doshkozeroedge.damage = "7d12+STR"
    Doshkozeroedge.damageType = "P"
    Doshkozeroedge.critical = "—"
    Doshkozeroedge.bulk = 1
    Doshkozeroedge.special = "Analog, unwieldy"
    Doshkozeroedge.content = """
    The traditional weapon of the vesk, the doshko is composed of one to four triangular blades arranged in a row and attached to a long haft. Ideal for devastating overhand blows and catching and parrying enemy weapons, its use is a highly respected art form in traditional vesk society, but it also sees use by creatures of other races as a variant axe. Traditionally, doshkos are made of steel, but in recent decades they have been crafted using advanced metallurgic techniques and even quantum technology to improve the stabbing edges.
    """
    
    let Pikeelite = CompendiumWeapon(context: context)
    Pikeelite.name = "Pike, elite"
    Pikeelite.type = "Advanced Melee Two-Handed"
    Pikeelite.level = 15
    Pikeelite.price = 95700
    Pikeelite.damage = "7d8+STR"
    Pikeelite.damageType = "P"
    Pikeelite.critical = "Bleed 3d8"
    Pikeelite.bulk = 2
    Pikeelite.special = "Analog, reach"
    Pikeelite.content = """
    A pike is composed of a sharpened-aluminum, stainless-steel, or carbon-steel spike atop a light metal or polycarbonate staff.
    """
    
    let Curvebladebuzzblade = CompendiumWeapon(context: context)
    Curvebladebuzzblade.name = "Curve blade, buzzblade"
    Curvebladebuzzblade.type = "Advanced Melee Two-Handed"
    Curvebladebuzzblade.level = 16
    Curvebladebuzzblade.price = 184300
    Curvebladebuzzblade.damage = "8d10+STR"
    Curvebladebuzzblade.damageType = "S"
    Curvebladebuzzblade.critical = "Bleed 5d6"
    Curvebladebuzzblade.bulk = 2
    Curvebladebuzzblade.special = "Powered (capacity 40, usage 2)"
    Curvebladebuzzblade.capacity = 40
    Curvebladebuzzblade.usage = 2
    Curvebladebuzzblade.content = """
    This graceful, curving blade further increases the drama inherent in sword fighting. Carbon steel blades bite deeply, causing bleeding wounds. The blade of an ultrathin curve blade looks delicate, but it is as hard as carbon steel and keeps a fine edge. Buzzblade curve blades vibrate when powered, tearing organic flesh and causing additional bleed damage. Dimensional slice curve blades have only a narrow visible blade area, surrounded by a solid aura; these are the sharpest and most dangerous curve blades on the market.
    """
    
    let Doshkomolecularrift = CompendiumWeapon(context: context)
    Doshkomolecularrift.name = "Doshko, molecular rift"
    Doshkomolecularrift.type = "Advanced Melee Two-Handed"
    Doshkomolecularrift.level = 17
    Doshkomolecularrift.price = 248000
    Doshkomolecularrift.damage = "10d12+STR"
    Doshkomolecularrift.damageType = "P"
    Doshkomolecularrift.critical = "—"
    Doshkomolecularrift.bulk = 1
    Doshkomolecularrift.special = "Powered (capacity 20, usage 1), unwieldy"
    Doshkomolecularrift.capacity = 20
    Doshkomolecularrift.usage = 1
    Doshkomolecularrift.content = """
    The traditional weapon of the vesk, the doshko is composed of one to four triangular blades arranged in a row and attached to a long haft. Ideal for devastating overhand blows and catching and parrying enemy weapons, its use is a highly respected art form in traditional vesk society, but it also sees use by creatures of other races as a variant axe. Traditionally, doshkos are made of steel, but in recent decades they have been crafted using advanced metallurgic techniques and even quantum technology to improve the stabbing edges.
    """
    
    let SwoophammermachII = CompendiumWeapon(context: context)
    SwoophammermachII.name = "Swoop hammer, mach II"
    SwoophammermachII.type = "Advanced Melee Two-Handed"
    SwoophammermachII.level = 17
    SwoophammermachII.price = 273000
    SwoophammermachII.damage = "10d10+STR"
    SwoophammermachII.damageType = "B"
    SwoophammermachII.critical = "Knockdown"
    SwoophammermachII.bulk = 2
    SwoophammermachII.special = "Analog, reach, unwieldy"
    SwoophammermachII.content = """
    The combat head of a swoop hammer is affixed to an elongated haft. The extra reach of the haft allows for a greater swinging arc and accelerated damage.
    """
    
    let Devastationbladeapocalypse = CompendiumWeapon(context: context)
    Devastationbladeapocalypse.name = "Devastation blade, apocalypse"
    Devastationbladeapocalypse.type = "Advanced Melee Two-Handed"
    Devastationbladeapocalypse.level = 18
    Devastationbladeapocalypse.price = 410200
    Devastationbladeapocalypse.damage = "12d8+STR"
    Devastationbladeapocalypse.damageType = "S"
    Devastationbladeapocalypse.critical = "—"
    Devastationbladeapocalypse.bulk = 1
    Devastationbladeapocalypse.special = "Analog"
    Devastationbladeapocalypse.content = """
    The overlarge devastation blade is a two-edged sword that creates terrifying wounds. Devastation blades are rarely subtle weapons, due to both their size and their often elaborate spiked designs.
    """
    
    let Doshkodimensionalblade = CompendiumWeapon(context: context)
    Doshkodimensionalblade.name = "Doshko, dimensional blade"
    Doshkodimensionalblade.type = "Advanced Melee Two-Handed"
    Doshkodimensionalblade.level = 19
    Doshkodimensionalblade.price = 546100
    Doshkodimensionalblade.damage = "13d12+STR"
    Doshkodimensionalblade.damageType = "P"
    Doshkodimensionalblade.critical = "—"
    Doshkodimensionalblade.bulk = 1
    Doshkodimensionalblade.special = "Analog, unwieldy"
    Doshkodimensionalblade.content = """
    The traditional weapon of the vesk, the doshko is composed of one to four triangular blades arranged in a row and attached to a long haft. Ideal for devastating overhand blows and catching and parrying enemy weapons, its use is a highly respected art form in traditional vesk society, but it also sees use by creatures of other races as a variant axe. Traditionally, doshkos are made of steel, but in recent decades they have been crafted using advanced metallurgic techniques and even quantum technology to improve the stabbing edges.
    """
    
    let Curvebladedimensionalslice = CompendiumWeapon(context: context)
    Curvebladedimensionalslice.name = "Curve blade, dimensional slice"
    Curvebladedimensionalslice.type = "Advanced Melee Two-Handed"
    Curvebladedimensionalslice.level = 20
    Curvebladedimensionalslice.price = 815000
    Curvebladedimensionalslice.damage = "12d10+STR"
    Curvebladedimensionalslice.damageType = "S"
    Curvebladedimensionalslice.critical = "Bleed 6d6"
    Curvebladedimensionalslice.bulk = 2
    Curvebladedimensionalslice.special = "Powered (capacity 40, usage 2)"
    Curvebladedimensionalslice.capacity = 40
    Curvebladedimensionalslice.usage = 2
    Curvebladedimensionalslice.content = """
    This graceful, curving blade further increases the drama inherent in sword fighting. Carbon steel blades bite deeply, causing bleeding wounds. The blade of an ultrathin curve blade looks delicate, but it is as hard as carbon steel and keeps a fine edge. Buzzblade curve blades vibrate when powered, tearing organic flesh and causing additional bleed damage. Dimensional slice curve blades have only a narrow visible blade area, surrounded by a solid aura; these are the sharpest and most dangerous curve blades on the market.
    """
    
    let SwoophammermachIII = CompendiumWeapon(context: context)
    SwoophammermachIII.name = "Swoop hammer, mach III"
    SwoophammermachIII.type = "Advanced Melee Two-Handed"
    SwoophammermachIII.level = 20
    SwoophammermachIII.price = 905700
    SwoophammermachIII.damage = "14d10+STR"
    SwoophammermachIII.damageType = "BF"
    SwoophammermachIII.critical = "Knockdown"
    SwoophammermachIII.bulk = 2
    SwoophammermachIII.special = "Powered (capacity 40, usage 4), reach, unwieldy"
    SwoophammermachIII.capacity = 40
    SwoophammermachIII.usage = 4
    SwoophammermachIII.content = """
    The combat head of a swoop hammer is affixed to an elongated haft. The extra reach of the haft allows for a greater swinging arc and accelerated damage.
    """
    

}

func smallArms() {
    
    let Zeropistolfrostbiteclass = CompendiumWeapon(context: context)
    Zeropistolfrostbiteclass.name = "Zero pistol, frostbite-class"
    Zeropistolfrostbiteclass.type = "Small Arm"
    Zeropistolfrostbiteclass.level = 5
    Zeropistolfrostbiteclass.price = 3060
    Zeropistolfrostbiteclass.damage = "1d6"
    Zeropistolfrostbiteclass.damageType = "C"
    Zeropistolfrostbiteclass.range = 60
    Zeropistolfrostbiteclass.critical = "Staggered"
    Zeropistolfrostbiteclass.capacity = 20
    Zeropistolfrostbiteclass.usage = 1
    Zeropistolfrostbiteclass.bulk = 0.1
    Zeropistolfrostbiteclass.special = "—"
    Zeropistolfrostbiteclass.content = """
    Zero pistols have a weighted grip to balance their unusually heavy barrels. A cylindrical canister over the barrel contains and directs the coolants.
    """
    
    let Zeropistolhailstormclass = CompendiumWeapon(context: context)
    Zeropistolhailstormclass.name = "Zero pistol, hailstorm-class"
    Zeropistolhailstormclass.type = "Small Arm"
    Zeropistolhailstormclass.level = 10
    Zeropistolhailstormclass.price = 16900
    Zeropistolhailstormclass.damage = "2d6"
    Zeropistolhailstormclass.damageType = "C"
    Zeropistolhailstormclass.range = 60
    Zeropistolhailstormclass.critical = "Staggered"
    Zeropistolhailstormclass.capacity = 40
    Zeropistolhailstormclass.usage = 2
    Zeropistolhailstormclass.bulk = 0.1
    Zeropistolhailstormclass.special = "—"
    Zeropistolhailstormclass.content = """
    Zero pistols have a weighted grip to balance their unusually heavy barrels. A cylindrical canister over the barrel contains and directs the coolants.
    """
    
    let Zeropistolblizzardclass = CompendiumWeapon(context: context)
    Zeropistolblizzardclass.name = "Zero pistol, blizzard-class"
    Zeropistolblizzardclass.type = "Small Arm"
    Zeropistolblizzardclass.level = 15
    Zeropistolblizzardclass.price = 94500
    Zeropistolblizzardclass.damage = "4d6"
    Zeropistolblizzardclass.damageType = "C"
    Zeropistolblizzardclass.range = 60
    Zeropistolblizzardclass.critical = "Staggered"
    Zeropistolblizzardclass.capacity = 40
    Zeropistolblizzardclass.usage = 2
    Zeropistolblizzardclass.bulk = 0.1
    Zeropistolblizzardclass.special = "—"
    Zeropistolblizzardclass.content = """
    Zero pistols have a weighted grip to balance their unusually heavy barrels. A cylindrical canister over the barrel contains and directs the coolants.
    """
    
    let Zeropistolavalancheclass = CompendiumWeapon(context: context)
    Zeropistolavalancheclass.name = "Zero pistol, avalanche-class"
    Zeropistolavalancheclass.type = "Small Arm"
    Zeropistolavalancheclass.level = 19
    Zeropistolavalancheclass.price = 492900
    Zeropistolavalancheclass.damage = "6d6"
    Zeropistolavalancheclass.damageType = "C"
    Zeropistolavalancheclass.range = 60
    Zeropistolavalancheclass.critical = "Staggered"
    Zeropistolavalancheclass.capacity = 80
    Zeropistolavalancheclass.usage = 4
    Zeropistolavalancheclass.bulk = 0.1
    Zeropistolavalancheclass.special = "—"
    Zeropistolavalancheclass.content = """
    Zero pistols have a weighted grip to balance their unusually heavy barrels. A cylindrical canister over the barrel contains and directs the coolants.
    """
    
    let Flaregunsurvival = CompendiumWeapon(context: context)
    Flaregunsurvival.name = "Flare gun, survival"
    Flaregunsurvival.type = "Small Arm"
    Flaregunsurvival.level = 1
    Flaregunsurvival.price = 90
    Flaregunsurvival.damage = "1d3"
    Flaregunsurvival.damageType = "F"
    Flaregunsurvival.range = 30
    Flaregunsurvival.critical = "Burn 1d6"
    Flaregunsurvival.capacity = 1
    Flaregunsurvival.usage = 1
    Flaregunsurvival.bulk = 0.1
    Flaregunsurvival.special = "Analog, bright"
    Flaregunsurvival.content = """
    A survival flare gun is used to signal danger or call for help. Though not designed for combat, survival flare guns can deal fire damage at close range.
    """
    
    let Flamepistol = CompendiumWeapon(context: context)
    Flamepistol.name = "Flame pistol"
    Flamepistol.type = "Small Arm"
    Flamepistol.level = 2
    Flamepistol.price = 470
    Flamepistol.damage = "1d4"
    Flamepistol.damageType = "F"
    Flamepistol.range = 20
    Flamepistol.critical = "Burn 1d4"
    Flamepistol.capacity = 20
    Flamepistol.usage = 4
    Flamepistol.bulk = 0.1
    Flamepistol.special = "Line, unwieldy"
    Flamepistol.content = """
    A flame pistol shoots a line of ignited petrol from its barrel.
    """
    
    let Laserpistolazimuth = CompendiumWeapon(context: context)
    Laserpistolazimuth.name = "Laser pistol, azimuth"
    Laserpistolazimuth.type = "Small Arm"
    Laserpistolazimuth.level = 1
    Laserpistolazimuth.price = 350
    Laserpistolazimuth.damage = "1d4"
    Laserpistolazimuth.damageType = "F"
    Laserpistolazimuth.range = 80
    Laserpistolazimuth.critical = "Burn 1d4"
    Laserpistolazimuth.capacity = 20
    Laserpistolazimuth.usage = 1
    Laserpistolazimuth.bulk = 0.1
    Laserpistolazimuth.special = "—"
    Laserpistolazimuth.content = """
    The laser pistol is possibly the most common small arm used by explorers, guards, mercenaries, and traders. Laser pistols are light and reliable, yet they still deal a respectable amount of damage.
    """
    
    let Laserpistolcorona = CompendiumWeapon(context: context)
    Laserpistolcorona.name = "Laser pistol, corona"
    Laserpistolcorona.type = "Small Arm"
    Laserpistolcorona.level = 6
    Laserpistolcorona.price = 4270
    Laserpistolcorona.damage = "2d4"
    Laserpistolcorona.damageType = "F"
    Laserpistolcorona.range = 90
    Laserpistolcorona.critical = "Burn 1d4"
    Laserpistolcorona.capacity = 20
    Laserpistolcorona.usage = 1
    Laserpistolcorona.bulk = 0.1
    Laserpistolcorona.special = "—"
    Laserpistolcorona.content = """
    The laser pistol is possibly the most common small arm used by explorers, guards, mercenaries, and traders. Laser pistols are light and reliable, yet they still deal a respectable amount of damage.
    """
    
    let Laserpistolaphelion = CompendiumWeapon(context: context)
    Laserpistolaphelion.name = "Laser pistol, aphelion"
    Laserpistolaphelion.type = "Small Arm"
    Laserpistolaphelion.level = 9
    Laserpistolaphelion.price = 14820
    Laserpistolaphelion.damage = "3d4"
    Laserpistolaphelion.damageType = "F"
    Laserpistolaphelion.range = 90
    Laserpistolaphelion.critical = "Burn 1d4"
    Laserpistolaphelion.capacity = 40
    Laserpistolaphelion.usage = 2
    Laserpistolaphelion.bulk = 0.1
    Laserpistolaphelion.special = "Boost 1d4"
    Laserpistolaphelion.content = """
    The laser pistol is possibly the most common small arm used by explorers, guards, mercenaries, and traders. Laser pistols are light and reliable, yet they still deal a respectable amount of damage.
    """
    
    let Laserpistolperihelion = CompendiumWeapon(context: context)
    Laserpistolperihelion.name = "Laser pistol, perihelion"
    Laserpistolperihelion.type = "Small Arm"
    Laserpistolperihelion.level = 12
    Laserpistolperihelion.price = 40200
    Laserpistolperihelion.damage = "4d4"
    Laserpistolperihelion.damageType = "F"
    Laserpistolperihelion.range = 90
    Laserpistolperihelion.critical = "Burn 2d4"
    Laserpistolperihelion.capacity = 40
    Laserpistolperihelion.usage = 2
    Laserpistolperihelion.bulk = 0.1
    Laserpistolperihelion.special = "—"
    Laserpistolperihelion.content = """
    The laser pistol is possibly the most common small arm used by explorers, guards, mercenaries, and traders. Laser pistols are light and reliable, yet they still deal a respectable amount of damage.
    """
    
    let Laserpistolparallax = CompendiumWeapon(context: context)
    Laserpistolparallax.name = "Laser pistol, parallax"
    Laserpistolparallax.type = "Small Arm"
    Laserpistolparallax.level = 14
    Laserpistolparallax.price = 82000
    Laserpistolparallax.damage = "5d4"
    Laserpistolparallax.damageType = "F"
    Laserpistolparallax.range = 90
    Laserpistolparallax.critical = "Burn 3d4"
    Laserpistolparallax.capacity = 80
    Laserpistolparallax.usage = 4
    Laserpistolparallax.bulk = 0.1
    Laserpistolparallax.special = "Boost 2d4"
    Laserpistolparallax.content = """
    The laser pistol is possibly the most common small arm used by explorers, guards, mercenaries, and traders. Laser pistols are light and reliable, yet they still deal a respectable amount of damage.
    """
    
    let Laserpistolzenith = CompendiumWeapon(context: context)
    Laserpistolzenith.name = "Laser pistol, zenith"
    Laserpistolzenith.type = "Small Arm"
    Laserpistolzenith.level = 17
    Laserpistolzenith.price = 245200
    Laserpistolzenith.damage = "8d4"
    Laserpistolzenith.damageType = "F"
    Laserpistolzenith.range = 100
    Laserpistolzenith.critical = "Burn 4d4"
    Laserpistolzenith.capacity = 80
    Laserpistolzenith.usage = 4
    Laserpistolzenith.bulk = 0.1
    Laserpistolzenith.special = "—"
    Laserpistolzenith.content = """
    The laser pistol is possibly the most common small arm used by explorers, guards, mercenaries, and traders. Laser pistols are light and reliable, yet they still deal a respectable amount of damage.
    """
    
    let Plasmapistolredstar = CompendiumWeapon(context: context)
    Plasmapistolredstar.name = "Plasma pistol, red star"
    Plasmapistolredstar.type = "Small Arm"
    Plasmapistolredstar.level = 7
    Plasmapistolredstar.price = 7200
    Plasmapistolredstar.damage = "1d8"
    Plasmapistolredstar.damageType = "EF"
    Plasmapistolredstar.range = 20
    Plasmapistolredstar.critical = "Burn 1d8"
    Plasmapistolredstar.capacity = 20
    Plasmapistolredstar.usage = 4
    Plasmapistolredstar.bulk = 0.1
    Plasmapistolredstar.special = "Line, unwieldy"
    Plasmapistolredstar.content = """
    Plasma pistols fire a line of ionized plasma out to a relatively short range. The plasma can continue to burn after contact.
    """
    
    let Plasmapistolyellowstar = CompendiumWeapon(context: context)
    Plasmapistolyellowstar.name = "Plasma pistol, yellow star"
    Plasmapistolyellowstar.type = "Small Arm"
    Plasmapistolyellowstar.level = 12
    Plasmapistolyellowstar.price = 40300
    Plasmapistolyellowstar.damage = "2d8"
    Plasmapistolyellowstar.damageType = "EF"
    Plasmapistolyellowstar.range = 25
    Plasmapistolyellowstar.critical = "Burn 1d8"
    Plasmapistolyellowstar.capacity = 40
    Plasmapistolyellowstar.usage = 8
    Plasmapistolyellowstar.bulk = 0.1
    Plasmapistolyellowstar.special = "Line, unwieldy"
    Plasmapistolyellowstar.content = """
    Plasma pistols fire a line of ionized plasma out to a relatively short range. The plasma can continue to burn after contact.
    """
    
    let Plasmapistolwhitestar = CompendiumWeapon(context: context)
    Plasmapistolwhitestar.name = "Plasma pistol, white star"
    Plasmapistolwhitestar.type = "Small Arm"
    Plasmapistolwhitestar.level = 15
    Plasmapistolwhitestar.price = 107500
    Plasmapistolwhitestar.damage = "3d8"
    Plasmapistolwhitestar.damageType = "EF"
    Plasmapistolwhitestar.range = 30
    Plasmapistolwhitestar.critical = "Burn 2d8"
    Plasmapistolwhitestar.capacity = 100
    Plasmapistolwhitestar.usage = 20
    Plasmapistolwhitestar.bulk = 0.1
    Plasmapistolwhitestar.special = "Line, unwieldy"
    Plasmapistolwhitestar.content = """
    Plasma pistols fire a line of ionized plasma out to a relatively short range. The plasma can continue to burn after contact.
    """
    
    let Plasmapistolbluestar = CompendiumWeapon(context: context)
    Plasmapistolbluestar.name = "Plasma pistol, blue star"
    Plasmapistolbluestar.type = "Small Arm"
    Plasmapistolbluestar.level = 19
    Plasmapistolbluestar.price = 565000
    Plasmapistolbluestar.damage = "5d8"
    Plasmapistolbluestar.damageType = "EF"
    Plasmapistolbluestar.range = 40
    Plasmapistolbluestar.critical = "Burn 3d8"
    Plasmapistolbluestar.capacity = 100
    Plasmapistolbluestar.usage = 20
    Plasmapistolbluestar.bulk = 0.1
    Plasmapistolbluestar.special = "Line, unwieldy"
    Plasmapistolbluestar.content = """
    Plasma pistols fire a line of ionized plasma out to a relatively short range. The plasma can continue to burn after contact.
    """
    
    let SemiautopistolTactical = CompendiumWeapon(context: context)
    SemiautopistolTactical.name = "Semi-auto pistol, Tactical"
    SemiautopistolTactical.type = "Small Arm"
    SemiautopistolTactical.level = 1
    SemiautopistolTactical.price = 260
    SemiautopistolTactical.damage = "1d6"
    SemiautopistolTactical.damageType = "P"
    SemiautopistolTactical.range = 30
    SemiautopistolTactical.critical = "—"
    SemiautopistolTactical.capacity = 9
    SemiautopistolTactical.usage = 1
    SemiautopistolTactical.bulk = 0.1
    SemiautopistolTactical.special = "Analog"
    SemiautopistolTactical.content = """
    the semiautomatic mechanism of this pistol discharges spent cartridges and reloads fresh ones in the barrel, provided a cartridge remains in the magazine.
    """
    
    let Semiautopistoladvanced = CompendiumWeapon(context: context)
    Semiautopistoladvanced.name = "Semi-auto pistol, advanced"
    Semiautopistoladvanced.type = "Small Arm"
    Semiautopistoladvanced.level = 7
    Semiautopistoladvanced.price = 5500
    Semiautopistoladvanced.damage = "2d6"
    Semiautopistoladvanced.damageType = "P"
    Semiautopistoladvanced.range = 60
    Semiautopistoladvanced.critical = "—"
    Semiautopistoladvanced.capacity = 12
    Semiautopistoladvanced.usage = 1
    Semiautopistoladvanced.bulk = 0.1
    Semiautopistoladvanced.special = "Analog"
    Semiautopistoladvanced.content = """
    the semiautomatic mechanism of this pistol discharges spent cartridges and reloads fresh ones in the barrel, provided a cartridge remains in the magazine.
    """
    
    let Semiautopistolelite = CompendiumWeapon(context: context)
    Semiautopistolelite.name = "Semi-auto pistol, elite"
    Semiautopistolelite.type = "Small Arm"
    Semiautopistolelite.level = 10
    Semiautopistolelite.price = 18200
    Semiautopistolelite.damage = "3d6"
    Semiautopistolelite.damageType = "P"
    Semiautopistolelite.range = 60
    Semiautopistolelite.critical = "—"
    Semiautopistolelite.capacity = 12
    Semiautopistolelite.usage = 1
    Semiautopistolelite.bulk = 0.1
    Semiautopistolelite.special = "Analog"
    Semiautopistolelite.content = """
    the semiautomatic mechanism of this pistol discharges spent cartridges and reloads fresh ones in the barrel, provided a cartridge remains in the magazine.
    """
    
    let Semiautopistolparagon = CompendiumWeapon(context: context)
    Semiautopistolparagon.name = "Semi-auto pistol, paragon"
    Semiautopistolparagon.type = "Small Arm"
    Semiautopistolparagon.level = 13
    Semiautopistolparagon.price = 45200
    Semiautopistolparagon.damage = "4d6"
    Semiautopistolparagon.damageType = "P"
    Semiautopistolparagon.range = 60
    Semiautopistolparagon.critical = "—"
    Semiautopistolparagon.capacity = 16
    Semiautopistolparagon.usage = 1
    Semiautopistolparagon.bulk = 0.1
    Semiautopistolparagon.special = "Analog"
    Semiautopistolparagon.content = """
    the semiautomatic mechanism of this pistol discharges spent cartridges and reloads fresh ones in the barrel, provided a cartridge remains in the magazine.
    """
    
    let Gyrojetpistoltactical = CompendiumWeapon(context: context)
    Gyrojetpistoltactical.name = "Gyrojet pistol, tactical"
    Gyrojetpistoltactical.type = "Small Arm"
    Gyrojetpistoltactical.level = 15
    Gyrojetpistoltactical.price = 91500
    Gyrojetpistoltactical.damage = "3d12"
    Gyrojetpistoltactical.damageType = "B"
    Gyrojetpistoltactical.range = 80
    Gyrojetpistoltactical.critical = "Knockdown"
    Gyrojetpistoltactical.capacity = 8
    Gyrojetpistoltactical.usage = 1
    Gyrojetpistoltactical.bulk = 0.1
    Gyrojetpistoltactical.special = "Analog"
    Gyrojetpistoltactical.content = """
    Gyrojet pistols fire mini-rockets that can hit with a force great enough to knock down targets. Gyrojet pistols are slightly larger than semiautomatic pistols, and they have a reinforced barrel.
    """
    
    let Gyrojetpistoladvanced = CompendiumWeapon(context: context)
    Gyrojetpistoladvanced.name = "Gyrojet pistol, advanced"
    Gyrojetpistoladvanced.type = "Small Arm"
    Gyrojetpistoladvanced.level = 17
    Gyrojetpistoladvanced.price = 212700
    Gyrojetpistoladvanced.damage = "4d12"
    Gyrojetpistoladvanced.damageType = "B"
    Gyrojetpistoladvanced.range = 80
    Gyrojetpistoladvanced.critical = "Knockdown"
    Gyrojetpistoladvanced.capacity = 8
    Gyrojetpistoladvanced.usage = 1
    Gyrojetpistoladvanced.bulk = 0.1
    Gyrojetpistoladvanced.special = "Analog"
    Gyrojetpistoladvanced.content = """
    Gyrojet pistols fire mini-rockets that can hit with a force great enough to knock down targets. Gyrojet pistols are slightly larger than semiautomatic pistols, and they have a reinforced barrel.
    """
    
    let Gyrojetpistolelite = CompendiumWeapon(context: context)
    Gyrojetpistolelite.name = "Gyrojet pistol, elite"
    Gyrojetpistolelite.type = "Small Arm"
    Gyrojetpistolelite.level = 20
    Gyrojetpistolelite.price = 715800
    Gyrojetpistolelite.damage = "5d12"
    Gyrojetpistolelite.damageType = "B"
    Gyrojetpistolelite.range = 80
    Gyrojetpistolelite.critical = "Knockdown"
    Gyrojetpistolelite.capacity = 8
    Gyrojetpistolelite.usage = 1
    Gyrojetpistolelite.bulk = 0.1
    Gyrojetpistolelite.special = "Analog"
    Gyrojetpistolelite.content = """
    Gyrojet pistols fire mini-rockets that can hit with a force great enough to knock down targets. Gyrojet pistols are slightly larger than semiautomatic pistols, and they have a reinforced barrel.
    """
    
    let Pulsecasterpistol = CompendiumWeapon(context: context)
    Pulsecasterpistol.name = "Pulsecaster pistol"
    Pulsecasterpistol.type = "Small Arm"
    Pulsecasterpistol.level = 1
    Pulsecasterpistol.price = 250
    Pulsecasterpistol.damage = "1d4"
    Pulsecasterpistol.damageType = "E"
    Pulsecasterpistol.range = 30
    Pulsecasterpistol.critical = "—"
    Pulsecasterpistol.capacity = 20
    Pulsecasterpistol.usage = 1
    Pulsecasterpistol.bulk = 0.1
    Pulsecasterpistol.special = "Nonlethal"
    Pulsecasterpistol.content = """
    A smaller version of an arc pistol, the pulsecaster sends a low-energy blast at its target. This blast stuns the target without dealing serious damage.
    """
    
    let Arcpistolstatic = CompendiumWeapon(context: context)
    Arcpistolstatic.name = "Arc pistol, static"
    Arcpistolstatic.type = "Small Arm"
    Arcpistolstatic.level = 2
    Arcpistolstatic.price = 750
    Arcpistolstatic.damage = "1d6"
    Arcpistolstatic.damageType = "E"
    Arcpistolstatic.range = 50
    Arcpistolstatic.critical = "Arc 2"
    Arcpistolstatic.capacity = 20
    Arcpistolstatic.usage = 2
    Arcpistolstatic.bulk = 0.1
    Arcpistolstatic.special = "Stun"
    Arcpistolstatic.content = """
    Arc pistols fire deadly, stunning blasts of electricity at ranged targets. They have a two-pronged emitter that directs the electrical blast and a bulky chamber that holds the capacitor.
    """
    
    let Arcpistolaurora = CompendiumWeapon(context: context)
    Arcpistolaurora.name = "Arc pistol, aurora"
    Arcpistolaurora.type = "Small Arm"
    Arcpistolaurora.level = 13
    Arcpistolaurora.price = 45700
    Arcpistolaurora.damage = "3d6"
    Arcpistolaurora.damageType = "E"
    Arcpistolaurora.range = 50
    Arcpistolaurora.critical = "Arc 2d6"
    Arcpistolaurora.capacity = 40
    Arcpistolaurora.usage = 2
    Arcpistolaurora.bulk = 0.1
    Arcpistolaurora.special = "Stun"
    Arcpistolaurora.content = """
    Arc pistols fire deadly, stunning blasts of electricity at ranged targets. They have a two-pronged emitter that directs the electrical blast and a bulky chamber that holds the capacitor.
    """
    
    let Arcpistolstorm = CompendiumWeapon(context: context)
    Arcpistolstorm.name = "Arc pistol, storm"
    Arcpistolstorm.type = "Small Arm"
    Arcpistolstorm.level = 18
    Arcpistolstorm.price = 365500
    Arcpistolstorm.damage = "3d12"
    Arcpistolstorm.damageType = "E"
    Arcpistolstorm.range = 50
    Arcpistolstorm.critical = "Arc 4d6"
    Arcpistolstorm.capacity = 100
    Arcpistolstorm.usage = 10
    Arcpistolstorm.bulk = 0.1
    Arcpistolstorm.special = "Stun"
    Arcpistolstorm.content = """
    Arc pistols fire deadly, stunning blasts of electricity at ranged targets. They have a two-pronged emitter that directs the electrical blast and a bulky chamber that holds the capacitor.
    """
    
    let Sonicpistolthunderstrike = CompendiumWeapon(context: context)
    Sonicpistolthunderstrike.name = "Sonic pistol, thunderstrike"
    Sonicpistolthunderstrike.type = "Small Arm"
    Sonicpistolthunderstrike.level = 4
    Sonicpistolthunderstrike.price = 2300
    Sonicpistolthunderstrike.damage = "1d8"
    Sonicpistolthunderstrike.damageType = "O"
    Sonicpistolthunderstrike.range = 40
    Sonicpistolthunderstrike.critical = "Deafen"
    Sonicpistolthunderstrike.capacity = 20
    Sonicpistolthunderstrike.usage = 2
    Sonicpistolthunderstrike.bulk = 0.1
    Sonicpistolthunderstrike.special = "—"
    Sonicpistolthunderstrike.content = """
    Sonic pistols have a stocky barrel capped with a concave resonating chamber that amplifies and directs its sonic blast. They use high-intensity sound to shake molecules apart.
    """
    
    let SonicpistolLFD = CompendiumWeapon(context: context)
    SonicpistolLFD.name = "Sonic pistol, LFD"
    SonicpistolLFD.type = "Small Arm"
    SonicpistolLFD.level = 11
    SonicpistolLFD.price = 26200
    SonicpistolLFD.damage = "2d8"
    SonicpistolLFD.damageType = "O"
    SonicpistolLFD.range = 40
    SonicpistolLFD.critical = "Deafen"
    SonicpistolLFD.capacity = 40
    SonicpistolLFD.usage = 4
    SonicpistolLFD.bulk = 0.1
    SonicpistolLFD.special = "Boost 1d6"
    SonicpistolLFD.content = """
    Sonic pistols have a stocky barrel capped with a concave resonating chamber that amplifies and directs its sonic blast. They use high-intensity sound to shake molecules apart.
    """
    
    let SonicpistolHFD = CompendiumWeapon(context: context)
    SonicpistolHFD.name = "Sonic pistol, HFD"
    SonicpistolHFD.type = "Small Arm"
    SonicpistolHFD.level = 14
    SonicpistolHFD.price = 71300
    SonicpistolHFD.damage = "3d8"
    SonicpistolHFD.damageType = "O"
    SonicpistolHFD.range = 40
    SonicpistolHFD.critical = "Deafen"
    SonicpistolHFD.capacity = 60
    SonicpistolHFD.usage = 6
    SonicpistolHFD.bulk = 0.1
    SonicpistolHFD.special = "—"
    SonicpistolHFD.content = """
    Sonic pistols have a stocky barrel capped with a concave resonating chamber that amplifies and directs its sonic blast. They use high-intensity sound to shake molecules apart.
    """
    
    let Sonicpistolbanshee = CompendiumWeapon(context: context)
    Sonicpistolbanshee.name = "Sonic pistol, banshee"
    Sonicpistolbanshee.type = "Small Arm"
    Sonicpistolbanshee.level = 16
    Sonicpistolbanshee.price = 191000
    Sonicpistolbanshee.damage = "4d8"
    Sonicpistolbanshee.damageType = "O"
    Sonicpistolbanshee.range = 40
    Sonicpistolbanshee.critical = "Deafen"
    Sonicpistolbanshee.capacity = 80
    Sonicpistolbanshee.usage = 8
    Sonicpistolbanshee.bulk = 0.1
    Sonicpistolbanshee.special = "Boost 1d10"
    Sonicpistolbanshee.content = """
    Sonic pistols have a stocky barrel capped with a concave resonating chamber that amplifies and directs its sonic blast. They use high-intensity sound to shake molecules apart.
    """
    
    let Needlerpistol = CompendiumWeapon(context: context)
    Needlerpistol.name = "Needler pistol"
    Needlerpistol.type = "Small Arm"
    Needlerpistol.level = 1
    Needlerpistol.price = 105
    Needlerpistol.damage = "1d4"
    Needlerpistol.damageType = "P"
    Needlerpistol.range = 30
    Needlerpistol.critical = "Injection DC +2"
    Needlerpistol.capacity = 6
    Needlerpistol.usage = 1
    Needlerpistol.bulk = 0.1
    Needlerpistol.special = "Analog, injection"
    Needlerpistol.content = """
    A favorite of assassins and battlefield medics alike, the needler pistol uses magnetic fields or pressurized gas to launch darts that inject a substance into the target. This injection gun can be fitted with cartridges containing medicine or poison.
    """
    
    let Nightarchneedlertactical = CompendiumWeapon(context: context)
    Nightarchneedlertactical.name = "Nightarch needler, tactical"
    Nightarchneedlertactical.type = "Small Arm"
    Nightarchneedlertactical.level = 3
    Nightarchneedlertactical.price = 1650
    Nightarchneedlertactical.damage = "1d6"
    Nightarchneedlertactical.damageType = "P"
    Nightarchneedlertactical.range = 30
    Nightarchneedlertactical.critical = "Injection DC +2"
    Nightarchneedlertactical.capacity = 5
    Nightarchneedlertactical.usage = 1
    Nightarchneedlertactical.bulk = 0.1
    Nightarchneedlertactical.special = "Analog, injection"
    Nightarchneedlertactical.content = """
    Popular among the drow, this needle gun can deliver deadly poisons. The weapon is so small you gain a +2 bonus to Sleight of Hand checks to hide it on your person.
    """
    
    let Nightarchneedleradvanced = CompendiumWeapon(context: context)
    Nightarchneedleradvanced.name = "Nightarch needler, advanced"
    Nightarchneedleradvanced.type = "Small Arm"
    Nightarchneedleradvanced.level = 8
    Nightarchneedleradvanced.price = 6720
    Nightarchneedleradvanced.damage = "2d6"
    Nightarchneedleradvanced.damageType = "P"
    Nightarchneedleradvanced.range = 30
    Nightarchneedleradvanced.critical = "Injection DC +2"
    Nightarchneedleradvanced.capacity = 5
    Nightarchneedleradvanced.usage = 1
    Nightarchneedleradvanced.bulk = 0.1
    Nightarchneedleradvanced.special = "Analog, injection"
    Nightarchneedleradvanced.content = """
    Popular among the drow, this needle gun can deliver deadly poisons. The weapon is so small you gain a +2 bonus to Sleight of Hand checks to hide it on your person.
    """
    
    let Nightarchneedlerelite = CompendiumWeapon(context: context)
    Nightarchneedlerelite.name = "Nightarch needler, elite"
    Nightarchneedlerelite.type = "Small Arm"
    Nightarchneedlerelite.level = 13
    Nightarchneedlerelite.price = 44980
    Nightarchneedlerelite.damage = "4d6"
    Nightarchneedlerelite.damageType = "P"
    Nightarchneedlerelite.range = 30
    Nightarchneedlerelite.critical = "Injection DC +2"
    Nightarchneedlerelite.capacity = 5
    Nightarchneedlerelite.usage = 1
    Nightarchneedlerelite.bulk = 0.1
    Nightarchneedlerelite.special = "Analog, injection"
    Nightarchneedlerelite.content = """
    Popular among the drow, this needle gun can deliver deadly poisons. The weapon is so small you gain a +2 bonus to Sleight of Hand checks to hide it on your person.
    """
    
    let Nightarchneedlerparagon = CompendiumWeapon(context: context)
    Nightarchneedlerparagon.name = "Nightarch needler, paragon"
    Nightarchneedlerparagon.type = "Small Arm"
    Nightarchneedlerparagon.level = 18
    Nightarchneedlerparagon.price = 369000
    Nightarchneedlerparagon.damage = "8d6"
    Nightarchneedlerparagon.damageType = "P"
    Nightarchneedlerparagon.range = 30
    Nightarchneedlerparagon.critical = "Injection DC +2"
    Nightarchneedlerparagon.capacity = 5
    Nightarchneedlerparagon.usage = 1
    Nightarchneedlerparagon.bulk = 0.1
    Nightarchneedlerparagon.special = "Analog, injection"
    Nightarchneedlerparagon.content = """
    Popular among the drow, this needle gun can deliver deadly poisons. The weapon is so small you gain a +2 bonus to Sleight of Hand checks to hide it on your person.
    """
    
    

    
}

func longArms() {
    
    let Zeroriflefrostbiteclass = CompendiumWeapon(context: context)
    Zeroriflefrostbiteclass.name = "Zero rifle, frostbite-class"
    Zeroriflefrostbiteclass.type = "Long Arm"
    Zeroriflefrostbiteclass.level = 4
    Zeroriflefrostbiteclass.price = 2330
    Zeroriflefrostbiteclass.damage = "1d8"
    Zeroriflefrostbiteclass.damageType = "C"
    Zeroriflefrostbiteclass.range = 60
    Zeroriflefrostbiteclass.critical = "Staggered"
    Zeroriflefrostbiteclass.capacity = 40
    Zeroriflefrostbiteclass.usage = 2
    Zeroriflefrostbiteclass.bulk = 1
    Zeroriflefrostbiteclass.special = "—"
    Zeroriflefrostbiteclass.content = """
    Zero rifles have long, bulky barrels and tend to be very front-heavy. A heavy tank over the barrel stores the rifle’s coolant supply, contributing most of its bulk.
    """
    
    let Zeroriflehailstormclass = CompendiumWeapon(context: context)
    Zeroriflehailstormclass.name = "Zero rifle, hailstorm-class"
    Zeroriflehailstormclass.type = "Long Arm"
    Zeroriflehailstormclass.level = 8
    Zeroriflehailstormclass.price = 10100
    Zeroriflehailstormclass.damage = "2d8"
    Zeroriflehailstormclass.damageType = "C"
    Zeroriflehailstormclass.range = 60
    Zeroriflehailstormclass.critical = "Staggered"
    Zeroriflehailstormclass.capacity = 40
    Zeroriflehailstormclass.usage = 2
    Zeroriflehailstormclass.bulk = 2
    Zeroriflehailstormclass.special = "—"
    Zeroriflehailstormclass.content = """
    Zero rifles have long, bulky barrels and tend to be very front-heavy. A heavy tank over the barrel stores the rifle’s coolant supply, contributing most of its bulk.
    """
    
    let Zerorifleblizzardclass = CompendiumWeapon(context: context)
    Zerorifleblizzardclass.name = "Zero rifle, blizzard-class"
    Zerorifleblizzardclass.type = "Long Arm"
    Zerorifleblizzardclass.level = 14
    Zerorifleblizzardclass.price = 79800
    Zerorifleblizzardclass.damage = "4d8"
    Zerorifleblizzardclass.damageType = "C"
    Zerorifleblizzardclass.range = 60
    Zerorifleblizzardclass.critical = "Staggered"
    Zerorifleblizzardclass.capacity = 80
    Zerorifleblizzardclass.usage = 4
    Zerorifleblizzardclass.bulk = 2
    Zerorifleblizzardclass.special = "—"
    Zerorifleblizzardclass.content = """
    Zero rifles have long, bulky barrels and tend to be very front-heavy. A heavy tank over the barrel stores the rifle’s coolant supply, contributing most of its bulk.
    """
    
    let Zerorifleavalancheclass = CompendiumWeapon(context: context)
    Zerorifleavalancheclass.name = "Zero rifle, avalanche-class"
    Zerorifleavalancheclass.type = "Long Arm"
    Zerorifleavalancheclass.level = 18
    Zerorifleavalancheclass.price = 410200
    Zerorifleavalancheclass.damage = "7d8"
    Zerorifleavalancheclass.damageType = "C"
    Zerorifleavalancheclass.range = 60
    Zerorifleavalancheclass.critical = "Staggered"
    Zerorifleavalancheclass.capacity = 100
    Zerorifleavalancheclass.usage = 5
    Zerorifleavalancheclass.bulk = 2
    Zerorifleavalancheclass.special = "—"
    Zerorifleavalancheclass.content = """
    Zero rifles have long, bulky barrels and tend to be very front-heavy. A heavy tank over the barrel stores the rifle’s coolant supply, contributing most of its bulk.
    """
    
    let Flamerifle = CompendiumWeapon(context: context)
    Flamerifle.name = "Flame rifle"
    Flamerifle.type = "Long Arm"
    Flamerifle.level = 2
    Flamerifle.price = 490
    Flamerifle.damage = "1d6"
    Flamerifle.damageType = "F"
    Flamerifle.range = 25
    Flamerifle.critical = "Burn 1d6"
    Flamerifle.capacity = 20
    Flamerifle.usage = 5
    Flamerifle.bulk = 1
    Flamerifle.special = "Line, unwieldy"
    Flamerifle.content = """
    A flame rifle shoots a line of ignited petrol from its barrel.
    """
    
    let Laserrifleazimuth = CompendiumWeapon(context: context)
    Laserrifleazimuth.name = "Laser rifle, azimuth"
    Laserrifleazimuth.type = "Long Arm"
    Laserrifleazimuth.level = 1
    Laserrifleazimuth.price = 425
    Laserrifleazimuth.damage = "1d8"
    Laserrifleazimuth.damageType = "F"
    Laserrifleazimuth.range = 120
    Laserrifleazimuth.critical = "Burn 1d6"
    Laserrifleazimuth.capacity = 20
    Laserrifleazimuth.usage = 1
    Laserrifleazimuth.bulk = 1
    Laserrifleazimuth.special = "—"
    Laserrifleazimuth.content = """
    With its snub, squared barrel and internal reinforcements, a laser rifle is sturdy and dependable.
    """
    
    let Laserriflecorona = CompendiumWeapon(context: context)
    Laserriflecorona.name = "Laser rifle, corona"
    Laserriflecorona.type = "Long Arm"
    Laserriflecorona.level = 6
    Laserriflecorona.price = 4650
    Laserriflecorona.damage = "2d6"
    Laserriflecorona.damageType = "F"
    Laserriflecorona.range = 120
    Laserriflecorona.critical = "Burn 1d6"
    Laserriflecorona.capacity = 40
    Laserriflecorona.usage = 1
    Laserriflecorona.bulk = 1
    Laserriflecorona.special = "—"
    Laserriflecorona.content = """
    With its snub, squared barrel and internal reinforcements, a laser rifle is sturdy and dependable.
    """
    
    let Laserrifleaphelion = CompendiumWeapon(context: context)
    Laserrifleaphelion.name = "Laser rifle, aphelion"
    Laserrifleaphelion.type = "Long Arm"
    Laserrifleaphelion.level = 9
    Laserrifleaphelion.price = 14300
    Laserrifleaphelion.damage = "3d6"
    Laserrifleaphelion.damageType = "F"
    Laserrifleaphelion.range = 120
    Laserrifleaphelion.critical = "Burn 1d6"
    Laserrifleaphelion.capacity = 40
    Laserrifleaphelion.usage = 1
    Laserrifleaphelion.bulk = 1
    Laserrifleaphelion.special = "—"
    Laserrifleaphelion.content = """
    With its snub, squared barrel and internal reinforcements, a laser rifle is sturdy and dependable.
    """
    
    let AutobeamrifleTactical = CompendiumWeapon(context: context)
    AutobeamrifleTactical.name = "Autobeam rifle, Tactical"
    AutobeamrifleTactical.type = "Long Arm"
    AutobeamrifleTactical.level = 11
    AutobeamrifleTactical.price = 26900
    AutobeamrifleTactical.damage = "5d4"
    AutobeamrifleTactical.damageType = "F"
    AutobeamrifleTactical.range = 60
    AutobeamrifleTactical.critical = "Burn 2d4"
    AutobeamrifleTactical.capacity = 40
    AutobeamrifleTactical.usage = 4
    AutobeamrifleTactical.bulk = 2
    AutobeamrifleTactical.special = "Automatic"
    AutobeamrifleTactical.content = """
    Autobeam rifles can fire in automatic Mode, spraying a cone of lasers from the barrel.
    """
    
    let Laserrifleperihelion = CompendiumWeapon(context: context)
    Laserrifleperihelion.name = "Laser rifle, perihelion"
    Laserrifleperihelion.type = "Long Arm"
    Laserrifleperihelion.level = 13
    Laserrifleperihelion.price = 53800
    Laserrifleperihelion.damage = "5d6"
    Laserrifleperihelion.damageType = "F"
    Laserrifleperihelion.range = 130
    Laserrifleperihelion.critical = "Burn 2d6"
    Laserrifleperihelion.capacity = 100
    Laserrifleperihelion.usage = 2
    Laserrifleperihelion.bulk = 1
    Laserrifleperihelion.special = "—"
    Laserrifleperihelion.content = """
    With its snub, squared barrel and internal reinforcements, a laser rifle is sturdy and dependable.
    """
    
    let Autobeamrifleadvanced = CompendiumWeapon(context: context)
    Autobeamrifleadvanced.name = "Autobeam rifle, advanced"
    Autobeamrifleadvanced.type = "Long Arm"
    Autobeamrifleadvanced.level = 15
    Autobeamrifleadvanced.price = 95500
    Autobeamrifleadvanced.damage = "7d4"
    Autobeamrifleadvanced.damageType = "F"
    Autobeamrifleadvanced.range = 60
    Autobeamrifleadvanced.critical = "Burn 3d4"
    Autobeamrifleadvanced.capacity = 100
    Autobeamrifleadvanced.usage = 10
    Autobeamrifleadvanced.bulk = 2
    Autobeamrifleadvanced.special = "Automatic"
    Autobeamrifleadvanced.content = """
    Autobeam rifles can fire in automatic Mode, spraying a cone of lasers from the barrel.
    """
    
    let Laserrifleparallax = CompendiumWeapon(context: context)
    Laserrifleparallax.name = "Laser rifle, parallax"
    Laserrifleparallax.type = "Long Arm"
    Laserrifleparallax.level = 17
    Laserrifleparallax.price = 248000
    Laserrifleparallax.damage = "8d6"
    Laserrifleparallax.damageType = "F"
    Laserrifleparallax.range = 150
    Laserrifleparallax.critical = "Burn 4d6"
    Laserrifleparallax.capacity = 100
    Laserrifleparallax.usage = 2
    Laserrifleparallax.bulk = 1
    Laserrifleparallax.special = "—"
    Laserrifleparallax.content = """
    With its snub, squared barrel and internal reinforcements, a laser rifle is sturdy and dependable.
    """
    
    let Autobeamrifleelite = CompendiumWeapon(context: context)
    Autobeamrifleelite.name = "Autobeam rifle, elite"
    Autobeamrifleelite.type = "Long Arm"
    Autobeamrifleelite.level = 19
    Autobeamrifleelite.price = 548100
    Autobeamrifleelite.damage = "12d4"
    Autobeamrifleelite.damageType = "F"
    Autobeamrifleelite.range = 60
    Autobeamrifleelite.critical = "Burn 5d4"
    Autobeamrifleelite.capacity = 100
    Autobeamrifleelite.usage = 5
    Autobeamrifleelite.bulk = 2
    Autobeamrifleelite.special = "Automatic"
    Autobeamrifleelite.content = """
    Autobeam rifles can fire in automatic Mode, spraying a cone of lasers from the barrel.
    """
    
    let Laserriflezenith = CompendiumWeapon(context: context)
    Laserriflezenith.name = "Laser rifle, zenith"
    Laserriflezenith.type = "Long Arm"
    Laserriflezenith.level = 20
    Laserriflezenith.price = 722000
    Laserriflezenith.damage = "11d6"
    Laserriflezenith.damageType = "F"
    Laserriflezenith.range = 150
    Laserriflezenith.critical = "Burn 5d6"
    Laserriflezenith.capacity = 100
    Laserriflezenith.usage = 2
    Laserriflezenith.bulk = 1
    Laserriflezenith.special = "—"
    Laserriflezenith.content = """
    With its snub, squared barrel and internal reinforcements, a laser rifle is sturdy and dependable.
    """
    
    let Plasmarifleredstar = CompendiumWeapon(context: context)
    Plasmarifleredstar.name = "Plasma rifle, red star"
    Plasmarifleredstar.type = "Long Arm"
    Plasmarifleredstar.level = 6
    Plasmarifleredstar.price = 4600
    Plasmarifleredstar.damage = "1d10"
    Plasmarifleredstar.damageType = "EF"
    Plasmarifleredstar.range = 40
    Plasmarifleredstar.critical = "Burn 1d4"
    Plasmarifleredstar.capacity = 40
    Plasmarifleredstar.usage = 4
    Plasmarifleredstar.bulk = 2
    Plasmarifleredstar.special = "Line, unwieldy"
    Plasmarifleredstar.content = """
    Plasma rifles fire long lines of ionized plasma that lance through objects and opponents in their path.
    """
    
    let Plasmarifleyellowstar = CompendiumWeapon(context: context)
    Plasmarifleyellowstar.name = "Plasma rifle, yellow star"
    Plasmarifleyellowstar.type = "Long Arm"
    Plasmarifleyellowstar.level = 10
    Plasmarifleyellowstar.price = 16800
    Plasmarifleyellowstar.damage = "2d10"
    Plasmarifleyellowstar.damageType = "EF"
    Plasmarifleyellowstar.range = 40
    Plasmarifleyellowstar.critical = "Burn 1d8"
    Plasmarifleyellowstar.capacity = 40
    Plasmarifleyellowstar.usage = 4
    Plasmarifleyellowstar.bulk = 2
    Plasmarifleyellowstar.special = "Line, unwieldy"
    Plasmarifleyellowstar.content = """
    Plasma rifles fire long lines of ionized plasma that lance through objects and opponents in their path.
    """
    
    let Plasmacasterwhitestar = CompendiumWeapon(context: context)
    Plasmacasterwhitestar.name = "Plasma caster, white star"
    Plasmacasterwhitestar.type = "Long Arm"
    Plasmacasterwhitestar.level = 13
    Plasmacasterwhitestar.price = 49100
    Plasmacasterwhitestar.damage = "3d10"
    Plasmacasterwhitestar.damageType = "EF"
    Plasmacasterwhitestar.range = 80
    Plasmacasterwhitestar.critical = "Burn 1d10"
    Plasmacasterwhitestar.capacity = 100
    Plasmacasterwhitestar.usage = 5
    Plasmacasterwhitestar.bulk = 2
    Plasmacasterwhitestar.special = "Boost 1d10"
    Plasmacasterwhitestar.content = """
    Plasma casters fling bolts of ionized plasma at a target. They have good range and are easier to use than plasma rifles or pistols, but they strike only a single target.
    """
    
    let Plasmariflewhitestar = CompendiumWeapon(context: context)
    Plasmariflewhitestar.name = "Plasma rifle, white star"
    Plasmariflewhitestar.type = "Long Arm"
    Plasmariflewhitestar.level = 15
    Plasmariflewhitestar.price = 126600
    Plasmariflewhitestar.damage = "4d10"
    Plasmariflewhitestar.damageType = "EF"
    Plasmariflewhitestar.range = 60
    Plasmariflewhitestar.critical = "Burn 2d8"
    Plasmariflewhitestar.capacity = 40
    Plasmariflewhitestar.usage = 4
    Plasmariflewhitestar.bulk = 2
    Plasmariflewhitestar.special = "Line, unwieldy"
    Plasmariflewhitestar.content = """
    Plasma rifles fire long lines of ionized plasma that lance through objects and opponents in their path.
    """
    
    let Plasmacasterbluestar = CompendiumWeapon(context: context)
    Plasmacasterbluestar.name = "Plasma caster, blue star"
    Plasmacasterbluestar.type = "Long Arm"
    Plasmacasterbluestar.level = 17
    Plasmacasterbluestar.price = 275000
    Plasmacasterbluestar.damage = "5d10"
    Plasmacasterbluestar.damageType = "EF"
    Plasmacasterbluestar.range = 80
    Plasmacasterbluestar.critical = "Burn 2d10"
    Plasmacasterbluestar.capacity = 200
    Plasmacasterbluestar.usage = 10
    Plasmacasterbluestar.bulk = 2
    Plasmacasterbluestar.special = "Boost 2d10"
    Plasmacasterbluestar.content = """
    Plasma casters fling bolts of ionized plasma at a target. They have good range and are easier to use than plasma rifles or pistols, but they strike only a single target.
    """
    
    let Plasmariflebluestar = CompendiumWeapon(context: context)
    Plasmariflebluestar.name = "Plasma rifle, blue star"
    Plasmariflebluestar.type = "Long Arm"
    Plasmariflebluestar.level = 20
    Plasmariflebluestar.price = 935000
    Plasmariflebluestar.damage = "8d10"
    Plasmariflebluestar.damageType = "EF"
    Plasmariflebluestar.range = 100
    Plasmariflebluestar.critical = "Burn 4d8"
    Plasmariflebluestar.capacity = 100
    Plasmariflebluestar.usage = 10
    Plasmariflebluestar.bulk = 2
    Plasmariflebluestar.special = "Line, unwieldy"
    Plasmariflebluestar.content = """
    Plasma rifles fire long lines of ionized plasma that lance through objects and opponents in their path.
    """
    
    let Huntingrifle = CompendiumWeapon(context: context)
    Huntingrifle.name = "Hunting rifle"
    Huntingrifle.type = "Long Arm"
    Huntingrifle.level = 1
    Huntingrifle.price = 240
    Huntingrifle.damage = "1d8"
    Huntingrifle.damageType = "P"
    Huntingrifle.range = 90
    Huntingrifle.critical = "—"
    Huntingrifle.capacity = 6
    Huntingrifle.usage = 1
    Huntingrifle.bulk = 1
    Huntingrifle.special = "Analog"
    Huntingrifle.content = """
    This basic rifle is used mainly for personal defense and hunting. More advanced rifles have military uses.
    """
    
    let Scattergunutility = CompendiumWeapon(context: context)
    Scattergunutility.name = "Scattergun, utility"
    Scattergunutility.type = "Long Arm"
    Scattergunutility.level = 1
    Scattergunutility.price = 235
    Scattergunutility.damage = "1d4"
    Scattergunutility.damageType = "P"
    Scattergunutility.range = 15
    Scattergunutility.critical = "—"
    Scattergunutility.capacity = 4
    Scattergunutility.usage = 1
    Scattergunutility.bulk = 1
    Scattergunutility.special = "Analog, blast"
    Scattergunutility.content = """
    A scattergun fires fragmentary shells in a spray from its barrel, dealing damage to all targets in range. The shortened barrel of the snub scattergun makes it easier to conceal. Grapeshot, impact, and vortex scatterguns are designed to deliver enhanced damage.
    """
    
    let AciddartrifleTactical = CompendiumWeapon(context: context)
    AciddartrifleTactical.name = "Acid dart rifle, Tactical"
    AciddartrifleTactical.type = "Long Arm"
    AciddartrifleTactical.level = 2
    AciddartrifleTactical.price = 485
    AciddartrifleTactical.damage = "1d8"
    AciddartrifleTactical.damageType = "AP"
    AciddartrifleTactical.range = 80
    AciddartrifleTactical.critical = "Corrode 1d4"
    AciddartrifleTactical.capacity = 10
    AciddartrifleTactical.usage = 1
    AciddartrifleTactical.bulk = 1
    AciddartrifleTactical.special = "Analog"
    AciddartrifleTactical.content = """
    An acid dart rifle has a nonreactive polymer reservoir that can be filled with whatever acid the wielder desires. The automatic loading process fills the rifle darts with acid as they are moved into the chamber. Dual acid dart rifles fire two darts simultaneously, while complex acid dart rifles hold concentrated doses of acid.
    """
    
    let Autotargetrifle = CompendiumWeapon(context: context)
    Autotargetrifle.name = "Autotarget rifle"
    Autotargetrifle.type = "Long Arm"
    Autotargetrifle.level = 2
    Autotargetrifle.price = 755
    Autotargetrifle.damage = "1d6"
    Autotargetrifle.damageType = "P"
    Autotargetrifle.range = 60
    Autotargetrifle.critical = "—"
    Autotargetrifle.capacity = 10
    Autotargetrifle.usage = 1
    Autotargetrifle.bulk = 2
    Autotargetrifle.special = "Analog, automatic"
    Autotargetrifle.content = """
    An automatic Model of the basic rifle, autotarget rifles fire continuously for as long as the trigger is depressed and fresh rounds are available in the magazine.
    """
    
    let CrossbolterTactical = CompendiumWeapon(context: context)
    CrossbolterTactical.name = "Crossbolter, Tactical"
    CrossbolterTactical.type = "Long Arm"
    CrossbolterTactical.level = 2
    CrossbolterTactical.price = 475
    CrossbolterTactical.damage = "1d10"
    CrossbolterTactical.damageType = "P"
    CrossbolterTactical.range = 70
    CrossbolterTactical.critical = "—"
    CrossbolterTactical.capacity = 1
    CrossbolterTactical.usage = 1
    CrossbolterTactical.bulk = 2
    CrossbolterTactical.special = "Unwieldy"
    CrossbolterTactical.content = """
    This weapon resembles a rifle with a crossbeam near the end of the barrel. A crossbolter uses mechanical power to fire arrows along the barrel. Grenade arrows can also be fired with a crossbolter.
    """
    
    let Kaloshredderslipstreamclass = CompendiumWeapon(context: context)
    Kaloshredderslipstreamclass.name = "Kalo shredder, slipstream-class"
    Kaloshredderslipstreamclass.type = "Long Arm"
    Kaloshredderslipstreamclass.level = 3
    Kaloshredderslipstreamclass.price = 1610
    Kaloshredderslipstreamclass.damage = "1d6"
    Kaloshredderslipstreamclass.damageType = "S"
    Kaloshredderslipstreamclass.range = 30
    Kaloshredderslipstreamclass.critical = "Bleed 1d4"
    Kaloshredderslipstreamclass.capacity = 8
    Kaloshredderslipstreamclass.usage = 1
    Kaloshredderslipstreamclass.bulk = 1
    Kaloshredderslipstreamclass.special = "Analog, automatic, underwater"
    Kaloshredderslipstreamclass.content = """
    Favored by the much-romanticized kalo hunters, kalo shredders fire razor-sharp flechettes with nearly silent magnetism. The gun’s distinctive organic design is grown from magnetic coral that grants you a +2 bonus to KAC against disarm combat maneuvers.
    """
    
    let Aciddartrifledual = CompendiumWeapon(context: context)
    Aciddartrifledual.name = "Acid dart rifle, dual"
    Aciddartrifledual.type = "Long Arm"
    Aciddartrifledual.level = 7
    Aciddartrifledual.price = 6900
    Aciddartrifledual.damage = "2d8"
    Aciddartrifledual.damageType = "AP"
    Aciddartrifledual.range = 90
    Aciddartrifledual.critical = "Corrode 2d4"
    Aciddartrifledual.capacity = 24
    Aciddartrifledual.usage = 2
    Aciddartrifledual.bulk = 1
    Aciddartrifledual.special = "Analog"
    Aciddartrifledual.content = """
    An acid dart rifle has a nonreactive polymer reservoir that can be filled with whatever acid the wielder desires. The automatic loading process fills the rifle darts with acid as they are moved into the chamber. Dual acid dart rifles fire two darts simultaneously, while complex acid dart rifles hold concentrated doses of acid.
    """
    
    let Kaloshreddercascadeclass = CompendiumWeapon(context: context)
    Kaloshreddercascadeclass.name = "Kalo shredder, cascade-class"
    Kaloshreddercascadeclass.type = "Long Arm"
    Kaloshreddercascadeclass.level = 7
    Kaloshreddercascadeclass.price = 6630
    Kaloshreddercascadeclass.damage = "2d6"
    Kaloshreddercascadeclass.damageType = "S"
    Kaloshreddercascadeclass.range = 40
    Kaloshreddercascadeclass.critical = "Bleed 1d6"
    Kaloshreddercascadeclass.capacity = 18
    Kaloshreddercascadeclass.usage = 1
    Kaloshreddercascadeclass.bulk = 1
    Kaloshreddercascadeclass.special = "Analog, automatic, underwater"
    Kaloshreddercascadeclass.content = """
    Favored by the much-romanticized kalo hunters, kalo shredders fire razor-sharp flechettes with nearly silent magnetism. The gun’s distinctive organic design is grown from magnetic coral that grants you a +2 bonus to KAC against disarm combat maneuvers.
    """
    
    let Seekerrifletactical = CompendiumWeapon(context: context)
    Seekerrifletactical.name = "Seeker rifle, tactical"
    Seekerrifletactical.type = "Long Arm"
    Seekerrifletactical.level = 7
    Seekerrifletactical.price = 6030
    Seekerrifletactical.damage = "2d8"
    Seekerrifletactical.damageType = "P"
    Seekerrifletactical.range = 100
    Seekerrifletactical.critical = "—"
    Seekerrifletactical.capacity = 8
    Seekerrifletactical.usage = 1
    Seekerrifletactical.bulk = 1
    Seekerrifletactical.special = "Analog"
    Seekerrifletactical.content = """
    Seeker rifles are single-shot projectile weapons. The line gained its name from korasha lashunta explorers, who favor the rifle for its reliability in hostile terrain.
    """
    
    let Crossbolterdual = CompendiumWeapon(context: context)
    Crossbolterdual.name = "Crossbolter, dual"
    Crossbolterdual.type = "Long Arm"
    Crossbolterdual.level = 8
    Crossbolterdual.price = 8250
    Crossbolterdual.damage = "2d10"
    Crossbolterdual.damageType = "P"
    Crossbolterdual.range = 70
    Crossbolterdual.critical = "—"
    Crossbolterdual.capacity = 4
    Crossbolterdual.usage = 2
    Crossbolterdual.bulk = 2
    Crossbolterdual.special = "Unwieldy"
    Crossbolterdual.content = """
    This weapon resembles a rifle with a crossbeam near the end of the barrel. A crossbolter uses mechanical power to fire arrows along the barrel. Grenade arrows can also be fired with a crossbolter.
    """
    
    let Scattergunsnub = CompendiumWeapon(context: context)
    Scattergunsnub.name = "Scattergun, snub"
    Scattergunsnub.type = "Long Arm"
    Scattergunsnub.level = 8
    Scattergunsnub.price = 8300
    Scattergunsnub.damage = "1d12"
    Scattergunsnub.damageType = "P"
    Scattergunsnub.range = 15
    Scattergunsnub.critical = "—"
    Scattergunsnub.capacity = 8
    Scattergunsnub.usage = 1
    Scattergunsnub.bulk = 1
    Scattergunsnub.special = "Analog, blast"
    Scattergunsnub.content = """
    A scattergun fires fragmentary shells in a spray from its barrel, dealing damage to all targets in range. The shortened barrel of the snub scattergun makes it easier to conceal. Grapeshot, impact, and vortex scatterguns are designed to deliver enhanced damage.
    """
    
    let Magnetarrifletactical = CompendiumWeapon(context: context)
    Magnetarrifletactical.name = "Magnetar rifle, tactical"
    Magnetarrifletactical.type = "Long Arm"
    Magnetarrifletactical.level = 9
    Magnetarrifletactical.price = 11800
    Magnetarrifletactical.damage = "2d8"
    Magnetarrifletactical.damageType = "P"
    Magnetarrifletactical.range = 60
    Magnetarrifletactical.critical = "—"
    Magnetarrifletactical.capacity = 18
    Magnetarrifletactical.usage = 1
    Magnetarrifletactical.bulk = 2
    Magnetarrifletactical.special = "Analog, automatic"
    Magnetarrifletactical.content = """
    The magnetar rifle uses magnetic fields to accelerate metallic rounds to high speeds. With few moving parts that can break down, it’s a workhorse automatic rifle popular among planetary explorers.
    """
    
    let Combatrifle = CompendiumWeapon(context: context)
    Combatrifle.name = "Combat rifle"
    Combatrifle.type = "Long Arm"
    Combatrifle.level = 10
    Combatrifle.price = 16500
    Combatrifle.damage = "3d8"
    Combatrifle.damageType = "P"
    Combatrifle.range = 90
    Combatrifle.critical = "—"
    Combatrifle.capacity = 12
    Combatrifle.usage = 1
    Combatrifle.bulk = 1
    Combatrifle.special = "Analog"
    Combatrifle.content = """
    This utilitarian rifle is favored by mercenaries who aren’t looking for flashy weapons.
    """
    
    let Kaloshreddertorrentclass = CompendiumWeapon(context: context)
    Kaloshreddertorrentclass.name = "Kalo shredder, torrent-class"
    Kaloshreddertorrentclass.type = "Long Arm"
    Kaloshreddertorrentclass.level = 11
    Kaloshreddertorrentclass.price = 26700
    Kaloshreddertorrentclass.damage = "4d6"
    Kaloshreddertorrentclass.damageType = "S"
    Kaloshreddertorrentclass.range = 40
    Kaloshreddertorrentclass.critical = "Bleed 3d4"
    Kaloshreddertorrentclass.capacity = 24
    Kaloshreddertorrentclass.usage = 1
    Kaloshreddertorrentclass.bulk = 1
    Kaloshreddertorrentclass.special = "Analog, automatic, underwater"
    Kaloshreddertorrentclass.content = """
    Favored by the much-romanticized kalo hunters, kalo shredders fire razor-sharp flechettes with nearly silent magnetism. The gun’s distinctive organic design is grown from magnetic coral that grants you a +2 bonus to KAC against disarm combat maneuvers.
    """
    
    let Aciddartriflecomplex = CompendiumWeapon(context: context)
    Aciddartriflecomplex.name = "Acid dart rifle, complex"
    Aciddartriflecomplex.type = "Long Arm"
    Aciddartriflecomplex.level = 12
    Aciddartriflecomplex.price = 39200
    Aciddartriflecomplex.damage = "4d8"
    Aciddartriflecomplex.damageType = "AP"
    Aciddartriflecomplex.range = 90
    Aciddartriflecomplex.critical = "Corrode 4d4"
    Aciddartriflecomplex.capacity = 48
    Aciddartriflecomplex.usage = 4
    Aciddartriflecomplex.bulk = 2
    Aciddartriflecomplex.special = "Analog"
    Aciddartriflecomplex.content = """
    An acid dart rifle has a nonreactive polymer reservoir that can be filled with whatever acid the wielder desires. The automatic loading process fills the rifle darts with acid as they are moved into the chamber. Dual acid dart rifles fire two darts simultaneously, while complex acid dart rifles hold concentrated doses of acid.
    """
    
    let Scattergunimpact = CompendiumWeapon(context: context)
    Scattergunimpact.name = "Scattergun, impact"
    Scattergunimpact.type = "Long Arm"
    Scattergunimpact.level = 12
    Scattergunimpact.price = 30400
    Scattergunimpact.damage = "2d12"
    Scattergunimpact.damageType = "P"
    Scattergunimpact.range = 15
    Scattergunimpact.critical = "—"
    Scattergunimpact.capacity = 12
    Scattergunimpact.usage = 1
    Scattergunimpact.bulk = 2
    Scattergunimpact.special = "Analog, blast"
    Scattergunimpact.content = """
    A scattergun fires fragmentary shells in a spray from its barrel, dealing damage to all targets in range. The shortened barrel of the snub scattergun makes it easier to conceal. Grapeshot, impact, and vortex scatterguns are designed to deliver enhanced damage.
    """
    
    let GyrojetrifleTactical = CompendiumWeapon(context: context)
    GyrojetrifleTactical.name = "Gyrojet rifle, Tactical"
    GyrojetrifleTactical.type = "Long Arm"
    GyrojetrifleTactical.level = 13
    GyrojetrifleTactical.price = 54000
    GyrojetrifleTactical.damage = "3d12"
    GyrojetrifleTactical.damageType = "B"
    GyrojetrifleTactical.range = 100
    GyrojetrifleTactical.critical = "Knockdown"
    GyrojetrifleTactical.capacity = 12
    GyrojetrifleTactical.usage = 1
    GyrojetrifleTactical.bulk = 2
    GyrojetrifleTactical.special = "Analog"
    GyrojetrifleTactical.content = """
    The longarm Model of a gyrojet pistol, a gyrojet rifle fires mini-rockets with devastating force.
    """
    
    let Magnetarrifleadvanced = CompendiumWeapon(context: context)
    Magnetarrifleadvanced.name = "Magnetar rifle, advanced"
    Magnetarrifleadvanced.type = "Long Arm"
    Magnetarrifleadvanced.level = 13
    Magnetarrifleadvanced.price = 53700
    Magnetarrifleadvanced.damage = "4d8"
    Magnetarrifleadvanced.damageType = "P"
    Magnetarrifleadvanced.range = 60
    Magnetarrifleadvanced.critical = "—"
    Magnetarrifleadvanced.capacity = 24
    Magnetarrifleadvanced.usage = 1
    Magnetarrifleadvanced.bulk = 2
    Magnetarrifleadvanced.special = "Analog, automatic"
    Magnetarrifleadvanced.content = """
    The magnetar rifle uses magnetic fields to accelerate metallic rounds to high speeds. With few moving parts that can break down, it’s a workhorse automatic rifle popular among planetary explorers.
    """
    
    let Kaloshredderdelugeclass = CompendiumWeapon(context: context)
    Kaloshredderdelugeclass.name = "Kalo shredder, deluge-class"
    Kaloshredderdelugeclass.type = "Long Arm"
    Kaloshredderdelugeclass.level = 14
    Kaloshredderdelugeclass.price = 74300
    Kaloshredderdelugeclass.damage = "6d6"
    Kaloshredderdelugeclass.damageType = "S"
    Kaloshredderdelugeclass.range = 60
    Kaloshredderdelugeclass.critical = "Bleed 4d4"
    Kaloshredderdelugeclass.capacity = 36
    Kaloshredderdelugeclass.usage = 1
    Kaloshredderdelugeclass.bulk = 1
    Kaloshredderdelugeclass.special = "Analog, automatic, underwater"
    Kaloshredderdelugeclass.content = """
    Favored by the much-romanticized kalo hunters, kalo shredders fire razor-sharp flechettes with nearly silent magnetism. The gun’s distinctive organic design is grown from magnetic coral that grants you a +2 bonus to KAC against disarm combat maneuvers.
    """
    
    let Seekerrifleadvanced = CompendiumWeapon(context: context)
    Seekerrifleadvanced.name = "Seeker rifle, advanced"
    Seekerrifleadvanced.type = "Long Arm"
    Seekerrifleadvanced.level = 14
    Seekerrifleadvanced.price = 72300
    Seekerrifleadvanced.damage = "6d8"
    Seekerrifleadvanced.damageType = "P"
    Seekerrifleadvanced.range = 100
    Seekerrifleadvanced.critical = "—"
    Seekerrifleadvanced.capacity = 18
    Seekerrifleadvanced.usage = 1
    Seekerrifleadvanced.bulk = 1
    Seekerrifleadvanced.special = "Analog"
    Seekerrifleadvanced.content = """
    Seeker rifles are single-shot projectile weapons. The line gained its name from korasha lashunta explorers, who favor the rifle for its reliability in hostile terrain.
    """
    
    let Gyrojetrifleadvanced = CompendiumWeapon(context: context)
    Gyrojetrifleadvanced.name = "Gyrojet rifle, advanced"
    Gyrojetrifleadvanced.type = "Long Arm"
    Gyrojetrifleadvanced.level = 15
    Gyrojetrifleadvanced.price = 122800
    Gyrojetrifleadvanced.damage = "5d12"
    Gyrojetrifleadvanced.damageType = "B"
    Gyrojetrifleadvanced.range = 120
    Gyrojetrifleadvanced.critical = "Knockdown"
    Gyrojetrifleadvanced.capacity = 12
    Gyrojetrifleadvanced.usage = 1
    Gyrojetrifleadvanced.bulk = 2
    Gyrojetrifleadvanced.special = "Analog"
    Gyrojetrifleadvanced.content = """
    The longarm Model of a gyrojet pistol, a gyrojet rifle fires mini-rockets with devastating force.
    """
    
    let Scattergunvortex = CompendiumWeapon(context: context)
    Scattergunvortex.name = "Scattergun, vortex"
    Scattergunvortex.type = "Long Arm"
    Scattergunvortex.level = 15
    Scattergunvortex.price = 91900
    Scattergunvortex.damage = "3d12"
    Scattergunvortex.damageType = "P"
    Scattergunvortex.range = 30
    Scattergunvortex.critical = "—"
    Scattergunvortex.capacity = 12
    Scattergunvortex.usage = 1
    Scattergunvortex.bulk = 2
    Scattergunvortex.special = "Analog, blast"
    Scattergunvortex.content = """
    A scattergun fires fragmentary shells in a spray from its barrel, dealing damage to all targets in range. The shortened barrel of the snub scattergun makes it easier to conceal. Grapeshot, impact, and vortex scatterguns are designed to deliver enhanced damage.
    """
    
    let Magnetarrifleelite = CompendiumWeapon(context: context)
    Magnetarrifleelite.name = "Magnetar rifle, elite"
    Magnetarrifleelite.type = "Long Arm"
    Magnetarrifleelite.level = 16
    Magnetarrifleelite.price = 185100
    Magnetarrifleelite.damage = "6d8"
    Magnetarrifleelite.damageType = "P"
    Magnetarrifleelite.range = 120
    Magnetarrifleelite.critical = "—"
    Magnetarrifleelite.capacity = 36
    Magnetarrifleelite.usage = 1
    Magnetarrifleelite.bulk = 2
    Magnetarrifleelite.special = "Analog, automatic"
    Magnetarrifleelite.content = """
    The magnetar rifle uses magnetic fields to accelerate metallic rounds to high speeds. With few moving parts that can break down, it’s a workhorse automatic rifle popular among planetary explorers.
    """
    
    let Gyrojetrifleelite = CompendiumWeapon(context: context)
    Gyrojetrifleelite.name = "Gyrojet rifle, elite"
    Gyrojetrifleelite.type = "Long Arm"
    Gyrojetrifleelite.level = 17
    Gyrojetrifleelite.price = 245600
    Gyrojetrifleelite.damage = "6d12"
    Gyrojetrifleelite.damageType = "B"
    Gyrojetrifleelite.range = 120
    Gyrojetrifleelite.critical = "Knockdown"
    Gyrojetrifleelite.capacity = 12
    Gyrojetrifleelite.usage = 1
    Gyrojetrifleelite.bulk = 2
    Gyrojetrifleelite.special = "Analog"
    Gyrojetrifleelite.content = """
    The longarm Model of a gyrojet pistol, a gyrojet rifle fires mini-rockets with devastating force.
    """
    
    let Kaloshreddermonsoonclass = CompendiumWeapon(context: context)
    Kaloshreddermonsoonclass.name = "Kalo shredder, monsoon-class"
    Kaloshreddermonsoonclass.type = "Long Arm"
    Kaloshreddermonsoonclass.level = 17
    Kaloshreddermonsoonclass.price = 784000
    Kaloshreddermonsoonclass.damage = "12d6"
    Kaloshreddermonsoonclass.damageType = "S"
    Kaloshreddermonsoonclass.range = 60
    Kaloshreddermonsoonclass.critical = "Bleed 4d6"
    Kaloshreddermonsoonclass.capacity = 48
    Kaloshreddermonsoonclass.usage = 1
    Kaloshreddermonsoonclass.bulk = 1
    Kaloshreddermonsoonclass.special = "Analog, automatic, underwater"
    Kaloshreddermonsoonclass.content = """
    Favored by the much-romanticized kalo hunters, kalo shredders fire razor-sharp flechettes with nearly silent magnetism. The gun’s distinctive organic design is grown from magnetic coral that grants you a +2 bonus to KAC against disarm combat maneuvers.
    """
    
    let Seekerrifleelite = CompendiumWeapon(context: context)
    Seekerrifleelite.name = "Seeker rifle, elite"
    Seekerrifleelite.type = "Long Arm"
    Seekerrifleelite.level = 17
    Seekerrifleelite.price = 242500
    Seekerrifleelite.damage = "9d8"
    Seekerrifleelite.damageType = "P"
    Seekerrifleelite.range = 100
    Seekerrifleelite.critical = "—"
    Seekerrifleelite.capacity = 18
    Seekerrifleelite.usage = 1
    Seekerrifleelite.bulk = 1
    Seekerrifleelite.special = "Analog"
    Seekerrifleelite.content = """
    Seeker rifles are single-shot projectile weapons. The line gained its name from korasha lashunta explorers, who favor the rifle for its reliability in hostile terrain.
    """
    
    let Scattergungrapeshot = CompendiumWeapon(context: context)
    Scattergungrapeshot.name = "Scattergun, grapeshot"
    Scattergungrapeshot.type = "Long Arm"
    Scattergungrapeshot.level = 18
    Scattergungrapeshot.price = 331000
    Scattergungrapeshot.damage = "4d12"
    Scattergungrapeshot.damageType = "P"
    Scattergungrapeshot.range = 30
    Scattergungrapeshot.critical = "—"
    Scattergungrapeshot.capacity = 12
    Scattergungrapeshot.usage = 1
    Scattergungrapeshot.bulk = 2
    Scattergungrapeshot.special = "Analog, blast"
    Scattergungrapeshot.content = """
    A scattergun fires fragmentary shells in a spray from its barrel, dealing damage to all targets in range. The shortened barrel of the snub scattergun makes it easier to conceal. Grapeshot, impact, and vortex scatterguns are designed to deliver enhanced damage.
    """
    
    let Magnetarrifleparagon = CompendiumWeapon(context: context)
    Magnetarrifleparagon.name = "Magnetar rifle, paragon"
    Magnetarrifleparagon.type = "Long Arm"
    Magnetarrifleparagon.level = 19
    Magnetarrifleparagon.price = 612600
    Magnetarrifleparagon.damage = "8d8"
    Magnetarrifleparagon.damageType = "P"
    Magnetarrifleparagon.range = 120
    Magnetarrifleparagon.critical = "—"
    Magnetarrifleparagon.capacity = 48
    Magnetarrifleparagon.usage = 1
    Magnetarrifleparagon.bulk = 2
    Magnetarrifleparagon.special = "Analog, automatic"
    Magnetarrifleparagon.content = """
    The magnetar rifle uses magnetic fields to accelerate metallic rounds to high speeds. With few moving parts that can break down, it’s a workhorse automatic rifle popular among planetary explorers.
    """
    
    let Gyrojetrifleparagon = CompendiumWeapon(context: context)
    Gyrojetrifleparagon.name = "Gyrojet rifle, paragon"
    Gyrojetrifleparagon.type = "Long Arm"
    Gyrojetrifleparagon.level = 20
    Gyrojetrifleparagon.price = 723500
    Gyrojetrifleparagon.damage = "8d12"
    Gyrojetrifleparagon.damageType = "B"
    Gyrojetrifleparagon.range = 120
    Gyrojetrifleparagon.critical = "Knockdown"
    Gyrojetrifleparagon.capacity = 12
    Gyrojetrifleparagon.usage = 1
    Gyrojetrifleparagon.bulk = 2
    Gyrojetrifleparagon.special = "Analog"
    Gyrojetrifleparagon.content = """
    The longarm Model of a gyrojet pistol, a gyrojet rifle fires mini-rockets with devastating force.
    """
    
    let Seekerrifleparagon = CompendiumWeapon(context: context)
    Seekerrifleparagon.name = "Seeker rifle, paragon"
    Seekerrifleparagon.type = "Long Arm"
    Seekerrifleparagon.level = 20
    Seekerrifleparagon.price = 809200
    Seekerrifleparagon.damage = "12d8"
    Seekerrifleparagon.damageType = "P"
    Seekerrifleparagon.range = 100
    Seekerrifleparagon.critical = "—"
    Seekerrifleparagon.capacity = 24
    Seekerrifleparagon.usage = 1
    Seekerrifleparagon.bulk = 1
    Seekerrifleparagon.special = "Analog"
    Seekerrifleparagon.content = """
    Seeker rifles are single-shot projectile weapons. The line gained its name from korasha lashunta explorers, who favor the rifle for its reliability in hostile terrain.
    """
    
    let Pulsecasterrifle = CompendiumWeapon(context: context)
    Pulsecasterrifle.name = "Pulsecaster rifle"
    Pulsecasterrifle.type = "Long Arm"
    Pulsecasterrifle.level = 1
    Pulsecasterrifle.price = 100
    Pulsecasterrifle.damage = "1d6"
    Pulsecasterrifle.damageType = "E"
    Pulsecasterrifle.range = 50
    Pulsecasterrifle.critical = "—"
    Pulsecasterrifle.capacity = 40
    Pulsecasterrifle.usage = 2
    Pulsecasterrifle.bulk = 1
    Pulsecasterrifle.special = "Nonlethal"
    Pulsecasterrifle.content = """
    The pulsecaster rifle sends a low-voltage blast at its target and has a longer range than the handheld pulsecaster. The blast can stun the target and deal nonlethal damage.
    """
    
    let ArcemitterTactical = CompendiumWeapon(context: context)
    ArcemitterTactical.name = "Arc emitter, Tactical"
    ArcemitterTactical.type = "Long Arm"
    ArcemitterTactical.level = 2
    ArcemitterTactical.price = 750
    ArcemitterTactical.damage = "1d4"
    ArcemitterTactical.damageType = "E"
    ArcemitterTactical.range = 15
    ArcemitterTactical.critical = "—"
    ArcemitterTactical.capacity = 20
    ArcemitterTactical.usage = 4
    ArcemitterTactical.bulk = 1
    ArcemitterTactical.special = "Blast, stun, unwieldy"
    ArcemitterTactical.content = """
    Arc emitters discharge a cone of electrical energy that can damage and stun anyone within its area. Advanced arc emitters can be used at a longer range and are used by military forces to stun and subdue groups of enemies.
    """
    
    let Arcriflestatic = CompendiumWeapon(context: context)
    Arcriflestatic.name = "Arc rifle, static"
    Arcriflestatic.type = "Long Arm"
    Arcriflestatic.level = 6
    Arcriflestatic.price = 4200
    Arcriflestatic.damage = "1d12"
    Arcriflestatic.damageType = "E"
    Arcriflestatic.range = 70
    Arcriflestatic.critical = "Arc 1d6"
    Arcriflestatic.capacity = 40
    Arcriflestatic.usage = 1
    Arcriflestatic.bulk = 2
    Arcriflestatic.special = "Stun"
    Arcriflestatic.content = """
    Arc rifles fire deadly electrical blasts and have a longer range than arc pistols. Like arc pistols, arc rifles can stun targets that are not killed outright by the electricity damage.
    """
    
    let Arcemitteradvanced = CompendiumWeapon(context: context)
    Arcemitteradvanced.name = "Arc emitter, advanced"
    Arcemitteradvanced.type = "Long Arm"
    Arcemitteradvanced.level = 9
    Arcemitteradvanced.price = 13200
    Arcemitteradvanced.damage = "2d4"
    Arcemitteradvanced.damageType = "E"
    Arcemitteradvanced.range = 30
    Arcemitteradvanced.critical = "—"
    Arcemitteradvanced.capacity = 40
    Arcemitteradvanced.usage = 10
    Arcemitteradvanced.bulk = 1
    Arcemitteradvanced.special = "Blast, stun, unwieldy"
    Arcemitteradvanced.content = """
    Arc emitters discharge a cone of electrical energy that can damage and stun anyone within its area. Advanced arc emitters can be used at a longer range and are used by military forces to stun and subdue groups of enemies.
    """
    
    let Arcrifleaurora = CompendiumWeapon(context: context)
    Arcrifleaurora.name = "Arc rifle, aurora"
    Arcrifleaurora.type = "Long Arm"
    Arcrifleaurora.level = 11
    Arcrifleaurora.price = 24500
    Arcrifleaurora.damage = "2d12"
    Arcrifleaurora.damageType = "E"
    Arcrifleaurora.range = 70
    Arcrifleaurora.critical = "Arc 2d6"
    Arcrifleaurora.capacity = 40
    Arcrifleaurora.usage = 1
    Arcrifleaurora.bulk = 2
    Arcrifleaurora.special = "Stun"
    Arcrifleaurora.content = """
    Arc rifles fire deadly electrical blasts and have a longer range than arc pistols. Like arc pistols, arc rifles can stun targets that are not killed outright by the electricity damage.
    """
    
    let Arcriflestorm = CompendiumWeapon(context: context)
    Arcriflestorm.name = "Arc rifle, storm"
    Arcriflestorm.type = "Long Arm"
    Arcriflestorm.level = 16
    Arcriflestorm.price = 190300
    Arcriflestorm.damage = "4d12"
    Arcriflestorm.damageType = "E"
    Arcriflestorm.range = 80
    Arcriflestorm.critical = "Arc 4d6"
    Arcriflestorm.capacity = 80
    Arcriflestorm.usage = 2
    Arcriflestorm.bulk = 2
    Arcriflestorm.special = "Stun"
    Arcriflestorm.content = """
    Arc rifles fire deadly electrical blasts and have a longer range than arc pistols. Like arc pistols, arc rifles can stun targets that are not killed outright by the electricity damage.
    """
    
    let Arcrifletempest = CompendiumWeapon(context: context)
    Arcrifletempest.name = "Arc rifle, tempest"
    Arcrifletempest.type = "Long Arm"
    Arcrifletempest.level = 19
    Arcrifletempest.price = 622000
    Arcrifletempest.damage = "6d12"
    Arcrifletempest.damageType = "E"
    Arcrifletempest.range = 80
    Arcrifletempest.critical = "Arc 6d6"
    Arcrifletempest.capacity = 100
    Arcrifletempest.usage = 2
    Arcrifletempest.bulk = 2
    Arcrifletempest.special = "Stun"
    Arcrifletempest.content = """
    Arc rifles fire deadly electrical blasts and have a longer range than arc pistols. Like arc pistols, arc rifles can stun targets that are not killed outright by the electricity damage.
    """
    
    let Sonicriflethunderstrike = CompendiumWeapon(context: context)
    Sonicriflethunderstrike.name = "Sonic rifle, thunderstrike"
    Sonicriflethunderstrike.type = "Long Arm"
    Sonicriflethunderstrike.level = 5
    Sonicriflethunderstrike.price = 3400
    Sonicriflethunderstrike.damage = "1d10"
    Sonicriflethunderstrike.damageType = "O"
    Sonicriflethunderstrike.range = 50
    Sonicriflethunderstrike.critical = "Deafen"
    Sonicriflethunderstrike.capacity = 40
    Sonicriflethunderstrike.usage = 2
    Sonicriflethunderstrike.bulk = 1
    Sonicriflethunderstrike.special = "—"
    Sonicriflethunderstrike.content = """
    A sonic rifle fires a blast that is loud enough to deafen targets in addition to damaging them. Sonic rifles have snub-nosed barrels and typically incorporate U-shaped prongs to improve beam stability.
    """
    
    let Streetsweeperthunderstrike = CompendiumWeapon(context: context)
    Streetsweeperthunderstrike.name = "Streetsweeper, thunderstrike"
    Streetsweeperthunderstrike.type = "Long Arm"
    Streetsweeperthunderstrike.level = 7
    Streetsweeperthunderstrike.price = 7150
    Streetsweeperthunderstrike.damage = "1d10"
    Streetsweeperthunderstrike.damageType = "O"
    Streetsweeperthunderstrike.range = 50
    Streetsweeperthunderstrike.critical = "Knockdown"
    Streetsweeperthunderstrike.capacity = 40
    Streetsweeperthunderstrike.usage = 5
    Streetsweeperthunderstrike.bulk = 2
    Streetsweeperthunderstrike.special = "Boost 1d6"
    Streetsweeperthunderstrike.content = """
    Streetsweepers are sonic weapons designed to deliver a low-intensity “punch” of sound. A streetsweeper can be overcharged to deliver a significant sonic blast that can knock down its target.
    """
    
    let SonicrifleLFD = CompendiumWeapon(context: context)
    SonicrifleLFD.name = "Sonic rifle, LFD"
    SonicrifleLFD.type = "Long Arm"
    SonicrifleLFD.level = 10
    SonicrifleLFD.price = 17000
    SonicrifleLFD.damage = "2d10"
    SonicrifleLFD.damageType = "O"
    SonicrifleLFD.range = 50
    SonicrifleLFD.critical = "Deafen"
    SonicrifleLFD.capacity = 40
    SonicrifleLFD.usage = 2
    SonicrifleLFD.bulk = 2
    SonicrifleLFD.special = "—"
    SonicrifleLFD.content = """
    A sonic rifle fires a blast that is loud enough to deafen targets in addition to damaging them. Sonic rifles have snub-nosed barrels and typically incorporate U-shaped prongs to improve beam stability.
    """
    
    let StreetsweeperLFD = CompendiumWeapon(context: context)
    StreetsweeperLFD.name = "Streetsweeper, LFD"
    StreetsweeperLFD.type = "Long Arm"
    StreetsweeperLFD.level = 12
    StreetsweeperLFD.price = 39300
    StreetsweeperLFD.damage = "3d10"
    StreetsweeperLFD.damageType = "O"
    StreetsweeperLFD.range = 50
    StreetsweeperLFD.critical = "Knockdown"
    StreetsweeperLFD.capacity = 40
    StreetsweeperLFD.usage = 5
    StreetsweeperLFD.bulk = 2
    StreetsweeperLFD.special = "Boost 1d8"
    StreetsweeperLFD.content = """
    Streetsweepers are sonic weapons designed to deliver a low-intensity “punch” of sound. A streetsweeper can be overcharged to deliver a significant sonic blast that can knock down its target.
    """
    
    let SonicrifleHFD = CompendiumWeapon(context: context)
    SonicrifleHFD.name = "Sonic rifle, HFD"
    SonicrifleHFD.type = "Long Arm"
    SonicrifleHFD.level = 14
    SonicrifleHFD.price = 80200
    SonicrifleHFD.damage = "4d10"
    SonicrifleHFD.damageType = "O"
    SonicrifleHFD.range = 50
    SonicrifleHFD.critical = "Deafen"
    SonicrifleHFD.capacity = 80
    SonicrifleHFD.usage = 4
    SonicrifleHFD.bulk = 2
    SonicrifleHFD.special = "—"
    SonicrifleHFD.content = """
    A sonic rifle fires a blast that is loud enough to deafen targets in addition to damaging them. Sonic rifles have snub-nosed barrels and typically incorporate U-shaped prongs to improve beam stability.
    """
    
    let StreetsweeperHFD = CompendiumWeapon(context: context)
    StreetsweeperHFD.name = "Streetsweeper, HFD"
    StreetsweeperHFD.type = "Long Arm"
    StreetsweeperHFD.level = 16
    StreetsweeperHFD.price = 195000
    StreetsweeperHFD.damage = "5d10"
    StreetsweeperHFD.damageType = "O"
    StreetsweeperHFD.range = 50
    StreetsweeperHFD.critical = "Knockdown"
    StreetsweeperHFD.capacity = 40
    StreetsweeperHFD.usage = 5
    StreetsweeperHFD.bulk = 2
    StreetsweeperHFD.special = "Boost 1d10"
    StreetsweeperHFD.content = """
    Streetsweepers are sonic weapons designed to deliver a low-intensity “punch” of sound. A streetsweeper can be overcharged to deliver a significant sonic blast that can knock down its target.
    """
    
    let Sonicriflebanshee = CompendiumWeapon(context: context)
    Sonicriflebanshee.name = "Sonic rifle, banshee"
    Sonicriflebanshee.type = "Long Arm"
    Sonicriflebanshee.level = 18
    Sonicriflebanshee.price = 364500
    Sonicriflebanshee.damage = "6d10"
    Sonicriflebanshee.damageType = "O"
    Sonicriflebanshee.range = 50
    Sonicriflebanshee.critical = "Deafen"
    Sonicriflebanshee.capacity = 100
    Sonicriflebanshee.usage = 5
    Sonicriflebanshee.bulk = 2
    Sonicriflebanshee.special = "—"
    Sonicriflebanshee.content = """
    A sonic rifle fires a blast that is loud enough to deafen targets in addition to damaging them. Sonic rifles have snub-nosed barrels and typically incorporate U-shaped prongs to improve beam stability.
    """
    
    let Needlerrifle = CompendiumWeapon(context: context)
    Needlerrifle.name = "Needler rifle"
    Needlerrifle.type = "Long Arm"
    Needlerrifle.level = 1
    Needlerrifle.price = 110
    Needlerrifle.damage = "1d6"
    Needlerrifle.damageType = "P"
    Needlerrifle.range = 60
    Needlerrifle.critical = "Injection DC +2"
    Needlerrifle.capacity = 12
    Needlerrifle.usage = 1
    Needlerrifle.bulk = 1
    Needlerrifle.special = "Analog, injection"
    Needlerrifle.content = """
    Like the needler pistol, this injection gun can be fitted with cartridges containing medicine or poison. The needler rifle fires darts much farther than its smaller counterpart.
    """
    

    
}

func heavyWeapons() {
    
    let ZerocannonTactical = CompendiumWeapon(context: context)
    ZerocannonTactical.name = "Zero cannon, Tactical"
    ZerocannonTactical.type = "Heavy Weapon"
    ZerocannonTactical.level = 11
    ZerocannonTactical.price = 23000
    ZerocannonTactical.damage = "3d8"
    ZerocannonTactical.damageType = "C"
    ZerocannonTactical.range = 60
    ZerocannonTactical.critical = "Staggered"
    ZerocannonTactical.capacity = 80
    ZerocannonTactical.usage = 4
    ZerocannonTactical.bulk = 2
    ZerocannonTactical.special = "Line, unwieldy"
    ZerocannonTactical.content = """
    Zero cannons project a freezing line straight out from a generator, affecting any targets within the line. A pair of tanks in the cannon’s heavy stock contain chemical coolants that produce a violent endothermic reaction when mixed in the insulated barrel.
    """
    
    let Zerocannonadvanced = CompendiumWeapon(context: context)
    Zerocannonadvanced.name = "Zero cannon, advanced"
    Zerocannonadvanced.type = "Heavy Weapon"
    Zerocannonadvanced.level = 14
    Zerocannonadvanced.price = 81400
    Zerocannonadvanced.damage = "5d8"
    Zerocannonadvanced.damageType = "C"
    Zerocannonadvanced.range = 60
    Zerocannonadvanced.critical = "Staggered"
    Zerocannonadvanced.capacity = 100
    Zerocannonadvanced.usage = 5
    Zerocannonadvanced.bulk = 2
    Zerocannonadvanced.special = "Line, unwieldy"
    Zerocannonadvanced.content = """
    Zero cannons project a freezing line straight out from a generator, affecting any targets within the line. A pair of tanks in the cannon’s heavy stock contain chemical coolants that produce a violent endothermic reaction when mixed in the insulated barrel.
    """
    
    let Zerocannonelite = CompendiumWeapon(context: context)
    Zerocannonelite.name = "Zero cannon, elite"
    Zerocannonelite.type = "Heavy Weapon"
    Zerocannonelite.level = 18
    Zerocannonelite.price = 412800
    Zerocannonelite.damage = "8d8"
    Zerocannonelite.damageType = "C"
    Zerocannonelite.range = 80
    Zerocannonelite.critical = "Staggered"
    Zerocannonelite.capacity = 100
    Zerocannonelite.usage = 5
    Zerocannonelite.bulk = 2
    Zerocannonelite.special = "Line, unwieldy"
    Zerocannonelite.content = """
    Zero cannons project a freezing line straight out from a generator, affecting any targets within the line. A pair of tanks in the cannon’s heavy stock contain chemical coolants that produce a violent endothermic reaction when mixed in the insulated barrel.
    """
    
    let Flamethrowerifritclass = CompendiumWeapon(context: context)
    Flamethrowerifritclass.name = "Flamethrower, ifrit-class"
    Flamethrowerifritclass.type = "Heavy Weapon"
    Flamethrowerifritclass.level = 2
    Flamethrowerifritclass.price = 780
    Flamethrowerifritclass.damage = "1d6"
    Flamethrowerifritclass.damageType = "F"
    Flamethrowerifritclass.range = 15
    Flamethrowerifritclass.critical = "Burn 1d6"
    Flamethrowerifritclass.capacity = 20
    Flamethrowerifritclass.usage = 4
    Flamethrowerifritclass.bulk = 2
    Flamethrowerifritclass.special = "Analog, blast, unwieldy"
    Flamethrowerifritclass.content = """
    These portable flamethrowers consist of a heavy rifle-like design with an oversized petrol tank integrated into the weapon’s stock.
    """
    
    let Flamethrowersalamanderclass = CompendiumWeapon(context: context)
    Flamethrowersalamanderclass.name = "Flamethrower, salamander-class"
    Flamethrowersalamanderclass.type = "Heavy Weapon"
    Flamethrowersalamanderclass.level = 8
    Flamethrowersalamanderclass.price = 8600
    Flamethrowersalamanderclass.damage = "2d6"
    Flamethrowersalamanderclass.damageType = "F"
    Flamethrowersalamanderclass.range = 30
    Flamethrowersalamanderclass.critical = "Burn 2d6"
    Flamethrowersalamanderclass.capacity = 20
    Flamethrowersalamanderclass.usage = 5
    Flamethrowersalamanderclass.bulk = 2
    Flamethrowersalamanderclass.special = "Analog, blast, unwieldy"
    Flamethrowersalamanderclass.content = """
    These portable flamethrowers consist of a heavy rifle-like design with an oversized petrol tank integrated into the weapon’s stock.
    """
    
    let Flamethrowerhellhoundclass = CompendiumWeapon(context: context)
    Flamethrowerhellhoundclass.name = "Flamethrower, hellhound-class"
    Flamethrowerhellhoundclass.type = "Heavy Weapon"
    Flamethrowerhellhoundclass.level = 12
    Flamethrowerhellhoundclass.price = 35100
    Flamethrowerhellhoundclass.damage = "4d6"
    Flamethrowerhellhoundclass.damageType = "F"
    Flamethrowerhellhoundclass.range = 30
    Flamethrowerhellhoundclass.critical = "Burn 4d6"
    Flamethrowerhellhoundclass.capacity = 40
    Flamethrowerhellhoundclass.usage = 8
    Flamethrowerhellhoundclass.bulk = 2
    Flamethrowerhellhoundclass.special = "Analog, blast, unwieldy"
    Flamethrowerhellhoundclass.content = """
    These portable flamethrowers consist of a heavy rifle-like design with an oversized petrol tank integrated into the weapon’s stock.
    """
    
    let Flamethrowerfiredrakeclass = CompendiumWeapon(context: context)
    Flamethrowerfiredrakeclass.name = "Flamethrower, firedrake-class"
    Flamethrowerfiredrakeclass.type = "Heavy Weapon"
    Flamethrowerfiredrakeclass.level = 15
    Flamethrowerfiredrakeclass.price = 128000
    Flamethrowerfiredrakeclass.damage = "6d6"
    Flamethrowerfiredrakeclass.damageType = "F"
    Flamethrowerfiredrakeclass.range = 30
    Flamethrowerfiredrakeclass.critical = "Burn 6d6"
    Flamethrowerfiredrakeclass.capacity = 40
    Flamethrowerfiredrakeclass.usage = 10
    Flamethrowerfiredrakeclass.bulk = 2
    Flamethrowerfiredrakeclass.special = "Analog, blast, unwieldy"
    Flamethrowerfiredrakeclass.content = """
    These portable flamethrowers consist of a heavy rifle-like design with an oversized petrol tank integrated into the weapon’s stock.
    """
    
    let Flamethrowerphoenixclass = CompendiumWeapon(context: context)
    Flamethrowerphoenixclass.name = "Flamethrower, phoenix-class"
    Flamethrowerphoenixclass.type = "Heavy Weapon"
    Flamethrowerphoenixclass.level = 18
    Flamethrowerphoenixclass.price = 367500
    Flamethrowerphoenixclass.damage = "9d6"
    Flamethrowerphoenixclass.damageType = "F"
    Flamethrowerphoenixclass.range = 30
    Flamethrowerphoenixclass.critical = "Burn 9d6"
    Flamethrowerphoenixclass.capacity = 40
    Flamethrowerphoenixclass.usage = 10
    Flamethrowerphoenixclass.bulk = 2
    Flamethrowerphoenixclass.special = "Analog, blast, unwieldy"
    Flamethrowerphoenixclass.content = """
    These portable flamethrowers consist of a heavy rifle-like design with an oversized petrol tank integrated into the weapon’s stock.
    """
    
    let Artillerylaserazimuth = CompendiumWeapon(context: context)
    Artillerylaserazimuth.name = "Artillery laser, azimuth"
    Artillerylaserazimuth.type = "Heavy Weapon"
    Artillerylaserazimuth.level = 1
    Artillerylaserazimuth.price = 425
    Artillerylaserazimuth.damage = "1d10"
    Artillerylaserazimuth.damageType = "F"
    Artillerylaserazimuth.range = 120
    Artillerylaserazimuth.critical = "Burn 1d6"
    Artillerylaserazimuth.capacity = 20
    Artillerylaserazimuth.usage = 2
    Artillerylaserazimuth.bulk = 3
    Artillerylaserazimuth.special = "Penetrating"
    Artillerylaserazimuth.content = """
    Artillery lasers are heavy weapons designed to be effective against hardened targets such as Vehicles and enemy bunkers.
    """
    
    let Artillerylasercorona = CompendiumWeapon(context: context)
    Artillerylasercorona.name = "Artillery laser, corona"
    Artillerylasercorona.type = "Heavy Weapon"
    Artillerylasercorona.level = 6
    Artillerylasercorona.price = 4650
    Artillerylasercorona.damage = "2d8"
    Artillerylasercorona.damageType = "F"
    Artillerylasercorona.range = 120
    Artillerylasercorona.critical = "Burn 1d6"
    Artillerylasercorona.capacity = 40
    Artillerylasercorona.usage = 4
    Artillerylasercorona.bulk = 3
    Artillerylasercorona.special = "Penetrating"
    Artillerylasercorona.content = """
    Artillery lasers are heavy weapons designed to be effective against hardened targets such as Vehicles and enemy bunkers.
    """
    
    let Artillerylaseraphelion = CompendiumWeapon(context: context)
    Artillerylaseraphelion.name = "Artillery laser, aphelion"
    Artillerylaseraphelion.type = "Heavy Weapon"
    Artillerylaseraphelion.level = 9
    Artillerylaseraphelion.price = 14300
    Artillerylaseraphelion.damage = "3d8"
    Artillerylaseraphelion.damageType = "F"
    Artillerylaseraphelion.range = 120
    Artillerylaseraphelion.critical = "Burn 1d6"
    Artillerylaseraphelion.capacity = 40
    Artillerylaseraphelion.usage = 4
    Artillerylaseraphelion.bulk = 3
    Artillerylaseraphelion.special = "Penetrating"
    Artillerylaseraphelion.content = """
    Artillery lasers are heavy weapons designed to be effective against hardened targets such as Vehicles and enemy bunkers.
    """
    
    let AutobeamartilleryTactical = CompendiumWeapon(context: context)
    AutobeamartilleryTactical.name = "Autobeam artillery, Tactical"
    AutobeamartilleryTactical.type = "Heavy Weapon"
    AutobeamartilleryTactical.level = 10
    AutobeamartilleryTactical.price = 19400
    AutobeamartilleryTactical.damage = "2d8"
    AutobeamartilleryTactical.damageType = "F"
    AutobeamartilleryTactical.range = 120
    AutobeamartilleryTactical.critical = "Burn 1d8"
    AutobeamartilleryTactical.capacity = 40
    AutobeamartilleryTactical.usage = 1
    AutobeamartilleryTactical.bulk = 2
    AutobeamartilleryTactical.special = "Automatic"
    AutobeamartilleryTactical.content = """
    Though it lacks the penetrating power of an artillery laser, an autobeam artillery delivers sustained laser fire. It uses a rotating array of lenses to prevent the intense heat of sustained fire from melting the weapon’s housing.
    """
    
    let Artillerylaserperihelion = CompendiumWeapon(context: context)
    Artillerylaserperihelion.name = "Artillery laser, perihelion"
    Artillerylaserperihelion.type = "Heavy Weapon"
    Artillerylaserperihelion.level = 13
    Artillerylaserperihelion.price = 53800
    Artillerylaserperihelion.damage = "4d8"
    Artillerylaserperihelion.damageType = "F"
    Artillerylaserperihelion.range = 130
    Artillerylaserperihelion.critical = "Burn 2d6"
    Artillerylaserperihelion.capacity = 100
    Artillerylaserperihelion.usage = 5
    Artillerylaserperihelion.bulk = 3
    Artillerylaserperihelion.special = "Penetrating"
    Artillerylaserperihelion.content = """
    Artillery lasers are heavy weapons designed to be effective against hardened targets such as Vehicles and enemy bunkers.
    """
    
    let Autobeamartilleryadvanced = CompendiumWeapon(context: context)
    Autobeamartilleryadvanced.name = "Autobeam artillery, advanced"
    Autobeamartilleryadvanced.type = "Heavy Weapon"
    Autobeamartilleryadvanced.level = 16
    Autobeamartilleryadvanced.price = 145700
    Autobeamartilleryadvanced.damage = "4d8"
    Autobeamartilleryadvanced.damageType = "F"
    Autobeamartilleryadvanced.range = 120
    Autobeamartilleryadvanced.critical = "Burn 2d8"
    Autobeamartilleryadvanced.capacity = 40
    Autobeamartilleryadvanced.usage = 1
    Autobeamartilleryadvanced.bulk = 2
    Autobeamartilleryadvanced.special = "Automatic"
    Autobeamartilleryadvanced.content = """
    Though it lacks the penetrating power of an artillery laser, an autobeam artillery delivers sustained laser fire. It uses a rotating array of lenses to prevent the intense heat of sustained fire from melting the weapon’s housing.
    """
    
    let Artillerylaserparallax = CompendiumWeapon(context: context)
    Artillerylaserparallax.name = "Artillery laser, parallax"
    Artillerylaserparallax.type = "Heavy Weapon"
    Artillerylaserparallax.level = 17
    Artillerylaserparallax.price = 248000
    Artillerylaserparallax.damage = "7d8"
    Artillerylaserparallax.damageType = "F"
    Artillerylaserparallax.range = 150
    Artillerylaserparallax.critical = "Burn 4d6"
    Artillerylaserparallax.capacity = 100
    Artillerylaserparallax.usage = 5
    Artillerylaserparallax.bulk = 3
    Artillerylaserparallax.special = "Penetrating"
    Artillerylaserparallax.content = """
    Artillery lasers are heavy weapons designed to be effective against hardened targets such as Vehicles and enemy bunkers.
    """
    
    let Autobeamartilleryelite = CompendiumWeapon(context: context)
    Autobeamartilleryelite.name = "Autobeam artillery, elite"
    Autobeamartilleryelite.type = "Heavy Weapon"
    Autobeamartilleryelite.level = 19
    Autobeamartilleryelite.price = 543300
    Autobeamartilleryelite.damage = "6d8"
    Autobeamartilleryelite.damageType = "F"
    Autobeamartilleryelite.range = 120
    Autobeamartilleryelite.critical = "Burn 2d10"
    Autobeamartilleryelite.capacity = 40
    Autobeamartilleryelite.usage = 1
    Autobeamartilleryelite.bulk = 2
    Autobeamartilleryelite.special = "Automatic"
    Autobeamartilleryelite.content = """
    Though it lacks the penetrating power of an artillery laser, an autobeam artillery delivers sustained laser fire. It uses a rotating array of lenses to prevent the intense heat of sustained fire from melting the weapon’s housing.
    """
    
    let Artillerylaserzenith = CompendiumWeapon(context: context)
    Artillerylaserzenith.name = "Artillery laser, zenith"
    Artillerylaserzenith.type = "Heavy Weapon"
    Artillerylaserzenith.level = 20
    Artillerylaserzenith.price = 722000
    Artillerylaserzenith.damage = "9d8"
    Artillerylaserzenith.damageType = "F"
    Artillerylaserzenith.range = 150
    Artillerylaserzenith.critical = "Burn 5d6"
    Artillerylaserzenith.capacity = 100
    Artillerylaserzenith.usage = 5
    Artillerylaserzenith.bulk = 3
    Artillerylaserzenith.special = "Penetrating"
    Artillerylaserzenith.content = """
    Artillery lasers are heavy weapons designed to be effective against hardened targets such as Vehicles and enemy bunkers.
    """
    
    let Stearheartcannonredstar = CompendiumWeapon(context: context)
    Stearheartcannonredstar.name = "Stearheart cannon, red star"
    Stearheartcannonredstar.type = "Heavy Weapon"
    Stearheartcannonredstar.level = 3
    Stearheartcannonredstar.price = 1300
    Stearheartcannonredstar.damage = "1d6"
    Stearheartcannonredstar.damageType = "EF"
    Stearheartcannonredstar.range = 100
    Stearheartcannonredstar.critical = "Blind"
    Stearheartcannonredstar.capacity = 40
    Stearheartcannonredstar.usage = 5
    Stearheartcannonredstar.bulk = 2
    Stearheartcannonredstar.special = "Bright, explode (5 ft.), unwieldy"
    Stearheartcannonredstar.content = """
    
    """
    
    let Plasmacannonredstar = CompendiumWeapon(context: context)
    Plasmacannonredstar.name = "Plasma cannon, red star"
    Plasmacannonredstar.type = "Heavy Weapon"
    Plasmacannonredstar.level = 8
    Plasmacannonredstar.price = 8650
    Plasmacannonredstar.damage = "2d10"
    Plasmacannonredstar.damageType = "EF"
    Plasmacannonredstar.range = 100
    Plasmacannonredstar.critical = "Blind"
    Plasmacannonredstar.capacity = 100
    Plasmacannonredstar.usage = 5
    Plasmacannonredstar.bulk = 2
    Plasmacannonredstar.special = "Explode (5 ft.), unwieldy"
    Plasmacannonredstar.content = """
    Plasma cannons shoot large, explosive blasts of ionized plasma. They are difficult to use and have a relatively short range for a heavy weapon, but their impact has devastating effect.
    """
    
    let Starheartcannonyellowstar = CompendiumWeapon(context: context)
    Starheartcannonyellowstar.name = "Starheart cannon, yellow star"
    Starheartcannonyellowstar.type = "Heavy Weapon"
    Starheartcannonyellowstar.level = 8
    Starheartcannonyellowstar.price = 9050
    Starheartcannonyellowstar.damage = "3d6"
    Starheartcannonyellowstar.damageType = "EF"
    Starheartcannonyellowstar.range = 100
    Starheartcannonyellowstar.critical = "Blind"
    Starheartcannonyellowstar.capacity = 40
    Starheartcannonyellowstar.usage = 5
    Starheartcannonyellowstar.bulk = 2
    Starheartcannonyellowstar.special = "Bright, explode (10 ft.), unwieldy"
    Starheartcannonyellowstar.content = """
    Certain warriors designed these very bright weapons to defend isolated solar outposts from undead marauders.
    """
    
    let Starheartcannonwhitestar = CompendiumWeapon(context: context)
    Starheartcannonwhitestar.name = "Starheart cannon, white star"
    Starheartcannonwhitestar.type = "Heavy Weapon"
    Starheartcannonwhitestar.level = 13
    Starheartcannonwhitestar.price = 48100
    Starheartcannonwhitestar.damage = "2d10"
    Starheartcannonwhitestar.damageType = "EF"
    Starheartcannonwhitestar.range = 100
    Starheartcannonwhitestar.critical = "Blind"
    Starheartcannonwhitestar.capacity = 100
    Starheartcannonwhitestar.usage = 5
    Starheartcannonwhitestar.bulk = 2
    Starheartcannonwhitestar.special = "Bright, explode (10 ft.), unwieldy"
    Starheartcannonwhitestar.content = """
    Certain warriors designed these very bright weapons to defend isolated solar outposts from undead marauders.
    """
    
    let Plasmacannonyellowstar = CompendiumWeapon(context: context)
    Plasmacannonyellowstar.name = "Plasma cannon, yellow star"
    Plasmacannonyellowstar.type = "Heavy Weapon"
    Plasmacannonyellowstar.level = 14
    Plasmacannonyellowstar.price = 62800
    Plasmacannonyellowstar.damage = "4d10"
    Plasmacannonyellowstar.damageType = "EF"
    Plasmacannonyellowstar.range = 100
    Plasmacannonyellowstar.critical = "Burn 2d8"
    Plasmacannonyellowstar.capacity = 100
    Plasmacannonyellowstar.usage = 5
    Plasmacannonyellowstar.bulk = 2
    Plasmacannonyellowstar.special = "Explode (5 ft.), unwieldy"
    Plasmacannonyellowstar.content = """
    Plasma cannons shoot large, explosive blasts of ionized plasma. They are difficult to use and have a relatively short range for a heavy weapon, but their impact has devastating effect.
    """
    
    let Plasmacannonwhitestar = CompendiumWeapon(context: context)
    Plasmacannonwhitestar.name = "Plasma cannon, white star"
    Plasmacannonwhitestar.type = "Heavy Weapon"
    Plasmacannonwhitestar.level = 16
    Plasmacannonwhitestar.price = 189200
    Plasmacannonwhitestar.damage = "6d10"
    Plasmacannonwhitestar.damageType = "EF"
    Plasmacannonwhitestar.range = 100
    Plasmacannonwhitestar.critical = "Burn 3d8"
    Plasmacannonwhitestar.capacity = 100
    Plasmacannonwhitestar.usage = 5
    Plasmacannonwhitestar.bulk = 2
    Plasmacannonwhitestar.special = "Explode (5 ft.), unwieldy"
    Plasmacannonwhitestar.content = """
    Plasma cannons shoot large, explosive blasts of ionized plasma. They are difficult to use and have a relatively short range for a heavy weapon, but their impact has devastating effect.
    """
    
    let Starheartcannonbluestar = CompendiumWeapon(context: context)
    Starheartcannonbluestar.name = "Starheart cannon, blue star"
    Starheartcannonbluestar.type = "Heavy Weapon"
    Starheartcannonbluestar.level = 18
    Starheartcannonbluestar.price = 360000
    Starheartcannonbluestar.damage = "9d6"
    Starheartcannonbluestar.damageType = "EF"
    Starheartcannonbluestar.range = 100
    Starheartcannonbluestar.critical = "Blind"
    Starheartcannonbluestar.capacity = 100
    Starheartcannonbluestar.usage = 10
    Starheartcannonbluestar.bulk = 2
    Starheartcannonbluestar.special = "Bright, explode (15 ft.), unwieldy"
    Starheartcannonbluestar.content = """
    Certain warriors designed these very bright weapons to defend isolated solar outposts from undead marauders.
    """
    
    let Plasmacannonbluestar = CompendiumWeapon(context: context)
    Plasmacannonbluestar.name = "Plasma cannon, blue star"
    Plasmacannonbluestar.type = "Heavy Weapon"
    Plasmacannonbluestar.level = 20
    Plasmacannonbluestar.price = 950000
    Plasmacannonbluestar.damage = "8d10"
    Plasmacannonbluestar.damageType = "EF"
    Plasmacannonbluestar.range = 100
    Plasmacannonbluestar.critical = "Burn 4d8"
    Plasmacannonbluestar.capacity = 100
    Plasmacannonbluestar.usage = 10
    Plasmacannonbluestar.bulk = 2
    Plasmacannonbluestar.special = "Explode (10 ft.), unwieldy"
    Plasmacannonbluestar.content = """
    Plasma cannons shoot large, explosive blasts of ionized plasma. They are difficult to use and have a relatively short range for a heavy weapon, but their impact has devastating effect.
    """
    
    let Reactioncannonlight = CompendiumWeapon(context: context)
    Reactioncannonlight.name = "Reaction cannon, light"
    Reactioncannonlight.type = "Heavy Weapon"
    Reactioncannonlight.level = 1
    Reactioncannonlight.price = 250
    Reactioncannonlight.damage = "1d10"
    Reactioncannonlight.damageType = "P"
    Reactioncannonlight.range = 90
    Reactioncannonlight.critical = "—"
    Reactioncannonlight.capacity = 6
    Reactioncannonlight.usage = 1
    Reactioncannonlight.bulk = 3
    Reactioncannonlight.special = "Penetrating"
    Reactioncannonlight.content = """
    An ancient yet still popular vesk weapon, the reaction cannon uses advanced materials and technology to redirect the recoil of a projectile back into the projectile itself, making it an extremely damaging heavy weapon.
    """
    
    let Machinegunsquad = CompendiumWeapon(context: context)
    Machinegunsquad.name = "Machine gun, squad"
    Machinegunsquad.type = "Heavy Weapon"
    Machinegunsquad.level = 4
    Machinegunsquad.price = 2060
    Machinegunsquad.damage = "1d10"
    Machinegunsquad.damageType = "P"
    Machinegunsquad.range = 60
    Machinegunsquad.critical = "—"
    Machinegunsquad.capacity = 40
    Machinegunsquad.usage = 2
    Machinegunsquad.bulk = 2
    Machinegunsquad.special = "Analog, automatic"
    Machinegunsquad.content = """
    The most basic and portable machine guns are known as squad guns for their popularity among mercenary groups. Light, medium, and heavy machine guns remain reliable heavy weapons for their automatic fire and damage capability.
    """
    
    let XgengunTactical = CompendiumWeapon(context: context)
    XgengunTactical.name = "X-gen gun, Tactical"
    XgengunTactical.type = "Heavy Weapon"
    XgengunTactical.level = 6
    XgengunTactical.price = 4240
    XgengunTactical.damage = "1d12"
    XgengunTactical.damageType = "P"
    XgengunTactical.range = 120
    XgengunTactical.critical = "—"
    XgengunTactical.capacity = 80
    XgengunTactical.usage = 2
    XgengunTactical.bulk = 2
    XgengunTactical.special = "Automatic"
    XgengunTactical.content = """
    X-gen guns are named for their external generator—a power pack that drives the automatic feed of the weapon. They are common on fortified bases and in large armed encampments.
    """
    
    let ReactioncannonTactical = CompendiumWeapon(context: context)
    ReactioncannonTactical.name = "Reaction cannon, Tactical"
    ReactioncannonTactical.type = "Heavy Weapon"
    ReactioncannonTactical.level = 7
    ReactioncannonTactical.price = 6100
    ReactioncannonTactical.damage = "2d10"
    ReactioncannonTactical.damageType = "P"
    ReactioncannonTactical.range = 90
    ReactioncannonTactical.critical = "—"
    ReactioncannonTactical.capacity = 6
    ReactioncannonTactical.usage = 1
    ReactioncannonTactical.bulk = 3
    ReactioncannonTactical.special = "Penetrating"
    ReactioncannonTactical.content = """
    An ancient yet still popular vesk weapon, the reaction cannon uses advanced materials and technology to redirect the recoil of a projectile back into the projectile itself, making it an extremely damaging heavy weapon.
    """
    
    let Machinegunlight = CompendiumWeapon(context: context)
    Machinegunlight.name = "Machine gun, light"
    Machinegunlight.type = "Heavy Weapon"
    Machinegunlight.level = 8
    Machinegunlight.price = 8600
    Machinegunlight.damage = "2d10"
    Machinegunlight.damageType = "P"
    Machinegunlight.range = 60
    Machinegunlight.critical = "—"
    Machinegunlight.capacity = 60
    Machinegunlight.usage = 2
    Machinegunlight.bulk = 2
    Machinegunlight.special = "Analog, automatic"
    Machinegunlight.content = """
    The most basic and portable machine guns are known as squad guns for their popularity among mercenary groups. Light, medium, and heavy machine guns remain reliable heavy weapons for their automatic fire and damage capability.
    """
    
    let Xgengunadvanced = CompendiumWeapon(context: context)
    Xgengunadvanced.name = "X-gen gun, advanced"
    Xgengunadvanced.type = "Heavy Weapon"
    Xgengunadvanced.level = 9
    Xgengunadvanced.price = 13100
    Xgengunadvanced.damage = "2d12"
    Xgengunadvanced.damageType = "P"
    Xgengunadvanced.range = 120
    Xgengunadvanced.critical = "—"
    Xgengunadvanced.capacity = 100
    Xgengunadvanced.usage = 2
    Xgengunadvanced.bulk = 2
    Xgengunadvanced.special = "Automatic"
    Xgengunadvanced.content = """
    X-gen guns are named for their external generator—a power pack that drives the automatic feed of the weapon. They are common on fortified bases and in large armed encampments.
    """
    
    let Reactioncannonheavy = CompendiumWeapon(context: context)
    Reactioncannonheavy.name = "Reaction cannon, heavy"
    Reactioncannonheavy.type = "Heavy Weapon"
    Reactioncannonheavy.level = 10
    Reactioncannonheavy.price = 16750
    Reactioncannonheavy.damage = "3d10"
    Reactioncannonheavy.damageType = "P"
    Reactioncannonheavy.range = 100
    Reactioncannonheavy.critical = "—"
    Reactioncannonheavy.capacity = 6
    Reactioncannonheavy.usage = 1
    Reactioncannonheavy.bulk = 3
    Reactioncannonheavy.special = "Penetrating"
    Reactioncannonheavy.content = """
    An ancient yet still popular vesk weapon, the reaction cannon uses advanced materials and technology to redirect the recoil of a projectile back into the projectile itself, making it an extremely damaging heavy weapon.
    """
    
    let Stellarcannonlight = CompendiumWeapon(context: context)
    Stellarcannonlight.name = "Stellar cannon, light"
    Stellarcannonlight.type = "Heavy Weapon"
    Stellarcannonlight.level = 10
    Stellarcannonlight.price = 19200
    Stellarcannonlight.damage = "2d12"
    Stellarcannonlight.damageType = "P"
    Stellarcannonlight.range = 30
    Stellarcannonlight.critical = "Wound"
    Stellarcannonlight.capacity = 18
    Stellarcannonlight.usage = 6
    Stellarcannonlight.bulk = 2
    Stellarcannonlight.special = "Blast"
    Stellarcannonlight.content = """
    A Stellar cannon is a portable, handheld cannon that fires exploding shells filled with dense flechettes that shred nearby targets. Stellar cannons have a limited range, but they deal traumatic damage to large areas.
    """
    
    let Crossbolteradvanced = CompendiumWeapon(context: context)
    Crossbolteradvanced.name = "Crossbolter, advanced"
    Crossbolteradvanced.type = "Heavy Weapon"
    Crossbolteradvanced.level = 11
    Crossbolteradvanced.price = 21900
    Crossbolteradvanced.damage = "4d10"
    Crossbolteradvanced.damageType = "P"
    Crossbolteradvanced.range = 70
    Crossbolteradvanced.critical = "—"
    Crossbolteradvanced.capacity = 12
    Crossbolteradvanced.usage = 4
    Crossbolteradvanced.bulk = 2
    Crossbolteradvanced.special = "Unwieldy"
    Crossbolteradvanced.content = """
    This weapon resembles a rifle with a crossbeam near the end of the barrel. A crossbolter uses mechanical power to fire arrows along the barrel. Grenade arrows can also be fired with a crossbolter.
    """
    
    let Machinegunmedium = CompendiumWeapon(context: context)
    Machinegunmedium.name = "Machine gun, medium"
    Machinegunmedium.type = "Heavy Weapon"
    Machinegunmedium.level = 11
    Machinegunmedium.price = 23100
    Machinegunmedium.damage = "3d10"
    Machinegunmedium.damageType = "P"
    Machinegunmedium.range = 60
    Machinegunmedium.critical = "—"
    Machinegunmedium.capacity = 60
    Machinegunmedium.usage = 2
    Machinegunmedium.bulk = 2
    Machinegunmedium.special = "Analog, automatic"
    Machinegunmedium.content = """
    The most basic and portable machine guns are known as squad guns for their popularity among mercenary groups. Light, medium, and heavy machine guns remain reliable heavy weapons for their automatic fire and damage capability.
    """
    
    let Xgengunelite = CompendiumWeapon(context: context)
    Xgengunelite.name = "X-gen gun, elite"
    Xgengunelite.type = "Heavy Weapon"
    Xgengunelite.level = 13
    Xgengunelite.price = 53700
    Xgengunelite.damage = "4d12"
    Xgengunelite.damageType = "P"
    Xgengunelite.range = 120
    Xgengunelite.critical = "—"
    Xgengunelite.capacity = 100
    Xgengunelite.usage = 2
    Xgengunelite.bulk = 2
    Xgengunelite.special = "Automatic"
    Xgengunelite.content = """
    X-gen guns are named for their external generator—a power pack that drives the automatic feed of the weapon. They are common on fortified bases and in large armed encampments.
    """
    
    let Crossbolterelite = CompendiumWeapon(context: context)
    Crossbolterelite.name = "Crossbolter, elite"
    Crossbolterelite.type = "Heavy Weapon"
    Crossbolterelite.level = 14
    Crossbolterelite.price = 71400
    Crossbolterelite.damage = "6d10"
    Crossbolterelite.damageType = "P"
    Crossbolterelite.range = 60
    Crossbolterelite.critical = "—"
    Crossbolterelite.capacity = 30
    Crossbolterelite.usage = 6
    Crossbolterelite.bulk = 2
    Crossbolterelite.special = "Unwieldy"
    Crossbolterelite.content = """
    This weapon resembles a rifle with a crossbeam near the end of the barrel. A crossbolter uses mechanical power to fire arrows along the barrel. Grenade arrows can also be fired with a crossbolter.
    """
    
    let Reactioncannonadvanced = CompendiumWeapon(context: context)
    Reactioncannonadvanced.name = "Reaction cannon, advanced"
    Reactioncannonadvanced.type = "Heavy Weapon"
    Reactioncannonadvanced.level = 14
    Reactioncannonadvanced.price = 73000
    Reactioncannonadvanced.damage = "6d10"
    Reactioncannonadvanced.damageType = "P"
    Reactioncannonadvanced.range = 100
    Reactioncannonadvanced.critical = "—"
    Reactioncannonadvanced.capacity = 6
    Reactioncannonadvanced.usage = 1
    Reactioncannonadvanced.bulk = 3
    Reactioncannonadvanced.special = "Penetrating"
    Reactioncannonadvanced.content = """
    An ancient yet still popular vesk weapon, the reaction cannon uses advanced materials and technology to redirect the recoil of a projectile back into the projectile itself, making it an extremely damaging heavy weapon.
    """
    
    let Stellarcannonheavy = CompendiumWeapon(context: context)
    Stellarcannonheavy.name = "Stellar cannon, heavy"
    Stellarcannonheavy.type = "Heavy Weapon"
    Stellarcannonheavy.level = 15
    Stellarcannonheavy.price = 122800
    Stellarcannonheavy.damage = "4d12"
    Stellarcannonheavy.damageType = "P"
    Stellarcannonheavy.range = 30
    Stellarcannonheavy.critical = "Wound"
    Stellarcannonheavy.capacity = 32
    Stellarcannonheavy.usage = 8
    Stellarcannonheavy.bulk = 2
    Stellarcannonheavy.special = "Blast"
    Stellarcannonheavy.content = """
    A Stellar cannon is a portable, handheld cannon that fires exploding shells filled with dense flechettes that shred nearby targets. Stellar cannons have a limited range, but they deal traumatic damage to large areas.
    """
    
    let Machinegunheavy = CompendiumWeapon(context: context)
    Machinegunheavy.name = "Machine gun, heavy"
    Machinegunheavy.type = "Heavy Weapon"
    Machinegunheavy.level = 17
    Machinegunheavy.price = 220300
    Machinegunheavy.damage = "7d10"
    Machinegunheavy.damageType = "P"
    Machinegunheavy.range = 120
    Machinegunheavy.critical = "—"
    Machinegunheavy.capacity = 100
    Machinegunheavy.usage = 4
    Machinegunheavy.bulk = 2
    Machinegunheavy.special = "Analog, automatic"
    Machinegunheavy.content = """
    The most basic and portable machine guns are known as squad guns for their popularity among mercenary groups. Light, medium, and heavy machine guns remain reliable heavy weapons for their automatic fire and damage capability.
    """
    
    let Reactioncannonelite = CompendiumWeapon(context: context)
    Reactioncannonelite.name = "Reaction cannon, elite"
    Reactioncannonelite.type = "Heavy Weapon"
    Reactioncannonelite.level = 17
    Reactioncannonelite.price = 244000
    Reactioncannonelite.damage = "8d10"
    Reactioncannonelite.damageType = "P"
    Reactioncannonelite.range = 100
    Reactioncannonelite.critical = "—"
    Reactioncannonelite.capacity = 6
    Reactioncannonelite.usage = 1
    Reactioncannonelite.bulk = 3
    Reactioncannonelite.special = "Penetrating"
    Reactioncannonelite.content = """
    An ancient yet still popular vesk weapon, the reaction cannon uses advanced materials and technology to redirect the recoil of a projectile back into the projectile itself, making it an extremely damaging heavy weapon.
    """
    
    let Crossbolterparagon = CompendiumWeapon(context: context)
    Crossbolterparagon.name = "Crossbolter, paragon"
    Crossbolterparagon.type = "Heavy Weapon"
    Crossbolterparagon.level = 18
    Crossbolterparagon.price = 327200
    Crossbolterparagon.damage = "10d10"
    Crossbolterparagon.damageType = "P"
    Crossbolterparagon.range = 60
    Crossbolterparagon.critical = "—"
    Crossbolterparagon.capacity = 40
    Crossbolterparagon.usage = 8
    Crossbolterparagon.bulk = 2
    Crossbolterparagon.special = "Unwieldy"
    Crossbolterparagon.content = """
    This weapon resembles a rifle with a crossbeam near the end of the barrel. A crossbolter uses mechanical power to fire arrows along the barrel. Grenade arrows can also be fired with a crossbolter.
    """
    
    let Reactioncannonparagon = CompendiumWeapon(context: context)
    Reactioncannonparagon.name = "Reaction cannon, paragon"
    Reactioncannonparagon.type = "Heavy Weapon"
    Reactioncannonparagon.level = 20
    Reactioncannonparagon.price = 810000
    Reactioncannonparagon.damage = "12d10"
    Reactioncannonparagon.damageType = "P"
    Reactioncannonparagon.range = 100
    Reactioncannonparagon.critical = "—"
    Reactioncannonparagon.capacity = 6
    Reactioncannonparagon.usage = 1
    Reactioncannonparagon.bulk = 3
    Reactioncannonparagon.special = "Penetrating"
    Reactioncannonparagon.content = """
    An ancient yet still popular vesk weapon, the reaction cannon uses advanced materials and technology to redirect the recoil of a projectile back into the projectile itself, making it an extremely damaging heavy weapon.
    """
    
    let Xgengunparagon = CompendiumWeapon(context: context)
    Xgengunparagon.name = "X-gen gun, paragon"
    Xgengunparagon.type = "Heavy Weapon"
    Xgengunparagon.level = 20
    Xgengunparagon.price = 826000
    Xgengunparagon.damage = "9d12"
    Xgengunparagon.damageType = "P"
    Xgengunparagon.range = 120
    Xgengunparagon.critical = "—"
    Xgengunparagon.capacity = 100
    Xgengunparagon.usage = 2
    Xgengunparagon.bulk = 2
    Xgengunparagon.special = "Automatic"
    Xgengunparagon.content = """
    X-gen guns are named for their external generator—a power pack that drives the automatic feed of the weapon. They are common on fortified bases and in large armed encampments.
    """
    
    let Anaciteioncannonstatic = CompendiumWeapon(context: context)
    Anaciteioncannonstatic.name = "Anacite ion cannon, static"
    Anaciteioncannonstatic.type = "Heavy Weapon"
    Anaciteioncannonstatic.level = 3
    Anaciteioncannonstatic.price = 1550
    Anaciteioncannonstatic.damage = "1d10"
    Anaciteioncannonstatic.damageType = "E"
    Anaciteioncannonstatic.range = 20
    Anaciteioncannonstatic.critical = "Staggered"
    Anaciteioncannonstatic.capacity = 20
    Anaciteioncannonstatic.usage = 2
    Anaciteioncannonstatic.bulk = 2
    Anaciteioncannonstatic.special = "Line, lockdown, unwieldy"
    Anaciteioncannonstatic.content = """
    This heavy weapon was designed by law-enforcement agencies for capturing criminal constructs without completely destroying them.
    """
    
    let Shockcasterstatic = CompendiumWeapon(context: context)
    Shockcasterstatic.name = "Shock caster, static"
    Shockcasterstatic.type = "Heavy Weapon"
    Shockcasterstatic.level = 6
    Shockcasterstatic.price = 4620
    Shockcasterstatic.damage = "1d12"
    Shockcasterstatic.damageType = "E"
    Shockcasterstatic.range = 40
    Shockcasterstatic.critical = "—"
    Shockcasterstatic.capacity = 40
    Shockcasterstatic.usage = 2
    Shockcasterstatic.bulk = 2
    Shockcasterstatic.special = "Explode (10 ft.), unwieldy"
    Shockcasterstatic.content = """
    Shock casters fire a blast of electrical energy that explodes when it impacts, creating an electrical storm that can damage and stun anyone within its radius.
    """
    
    let Anaciteioncannonaurora = CompendiumWeapon(context: context)
    Anaciteioncannonaurora.name = "Anacite ion cannon, aurora"
    Anaciteioncannonaurora.type = "Heavy Weapon"
    Anaciteioncannonaurora.level = 8
    Anaciteioncannonaurora.price = 10900
    Anaciteioncannonaurora.damage = "2d10"
    Anaciteioncannonaurora.damageType = "E"
    Anaciteioncannonaurora.range = 45
    Anaciteioncannonaurora.critical = "Staggered"
    Anaciteioncannonaurora.capacity = 40
    Anaciteioncannonaurora.usage = 4
    Anaciteioncannonaurora.bulk = 2
    Anaciteioncannonaurora.special = "Line, lockdown, unwieldy"
    Anaciteioncannonaurora.content = """
    This heavy weapon was designed by law-enforcement agencies for capturing criminal constructs without completely destroying them.
    """
    
    let Shockcasteraurora = CompendiumWeapon(context: context)
    Shockcasteraurora.name = "Shock caster, aurora"
    Shockcasteraurora.type = "Heavy Weapon"
    Shockcasteraurora.level = 10
    Shockcasteraurora.price = 19100
    Shockcasteraurora.damage = "2d12"
    Shockcasteraurora.damageType = "E"
    Shockcasteraurora.range = 40
    Shockcasteraurora.critical = "—"
    Shockcasteraurora.capacity = 40
    Shockcasteraurora.usage = 4
    Shockcasteraurora.bulk = 2
    Shockcasteraurora.special = "Explode (15 ft.), unwieldy"
    Shockcasteraurora.content = """
    Shock casters fire a blast of electrical energy that explodes when it impacts, creating an electrical storm that can damage and stun anyone within its radius.
    """
    
    let Anaciteioncannonstorm = CompendiumWeapon(context: context)
    Anaciteioncannonstorm.name = "Anacite ion cannon, storm"
    Anaciteioncannonstorm.type = "Heavy Weapon"
    Anaciteioncannonstorm.level = 13
    Anaciteioncannonstorm.price = 52900
    Anaciteioncannonstorm.damage = "4d10"
    Anaciteioncannonstorm.damageType = "E"
    Anaciteioncannonstorm.range = 75
    Anaciteioncannonstorm.critical = "Staggered"
    Anaciteioncannonstorm.capacity = 80
    Anaciteioncannonstorm.usage = 5
    Anaciteioncannonstorm.bulk = 2
    Anaciteioncannonstorm.special = "Line, lockdown, unwieldy"
    Anaciteioncannonstorm.content = """
    This heavy weapon was designed by law-enforcement agencies for capturing criminal constructs without completely destroying them.
    """
    
    let Shockcasterstorm = CompendiumWeapon(context: context)
    Shockcasterstorm.name = "Shock caster, storm"
    Shockcasterstorm.type = "Heavy Weapon"
    Shockcasterstorm.level = 16
    Shockcasterstorm.price = 164800
    Shockcasterstorm.damage = "5d12"
    Shockcasterstorm.damageType = "E"
    Shockcasterstorm.range = 40
    Shockcasterstorm.critical = "—"
    Shockcasterstorm.capacity = 100
    Shockcasterstorm.usage = 10
    Shockcasterstorm.bulk = 2
    Shockcasterstorm.special = "Explode (20 ft.), unwieldy"
    Shockcasterstorm.content = """
    Shock casters fire a blast of electrical energy that explodes when it impacts, creating an electrical storm that can damage and stun anyone within its radius.
    """
    
    let Anaciteioncannontempest = CompendiumWeapon(context: context)
    Anaciteioncannontempest.name = "Anacite ion cannon, tempest"
    Anaciteioncannontempest.type = "Heavy Weapon"
    Anaciteioncannontempest.level = 18
    Anaciteioncannontempest.price = 441000
    Anaciteioncannontempest.damage = "6d10"
    Anaciteioncannontempest.damageType = "E"
    Anaciteioncannontempest.range = 100
    Anaciteioncannontempest.critical = "Staggered"
    Anaciteioncannontempest.capacity = 100
    Anaciteioncannontempest.usage = 10
    Anaciteioncannontempest.bulk = 2
    Anaciteioncannontempest.special = "Line, lockdown, unwieldy"
    Anaciteioncannontempest.content = """
    This heavy weapon was designed by law-enforcement agencies for capturing criminal constructs without completely destroying them.
    """
    
    let Shockcastertempest = CompendiumWeapon(context: context)
    Shockcastertempest.name = "Shock caster, tempest"
    Shockcastertempest.type = "Heavy Weapon"
    Shockcastertempest.level = 20
    Shockcastertempest.price = 735000
    Shockcastertempest.damage = "7d12"
    Shockcastertempest.damageType = "E"
    Shockcastertempest.range = 40
    Shockcastertempest.critical = "—"
    Shockcastertempest.capacity = 100
    Shockcastertempest.usage = 10
    Shockcastertempest.bulk = 2
    Shockcastertempest.special = "Explode (20 ft.), unwieldy"
    Shockcastertempest.content = """
    Shock casters fire a blast of electrical energy that explodes when it impacts, creating an electrical storm that can damage and stun anyone within its radius.
    """
    
    let Screamerthunderstrike = CompendiumWeapon(context: context)
    Screamerthunderstrike.name = "Screamer, thunderstrike"
    Screamerthunderstrike.type = "Heavy Weapon"
    Screamerthunderstrike.level = 5
    Screamerthunderstrike.price = 3350
    Screamerthunderstrike.damage = "1d10"
    Screamerthunderstrike.damageType = "O"
    Screamerthunderstrike.range = 30
    Screamerthunderstrike.critical = "Deafen"
    Screamerthunderstrike.capacity = 40
    Screamerthunderstrike.usage = 4
    Screamerthunderstrike.bulk = 2
    Screamerthunderstrike.special = "Blast, unwieldy"
    Screamerthunderstrike.content = """
    A screamer is a circular metal device with two handles on the back. The front of a screamer projects a cone of sonic energy that can damage and deafen anyone within the weapon’s area of effect.
    """
    
    let ScreamerLFD = CompendiumWeapon(context: context)
    ScreamerLFD.name = "Screamer, LFD"
    ScreamerLFD.type = "Heavy Weapon"
    ScreamerLFD.level = 9
    ScreamerLFD.price = 14000
    ScreamerLFD.damage = "2d10"
    ScreamerLFD.damageType = "O"
    ScreamerLFD.range = 60
    ScreamerLFD.critical = "Deafen"
    ScreamerLFD.capacity = 80
    ScreamerLFD.usage = 8
    ScreamerLFD.bulk = 2
    ScreamerLFD.special = "Blast, unwieldy"
    ScreamerLFD.content = """
    A screamer is a circular metal device with two handles on the back. The front of a screamer projects a cone of sonic energy that can damage and deafen anyone within the weapon’s area of effect.
    """
    
    let ScreamerHFD = CompendiumWeapon(context: context)
    ScreamerHFD.name = "Screamer, HFD"
    ScreamerHFD.type = "Heavy Weapon"
    ScreamerHFD.level = 15
    ScreamerHFD.price = 107500
    ScreamerHFD.damage = "4d10"
    ScreamerHFD.damageType = "O"
    ScreamerHFD.range = 60
    ScreamerHFD.critical = "Deafen"
    ScreamerHFD.capacity = 100
    ScreamerHFD.usage = 10
    ScreamerHFD.bulk = 2
    ScreamerHFD.special = "Blast, unwieldy"
    ScreamerHFD.content = """
    A screamer is a circular metal device with two handles on the back. The front of a screamer projects a cone of sonic energy that can damage and deafen anyone within the weapon’s area of effect.
    """
    
    let NILgrenadelaunchermerc = CompendiumWeapon(context: context)
    NILgrenadelaunchermerc.name = "NIL grenade launcher, merc"
    NILgrenadelaunchermerc.type = "Heavy Weapon"
    NILgrenadelaunchermerc.level = 1
    NILgrenadelaunchermerc.price = 280
    NILgrenadelaunchermerc.range = 60
    NILgrenadelaunchermerc.critical = "—"
    NILgrenadelaunchermerc.capacity = 6
    NILgrenadelaunchermerc.usage = 1
    NILgrenadelaunchermerc.bulk = 2
    NILgrenadelaunchermerc.special = "Analog"
    NILgrenadelaunchermerc.content = """
    NIL (an acronym for “neutronic individual launcher”) grenade launchers are the most common grenade launcher available on the market. NILs can be fitted with any sort of grenade as ammunition. Grenades are loaded individually, rather than in magazines. You can load different types of grenades into a NIL grenade launcher, and you can select which grenade to fire as part of the action used to make an attack.
    """
    
    let NILgrenadelaunchersquad = CompendiumWeapon(context: context)
    NILgrenadelaunchersquad.name = "NIL grenade launcher, squad"
    NILgrenadelaunchersquad.type = "Heavy Weapon"
    NILgrenadelaunchersquad.level = 8
    NILgrenadelaunchersquad.price = 9400
    NILgrenadelaunchersquad.range = 70
    NILgrenadelaunchersquad.critical = "—"
    NILgrenadelaunchersquad.capacity = 12
    NILgrenadelaunchersquad.usage = 1
    NILgrenadelaunchersquad.bulk = 3
    NILgrenadelaunchersquad.special = "Analog"
    NILgrenadelaunchersquad.content = """
    NIL (an acronym for “neutronic individual launcher”) grenade launchers are the most common grenade launcher available on the market. NILs can be fitted with any sort of grenade as ammunition. Grenades are loaded individually, rather than in magazines. You can load different types of grenades into a NIL grenade launcher, and you can select which grenade to fire as part of the action used to make an attack.
    """
    
    let IMDSmissilelauncher = CompendiumWeapon(context: context)
    IMDSmissilelauncher.name = "IMDS missile launcher"
    IMDSmissilelauncher.type = "Heavy Weapon"
    IMDSmissilelauncher.level = 10
    IMDSmissilelauncher.price = 18200
    IMDSmissilelauncher.range = 80
    IMDSmissilelauncher.critical = "—"
    IMDSmissilelauncher.capacity = 1
    IMDSmissilelauncher.usage = 1
    IMDSmissilelauncher.bulk = 2
    IMDSmissilelauncher.special = "—"
    IMDSmissilelauncher.content = """
    IMDS (an acronym for “individual missile delivery system”) missile launchers are the most common missile launchers currently on the market. IMDS launchers fire individual missiles as ammunition and use the damage listed for the missiles fired out of them.
    """
    

    
}

func snipers() {
    
    let Shobhadhorizonstrikertactical = CompendiumWeapon(context: context)
    Shobhadhorizonstrikertactical.name = "Shobhad horizon striker, tactical"
    Shobhadhorizonstrikertactical.type = "Sniper"
    Shobhadhorizonstrikertactical.level = 1
    Shobhadhorizonstrikertactical.price = 440
    Shobhadhorizonstrikertactical.damage = "2d4"
    Shobhadhorizonstrikertactical.damageType = "P"
    Shobhadhorizonstrikertactical.range = 100
    Shobhadhorizonstrikertactical.critical = "—"
    Shobhadhorizonstrikertactical.capacity = 2
    Shobhadhorizonstrikertactical.usage = 1
    Shobhadhorizonstrikertactical.bulk = 2
    Shobhadhorizonstrikertactical.special = "Analog, sniper (500 ft.), unwieldy"
    Shobhadhorizonstrikertactical.content = """
    Refined from traditional shobhad designs stretching back to antiquity, a horizon striker has remarkable range.
    """
    
    let Shirreneyerifletactical = CompendiumWeapon(context: context)
    Shirreneyerifletactical.name = "Shirren-eye rifle, tactical"
    Shirreneyerifletactical.type = "Sniper"
    Shirreneyerifletactical.level = 2
    Shirreneyerifletactical.price = 755
    Shirreneyerifletactical.damage = "1d10"
    Shirreneyerifletactical.damageType = "P"
    Shirreneyerifletactical.range = 70
    Shirreneyerifletactical.critical = "—"
    Shirreneyerifletactical.capacity = 1
    Shirreneyerifletactical.usage = 1
    Shirreneyerifletactical.bulk = 1
    Shirreneyerifletactical.special = "Analog, sniper (250 ft.), unwieldy"
    Shirreneyerifletactical.content = """
    Shirren-eye rifles are named for their compound sights, which resemble the eyes of the insectile race, but are rarely manufactured by shirren companies. Shirren-eye rifles are extremely accurate and favored by snipers and sharpshooters.
    """
    
    let Shobhadhorizonstrikeradvanced = CompendiumWeapon(context: context)
    Shobhadhorizonstrikeradvanced.name = "Shobhad horizon striker, advanced"
    Shobhadhorizonstrikeradvanced.type = "Sniper"
    Shobhadhorizonstrikeradvanced.level = 6
    Shobhadhorizonstrikeradvanced.price = 4750
    Shobhadhorizonstrikeradvanced.damage = "3d4"
    Shobhadhorizonstrikeradvanced.damageType = "P"
    Shobhadhorizonstrikeradvanced.range = 120
    Shobhadhorizonstrikeradvanced.critical = "—"
    Shobhadhorizonstrikeradvanced.capacity = 2
    Shobhadhorizonstrikeradvanced.usage = 1
    Shobhadhorizonstrikeradvanced.bulk = 2
    Shobhadhorizonstrikeradvanced.special = "Analog, sniper (1,000 ft.), unwieldy"
    Shobhadhorizonstrikeradvanced.content = """
    Refined from traditional shobhad designs stretching back to antiquity, a horizon striker has remarkable range.
    """
    
    let Shirreneyerifleadvanced = CompendiumWeapon(context: context)
    Shirreneyerifleadvanced.name = "Shirren-eye rifle, advanced"
    Shirreneyerifleadvanced.type = "Sniper"
    Shirreneyerifleadvanced.level = 8
    Shirreneyerifleadvanced.price = 9350
    Shirreneyerifleadvanced.damage = "2d10"
    Shirreneyerifleadvanced.damageType = "P"
    Shirreneyerifleadvanced.range = 70
    Shirreneyerifleadvanced.critical = "—"
    Shirreneyerifleadvanced.capacity = 4
    Shirreneyerifleadvanced.usage = 1
    Shirreneyerifleadvanced.bulk = 2
    Shirreneyerifleadvanced.special = "Analog, sniper (500 ft.), unwieldy"
    Shirreneyerifleadvanced.content = """
    Shirren-eye rifles are named for their compound sights, which resemble the eyes of the insectile race, but are rarely manufactured by shirren companies. Shirren-eye rifles are extremely accurate and favored by snipers and sharpshooters.
    """
    
    let Shobhadhorizonstrikerelite = CompendiumWeapon(context: context)
    Shobhadhorizonstrikerelite.name = "Shobhad horizon striker, elite"
    Shobhadhorizonstrikerelite.type = "Sniper"
    Shobhadhorizonstrikerelite.level = 11
    Shobhadhorizonstrikerelite.price = 27300
    Shobhadhorizonstrikerelite.damage = "6d4"
    Shobhadhorizonstrikerelite.damageType = "P"
    Shobhadhorizonstrikerelite.range = 140
    Shobhadhorizonstrikerelite.critical = "—"
    Shobhadhorizonstrikerelite.capacity = 2
    Shobhadhorizonstrikerelite.usage = 1
    Shobhadhorizonstrikerelite.bulk = 2
    Shobhadhorizonstrikerelite.special = "Analog, sniper (1,250 ft.), unwieldy"
    Shobhadhorizonstrikerelite.content = """
    Refined from traditional shobhad designs stretching back to antiquity, a horizon striker has remarkable range.
    """
    
    let Shirreneyerifleelite = CompendiumWeapon(context: context)
    Shirreneyerifleelite.name = "Shirren-eye rifle, elite"
    Shirreneyerifleelite.type = "Sniper"
    Shirreneyerifleelite.level = 13
    Shirreneyerifleelite.price = 54000
    Shirreneyerifleelite.damage = "4d10"
    Shirreneyerifleelite.damageType = "P"
    Shirreneyerifleelite.range = 80
    Shirreneyerifleelite.critical = "—"
    Shirreneyerifleelite.capacity = 6
    Shirreneyerifleelite.usage = 1
    Shirreneyerifleelite.bulk = 2
    Shirreneyerifleelite.special = "Analog, sniper (750 ft.), unwieldy"
    Shirreneyerifleelite.content = """
    Shirren-eye rifles are named for their compound sights, which resemble the eyes of the insectile race, but are rarely manufactured by shirren companies. Shirren-eye rifles are extremely accurate and favored by snipers and sharpshooters.
    """
    
    let Shirreneyerifleparagon = CompendiumWeapon(context: context)
    Shirreneyerifleparagon.name = "Shirren-eye rifle, paragon"
    Shirreneyerifleparagon.type = "Sniper"
    Shirreneyerifleparagon.level = 16
    Shirreneyerifleparagon.price = 147200
    Shirreneyerifleparagon.damage = "6d10"
    Shirreneyerifleparagon.damageType = "P"
    Shirreneyerifleparagon.range = 80
    Shirreneyerifleparagon.critical = "—"
    Shirreneyerifleparagon.capacity = 6
    Shirreneyerifleparagon.usage = 1
    Shirreneyerifleparagon.bulk = 1
    Shirreneyerifleparagon.special = "Analog, sniper (1,000 ft.), unwieldy"
    Shirreneyerifleparagon.content = """
    Shirren-eye rifles are named for their compound sights, which resemble the eyes of the insectile race, but are rarely manufactured by shirren companies. Shirren-eye rifles are extremely accurate and favored by snipers and sharpshooters.
    """
    
    let Shobhadhorizonstrikerparagon = CompendiumWeapon(context: context)
    Shobhadhorizonstrikerparagon.name = "Shobhad horizon striker, paragon"
    Shobhadhorizonstrikerparagon.type = "Sniper"
    Shobhadhorizonstrikerparagon.level = 16
    Shobhadhorizonstrikerparagon.price = 185000
    Shobhadhorizonstrikerparagon.damage = "8d8"
    Shobhadhorizonstrikerparagon.damageType = "P"
    Shobhadhorizonstrikerparagon.range = 160
    Shobhadhorizonstrikerparagon.critical = "—"
    Shobhadhorizonstrikerparagon.capacity = 2
    Shobhadhorizonstrikerparagon.usage = 1
    Shobhadhorizonstrikerparagon.bulk = 2
    Shobhadhorizonstrikerparagon.special = "Analog, sniper (1,500 ft.), unwieldy"
    Shobhadhorizonstrikerparagon.content = """
    Refined from traditional shobhad designs stretching back to antiquity, a horizon striker has remarkable range.
    """
    
    let Shirreneyeriflewarpshot = CompendiumWeapon(context: context)
    Shirreneyeriflewarpshot.name = "Shirren-eye rifle, warpshot"
    Shirreneyeriflewarpshot.type = "Sniper"
    Shirreneyeriflewarpshot.level = 20
    Shirreneyeriflewarpshot.price = 740800
    Shirreneyeriflewarpshot.damage = "10d10"
    Shirreneyeriflewarpshot.damageType = "P"
    Shirreneyeriflewarpshot.range = 80
    Shirreneyeriflewarpshot.critical = "—"
    Shirreneyeriflewarpshot.capacity = 4
    Shirreneyeriflewarpshot.usage = 1
    Shirreneyeriflewarpshot.bulk = 1
    Shirreneyeriflewarpshot.special = "Analog, sniper (1,000 ft.), unwieldy"
    Shirreneyeriflewarpshot.content = """
    Shirren-eye rifles are named for their compound sights, which resemble the eyes of the insectile race, but are rarely manufactured by shirren companies. Shirren-eye rifles are extremely accurate and favored by snipers and sharpshooters.
    """
    

    
    
}

func grenades() {
    
    let FraggrenadeI = CompendiumWeapon(context: context)
    FraggrenadeI.name = "Frag grenade I"
    FraggrenadeI.type = "Grenade"
    FraggrenadeI.level = 1
    FraggrenadeI.price = 35
    FraggrenadeI.damage = "1d6"
    FraggrenadeI.damageType = "P"
    FraggrenadeI.range = 20
    FraggrenadeI.bulk = 0.1
    FraggrenadeI.special = "Explode (1d6 P, 15 ft.)"
    FraggrenadeI.content = """
    A fragmentary, or frag, grenade explodes in a cloud of shrapnel.
    """
    
    let ShockgrenadeI = CompendiumWeapon(context: context)
    ShockgrenadeI.name = "Shock grenade I"
    ShockgrenadeI.type = "Grenade"
    ShockgrenadeI.level = 1
    ShockgrenadeI.price = 130
    ShockgrenadeI.damage = "1d8"
    ShockgrenadeI.damageType = "E"
    ShockgrenadeI.range = 20
    ShockgrenadeI.bulk = 0.1
    ShockgrenadeI.special = "Explode (1d8 E, 15 ft.)"
    ShockgrenadeI.content = """
    A shock grenade releases a pulse of electrical energy on impact.
    """
    
    let Smokegrenade = CompendiumWeapon(context: context)
    Smokegrenade.name = "Smoke grenade"
    Smokegrenade.type = "Grenade"
    Smokegrenade.level = 1
    Smokegrenade.price = 40
    Smokegrenade.range = 20
    Smokegrenade.bulk = 0.1
    Smokegrenade.special = "Explode (smoke cloud 1 minute, 20 ft.)"
    Smokegrenade.content = """
    A smoke grenade deals no damage; instead, it releases a cloud of dense smoke. Each character who inhales smoke must succeed at a Fortitude saving throw each round (DC = 15 + 1 per previous check) or spend that round choking and coughing; he can do nothing else. A character who chokes for 2 consecutive rounds takes 1d6 nonlethal damage. (Active environmental protection from a suit of armor prevents this effect altogether.) Regardless of the armor a character wears, smoke obscures vision, granting concealment to anyone within it.
    """
    
    let StickybombgrenadeI = CompendiumWeapon(context: context)
    StickybombgrenadeI.name = "Stickybomb grenade I"
    StickybombgrenadeI.type = "Grenade"
    StickybombgrenadeI.level = 1
    StickybombgrenadeI.price = 170
    StickybombgrenadeI.range = 20
    StickybombgrenadeI.bulk = 0.1
    StickybombgrenadeI.special = "Explode (entangled 2d4 rounds, 10 ft.)"
    StickybombgrenadeI.content = """
    A stickybomb grenade detonates with a splash of adhesive resin.
    """
    
    let FlashgrenadeI = CompendiumWeapon(context: context)
    FlashgrenadeI.name = "Flash grenade I"
    FlashgrenadeI.type = "Grenade"
    FlashgrenadeI.level = 2
    FlashgrenadeI.price = 275
    FlashgrenadeI.range = 20
    FlashgrenadeI.bulk = 0.1
    FlashgrenadeI.special = "Explode (blinded 1d4 rounds, 5 ft.)"
    FlashgrenadeI.content = """
    When detonated, a flash grenade releases a pulse of intense radiance.
    """
    
    let IncendiarygrenadeI = CompendiumWeapon(context: context)
    IncendiarygrenadeI.name = "Incendiary grenade I"
    IncendiarygrenadeI.type = "Grenade"
    IncendiarygrenadeI.level = 2
    IncendiarygrenadeI.price = 375
    IncendiarygrenadeI.damage = "1d6"
    IncendiarygrenadeI.damageType = "F"
    IncendiarygrenadeI.range = 20
    IncendiarygrenadeI.bulk = 0.1
    IncendiarygrenadeI.special = "Explode (1d6 F, 1d4 burn, 5 ft.)"
    IncendiarygrenadeI.content = """
    Incendiary grenades detonate in a spray of superheated plasma.
    """
    
    let FraggrenadeII = CompendiumWeapon(context: context)
    FraggrenadeII.name = "Frag grenade II"
    FraggrenadeII.type = "Grenade"
    FraggrenadeII.level = 4
    FraggrenadeII.price = 700
    FraggrenadeII.damage = "2d6"
    FraggrenadeII.damageType = "P"
    FraggrenadeII.range = 20
    FraggrenadeII.bulk = 0.1
    FraggrenadeII.special = "Explode (2d6 P, 15 ft.)"
    FraggrenadeII.content = """
    A fragmentary, or frag, grenade explodes in a cloud of shrapnel.
    """
    
    let ScreamergrenadeI = CompendiumWeapon(context: context)
    ScreamergrenadeI.name = "Screamer grenade I"
    ScreamergrenadeI.type = "Grenade"
    ScreamergrenadeI.level = 4
    ScreamergrenadeI.price = 725
    ScreamergrenadeI.damage = "1d10"
    ScreamergrenadeI.damageType = "So"
    ScreamergrenadeI.range = 20
    ScreamergrenadeI.bulk = 0.1
    ScreamergrenadeI.special = "Explode (1d10 So, deafened 1d4 minutes, 15 ft.)"
    ScreamergrenadeI.content = """
    When detonated, a screamer grenade releases a piercing shriek of sonic energy.
    """
    
    let ShockgrenadeII = CompendiumWeapon(context: context)
    ShockgrenadeII.name = "Shock grenade II"
    ShockgrenadeII.type = "Grenade"
    ShockgrenadeII.level = 4
    ShockgrenadeII.price = 650
    ShockgrenadeII.damage = "1d12"
    ShockgrenadeII.damageType = "E"
    ShockgrenadeII.range = 20
    ShockgrenadeII.bulk = 0.1
    ShockgrenadeII.special = "Explode (1d12 E, 15 ft.)"
    ShockgrenadeII.content = """
    
    """
    
    let StickybombgrenadeII = CompendiumWeapon(context: context)
    StickybombgrenadeII.name = "Stickybomb grenade II"
    StickybombgrenadeII.type = "Grenade"
    StickybombgrenadeII.level = 4
    StickybombgrenadeII.price = 675
    StickybombgrenadeII.range = 20
    StickybombgrenadeII.bulk = 0.1
    StickybombgrenadeII.special = "Explode (entangled 2d4 rounds, 15 ft.)"
    StickybombgrenadeII.content = """
    A stickybomb grenade detonates with a splash of adhesive resin.
    """
    
    let CryogrenadeI = CompendiumWeapon(context: context)
    CryogrenadeI.name = "Cryo grenade I"
    CryogrenadeI.type = "Grenade"
    CryogrenadeI.level = 6
    CryogrenadeI.price = 1220
    CryogrenadeI.damage = "1d8"
    CryogrenadeI.damageType = "C"
    CryogrenadeI.range = 20
    CryogrenadeI.bulk = 0.1
    CryogrenadeI.special = "Explode (1d8 C, staggered, 10 ft.)"
    CryogrenadeI.content = """
    Cryo grenades release a blast of supercooled chemicals on impact, which immediately coalesce into freezing particles.
    """
    
    let FlashgrenadeII = CompendiumWeapon(context: context)
    FlashgrenadeII.name = "Flash grenade II"
    FlashgrenadeII.type = "Grenade"
    FlashgrenadeII.level = 6
    FlashgrenadeII.price = 1350
    FlashgrenadeII.range = 20
    FlashgrenadeII.bulk = 0.1
    FlashgrenadeII.special = "Explode (blinded 1d4 rounds, 10 ft.)"
    FlashgrenadeII.content = """
    
    """
    
    let IncendiarygrenadeII = CompendiumWeapon(context: context)
    IncendiarygrenadeII.name = "Incendiary grenade II"
    IncendiarygrenadeII.type = "Grenade"
    IncendiarygrenadeII.level = 6
    IncendiarygrenadeII.price = 1040
    IncendiarygrenadeII.damage = "2d6"
    IncendiarygrenadeII.damageType = "F"
    IncendiarygrenadeII.range = 20
    IncendiarygrenadeII.bulk = 0.1
    IncendiarygrenadeII.special = "Explode (2d6 F, 1d6 burn, 10 ft.)"
    IncendiarygrenadeII.content = """
    
    """
    
    let FraggrenadeIII = CompendiumWeapon(context: context)
    FraggrenadeIII.name = "Frag grenade III"
    FraggrenadeIII.type = "Grenade"
    FraggrenadeIII.level = 8
    FraggrenadeIII.price = 2560
    FraggrenadeIII.damage = "4d6"
    FraggrenadeIII.damageType = "P"
    FraggrenadeIII.range = 20
    FraggrenadeIII.bulk = 0.1
    FraggrenadeIII.special = "Explode (4d6 P, 15 ft.)"
    FraggrenadeIII.content = """
    A fragmentary, or frag, grenade explodes in a cloud of shrapnel.
    """
    
    let IncendiarygrenadeIII = CompendiumWeapon(context: context)
    IncendiarygrenadeIII.name = "Incendiary grenade III"
    IncendiarygrenadeIII.type = "Grenade"
    IncendiarygrenadeIII.level = 8
    IncendiarygrenadeIII.price = 2800
    IncendiarygrenadeIII.damage = "3d6"
    IncendiarygrenadeIII.damageType = "F"
    IncendiarygrenadeIII.range = 20
    IncendiarygrenadeIII.bulk = 0.1
    IncendiarygrenadeIII.special = "Explode (3d6 F, 1d6 burn, 10 ft.)"
    IncendiarygrenadeIII.content = """
    
    """
    
    let ScreamergrenadeII = CompendiumWeapon(context: context)
    ScreamergrenadeII.name = "Screamer grenade II"
    ScreamergrenadeII.type = "Grenade"
    ScreamergrenadeII.level = 8
    ScreamergrenadeII.price = 2720
    ScreamergrenadeII.damage = "2d10"
    ScreamergrenadeII.damageType = "So"
    ScreamergrenadeII.range = 20
    ScreamergrenadeII.bulk = 0.1
    ScreamergrenadeII.special = "Explode (2d10 So, deafened 1d4 minutes, 20 ft.)"
    ScreamergrenadeII.content = """
    
    """
    
    let CryogrenadeII = CompendiumWeapon(context: context)
    CryogrenadeII.name = "Cryo grenade II"
    CryogrenadeII.type = "Grenade"
    CryogrenadeII.level = 10
    CryogrenadeII.price = 5000
    CryogrenadeII.damage = "2d8"
    CryogrenadeII.damageType = "C"
    CryogrenadeII.range = 20
    CryogrenadeII.bulk = 0.1
    CryogrenadeII.special = "Explode (2d8 C, staggered, 15 ft.)"
    CryogrenadeII.content = """
    
    """
    
    let FraggrenadeIV = CompendiumWeapon(context: context)
    FraggrenadeIV.name = "Frag grenade IV"
    FraggrenadeIV.type = "Grenade"
    FraggrenadeIV.level = 10
    FraggrenadeIV.price = 5750
    FraggrenadeIV.damage = "6d6"
    FraggrenadeIV.damageType = "P"
    FraggrenadeIV.range = 20
    FraggrenadeIV.bulk = 0.1
    FraggrenadeIV.special = "Explode (6d6 P, 15 ft.)"
    FraggrenadeIV.content = """
    
    """
    
    let ShockgrenadeIII = CompendiumWeapon(context: context)
    ShockgrenadeIII.name = "Shock grenade III"
    ShockgrenadeIII.type = "Grenade"
    ShockgrenadeIII.level = 10
    ShockgrenadeIII.price = 5380
    ShockgrenadeIII.damage = "3d12"
    ShockgrenadeIII.damageType = "E"
    ShockgrenadeIII.range = 20
    ShockgrenadeIII.bulk = 0.1
    ShockgrenadeIII.special = "Explode (3d12 E, 15 ft.)"
    ShockgrenadeIII.content = """
    
    """
    
    let StickybombgrenadeIII = CompendiumWeapon(context: context)
    StickybombgrenadeIII.name = "Stickybomb grenade III"
    StickybombgrenadeIII.type = "Grenade"
    StickybombgrenadeIII.level = 10
    StickybombgrenadeIII.price = 5410
    StickybombgrenadeIII.range = 20
    StickybombgrenadeIII.bulk = 0.1
    StickybombgrenadeIII.special = "Explode (entangled 2d4 rounds, 20 ft.)"
    StickybombgrenadeIII.content = """
    A stickybomb grenade detonates with a splash of adhesive resin.
    """
    
    let FlashgrenadeIII = CompendiumWeapon(context: context)
    FlashgrenadeIII.name = "Flash grenade III"
    FlashgrenadeIII.type = "Grenade"
    FlashgrenadeIII.level = 12
    FlashgrenadeIII.price = 10400
    FlashgrenadeIII.range = 20
    FlashgrenadeIII.bulk = 0.1
    FlashgrenadeIII.special = "Explode (blinded 1d6 rounds, 15 ft.)"
    FlashgrenadeIII.content = """
    
    """
    
    let IncendiarygrenadeIV = CompendiumWeapon(context: context)
    IncendiarygrenadeIV.name = "Incendiary grenade IV"
    IncendiarygrenadeIV.type = "Grenade"
    IncendiarygrenadeIV.level = 12
    IncendiarygrenadeIV.price = 9380
    IncendiarygrenadeIV.damage = "5d6"
    IncendiarygrenadeIV.damageType = "F"
    IncendiarygrenadeIV.range = 20
    IncendiarygrenadeIV.bulk = 0.1
    IncendiarygrenadeIV.special = "Explode (5d6 F, 3d6 burn, 15 ft.)"
    IncendiarygrenadeIV.content = """
    
    """
    
    let ScreamergrenadeIII = CompendiumWeapon(context: context)
    ScreamergrenadeIII.name = "Screamer grenade III"
    ScreamergrenadeIII.type = "Grenade"
    ScreamergrenadeIII.level = 12
    ScreamergrenadeIII.price = 11300
    ScreamergrenadeIII.damage = "4d10"
    ScreamergrenadeIII.damageType = "So"
    ScreamergrenadeIII.range = 20
    ScreamergrenadeIII.bulk = 0.1
    ScreamergrenadeIII.special = "Explode (4d10 So, deafened 1d4 minutes, 25 ft.)"
    ScreamergrenadeIII.content = """
    
    """
    
    let CryogrenadeIII = CompendiumWeapon(context: context)
    CryogrenadeIII.name = "Cryo grenade III"
    CryogrenadeIII.type = "Grenade"
    CryogrenadeIII.level = 14
    CryogrenadeIII.price = 21100
    CryogrenadeIII.damage = "4d8"
    CryogrenadeIII.damageType = "C"
    CryogrenadeIII.range = 20
    CryogrenadeIII.bulk = 0.1
    CryogrenadeIII.special = "Explode (4d8 C, staggered, 20 ft.)"
    CryogrenadeIII.content = """
    
    """
    
    let FraggrenadeV = CompendiumWeapon(context: context)
    FraggrenadeV.name = "Frag grenade V"
    FraggrenadeV.type = "Grenade"
    FraggrenadeV.level = 14
    FraggrenadeV.price = 18750
    FraggrenadeV.damage = "10d6"
    FraggrenadeV.damageType = "P"
    FraggrenadeV.range = 20
    FraggrenadeV.bulk = 0.1
    FraggrenadeV.special = "Explode (10d6 P, 15 ft.)"
    FraggrenadeV.content = """
    A fragmentary, or frag, grenade explodes in a cloud of shrapnel.
    """
    
    let ShockgrenadeIV = CompendiumWeapon(context: context)
    ShockgrenadeIV.name = "Shock grenade IV"
    ShockgrenadeIV.type = "Grenade"
    ShockgrenadeIV.level = 14
    ShockgrenadeIV.price = 23600
    ShockgrenadeIV.damage = "6d12"
    ShockgrenadeIV.damageType = "E"
    ShockgrenadeIV.range = 20
    ShockgrenadeIV.bulk = 0.1
    ShockgrenadeIV.special = "Explode (6d12 E, 15 ft.)"
    ShockgrenadeIV.content = """
    
    """
    
    let FlashgrenadeIV = CompendiumWeapon(context: context)
    FlashgrenadeIV.name = "Flash grenade IV"
    FlashgrenadeIV.type = "Grenade"
    FlashgrenadeIV.level = 16
    FlashgrenadeIV.price = 53000
    FlashgrenadeIV.range = 20
    FlashgrenadeIV.bulk = 0.1
    FlashgrenadeIV.special = "Explode (blinded 1d8 rounds, 20 ft.)"
    FlashgrenadeIV.content = """
    When detonated, a flash grenade releases a pulse of intense radiance.
    """
    
    let FraggrenadeVI = CompendiumWeapon(context: context)
    FraggrenadeVI.name = "Frag grenade VI"
    FraggrenadeVI.type = "Grenade"
    FraggrenadeVI.level = 16
    FraggrenadeVI.price = 44600
    FraggrenadeVI.damage = "12d6"
    FraggrenadeVI.damageType = "P"
    FraggrenadeVI.range = 20
    FraggrenadeVI.bulk = 0.1
    FraggrenadeVI.special = "Explode (12d6 P, 15 ft.)"
    FraggrenadeVI.content = """
    A fragmentary, or frag, grenade explodes in a cloud of shrapnel.
    """
    
    let IncendiarygrenadeV = CompendiumWeapon(context: context)
    IncendiarygrenadeV.name = "Incendiary grenade V"
    IncendiarygrenadeV.type = "Grenade"
    IncendiarygrenadeV.level = 16
    IncendiarygrenadeV.price = 44000
    IncendiarygrenadeV.damage = "10d6"
    IncendiarygrenadeV.damageType = "F"
    IncendiarygrenadeV.range = 20
    IncendiarygrenadeV.bulk = 0.1
    IncendiarygrenadeV.special = "Explode (10d6 F, 5d6 burn, 15 ft.)"
    IncendiarygrenadeV.content = """
    Incendiary grenades detonate in a spray of superheated plasma.
    """
    
    let ScreamergrenadeIV = CompendiumWeapon(context: context)
    ScreamergrenadeIV.name = "Screamer grenade IV"
    ScreamergrenadeIV.type = "Grenade"
    ScreamergrenadeIV.level = 16
    ScreamergrenadeIV.price = 43500
    ScreamergrenadeIV.damage = "7d10"
    ScreamergrenadeIV.damageType = "So"
    ScreamergrenadeIV.range = 20
    ScreamergrenadeIV.bulk = 0.1
    ScreamergrenadeIV.special = "Explode (7d10 So, deafened 1d4 minutes, 30 ft.)"
    ScreamergrenadeIV.content = """
    When detonated, a screamer grenade releases a piercing shriek of sonic energy.
    """
    
    let CryogrenadeIV = CompendiumWeapon(context: context)
    CryogrenadeIV.name = "Cryo grenade IV"
    CryogrenadeIV.type = "Grenade"
    CryogrenadeIV.level = 18
    CryogrenadeIV.price = 108500
    CryogrenadeIV.damage = "6d8"
    CryogrenadeIV.damageType = "C"
    CryogrenadeIV.range = 20
    CryogrenadeIV.bulk = 0.1
    CryogrenadeIV.special = "Explode (6d8 C, staggered, 20 ft.)"
    CryogrenadeIV.content = """
    Cryo grenades release a blast of supercooled chemicals on impact, which immediately coalesce into freezing particles.
    """
    
    let FraggrenadeVII = CompendiumWeapon(context: context)
    FraggrenadeVII.name = "Frag grenade VII"
    FraggrenadeVII.type = "Grenade"
    FraggrenadeVII.level = 18
    FraggrenadeVII.price = 96900
    FraggrenadeVII.damage = "16d6"
    FraggrenadeVII.damageType = "P"
    FraggrenadeVII.range = 20
    FraggrenadeVII.bulk = 0.1
    FraggrenadeVII.special = "Explode (16d6 P, 15 ft.)"
    FraggrenadeVII.content = """
    A fragmentary, or frag, grenade explodes in a cloud of shrapnel.
    """
    
    let IncendiarygrenadeVI = CompendiumWeapon(context: context)
    IncendiarygrenadeVI.name = "Incendiary grenade VI"
    IncendiarygrenadeVI.type = "Grenade"
    IncendiarygrenadeVI.level = 18
    IncendiarygrenadeVI.price = 108800
    IncendiarygrenadeVI.damage = "12d6"
    IncendiarygrenadeVI.damageType = "F"
    IncendiarygrenadeVI.range = 20
    IncendiarygrenadeVI.bulk = 0.1
    IncendiarygrenadeVI.special = "Explode (12d6 F, 6d6 burn, 15 ft.)"
    IncendiarygrenadeVI.content = """
    Incendiary grenades detonate in a spray of superheated plasma.
    """
    
    let FraggrenadeVIII = CompendiumWeapon(context: context)
    FraggrenadeVIII.name = "Frag grenade VIII"
    FraggrenadeVIII.type = "Grenade"
    FraggrenadeVIII.level = 20
    FraggrenadeVIII.price = 216000
    FraggrenadeVIII.damage = "20d6"
    FraggrenadeVIII.damageType = "P"
    FraggrenadeVIII.range = 20
    FraggrenadeVIII.bulk = 0.1
    FraggrenadeVIII.special = "Explode (20d6 P, 15 ft.)"
    FraggrenadeVIII.content = """
    A fragmentary, or frag, grenade explodes in a cloud of shrapnel.
    """
    
    let ShockgrenadeV = CompendiumWeapon(context: context)
    ShockgrenadeV.name = "Shock grenade V"
    ShockgrenadeV.type = "Grenade"
    ShockgrenadeV.level = 20
    ShockgrenadeV.price = 110000
    ShockgrenadeV.damage = "9d12"
    ShockgrenadeV.damageType = "E"
    ShockgrenadeV.range = 20
    ShockgrenadeV.bulk = 0.1
    ShockgrenadeV.special = "Explode (9d12 E, 15 ft.)"
    ShockgrenadeV.content = """
    A shock grenade releases a pulse of electrical energy on impact.
    """
    

    
}

func specialWeapons() {
    
    let Carbonedgeshuriken = CompendiumWeapon(context: context)
    Carbonedgeshuriken.name = "Carbonedge shuriken (10)"
    Carbonedgeshuriken.type = "Special"
    Carbonedgeshuriken.level = 1
    Carbonedgeshuriken.price = 85
    Carbonedgeshuriken.damage = "1d4"
    Carbonedgeshuriken.damageType = "P"
    Carbonedgeshuriken.range = 10
    Carbonedgeshuriken.critical = "bleed 1d4"
    Carbonedgeshuriken.bulk = 0
    Carbonedgeshuriken.special = "Quick reload, thrown"
    Carbonedgeshuriken.content = """
    
    """
    
    let Nyfibernet = CompendiumWeapon(context: context)
    Nyfibernet.name = "Nyfiber net"
    Nyfibernet.type = "Special"
    Nyfibernet.level = 2
    Nyfibernet.price = 460
    Nyfibernet.range = 10
    Nyfibernet.critical = "—"
    Nyfibernet.bulk = 1
    Nyfibernet.special = ""
    Nyfibernet.content = """
    Created from specialized nylon fibers that contract in response to struggle, nyfiber nets are weighted along the edges to more effectively entangle their targets.
    """
    
    let Bow = CompendiumWeapon(context: context)
    Bow.name = "Bow"
    Bow.type = "Special"
    Bow.level = 1
    Bow.price = 255
    Bow.damage = "1d6"
    Bow.damageType = "P"
    Bow.range = 60
    Bow.critical = "—"
    Bow.bulk = 1
    Bow.special = "Quick reload"
    Bow.content = """
    Modern compound bows are made of aluminum alloys, for superior lightness and durability. The string is made of high-performance polyethylene. Bows fire arrows as ammunition, and they can also be used with grenade arrows for more customized damage and effects.
    """

    
}

//Items ################################################################################################################

func loadItems() {
    
    loadMagicItems()
    loadTechItems()
    loadHybridItems()
    
}


func loadMagicItems() {
    loadAeonStones()
    loadArtifacts()
    loadOther()
    loadRings()
    loadSerums()
    loadSpellAmpGemsAndTiaras()
}

func loadAeonStones() {
    
    let AeonStoneClearSpindle = CompendiumItem(context: context)
    AeonStoneClearSpindle.name = "Aeon Stone, Clear Spindle"
    AeonStoneClearSpindle.category = "Aeon Stone"
    AeonStoneClearSpindle.level = 1
    AeonStoneClearSpindle.price = 245
    AeonStoneClearSpindle.bulk = 0
    AeonStoneClearSpindle.content = """
    This aeon stone sustains you by negating the need for food or water.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneIridescentSpindle = CompendiumItem(context: context)
    AeonStoneIridescentSpindle.name = "Aeon Stone, Iridescent Spindle"
    AeonStoneIridescentSpindle.category = "Aeon Stone"
    AeonStoneIridescentSpindle.level = 2
    AeonStoneIridescentSpindle.price = 740
    AeonStoneIridescentSpindle.bulk = 0
    AeonStoneIridescentSpindle.content = """
    This aeon stone sustains you by negating the need to breathe.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneCloudyBlueRhomboid = CompendiumItem(context: context)
    AeonStoneCloudyBlueRhomboid.name = "Aeon Stone, Cloudy Blue Rhomboid"
    AeonStoneCloudyBlueRhomboid.category = "Aeon Stone"
    AeonStoneCloudyBlueRhomboid.level = 3
    AeonStoneCloudyBlueRhomboid.price = 1300
    AeonStoneCloudyBlueRhomboid.bulk = 0
    AeonStoneCloudyBlueRhomboid.content = """
    While this aeon stone orbits you, as a reaction while falling, you can cast flight (1st level), targeting only yourself (caster level 3rd). This aeon stone can be activated once per day.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneOpalescentWhitePyramid = CompendiumItem(context: context)
    AeonStoneOpalescentWhitePyramid.name = "Aeon Stone, Opalescent White Pyramid"
    AeonStoneOpalescentWhitePyramid.category = "Aeon Stone"
    AeonStoneOpalescentWhitePyramid.level = 3
    AeonStoneOpalescentWhitePyramid.price = 1400
    AeonStoneOpalescentWhitePyramid.bulk = 0
    AeonStoneOpalescentWhitePyramid.content = """
    While this aeon stone orbits you, you have proficiency with one kind of weapon (laser pistol, plasma doshko, zero pistol, and so on) at all item levels. Each stone of this type is keyed to a particular kind of weapon when it is created. Changing the type of weapon an existing opalescent white pyramid aeon stone is keyed to requires time and 3 ranks in Mysticism, as if you were crafting the aeon stone, but this alteration has no cost.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneAmberHyperboloid = CompendiumItem(context: context)
    AeonStoneAmberHyperboloid.name = "Aeon Stone, Amber Hyperboloid"
    AeonStoneAmberHyperboloid.category = "Aeon Stone"
    AeonStoneAmberHyperboloid.level = 4
    AeonStoneAmberHyperboloid.price = 2200
    AeonStoneAmberHyperboloid.bulk = 0
    AeonStoneAmberHyperboloid.content = """
    AbadarCorp first manufactured amber hyperboloids as defensive devices for law enforcement agents. While this aeon stone orbits you, you have DR 1/— and energy resistance 1 against all energy types, but both apply only to damage from ranged attacks.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneBrightYellowCabochon = CompendiumItem(context: context)
    AeonStoneBrightYellowCabochon.name = "Aeon Stone, Bright Yellow Cabochon"
    AeonStoneBrightYellowCabochon.category = "Aeon Stone"
    AeonStoneBrightYellowCabochon.level = 4
    AeonStoneBrightYellowCabochon.price = 2000
    AeonStoneBrightYellowCabochon.bulk = 0
    AeonStoneBrightYellowCabochon.content = """
    While this aeon stone orbits you, you gain a +4 insight bonus to Culture checks to decipher exotic, intricate, or very old writing. In addition, once per day as a standard action, this aeon stone can be activated to cast comprehend languages as a 1st-level spell (caster level 4th).
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneSapphireCone = CompendiumItem(context: context)
    AeonStoneSapphireCone.name = "Aeon Stone, Sapphire Cone"
    AeonStoneSapphireCone.category = "Aeon Stone"
    AeonStoneSapphireCone.level = 5
    AeonStoneSapphireCone.price = 3200
    AeonStoneSapphireCone.bulk = 0
    AeonStoneSapphireCone.content = """
    The first obsidian annuluses appeared as protective devices worn by important Azlanti agents. While this aeon stone orbits you, when you are the target of a spell or spell-like ability, you can spend 1 Resolve point as a reaction to gain spell resistance equal to 11 + half your character level. This spell resistance ends after the effect that triggered your reaction is resolved. The aeon stone can’t provide you spell resistance for 1 hour thereafter, and you can’t gain spell resistance from any obsidian annulus during this time.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneRubySphere = CompendiumItem(context: context)
    AeonStoneRubySphere.name = "Aeon Stone, Ruby Sphere"
    AeonStoneRubySphere.category = "Aeon Stone"
    AeonStoneRubySphere.level = 6
    AeonStoneRubySphere.price = 3850
    AeonStoneRubySphere.bulk = 0
    AeonStoneRubySphere.content = """
    While this aeon stone orbits you, it functions as a comm unit and a tier 3 computer with an artificial personality upgrade that you can access directly through your nervous system without needing a user interface. While the stone orbits you, you are aware of any attempt to connect to it and can grant access if you wish. This computer can be upgraded as normal, and the upgrades are all magical. The stone is magically powered, so the computer doesn’t need a power source.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneViridianBalbis = CompendiumItem(context: context)
    AeonStoneViridianBalbis.name = "Aeon Stone, Viridian Balbis"
    AeonStoneViridianBalbis.category = "Aeon Stone"
    AeonStoneViridianBalbis.level = 6
    AeonStoneViridianBalbis.price = 4200
    AeonStoneViridianBalbis.bulk = 0
    AeonStoneViridianBalbis.content = """
    The Veskarium is the source of the viridian balbis, although the popular story is that the vesk “liberated” the stone’s design from skittermanders during the conquest of Vesk-3. While this aeon stone orbits you, your speed increases by 10 feet; this enhancement bonus applies to any movement speed you have.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStonePurpleSphere = CompendiumItem(context: context)
    AeonStonePurpleSphere.name = "Aeon Stone, Purple Sphere"
    AeonStonePurpleSphere.category = "Aeon Stone"
    AeonStonePurpleSphere.level = 7
    AeonStonePurpleSphere.price = 7500
    AeonStonePurpleSphere.bulk = 0
    AeonStonePurpleSphere.content = """
    This aeon stone creates an invisible force field around you that functions as a purple force field. The stone has a daily capacity of 10 charges and fully recharges itself every 24 hours.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneVibrantGreenPrism = CompendiumItem(context: context)
    AeonStoneVibrantGreenPrism.name = "Aeon Stone, Vibrant Green Prism"
    AeonStoneVibrantGreenPrism.category = "Aeon Stone"
    AeonStoneVibrantGreenPrism.level = 9
    AeonStoneVibrantGreenPrism.price = 14000
    AeonStoneVibrantGreenPrism.bulk = 0
    AeonStoneVibrantGreenPrism.content = """
    Highly prized by Azlanti pilots and astrogators, a vibrant green prism aeon stone is linked directly to the Aeon Throne on New Thespera. If you plot a course to New Thespera and succeed at the required Piloting check while this aeon stone orbits you, you can travel through the Drift from anywhere in the galaxy to New Thespera in only 1d6 days.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneDarkBlueRhomboid = CompendiumItem(context: context)
    AeonStoneDarkBlueRhomboid.name = "Aeon Stone, Dark Blue Rhomboid"
    AeonStoneDarkBlueRhomboid.category = "Aeon Stone"
    AeonStoneDarkBlueRhomboid.level = 10
    AeonStoneDarkBlueRhomboid.price = 18000
    AeonStoneDarkBlueRhomboid.bulk = 0
    AeonStoneDarkBlueRhomboid.content = """
    This aeon stone grants you a +2 insight bonus to Perception and Sense Motive skill checks.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneAlabasterHelix = CompendiumItem(context: context)
    AeonStoneAlabasterHelix.name = "Aeon Stone, Alabaster Helix"
    AeonStoneAlabasterHelix.category = "Aeon Stone"
    AeonStoneAlabasterHelix.level = 11
    AeonStoneAlabasterHelix.price = 30000
    AeonStoneAlabasterHelix.bulk = 0
    AeonStoneAlabasterHelix.content = """
    Rumor says the first alabaster helix originated on a hidden world somewhere in the Vast. This aeon stone must adjust to your physiology by orbiting you for 24 hours. If the stone stops orbiting you for more than 1 minute, it must readjust to you. The stone can orbit you while you’re prone or unconscious, but it stops orbiting you if you die. While the alabaster helix orbits and remains adjusted to you, you regain 1 Hit Point per hour. You can have only one alabaster helix adjusted to your physiology at a time.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStonePearlyWhiteSpindle = CompendiumItem(context: context)
    AeonStonePearlyWhiteSpindle.name = "Aeon Stone, Pearly White Spindle"
    AeonStonePearlyWhiteSpindle.category = "Aeon Stone"
    AeonStonePearlyWhiteSpindle.level = 11
    AeonStonePearlyWhiteSpindle.price = 25000
    AeonStonePearlyWhiteSpindle.bulk = 0
    AeonStonePearlyWhiteSpindle.content = """
    This aeon stone increases your caster level by 1. This affects only calculations that directly refer to your caster level, such as caster level checks and spells with a duration of 1 round/level. It does not affect your spells known or spells per day. If you do not normally have a caster level, this does not give you any ability to know or cast spells.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneIridescentTrillian = CompendiumItem(context: context)
    AeonStoneIridescentTrillian.name = "Aeon Stone, Iridescent Trillian"
    AeonStoneIridescentTrillian.category = "Aeon Stone"
    AeonStoneIridescentTrillian.level = 12
    AeonStoneIridescentTrillian.price = 32000
    AeonStoneIridescentTrillian.bulk = 0
    AeonStoneIridescentTrillian.content = """
    While this aeon stone orbits you, when you are hit by a ranged attack, you can spend 1 Resolve Point as a reaction to attempt a Reflex saving throw with a +6 enhancement bonus. If your saving throw result equals or exceeds the result of the attack roll that hit you, the aeon stone deflects the attack, and it deals you no damage or other effect. This deflection doesn’t work against area attacks.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneKaleidoscopicIcosahedron = CompendiumItem(context: context)
    AeonStoneKaleidoscopicIcosahedron.name = "Aeon Stone, Kaleidoscopic Icosahedron"
    AeonStoneKaleidoscopicIcosahedron.category = "Aeon Stone"
    AeonStoneKaleidoscopicIcosahedron.level = 12
    AeonStoneKaleidoscopicIcosahedron.price = 35000
    AeonStoneKaleidoscopicIcosahedron.bulk = 0
    AeonStoneKaleidoscopicIcosahedron.content = """
    The kaleidoscopic icosahedron originated within the Azlanti Star Empire as an award given to high-ranking members of the Aeon Guard. While the stone orbits you, if you roll a d20 and you dislike the result, as a reaction you can reroll the d20 and use the better result. Alternatively, as a reaction when you are the target of an attack, you can force the attacker to reroll the d20 and use the worse result. Once you have used the stone to cause a reroll, you can’t do so again for 24 hours, and you can benefit from no other kaleidoscopic icosahedron during this time.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneObsidianAnnulus = CompendiumItem(context: context)
    AeonStoneObsidianAnnulus.name = "Aeon Stone, Obsidian Annulus"
    AeonStoneObsidianAnnulus.category = "Aeon Stone"
    AeonStoneObsidianAnnulus.level = 13
    AeonStoneObsidianAnnulus.price = 55000
    AeonStoneObsidianAnnulus.bulk = 0
    AeonStoneObsidianAnnulus.content = """
    The first obsidian annuluses appeared as protective devices worn by important Azlanti agents. While this aeon stone orbits you, when you are the target of a spell or spell-like ability, you can spend 1 Resolve point as a reaction to gain spell resistance equal to 11 + half your character level. This spell resistance ends after the effect that triggered your reaction is resolved. The aeon stone can’t provide you spell resistance for 1 hour thereafter, and you can’t gain spell resistance from any obsidian annulus during this time.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """
    
    let AeonStoneSilverLemniscate = CompendiumItem(context: context)
    AeonStoneSilverLemniscate.name = "Aeon Stone, Silver Lemniscate"
    AeonStoneSilverLemniscate.category = "Aeon Stone"
    AeonStoneSilverLemniscate.level = 14
    AeonStoneSilverLemniscate.price = 65000
    AeonStoneSilverLemniscate.bulk = 0
    AeonStoneSilverLemniscate.content = """
    Shirrens brought a few silver lemniscates—gifts from Hylax—with them when they arrived in the Pact Worlds. While the silver lemniscate orbits you, whenever you are about to end your turn with the dying condition, the silver lemniscate stabilizes you. At the start of your next turn, you regain 1 Hit Point. After providing you this benefit, the silver lemniscate can’t do so again for 24 hours, and you can’t benefit from a different silver lemniscate for 24 hours.
    
    While plenty of technology in Starfinder incorporates magical elements, some items operate solely through eldritch principles and thus follow different rules. This section covers magic items not addressed under another rules system (such as weapon fusions or augmentations). Magic items are often divided into held, worn, and consumable items. Held items (such as orbs and rods) must be held in a hand or similar appendage and activated manually like a weapon.
    
    Worn magic items are things like rings, cloaks, amulets, and gloves. Just as your armor has a limited number of upgrade slots, you can only wear up to two magic items at once and have both function normally—beyond that, the magical fields start to interfere with each other. You can’t wear more than one of the same type of item (two cloaks, two hats, etc.) except for rings. If you put on an additional worn magic item beyond these first two, it does not function until you have no more than two total magic items worn. This limitation applies specifically to worn magic items, and does not apply to armor upgrades, held items, weapon fusions, augmentations, magic armor, consumables, or other forms of magic, all of which function normally.
    
    Lastly, consumables are magic items like serums or spell ampoules that create an immediate and temporary effect when ingested.
    """

    AeonStoneClearSpindle.magicOrTech = "M"
    AeonStoneIridescentSpindle.magicOrTech = "M"
    AeonStoneCloudyBlueRhomboid.magicOrTech = "M"
    AeonStoneOpalescentWhitePyramid.magicOrTech = "M"
    AeonStoneAmberHyperboloid.magicOrTech = "M"
    AeonStoneBrightYellowCabochon.magicOrTech = "M"
    AeonStoneSapphireCone.magicOrTech = "M"
    AeonStoneRubySphere.magicOrTech = "M"
    AeonStoneViridianBalbis.magicOrTech = "M"
    AeonStonePurpleSphere.magicOrTech = "M"
    AeonStoneVibrantGreenPrism.magicOrTech = "M"
    AeonStoneDarkBlueRhomboid.magicOrTech = "M"
    AeonStoneAlabasterHelix.magicOrTech = "M"
    AeonStonePearlyWhiteSpindle.magicOrTech = "M"
    AeonStoneIridescentTrillian.magicOrTech = "M"
    AeonStoneKaleidoscopicIcosahedron.magicOrTech = "M"
    AeonStoneObsidianAnnulus.magicOrTech = "M"
    AeonStoneSilverLemniscate.magicOrTech = "M"
    
}

func loadArtifacts() {
    
    let AtrociteSphere = CompendiumItem(context: context)
    AtrociteSphere.name = "Atrocite Sphere"
    AtrociteSphere.category = "Artifact"
    AtrociteSphere.level = 20
    AtrociteSphere.price = 0
    AtrociteSphere.bulk = 0.1
    AtrociteSphere.content = """
    An Atrocite Sphere is a dull, dark globe 3 inches in diameter. Each of the several known Atrocite Spheres is thought to have spontaneously appeared from the void when an atrocite (a supernatural agent of the Devourer) emerged into the galaxy. The Atrocite Sphere must adjust to your soul by floating 3 inches above your head for 24 hours. If the sphere stops floating above you for more than 1 minute, it must readjust to you. The sphere can float above you while you’re prone or unconscious, but it stops doing so if you die. After it adjusts to you, the sphere exudes a slight pull, like gravity.
    
    While the Atrocite Sphere floats above you, you gain DR 10/— and energy resistance 10 against all energy types. If you gain a higher value in one of these defenses from another source, that value increases by 2. When it blocks damage, the sphere briefly flashes with crimson light that resembles a black hole’s accretion disc.
    
    When you take Hit Point damage from an attack or effect a foe created, as a reaction you can redirect some of the damage dealt to you. When you do so, the sphere flashes with crimson light and pulses with gravity, knocking you prone. Divide the damage dealt to you in half. If your attacker is within 330 feet of you, it takes this damage as force damage, is knocked prone, and suffers any critical effect the attack inflicted, but it suffers no other effects. The target can attempt a Will saving throw (DC = 20 + your Charisma modifier) to take half damage and avoid any critical effect. You take the remaining damage (though you get to apply your defenses to this damage normally).
    
    After you redirect damage with the Atrocite Sphere, you go berserk. This compulsion is a mind-affecting effect, but it works on any creature the sphere has adapted to, even if that creature is normally immune to such effects. While you are berserk, you gain a +1 morale bonus to attack rolls and a +3 morale bonus to damage rolls and Strength checks. You also gain a number of temporary Hit Points equal to 3 times your level or CR, which remain only while you stay berserk. However, you take a –2 penalty to KAC and EAC. You can’t cast spells or use any skill or ability that requires concentration or patience. The only reactions you can take are attacks of opportunity. You consider no creature to be your ally, although you don’t consider erstwhile allies to be foes.
    
    On each of your turns while you’re berserk, you attack the opponent closest to you, moving or charging only if you need to do so to attack. You make a full attack if you can, using abilities or weapon special properties that facilitate making numerous attacks. When you make a full attack, you reduce the penalties for doing so by 1. If multiple opponents are equally close to you, you divide your attacks among them or include as many as you can in a full attack such as automatic fire.
    
    You cease being berserk if you lose consciousness or you’re aware of no other enemies. In addition, you can attempt a DC 25 Will saving throw each time you reduce a creature to 0 Hit Points, ending the berserking episode if you succeed. When the episode ends, you are fatigued for as long as you were berserk. If you fail to reduce a significant enemy to 0 Hit Points while you’re berserk, the Atrocite Sphere provides none of its benefits to you for 24 hours.
    
    An Atrocite Sphere can be destroyed only by being tossed into a star, gas giant, black hole, or some equally massive gravitational phenomenon. Cultists of the Devourer say this annihilation is useless, since the spheres will continue to be born until reality itself dies.
    """
    
    let BookofUnwrittenTruths = CompendiumItem(context: context)
    BookofUnwrittenTruths.name = "Book of Unwritten Truths"
    BookofUnwrittenTruths.category = "Artifact"
    BookofUnwrittenTruths.level = 20
    BookofUnwrittenTruths.price = 0
    BookofUnwrittenTruths.bulk = 0.1
    BookofUnwrittenTruths.content = """
    The Book of Unwritten Truths is a massive book of 528 metallic pages without images or words. According to legend, the book exists as a strange Material Plane connection to the Akashic Record, and information in the volume is presented through tactile means. However, the tome allows its readers to access information on only obscure topics. The axiomite curators of the library world of Athaeum have long sought this artifact as a capstone to their collection.
    
    If you can touch the Book of Unwritten Truths, you can read it. While you touch the book, you can take 20 on any skill check to recall knowledge, provided the DC to recall that knowledge is higher than 20. If you roll the check rather than taking 20, you gain a +10 insight bonus to the check. You can read the book to recall knowledge using any skill, even if you are untrained in the associated skill. Once you gain information from the check, the book closes itself and can’t be used to gain knowledge using the same skill for 24 hours.
    
    Once per day, the book allows you to cast vision. You must spend the 1 Resolve Point required for the spell, but you are considered to automatically succeed at the caster level check. The book, rather than a computer, imparts the information the spell accesses.
    
    If you attempt to use the book to research the Gap, you gain 1 negative level. Each time you use the book thereafter, you must succeed at a DC 30 Will saving throw or gain 1 negative level. Someone who knows a secret lost to the Gap can write that truth in the Book of Unwritten Truths to convert it to a mundane tome with none of its powers.
    """
    
    let TrafodiParadox = CompendiumItem(context: context)
    TrafodiParadox.name = "Trafodi Paradox"
    TrafodiParadox.category = "Artifact"
    TrafodiParadox.level = 20
    TrafodiParadox.price = 0
    TrafodiParadox.bulk = 0.1
    TrafodiParadox.content = """
    The Trafodi Paradox is an intricately carved orb of red stone or coral, a foot in diameter. The carving forms a multilayered lattice within the sphere. Despite its substance and size, the Trafodi Paradox is very light.
    
    During the conquest of Vesk-2, the vesk invaders ignored the pleas of the planet’s natives and ransacked the ancient vault containing the Trafodi Paradox. The inhabitants of Vesk- 2 had no written records of the sphere—only an oral legend that it was brought from the sky and sealed away during the Gap. A vesk warlord kept the artifact on Vesk-2, where it stayed for several generations before it came to the attention of high-ranking members of the Veskarium. The artifact was loaded onto a Veskarian military transport to be taken to Vesk Prime for further study. Distress signals recorded shortly thereafter indicate that vessel ran afoul of the Swarm, and no one has seen that starship or the Trafodi Paradox since. Those who have studied the accounts of Veskarian mystics who examined the artifact speculate that it is a transportation device but that it is either malfunctioning or designed for a truly alien and magically gifted species.
    
    As a full action that provokes attacks of opportunity, you can activate the Trafodi Paradox. The artifact darkens and shrinks as its internal lattice realigns. It activates just before the start of your next turn, provided you’re still conscious and holding the sphere. When you activate the Trafodi Paradox, it becomes a singularity in a square of your choice in your space or in a space adjacent to you. The singularity’s physical manifestation is tiny, but it is considered to occupy a 5-foot cube.
    
    When the singularity appears, creatures within 1 mile of the singularity feel drawn to it. A creature must succeed at a DC 25 Will save or use all its actions to move as quickly as possible toward the singularity. Although this is a mindaffecting effect, creatures immune to such effects still feel the pull and might seek the source of this attraction despite no compulsion to do so.
    
    Creatures within 120 feet of the singularity must succeed at a DC 25 Athletics check or a DC 20 Strength check to move farther from it, and even then does so at one-quarter its speed. Each round, at the start of your turn, the singularity performs a special combat maneuver with a +30 bonus to the attack roll. If a creature is within 120 feet of the singularity, compare the result of this attack roll to the creature’s KAC + 8. If the maneuver is successful, that creature moves 5 feet toward the singularity, plus 1 foot per point the singularity’s result exceeded the creature’s KAC + 8; round the distance up to the nearest 5 feet. Huge or smaller unattended objects move 30 feet toward the singularity at the start of each of your turns, moving an additional 10 feet per size category below Medium or 10 fewer feet per size category above Medium.
    
    A creature or object that enters the singularity’s space is sucked into the void. While inside, a creature can take no actions other than a full action to escape, which requires a successful DC 30 Athletics check or DC 25 Strength check. A creature that ends its turn inside the singularity takes 5d10 force damage unless it succeeds at a DC 20 Will save to take half damage; if it succeeds by 5 or more, the creature negates the damage entirely. The creature that activated the artifact gains a +5 circumstance bonus to this saving throw. The amount of damage dealt by the void increases by 5d10 each round. If this damage reduces a creature to 0 Hit Points, the creature’s body is utterly destroyed.
    
    A creature that succeeds at a Will save within the singularity senses a presence in the void. In myriad voices, one of which the listener can understand, the presence offers salvation from the crushing gravity. A creature that accepts this salvation leaves the void, transported to another location in the galaxy or among the planes. Upon escaping in this way, a creature regains half of the Hit Points it lost to the singularity. Escapees with strong emotional attachments to one another often arrive in the same location, while enemies rarely land in the same place.
    
    The singularity created by the Trafodi Paradox lasts 13 minutes. When the singularity ends, the artifact disappears. Roll 1d20 as the control and 1d20 as the determiner. If the determiner is higher than the control, the Trafodi Paradox reappears in the possession of the creature that last activated it. Otherwise, the artifact could reappear anywhere in the galaxy. The creature that last activated the artifact can sense in which direction the artifact lies, provided the object isn’t sealed in an area lined with starmetal.
    
    The Trafodi Paradox can be destroyed only if it consumes the last member of the species that created it.
    """
    
    let Ungarato = CompendiumItem(context: context)
    Ungarato.name = "Ungarato"
    Ungarato.category = "Artifact"
    Ungarato.level = 20
    Ungarato.price = 0
    Ungarato.bulk = 2
    Ungarato.content = """
    Ungarato is one of the most powerful known relics of lost Golarion, though even greater artifacts have occasionally appeared throughout Absalom Station’s history. Ungarato, also called the All-Consuming Killer or the Gun of Gluttony, is known to be one of the Alara’hai, seven weapons of nearly divine magical power that were also referred to as the Seven Blades of Conviction or the Seven Swords of Sin. Although the fates of the other six Alara’hai remain unknown, these epithets imply that Ungarato was once a sword of some kind, though when, how, and why this blade was reforged into a powerful machine gun with a bayonet is one of the relic’s greatest mysteries.
    
    Much of Ungarato’s history is lost, though scholars have shown that the weapon was created in its original form thousands of years before the Gap. The Arcanamirium’s most learned esotericists agree that Ungarato’s origin lies in ancient Thassilon, an empire ruled by spellcasting tyrants called runelords, which collapsed at the beginning of the period of Golarion’s history known as the Age of Darkness. It is also generally agreed that the weapon’s intended wielder was the Runelord of Gluttony, but a ferocious warrior stole the blade before it ever reached the runelord’s hands. This barbarian warlord later became the champion of the runelord’s successor, and it is believed that Ungarato took its name from this champion. Nothing definitive is known of Ungarato’s fate after the fall of Thassilon.
    
    Ungarato has a distinct appearance that is unlike any other specific model of longarm. It has a misty, spectral quality, but the weapon is as solid as any other. Ungarato functions as a paragon X-gen gun, and its bayonet is a molecular rift dueling sword, both of which have the ghost killer fusion. Two hands are required to wield Ungarato, and proficiency with basic melee weapons and heavy weapons is necessary to use the weapon without penalty for melee and ranged attacks, respectively.
    
    Ungarato glows with a bright, sickly green color whenever there is a creature of the undead type within 50 feet of its wielder, though the weapon gives no indication of the direction or number of undead within that range. Each time its wielder suffers the full effects of a critical hit (when damage reduction, energy resistance, or some other effect does not reduce the damage dealt or prevent any critical hit effect), Ungarato gains 1 point of viciousness. Whenever Ungarato scores a critical hit, it automatically spends 1 point of viciousness (if it has any) and adds the severe wound critical hit effect to the critical damage dealt. Any unused points of viciousness fade at the rate of 1 per hour. Ungarato also restores 10 Hit Points to its wielder (functioning as per mystic cure) each time it scores a critical hit (whether or not it has any points of viciousness).
    
    Ungarato is a unique artifact of extreme power and legendary reputation; as such, the weapon is effectively priceless and cannot simply be purchased. Indeed, its current owner and whereabouts are unknown, though Ungarato is widely believed to have resurfaced recently somewhere on Absalom Station. Legend claims that Ungarato was once sentient and held great powers that only functioned in the hands of a Thassilonian runelord, but there’s no modern evidence to support either claim. Similarly, it is believed that only the rightful Runelord of Gluttony can break the weapon; Ungarato is otherwise impervious to damage or destruction.
    """
    
    AtrociteSphere.magicOrTech = "M"
    BookofUnwrittenTruths.magicOrTech = "M"
    TrafodiParadox.magicOrTech = "M"
    Ungarato.magicOrTech = "M"
    
    

    
}

func loadOther() {
    
    let ChargeCloak = CompendiumItem(context: context)
    ChargeCloak.name = "Charge Cloak"
    ChargeCloak.category = "Other"
    ChargeCloak.level = 1
    ChargeCloak.price = 200
    ChargeCloak.bulk = 0.1
    ChargeCloak.content = """
    A charge cloak can power devices that depend on electrical charges as if it were a battery. The cloak produces 4 charges each day, but they must be used as a single unit. Thus you could power a single attack from a yellow star plasma sword, which has a usage of 4, but you could also make only a single attack with a sub zero pistol, which has a usage of 1. The item must be one which uses charges or a battery, rather than petrol, rockets, rounds, or other forms of ammunition or power. You must be wearing or touching the item to be charged. You cannot use this item to recharge a battery or item; it can only be used to directly power an item for a single usage.
    """
    
    let RecklessGloves = CompendiumItem(context: context)
    RecklessGloves.name = "Reckless Gloves"
    RecklessGloves.category = "Other"
    RecklessGloves.level = 1
    RecklessGloves.price = 250
    RecklessGloves.bulk = 0.1
    RecklessGloves.content = """
    These thick leather gloves are often worn by aggressive vehicle pilots. Increase the collision DC of any vehicle you are driving by 2, and gain a +2 circumstance bonus to your Piloting checks when taking the ram and run over actions.
    """
    
    let EncryptionTattooAgent = CompendiumItem(context: context)
    EncryptionTattooAgent.name = "Encryption Tattoo, Agent"
    EncryptionTattooAgent.category = "Other"
    EncryptionTattooAgent.level = 1
    EncryptionTattooAgent.price = 50
    EncryptionTattooAgent.bulk = 0.1
    EncryptionTattooAgent.content = """
    The secretive members of the Android Abolitionist Front identify each other with invisible magical tattoos. When you are within 60 feet of a being with another encryption tattoo and activate your encryption tattoo with a code word as a move action, your tattoo becomes visible for 1 minute and glows faintly. The tattoo closely resembles the glowing circuit patterns prevalent on android skin, and is therefore particularly obvious on non-androids. The agent encryption tattoo is the standard type of encryption tattoo. Certain encryption tattoos, when activated with a different code word, also grant you damage reduction: operative encryption tattoos provide DR 5/—, provocateur encryption tattoos provide DR 10/—, and master encryption tattoos provide DR 15/—. This damage reduction doesn’t stack with any damage reduction you already have. The damage reduction lasts for the 1 minute your tattoo is visible.
    
    Although there is no limit on the number of times you can cause your encryption tattoo to appear, you can activate its power to gain DR only once per day.
    
    An encryption tattoo doesn’t count as a worn magic item, and it can’t be disarmed or sundered. In addition, it can be installed in an android’s racial armor upgrade slot.
    """
    
    let BroochofShielding = CompendiumItem(context: context)
    BroochofShielding.name = "Brooch of Shielding"
    BroochofShielding.category = "Other"
    BroochofShielding.level = 2
    BroochofShielding.price = 1000
    BroochofShielding.bulk = 0
    BroochofShielding.content = """
    A piece of metal jewelry originally used to fasten a cloak, a brooch of shielding has a brilliantly colored jewel mounted in its center. The brooch counts as a worn magic item unless you install it in armor, taking up one upgrade slot. While worn, the brooch absorbs incoming force damage, which causes the jewel’s color to fade. Once the brooch absorbs 55 force damage, the colorless jewel crumbles to dust and the brooch becomes nonmagical.
    """
    
    let CorpseLantern = CompendiumItem(context: context)
    CorpseLantern.name = "Corpse Lantern"
    CorpseLantern.category = "Other"
    CorpseLantern.level = 2
    CorpseLantern.price = 500
    CorpseLantern.bulk = 0.1
    CorpseLantern.content = """
    This portable light source functions as a lantern (Starfinder Core Rulebook 220) that never requires a battery, though the light it gives off is an unsettling pale green. Once per day as a standard action, you can touch an arcane rune on the lantern’s base to cause all corpses within the 10-foot radius of its light to speak, as per grave words.
    """
    
    let CoverSeed = CompendiumItem(context: context)
    CoverSeed.name = "Cover Seed"
    CoverSeed.category = "Other"
    CoverSeed.level = 2
    CoverSeed.price = 200
    CoverSeed.bulk = 0
    CoverSeed.content = """
    About 3 inches in diameter, a typical cover seed looks like a large walnut. The Xenowardens deployed the first cover seeds, but the device now sees widespread application and equally diverse appearances.
    
    As a move action, you can squeeze the seed to activate it and hold it or drop it in a square within your reach. Alternatively, as a standard action, you can squeeze and throw the seed (range increment 20 feet) as a ranged attack targeting a square (AC 5). At the end of the turn in which you activated the seed, it sprouts into thick vines in the square it’s in as well as 2 squares of your choice adjacent to the first. These vines form a wall 5 feet high and thick enough to provide cover to creatures in or near them. The vines’ area is difficult terrain.
    
    A cover seed’s vines last and renew themselves for 10 rounds; if the seed lands on a surface made of a material in which plants can’t normally grow, the vines last only 5 rounds. When the duration ends, the seed and vines wither and turn to dust.
    """
    
    let ResilientJacket = CompendiumItem(context: context)
    ResilientJacket.name = "Resilient Jacket"
    ResilientJacket.category = "Other"
    ResilientJacket.level = 2
    ResilientJacket.price = 600
    ResilientJacket.bulk = 0.1
    ResilientJacket.content = """
    This waterproof leather jacket functions as a travel outfit (Starfinder Core Rulebook 230). Once per day as a reaction, you can reroll a failed Fortitude saving throw.
    """
    
    let AmuletofCamouflage = CompendiumItem(context: context)
    AmuletofCamouflage.name = "Amulet of Camouflage"
    AmuletofCamouflage.category = "Other"
    AmuletofCamouflage.level = 3
    AmuletofCamouflage.price = 1400
    AmuletofCamouflage.bulk = 0
    AmuletofCamouflage.content = """
    This modest amulet projects a simple pattern over your outer layers of armor, clothing, and equipment, which helps you blend into the background. When in an environment with a maximum distance at which Perception checks can be attempted, rolls to see at what range other creatures can attempt Perception checks against you are rolled twice, and the lower result applies. See Chapter 11 for more information on the Perception ranges of different environments. The amulet’s magic isn’t powerful enough to make you invisible or grant a bonus to Stealth checks. You can activate or deactivate this camouflage as a standard action.
    """
    
    let BrighsBolt = CompendiumItem(context: context)
    BrighsBolt.name = "Brigh's Bolt"
    BrighsBolt.category = "Other"
    BrighsBolt.level = 3
    BrighsBolt.price = 1300
    BrighsBolt.bulk = 0
    BrighsBolt.content = """
    This simple, shiny metal bolt is the size of a thumbnail and has an image of a tiny gear on its head. As a full action, you can affix a Brigh’s bolt to a broken suit of armor, tool, vehicle, or weapon to negate the penalties of the broken condition for as long as the bolt is affixed. The bolt does not repair any damage sustained by the object and the object is still visibly damaged, so its resale value is reduced as normal for a broken item. If the item is repaired so as to no longer have the broken condition, the Brigh’s bolt falls off; otherwise, it can be removed as a full action. If an item to which a Brigh’s bolt is attached is destroyed, the bolt is also destroyed.
    """
    
    let Hivemask = CompendiumItem(context: context)
    Hivemask.name = "Hivemask"
    Hivemask.category = "Other"
    Hivemask.level = 3
    Hivemask.price = 1400
    Hivemask.bulk = 0.1
    Hivemask.content = """
    As a move action when wearing a hivemask, you can learn the location of each other worn hivemask within 100 feet and can use your vision to see through any one of those masks. You can see through another mask for as long as you’d like, but you must take a move action each round to do so. While extending your vision to another hivemask, you are blinded and flat-footed.
    """
    
    let InstinctiveStabilizer = CompendiumItem(context: context)
    InstinctiveStabilizer.name = "Instinctive Stabilizer"
    InstinctiveStabilizer.category = "Other"
    InstinctiveStabilizer.level = 3
    InstinctiveStabilizer.price = 1400
    InstinctiveStabilizer.bulk = 0.1
    InstinctiveStabilizer.content = """
    Kish shamans imbued this handheld scanner with mystical power to help heal the dying. When you use an instinctive stabilizer, you can use the Medicine skill untrained to attempt the long-term stability task. If you are trained in Medicine, you automatically succeed at this check. In addition, when you use this device, the DC for the first aid task of the Medicine skill is only 10.
    """
    
    let Lawfinder = CompendiumItem(context: context)
    Lawfinder.name = "Lawfinder"
    Lawfinder.category = "Other"
    Lawfinder.level = 3
    Lawfinder.price = 1200
    Lawfinder.bulk = 0
    Lawfinder.content = """
    This archaic, ornate compass is a holy trinket sacred to AbadarCorp, and its needle is shaped like a thin golden key. A lawfinder’s needle always points toward the nearest settlement of at least 1,000 people; within such a settlement, the needle points to the primary center of government or civil administration for the settlement. This item can’t detect a settlement more than 100 miles away, except for settlements with the bureaucratic quality, which a lawfinder can detect up to 1,000 miles away. If no such settlements are within range, the lawfinder’s needle spins slowly.
    
    As long as the lawfinder’s needle points to a settlement or civil center, it grants you a +2 insight bonus to Survival checks to avoid getting lost.
    """
    
    let ObfuscatedJournal = CompendiumItem(context: context)
    ObfuscatedJournal.name = "Obfuscated Journal"
    ObfuscatedJournal.category = "Other"
    ObfuscatedJournal.level = 3
    ObfuscatedJournal.price = 1250
    ObfuscatedJournal.bulk = 1
    ObfuscatedJournal.content = """
    An obfuscated journal is usually a book filled with about 250 pages of sturdy blank paper. Those who value secrecy and portability use such tomes in place of other methods of information storage that might be less secure.
    
    Before you can write in an obfuscated journal, you must speak a word or phrase to the book as a standard action. If you don’t, the pages won’t hold any writing. If someone reads the journal without speaking the word or phrase you set, the words in the journal are an indecipherable jumble. You can also command the journal to erase all or part of the writing at a rate of 2 pages per round.
    
    The journal also defends against some forms of magical tampering. Writing in the journal is magical and encoded, but creature under the effects of true seeing can read it. Dispel magic can suppress the journal’s magic, causing the pages to appear blank and preventing it from being used in any way. An erase spell can erase the journal only after the proper command is spoken.
    """
    
    let RecoveryAegis = CompendiumItem(context: context)
    RecoveryAegis.name = "Recovery Aegis"
    RecoveryAegis.category = "Other"
    RecoveryAegis.level = 3
    RecoveryAegis.price = 1350
    RecoveryAegis.bulk = 0
    RecoveryAegis.content = """
    The Aspis Consortium partners with the Starfinder Society to deliver recovered relics to the churches of Desna, Iomedae, Sarenrae, Weydan, and Yaraesa. In exchange, mystics of these divinities provide magic items to support field agents. The recovery aegis is a talisman commonly produced as part of this arrangement. These necklaces take many shapes, but each has a jeweled pendant. The amulet counts as a worn magic item unless you install it in armor, taking up one upgrade slot. While wearing a recovery aegis, you gain a +1 enhancement bonus to saving throws against effects you are already suffering, such as a disease, poison, or an ongoing damage effect; this bonus doesn’t apply to initial saving throws against such effects. In addition, at any point when you have the dying condition, you can use the recovery aegis to stabilize without spending Resolve Points, and you can then spend 1 Resolve Point to stay in the fight during the same round. The jewel in the recovery aegis crumbles to dust if you use it to stabilize in this way, and the amulet loses its powers, becoming nonmagical. If you use a recovery aegis to stabilize, you can’t do so with another recovery aegis for 24 hours.
    """
    
    let StarfinderBackpack = CompendiumItem(context: context)
    StarfinderBackpack.name = "Starfinder Backpack"
    StarfinderBackpack.category = "Other"
    StarfinderBackpack.level = 3
    StarfinderBackpack.price = 750
    StarfinderBackpack.bulk = 1
    StarfinderBackpack.content = """
    The Starfinder Society sells branded gear, of which the Starfinder backpack is a prime example. People assume most Starfinder backpacks come from the Lorespire Complex on Absalom Station, but more knock-offs exist than authentic ones.
    
    While wearing a Starfinder backpack, treat your Strength score as 4 higher for determining your carrying capacity. This increase doesn’t stack with other backpacks. When you seek an object stowed in the backpack, you find it immediately, allowing you to retrieve the object as if you were drawing a weapon. In addition, you can stow objects of 1 bulk or less in the pack as if you were sheathing a weapon.
    """
    
    let ElementalGemMk1 = CompendiumItem(context: context)
    ElementalGemMk1.name = "Elemental Gem, Mk 1"
    ElementalGemMk1.category = "Other"
    ElementalGemMk1.level = 3
    ElementalGemMk1.price = 250
    ElementalGemMk1.bulk = 0
    ElementalGemMk1.content = """
    Each elemental gem contains one elemental from a specific elemental plane. The gem’s color indicates the sort of elemental contained within—air gems are transparent, earth gems are brown, fire gems are orange, and water gems are blue. As a standard action, you can crush the gem, destroying it. The contained elemental then appears as if you had cast a summon creature spell of a level and caster level according to the gem’s type.
    
    1st-level summon creature, caster level 3rd
    """
    
    let DarksightGoogles = CompendiumItem(context: context)
    DarksightGoogles.name = "Darksight Googles"
    DarksightGoogles.category = "Other"
    DarksightGoogles.level = 4
    DarksightGoogles.price = 2100
    DarksightGoogles.bulk = 0
    DarksightGoogles.content = """
    Darksight goggles are a magical innovation made to aid vision and counter magical darkness without the telltale signs created by technology, such as ultraviolet lasers. The goggles count as a worn magic item unless you install them in armor, taking up one upgrade slot. While wearing these goggles, you gain low-light vision as well as darkvision with a range of 60 feet. In addition, the darkvision these goggles provide allows you to see in color. If you already have darkvision, darksight goggles increase its range by 30 feet.
    """
    
    let IomedaeanCrusaderHelm = CompendiumItem(context: context)
    IomedaeanCrusaderHelm.name = "Iomedaean Crusader Helm"
    IomedaeanCrusaderHelm.category = "Other"
    IomedaeanCrusaderHelm.level = 4
    IomedaeanCrusaderHelm.price = 2100
    IomedaeanCrusaderHelm.bulk = 0.1
    IomedaeanCrusaderHelm.content = """
    Originally created before the Gap for holy champions of Iomedae crusading in the Worldwound—a demon-haunted wasteland created by an Abyssal incursion on Golarion— Iomedaean crusader helms have been in constant production by the church of Iomedae for thousands of years. While only ancient pre-Gap helmets are considered relics, the magical properties of modern Iomedaean crusader helms match their archaic precursors. An Iomedaean crusader helm replaces a suit of armor’s normal helmet (if any) and is incorporated into the armor’s normal environmental protections; these protections do not function if the helm is removed. If the armor has an available upgrade slot, an Iomedaean crusader helm takes up one upgrade slot; otherwise, the helm counts as one of your two worn magic items.
    
    While wearing an Iomedaean crusader helm, the first time each day that you attempt a saving throw against an enchantment or illusion effect created by an evil outsider, roll the saving throw twice and take the best result. You cannot gain the effects of more than one Iomedaean crusader helm each day.
    """
    
    let TangleburstSeed = CompendiumItem(context: context)
    TangleburstSeed.name = "Tangleburst Seed"
    TangleburstSeed.category = "Other"
    TangleburstSeed.level = 4
    TangleburstSeed.price = 675
    TangleburstSeed.bulk = 0
    TangleburstSeed.content = """
    A brown seed 2 inches long, a tangleburst seed has an inch of green root protruding from one end. Extremists among the Xenowardens smuggle these seeds all across the galaxy. Despite the seeds’ function, they’re not technological, so they don’t usually show up on scanners looking for weapons or dangerous devices.
    
    As a move action, you can squeeze the seed to activate it and hold it or drop it in a square within your reach. Alternatively, as a standard action, you can squeeze and throw the seed (range increment 20 feet) as a ranged attack targeting a square (AC 5). At the end of the turn in which you activate the seed, it erupts into thick vines in the square it’s in, as well as all squares within 10 feet of the first. This area becomes difficult terrain.
    
    A creature caught in the vines must succeed at a Reflex saving throw (DC = 14 + your key ability score modifier) or become entangled. An entangled creature can escape as a move action with a successful Acrobatics check or Strength check at the same DC.
    
    The vines last and renew themselves for 5 rounds; if the seed lands on a surface made of a material in which plants can’t normally grow, the vines last for only 2 rounds. When the duration ends, the seed and vines wither and turn to dust.
    """
    
    let TramplingBoots = CompendiumItem(context: context)
    TramplingBoots.name = "Trampling Boots"
    TramplingBoots.category = "Other"
    TramplingBoots.level = 4
    TramplingBoots.price = 2500
    TramplingBoots.bulk = 0.1
    TramplingBoots.content = """
    These rugged boots are made from the finest mountain eel hide. You can ignore difficult terrain, but only in hilly and mountainous environments. In addition, once per day as a full action, you can move up to your speed through other creatures’ spaces (as long as those creatures aren’t larger than you are). Each creature in your path automatically takes 2d6+4 bludgeoning damage. A target of this trample ability can make an attack of opportunity against you as you pass through its space, but at a -4 penalty. A target can forgo this attack of opportunity to instead attempt a DC 16 Reflex save to take half damage.
    """
    
    let TruthAmplifier = CompendiumItem(context: context)
    TruthAmplifier.name = "Truth Amplifier"
    TruthAmplifier.category = "Other"
    TruthAmplifier.level = 4
    TruthAmplifier.price = 2000
    TruthAmplifier.bulk = 0.1
    TruthAmplifier.content = """
    This parabolic microphone is shaped like a pistol with a plastic cone for a barrel, and Kish shamans have imbued it with mystical power. To use a truth amplifier, point it at a sentient creature within 30 feet and pull the trigger (as a standard action). The target must then succeed a DC 14 Will save, or it can’t deliberately lie for 5 minutes. Affected creatures are aware of this enchantment and can avoid answering questions they would normally respond to with a lie, being evasive as long as they remain within the boundaries of the truth. A truth amplifier can be used once per day.
    """
    
    let ImprovisationAdornmentMk1 = CompendiumItem(context: context)
    ImprovisationAdornmentMk1.name = "Improvisation Adornment, Mk 1"
    ImprovisationAdornmentMk1.category = "Other"
    ImprovisationAdornmentMk1.level = 4
    ImprovisationAdornmentMk1.price = 1800
    ImprovisationAdornmentMk1.bulk = 0
    ImprovisationAdornmentMk1.content = """
    Those who rely on speaking to persuade or please others and those who require the ability to gauge an audience find an improvisation adornment invaluable. This item is usually something worn on or near the head, such as a necklace, headband, or a mask. While wearing this item, if you fail a Bluff, Culture, Diplomacy, Intimidate, or Sense Motive check, as a reaction you can reroll the check and take the better result. You can also reroll a Profession check, provided the GM agrees the check involved some sort of interaction, such as acting, musical performance, public speaking, and the like. Once you benefit from a given improvisation adornment, you can benefit from a different one only after 24 hours have passed.
    
    This adornment allows one reroll per day.
    """
    
    let PlanarRuneplatesMk1 = CompendiumItem(context: context)
    PlanarRuneplatesMk1.name = "Planar Runeplates, Mk 1"
    PlanarRuneplatesMk1.category = "Other"
    PlanarRuneplatesMk1.level = 4
    PlanarRuneplatesMk1.price = 2000
    PlanarRuneplatesMk1.bulk = 0
    PlanarRuneplatesMk1.content = """
    Cultists and religious artificers forge planar runeplates, as do the demon-worshipping drow of Apostae. Each set of planar runeplates is dedicated to a specific powerful being native to the Outer Planes, such as an archdevil, a demon lord, or a god. Devotional symbols on the plates might convince others you’re aligned with the being in question, even if you’re not. You wear the plates by affixing them to clothing or armor; they count as a worn magic item unless you install them in armor, taking up a number of upgrade slots equal to their mark.
    
    Each set of planar runeplates has the same alignment as the extraplanar entity to which the plates are dedicated, although no plates are created with a neutral alignment with no other alignment components. While you wear the plates, they have several effects. If a creature with an alignment component opposite any of the plates’ alignment components attacks you, the plates alert you to the creature’s opposing subtypes. If the attack hits, as a reaction you can force the creature to reroll the attack and use the worse result. If you fail a saving throw against an effect created by such a creature, as a reaction you can reroll the saving throw and take the better result. Once you benefit from a given set of planar runeplates, you can benefit from a different set only after 24 hours have passed.
    
    This planar runeplate allows for one reroll per day.
    """
    
    let ArquandManacles = CompendiumItem(context: context)
    ArquandManacles.name = "Arquand Manacles"
    ArquandManacles.category = "Other"
    ArquandManacles.level = 5
    ArquandManacles.price = 2800
    ArquandManacles.bulk = 0.1
    ArquandManacles.content = """
    Interwoven hide from numerous Arquand gazelles lines Arquand manacles. Law officers and bounty hunters use these manacles on prisoners who might become aggressive. The interwoven strips help ensure the bound creature never becomes immune to the effect. While wearing Arquand manacles, you must succeed at a DC 13 Will save to attack, cast a spell, or attempt to disable, escape, or harm the cuffs. Arquand gazelles are immune to these manacles. Their magic is a mind-affecting, emotion effect.
    """
    
    let BarachiusHelm = CompendiumItem(context: context)
    BarachiusHelm.name = "Barachius Helm"
    BarachiusHelm.category = "Other"
    BarachiusHelm.level = 5
    BarachiusHelm.price = 3000
    BarachiusHelm.bulk = 0.1
    BarachiusHelm.content = """
    This helm replaces a suit of armor’s normal helmet (if any) and is incorporated into the armor’s normal environmental protections; these protections do not function if the helm is removed. If the armor has an available upgrade slot, a barachius helm takes up one upgrade slot; otherwise, the helm counts as one of your two worn magic items.
    
    While wearing a barachius helm, once per day as a standard action, you can activate its ability to detect evil in your environment. Any creature you can see within 60 feet that has the evil subtype (such as a devil or an evil dragon) appears to have an obvious glowing outline visible only to you. Evil magic weapons (such as a rifle with the unholy weapon fusion) and other forms of evil technology gain a similar glowing outline. This doesn’t not increase your visual range or allow you to see invisible creatures.
    
    In addition, once per day, the wearer of a barachius helm can use the barachius’s firewall supernatural ability: "A barachius can summon a wall of digitally empowered divine fury within 30 feet as a standard action. This wall takes the shape of a line 10 feet high and 20 feet long; though it doesn’t need to emanate from the angel, the angel must be able to see every square the wall passes through. The wall lasts until the beginning of the angel’s next turn. An evil creature caught within or that enters one of the wall’s squares takes 2d6 damage (Will DC 17 half). An evil creature with the technological subtype takes twice this amount of damage.".
    """
    
    let BlackravenAxe = CompendiumItem(context: context)
    BlackravenAxe.name = "Blackraven Axe"
    BlackravenAxe.category = "Other"
    BlackravenAxe.level = 5
    BlackravenAxe.price = 3370
    BlackravenAxe.bulk = 1
    BlackravenAxe.content = """
    Blackraven axes were magic weapons wielded by elite warriors of lost Golarion’s far north who patrolled the border between the Lands of the Linnorm Kings and the witch-haunted nation of Irrisen. Many different Blackraven axes from pre-Gap Golarion have been found, and all are basic melee weapons with the archaic special property. A Blackraven axe typically has a head shaped like a raven’s beak or a stylized raven inscribed on its blade, and it has the ability to cause its targets to burst into flames—a quality that proved especially useful against the trolls the original Blackravens faced. Modern spellcasters have recreated this magic as the burning weapon fusion. Modern Blackraven axes are often created by applying the burning weapon fusion to a tactical battleaxe. A tactical battleaxe is a 5th-level, one-handed advanced melee weapon that deals 1d8 slashing damage and has the wound critical hit effect. It has the analog special property, has 1 bulk, and costs 2,650 credits. A tactical Blackraven axe is presented in the table on page 50, and the price includes both the weapon and the fusion.

    """
    
    let CelestialStole = CompendiumItem(context: context)
    CelestialStole.name = "Celestial Stole"
    CelestialStole.category = "Other"
    CelestialStole.level = 5
    CelestialStole.price = 3000
    CelestialStole.bulk = 0
    CelestialStole.content = """
    This long, thin scarf is usually marked with an alternating pattern of light and dark shapes. While wearing a celestial stole, you gain cold resistance 5 or fire resistance 5 (your choice when you first don the stole); you can alter the type of energy resistance (choosing between cold and fire) once per day after 8 hours of rest. If you have cold or fire resistance from the solarian’s solar armor solar manifestation, increase that resistance by 5.
    """
    
    let ClearsightTrinket = CompendiumItem(context: context)
    ClearsightTrinket.name = "Clearsight Trinket"
    ClearsightTrinket.category = "Other"
    ClearsightTrinket.level = 5
    ClearsightTrinket.price = 2750
    ClearsightTrinket.bulk = 0.1
    ClearsightTrinket.content = """
    """
    
    let DentedKasa = CompendiumItem(context: context)
    DentedKasa.name = "Dented Kasa"
    DentedKasa.category = "Other"
    DentedKasa.level = 5
    DentedKasa.price = 3000
    DentedKasa.bulk = 1
    DentedKasa.content = """
    A conical helm of battered metal, a dented kasa is a headgear with a history. Helmets of this sort belonged to veteran warriors of ages past, each dent representing a potentially mortal blow the kasa deflected. You wear the kasa by incorporating it into part of your armor’s headwear. The helmet counts as a worn magic item unless you install it in armor, taking up one upgrade slot.
    
    While wearing the dented kasa, you gain a +2 enhancement bonus to saving throws against critical hit effects. In addition, when you take a critical hit, you can spend 2 Resolve Points as a reaction to negate the resulting extra damage and critical hit effect. When you do so, the kasa gains a new dent, scratch, or other mark.
    """
    
    let FalconBoots = CompendiumItem(context: context)
    FalconBoots.name = "Falcon Boots"
    FalconBoots.category = "Other"
    FalconBoots.level = 5
    FalconBoots.price = 3000
    FalconBoots.bulk = 1
    FalconBoots.content = """
    Falcon boots were originally armored steel boots with integrated knee protection etched with falcons across the front. They were most commonly employed by a group called the Steel Falcons, a branch of the Eagle Knights of the Golarion nation of Andoran, and they were apparently designed for use specifically on sailing ships.
    
    As a move action while wearing falcon boots, you can set your own personal, local gravity to be perpendicular to any adjacent surface able to support your weight under normal gravity conditions. This personal gravity effect only functions in normal gravity or lower. While this personal gravity is active, you gain a climb speed equal to your land speed, and if knocked prone, you fall in accordance with your personal gravity (thus falling prone in your space, even if that is on a wall or ceiling, rather than falling toward the ground as defined by the environment’s normal gravity conditions). If you drop an item while your falcon boots are active, it also falls in your space. If you move from that square before picking up a dropped item, the item becomes subject to normal gravity.
    
    If you are not adjacent to a surface able to support your weight, your falcon boots cease to function and you are subject to normal gravity. You can also deactivate falcon boots as a move action. There is no limit to how long falcon boots can function as long as you remain on a surface able to support your weight.

    """
    
    let RingofSustenance = CompendiumItem(context: context)
    RingofSustenance.name = "Ring of Sustenance"
    RingofSustenance.category = "Ring"
    RingofSustenance.level = 5
    RingofSustenance.price = 2925
    RingofSustenance.bulk = 0
    RingofSustenance.content = """
    This ring provides you with life-sustaining nourishment, negating the need for food or drink while the ring is worn. Additionally, the ring’s magic refreshes your body and mind while worn, so you need only 2 hours of sleep each day to gain the benefits of 8 hours of rest. If you cast spells, you can prepare spells after only 2 hours, but you still can’t prepare spells more than once per day. The ring must be worn for a full week before its magic takes effect, and if removed you must wear it for another week to reattune it to you.
    """
    
    let SkyfireSaddle = CompendiumItem(context: context)
    SkyfireSaddle.name = "Skyfire Saddle"
    SkyfireSaddle.category = "Other"
    SkyfireSaddle.level = 5
    SkyfireSaddle.price = 2650
    SkyfireSaddle.bulk = 1
    SkyfireSaddle.content = """
    The Skyfire Legion rarely uses draconic steeds these days, but the tradition of forging magic items such as the Skyfire saddle is alive and well on Triaxus. This throwback to the Skyfire Legion’s glory days sees plenty of practical use throughout the galaxy. Other institutions such as the Aspis Consortium and Starfinder Society purchase these saddles for operations on worlds where mounts are plentiful.
    
    A Skyfire saddle provides a few benefits. When riding a creature fitted with one, reduce the DC by 5 of Survival checks attempted as part of actions to ride a creature. If the DC would be reduced to 0, you don’t need to attempt the check. In addition, when you fall from the saddle, it slows your fall, reducing the die size for falling damage by one (so 1d6 becomes 1d4). Further, anytime your mount needs to attempt a saving throw, you can spend 1 Resolve Point to either use your saving throw bonus in place of the mount’s or grant the creature a +2 insight bonus to its saving throw.
    """
    
    let StaffofMysticHealing = CompendiumItem(context: context)
    StaffofMysticHealing.name = "Staff of Mystic Healing"
    StaffofMysticHealing.category = "Other"
    StaffofMysticHealing.level = 5
    StaffofMysticHealing.price = 3700
    StaffofMysticHealing.bulk = 1
    StaffofMysticHealing.content = """
    Available in a variety of shapes and sizes, a staff of mystic healing usually takes the form of an archaic shepherd’s crook, carved with pre-Gap runes of origin denoting prosperity and long life. If you have the healing touch class feature, you can use that ability one additional time per day while holding the staff. You cannot use more than one staff of mystic healing each day to gain more than one additional use of healing touch, and a staff of mystic healing works only once per day.
    """
    
    let StorageGoo = CompendiumItem(context: context)
    StorageGoo.name = "Storage Goo"
    StorageGoo.category = "Other"
    StorageGoo.level = 5
    StorageGoo.price = 500
    StorageGoo.bulk = 0
    StorageGoo.content = """
    When not in use, storage goo is a ball of slightly luminous putty, 6 inches in diameter, with the consistency of soft chewing gum. Skittermander mystics concocted this goo long ago as a novelty. The stuff’s usefulness, especially for smuggling, has seen its manufacture spread throughout the Veskarium and across known space.
    
    As a standard action, you can squeeze the goo to activate it. If the goo isn’t storing any items, this causes it to glow with blue light and remain active for up to 1 minute. While the goo is active, you can store up to 1 bulk of objects within it without changing the goo’s shape or size, as the objects appear to be deconstructed into blue light. You can store analog one-handed melee weapons, tools, and other simple objects, provided the objects are no more complex than analog melee weapons and require no power.
    
    If you activate goo that has stored objects inside, those objects reemerge, almost as if they’re being reconstructed in a display of blue light. If you’re holding the goo when the objects reemerge, you can have as many reappear in your hands as you have hands free, and the rest fall to the ground in your space. Once the goo releases stored objects, it turns to dust.
    """
    
    let DiffractionCloakMk1 = CompendiumItem(context: context)
    DiffractionCloakMk1.name = "Diffraction Cloak, Mk 1"
    DiffractionCloakMk1.category = "Other"
    DiffractionCloakMk1.level = 5
    DiffractionCloakMk1.price = 3200
    DiffractionCloakMk1.bulk = 1
    DiffractionCloakMk1.content = """
    A diffraction cloak bends light around it, causing the garment to subtly shimmer and hinting at its ability to warp nearby energy. While you wear this cloak, it protects you from cold, electricity, fire, and force damage. If an attack dealing such damage targets your EAC and hits, as a reaction you can force the attacker to be reroll the d20 and use the lower result. If you fail a saving throw against an effect that deals such damage, as a reaction you can reroll the saving throw and use the higher result. If you use a given diffraction cloak, you can’t benefit from a different one for 24 hours.
    
    This cloak allows for one reroll per day.
    """
    
    let FieryRuneplatesMk1 = CompendiumItem(context: context)
    FieryRuneplatesMk1.name = "Fiery Runeplates, Mk 1"
    FieryRuneplatesMk1.category = "Other"
    FieryRuneplatesMk1.level = 5
    FieryRuneplatesMk1.price = 3500
    FieryRuneplatesMk1.bulk = 3
    FieryRuneplatesMk1.content = """
    Those who serve the light sometimes wear fiery runeplates, as do those who love fire or associate with entities of elemental flame or hellfire. These rectangular copper plates are about a foot long and half as wide, and they come in a pair. They might bear fiery iconography such as that of Sarenrae, Hellknights, a mighty elemental being, or the demon lord Flauros, or they might have only their runes for decoration. You wear the plates by affixing them to clothing or armor. The plates count as a worn magic item unless you install them in armor, taking up a number of upgrade slots equal to their mark number.
    
    While wearing fiery runeplates, as a standard action, you can command them to generate an aura of spiraling flames in all squares adjacent to your space. When a creature starts its turn in or enters the area on its turn, it takes fire damage according to the plates’ type, as shown on Table 1–26: Fiery Runeplates. A creature takes this damage only once per round and can attempt a Reflex save (see the table) to take half damage. The flames can damage flammable objects in the area.
    
    Once the runeplates are activated, the flames persist for up to a total of 10 rounds per day. They cease immediately if you are unable to take actions, and as a move action you can end the effect entirely or suppress the flames for 1 round. Rounds in which the flames are suppressed don’t count against their daily limit. If you use a given set of fiery runeplates, you can use a different set only after 24 hours have passed.
    
    Damage: 5 F
    Save DC: 13
    """
    
    let FigurineofWondrousPowerObsidianElectrovore = CompendiumItem(context: context)
    FigurineofWondrousPowerObsidianElectrovore.name = "Figurine of Wondrous Power, Obsidian Electrovore"
    FigurineofWondrousPowerObsidianElectrovore.category = "Other"
    FigurineofWondrousPowerObsidianElectrovore.level = 5
    FigurineofWondrousPowerObsidianElectrovore.price = 3000
    FigurineofWondrousPowerObsidianElectrovore.bulk = 0
    FigurineofWondrousPowerObsidianElectrovore.content = """
    This statuette of obsidian can change into an electrovore. The electrovore has only 1 Resolve Point when transformed.
    
    Each figurine of wondrous power is a statuette of a creature no more than a few inches tall and long. As a standard action, you can speak the figurine’s command word to transform the figurine into a creature in a space you can see within 30 feet of you. The figurine can’t change into a creature if it doesn’t have enough space to do so or if the environment can’t support the creature’s life functions. When the creature appears, it can act immediately on your turn. It understands and obeys your commands, and it understands Common but can’t speak. The creature considers your allies to be its allies and follows their orders when you aren’t able to give any.
    
    Each figurine in this entry can become a creature for up to 1 minute per day, though this duration does not need to be used continuously. After the figure has been in creature form for 1 minute, it reverts to figurine form and can’t be activated again for 24 hours. As a move action, you can dismiss the creature and return it to figurine form. The creature reverts to a figurine if killed. Although it can be healed while in creature form, the creature otherwise regains all its Hit Points 24 hours after its most recent activation. Therefore, if the creature is killed and reverts to figurine form, it can’t transform again for 24 hours.
    
    If you are within 30 feet of the creature when it returns to figurine form, the figurine appears in one of your empty hands or in your space (your choice). Otherwise, it reverts to figurine form as close to you as possible in its own space.
    
    A figurine of wondrous power becomes nonmagical if broken, losing its power to transform into a creature.
    """
    
    let TravelTreadsMk1 = CompendiumItem(context: context)
    TravelTreadsMk1.name = "Travel Treads, Mk 1"
    TravelTreadsMk1.category = "Other"
    TravelTreadsMk1.level = 5
    TravelTreadsMk1.price = 2750
    TravelTreadsMk1.bulk = 0
    TravelTreadsMk1.content = """
    Reduce hustling damage by 1, +1 enhancement bonus to checks during a forced march, and one reroll.
    
    The wandering deity Weydan breaks pieces of himself off into mortal avatars to explore and experience the Material Plane. The first travel treads were gifts from such avatars bequeathed to fellow travelers. Followers of Weydan learned to create travel treads, and other organizations have copied the magic. Travel treads come in pairs, most often already attached to shoes, boots, or similar gear. You wear the treads by affixing them to existing footwear. The treads count as a worn magic item unless you install them in armor, taking up one upgrade slot.
    
    While you wear travel treads, you reduce the amount of nonlethal damage you take from hustling and gain an enhancement bonus to Constitution checks when making a forced march. In addition, if you fail a saving throw against an effect that would render you dazed, entangled, paralyzed, prone, staggered, or stunned, or an effect that would reduce your movement speed, as a reaction you can reroll the saving throw and take the higher result. Alternatively, if an opponent succeeds at a combat maneuver to bull rush, grapple, reposition, or trip you, as a reaction you can force that attacker to reroll the attack, taking the lower result. Once you benefit from a given set of travel treads, you can benefit from a different one only after 24 hours have passed.
    """
    
    let EnergyRelayGloves = CompendiumItem(context: context)
    EnergyRelayGloves.name = "Energy-Relay Gloves"
    EnergyRelayGloves.category = "Other"
    EnergyRelayGloves.level = 6
    EnergyRelayGloves.price = 4250
    EnergyRelayGloves.bulk = 0
    EnergyRelayGloves.content = """
    Warriors across the Pact Worlds commission these gloves to gain versatility in the type of damage they deal. A set of energy-relay gloves is permanently configured to one damage type selected from among acid, cold, electricity, fire, or sonic. The gloves count as a worn magic item unless you install them in armor, taking up one upgrade slot.
    
    If you hit with a weapon attack while wearing energy-relay gloves and deal additional damage, you can convert that additional damage to the gloves’ type. The gloves can convert additional damage from a class feature, a feat, and the additional damage dealt on critical hit, but they can’t convert additional damage from equipment, changes to a weapon’s damage dice, or spells. Using the gloves doesn’t change whether the attack targets EAC or KAC.
    """
    
    let EohiBoots = CompendiumItem(context: context)
    EohiBoots.name = "Eohi Boots"
    EohiBoots.category = "Other"
    EohiBoots.level = 6
    EohiBoots.price = 4200
    EohiBoots.bulk = 0.1
    EohiBoots.content = """
    The insides of these simple-looking gray boots are lined with eohi fur (see page 57). Once per day as a full action, you can move up to your speed and make a full attack with melee weapons only. The penalty on each attack is –6 instead of –4, and you take a –2 penalty to your AC until the beginning of your next turn.
    """
    
    let FerocityBlazon = CompendiumItem(context: context)
    FerocityBlazon.name = "Ferocity Blazon"
    FerocityBlazon.category = "Other"
    FerocityBlazon.level = 6
    FerocityBlazon.price = 4000
    FerocityBlazon.bulk = 1
    FerocityBlazon.content = """
    A fierce reputation is a benefit, but only if your opponents know of it. Symbols on clothing have long been used to create associations between a given group’s reputation and its members. A ferocity blazon is a decorated medal or tabard whose magic enhances any impression you make so that you’re better at intimidation.
    
    A ferocity blazon must be worn prominently to function. While you do so, when you succeed at an Intimidate check to bully or demoralize a creature, you double the duration of the effect. If you are in the captain role on a starship, when you take the taunt action and succeed at the Bluff or Intimidate check, you double the duration that enemy crew members take a penalty to checks.

    """
    
    let GloveofStoring = CompendiumItem(context: context)
    GloveofStoring.name = "Glove of Storing"
    GloveofStoring.category = "Other"
    GloveofStoring.level = 6
    GloveofStoring.price = 4600
    GloveofStoring.bulk = 0.1
    GloveofStoring.content = """
    This simple glove is surprisingly smooth to the touch. While holding an item no larger than 2 bulk in the hand wearing it, you can command a glove of storing to shrink the held item to microscopic size and negligible bulk, and merge it with the palm of the glove. Returning the item to its original scale requires a mere snap of the fingers wearing the glove. You can store or retrieve an item within a glove of storing as a swift or move action. A glove of storing can store only one item at a time, and if the glove’s effect is suppressed or dispelled, any stored item immediately returns to its original size.
    """
    
    let HatofDisguise = CompendiumItem(context: context)
    HatofDisguise.name = "Hat of Disguise"
    HatofDisguise.category = "Other"
    HatofDisguise.level = 6
    HatofDisguise.price = 3850
    HatofDisguise.bulk = 0
    HatofDisguise.content = """
    A hat of disguise can be a cap of any variety, a modified armor helmet, or an upgrade to armored headwear. While wearing the hat of disguise, you can use it to cast disguise self at will (CL 6th). The hat counts as a worn magic item unless you install it in armor, taking up one upgrade slot.
    """
    
    let ElementalGemMk2 = CompendiumItem(context: context)
    ElementalGemMk2.name = "Elemental Gem, Mk 2"
    ElementalGemMk2.category = "Other"
    ElementalGemMk2.level = 6
    ElementalGemMk2.price = 650
    ElementalGemMk2.bulk = 0
    ElementalGemMk2.content = """
    Each elemental gem contains one elemental from a specific elemental plane. The gem’s color indicates the sort of elemental contained within—air gems are transparent, earth gems are brown, fire gems are orange, and water gems are blue. As a standard action, you can crush the gem, destroying it. The contained elemental then appears as if you had cast a summon creature spell of a level and caster level according to the gem’s type.
    
    2nd-level summon creature, caster level 6th
    """
    
    let PlasmaBeadsMk1 = CompendiumItem(context: context)
    PlasmaBeadsMk1.name = "Plasma Beads, Mk 1"
    PlasmaBeadsMk1.category = "Other"
    PlasmaBeadsMk1.level = 6
    PlasmaBeadsMk1.price = 4200
    PlasmaBeadsMk1.bulk = 0
    PlasmaBeadsMk1.content = """
    These four spherical beads strung with a cord emit a slight fiery glow from the plasma magically sealed inside them. While you wear the necklace, as a standard action, you can detach a bead and throw it (range increment 20 feet) as a ranged attack targeting a grid intersection (AC 5). If you throw the bead through a narrow opening, your attack roll must equal or exceed the opening’s AC (10 for a narrow opening or 15 for an extremely narrow one) to avoid hitting the side and detonating the bead prematurely. When the bead strikes a hard surface, it explodes in a 20-foot radius, dealing electricity and fire damage according to its type, as shown on the table below. A target that succeeds at a Reflex save (see the table) takes only half damage. Once you detach a bead, it loses its magic if it hasn’t exploded after 5 rounds. If the necklace isn’t worn, detached beads immediately become nonmagical.
    
    Damage: 3d6 E & F
    Save DC: 13
    """
    
    let ConspiratorsEmblem = CompendiumItem(context: context)
    ConspiratorsEmblem.name = "Conspirator's Emblem"
    ConspiratorsEmblem.category = "Other"
    ConspiratorsEmblem.level = 7
    ConspiratorsEmblem.price = 6500
    ConspiratorsEmblem.bulk = 0
    ConspiratorsEmblem.content = """
    A conspirator’s emblem is a badge or amulet like those commonly worn to mark people as members of an organization. Insignia of the Aspis Consortium in particular are notorious for all sorts of secretive magic, including that of the conspirator’s emblem.
    
    As a standard action while wearing this emblem, you can create an aura of confidentiality in a 20-foot-radius spherical emanation centered on you. You can designate any number of willing creatures you can see within the aura as coconspirators. You and your coconspirators can converse normally so long as you remain within the aura, provided you share a language or another means of understanding one another. Other creatures inaccurately perceive your discussion, sensing a magically generated dialogue about a topic you designate. Comprehend languages reveals only that your conversation has a magical aspect, but a creature benefiting from a tongues spell or capable of truespeech understands your actual exchange if within the emblem’s aura.
    
    A conspirator’s emblem can create its emanation for up to 1 hour per day; this duration can be used in 10-minute increments. The effect ends immediately if you remove the item or fall unconscious. A creature participating in the emanation of any conspirator’s emblem for longer than 1 hour on a given day experiences psychic dissonance, becoming sickened while within the area and for 1 hour after each subsequent exposure.
    """
    
    let FurtiveGarment = CompendiumItem(context: context)
    FurtiveGarment.name = "Furtive Garment"
    FurtiveGarment.category = "Other"
    FurtiveGarment.level = 7
    FurtiveGarment.price = 5500
    FurtiveGarment.bulk = 0
    FurtiveGarment.content = """
    The oldest furtive garments are robes and other clothing worn by followers of Lao Shu Po. Some of these relics originated on lost Golarion, or so priests of Grandmother Rat claim. Most of these vestments are cloaks, loose coats, mantles, scarves, or similar garments. Modern equivalents are sleeker, designed to integrate with existing outfits and armor. You can wear the garment over other clothing or light armor, in which case it counts as a worn item, or you can install it in light armor, taking up one upgrade slot.
    
    As a standard action while wearing a furtive garment, you can command the item to change the shape and appearance of clothing or light armor you wear to that of other clothing or light armor you specify. This change is illusory, fooling all senses. In addition, your clothing or armor seems nonmagical to spells and abilities that detect magic. Despite appearances, whatever you’re wearing retains its normal properties while hidden by the illusion. As a standard action, you can end the effect, returning disguised clothing or armor to its normal appearance.
    """
    
    let PathingTelescope = CompendiumItem(context: context)
    PathingTelescope.name = "Pathing Telescope"
    PathingTelescope.category = "Other"
    PathingTelescope.level = 7
    PathingTelescope.price = 7000
    PathingTelescope.bulk = 2
    PathingTelescope.content = """
    Starfaring societies use advanced technology for viewing the stars and plotting courses among them. Triune’s clerics intertwined magic and technology to create the initial models of the pathing telescope to analyze the gulf between stars and perceive far-off worlds. Knowledge of how to build these telescopes is as freely distributed as knowledge of how to access the Drift.
    
    When you use the Piloting skill to astrogate, you can spend 1 hour studying the stars with a pathing telescope. If you do so and successfully plot a course, you reduce the travel time to reach a satellite by half or to travel within a system to 1d4+1 days. In addition, the telescope grants you a +3 insight bonus to skill checks to avoid becoming lost, whether you’re using Piloting to navigate on a planet or Survival to orienteer.
    """
    
    let RestoringRod = CompendiumItem(context: context)
    RestoringRod.name = "Restoring Rod"
    RestoringRod.category = "Other"
    RestoringRod.level = 7
    RestoringRod.price = 6750
    RestoringRod.bulk = 1
    RestoringRod.content = """
    Helixes and other geometric patterns swirl within the clear shaft of a restoring rod, which is capped with gold on each end. To use the rod, you must hold it. After you roll dice to determine the number of Hit Points or the amount of ability damage restored by a spell or effect you create, you can activate the rod if any of those dice have a result of 1 or 2. Doing so is part of the same action you took to cast the spell or create the effect. If you activate the rod, you can spend 1 Resolve Point to add 2 to each die with a result of 1 or 2. Once per day, the rod can be activated to gain its benefits without requiring the user to spend a Resolve Point.
    """
    
    let Thruneblade = CompendiumItem(context: context)
    Thruneblade.name = "Thruneblade"
    Thruneblade.category = "Other"
    Thruneblade.level = 7
    Thruneblade.price = 9980
    Thruneblade.bulk = 1
    Thruneblade.content = """
    It is thought that Thruneblades were originally created in the Golarion nation of Cheliax sometime before the Gap, but no records of their creation or what they were originally called have been found, even in pre-Gap sources. Scholars believe that these weapons were widely distributed to agents of Cheliax’s ruling House of Thrune; Thruneblades bear the heraldry of House Thrune as well as the name “Thrune” etched on each blade, whence the weapons derive their modern name. Relic Thruneblades from pre-Gap Golarion are invariably bladed melee weapons, with swords being most prevalent. The common characteristic of all Thruneblades is their spellbane critical hit effect, though many such weapons have additional magic abilities, such as the unholy weapon fusion. Modern scholars have successfully reengineered the spellbane fusion for use with modern weapons. The Thruneblade presented in the table on page 50 is a sintered longsword with the spellbane fusion. This weapon is one of the most commonly available Thruneblades, and the price includes both the weapon and the fusion.
    """
    
    let ArquandHorns = CompendiumItem(context: context)
    ArquandHorns.name = "Arquand Horns"
    ArquandHorns.category = "Other"
    ArquandHorns.level = 8
    ArquandHorns.price = 8400
    ArquandHorns.bulk = 0.1
    ArquandHorns.content = """
    A coronet made of an Arquand gazelle’s four distinctive horns, this headwear counts as a worn magic item unless you install it in armor, taking up one upgrade slot. While you wear Arquand horns, you receive a +2 enhancement bonus to saving throws against fear effects. In addition, as a standard action, you can command the Arquand horns to protect you with an aura that lasts for 1 minute. While the aura lasts, creatures within 60 feet of you must succeed at a Will saving throw (DC = 14 + your Charisma modifier) to attack you, cast a spell that includes you as an unwilling target, or take any action to directly harm or disable your equipment. This is a mindaffecting, emotion effect, and a creature that succeeds at the save is immune to the aura for 24 hours. Arquand gazelles are immune to the aura. A set of Arquand horns can create this effect once per day, and after you have used one set of Arquand horns to create this effect, you can’t do so again with any other set for 24 hours.
    """
    
    let AuraGoggles = CompendiumItem(context: context)
    AuraGoggles.name = "Aura Goggles"
    AuraGoggles.category = "Other"
    AuraGoggles.level = 8
    AuraGoggles.price = 9000
    AuraGoggles.bulk = 0.1
    AuraGoggles.content = """
    While wearing these goggles, you gain a +4 circumstance bonus to saving throws against sense-dependent effects that target vision (such as gaze abilities or a bryrvath’s impossible aura). In addition, once per day, you can cast arcane sight as a spell-like ability (CL 8th).
    """
    
    let CalcificationRod = CompendiumItem(context: context)
    CalcificationRod.name = "Calcification Rod"
    CalcificationRod.category = "Other"
    CalcificationRod.level = 8
    CalcificationRod.price = 9500
    CalcificationRod.bulk = 2
    CalcificationRod.content = """
    Kalos of the Brethedan moon of Kalo-Mahoi have developed numerous magical innovations honoring their artistic traditions. They created calcification rods, idealistically, to perfectly preserve objects of natural history that might otherwise rot away. Such rods see use well beyond Kalo-Mahoi, whether by scholars of natural history or those with less scrupulous aims. An authentic Kalo-Mahoian calcification rod is a rough shaft of coral that glows at the end that touches a chosen target.
    
    As a standard action, you can touch a calcification rod to a nonmagical object made of once-living matter, including a corpse. If the object fits into a 10-foot cube, it must succeed at a Fortitude saving throw (DC = 14 + your key ability score modifier) or turn to stone. If a creature holds or wears the target object, that creature can use its own Fortitude save bonus in place of the object’s.
    
    Alternatively, you can use the rod as a club (which counts as magic for the purpose of bypassing DR), or you can attempt to touch a creature with the rod by making an attack against its EAC. If your attack hits a creature that is living or made of once-living matter, the target must succeed at a Fortitude saving throw (at the same DC) or move one step further along the Dexterity poison track. While under this effect, a creature can attempt a new saving throw at the end of its turn each round, curing the affliction with one successful save. A creature that would reach the dead state is instead affected as if it had failed its saving throw against a flesh to stone spell, except it can attempt a new saving throw once every 24 hours to end the affliction.
    
    Any target that is immune to petrification is immune to this rod’s effects.
    """
    
    let MaskoftheMantis = CompendiumItem(context: context)
    MaskoftheMantis.name = "Mask of the Mantis"
    MaskoftheMantis.category = "Other"
    MaskoftheMantis.level = 8
    MaskoftheMantis.price = 8400
    MaskoftheMantis.bulk = 0.1
    MaskoftheMantis.content = """
    Once the traditional headgear for an ancient cabal of Golarion assassins called the Red Mantis, the mask of the mantis is now a relic sought by scholars of the missing planet, especially those seeking evidence that the Swarm visited Golarion at some time in the distant past. A mask of the mantis is a helmet that fully covers the head and face and has the appearance of a red insectile head with large compound eyes and long, backward-curving antennae. A mask of the mantis replaces a suit of armor’s normal helmet (if any) and is incorporated into the armor’s normal environmental protections; these protections do not function if the helm is removed. If the armor has an available upgrade slot, a mask of the mantis takes up one upgrade slot; otherwise, the mask counts as one of your two worn magic items.
    
    While wearing a mask of the mantis, you gain darkvision with a range of 60 feet. In addition, a mask of the mantis has 2 daily charges. As a standard action, you can expend 1 charge to gain either the effects of see invisibility (as per the spell) for 30 minutes or a +3 insight bonus to Perception checks for 30 minutes. Both of these effects can be active simultaneously, and each charge is replenished 24 hours after being used.
    """
    
    let TechbaneRod = CompendiumItem(context: context)
    TechbaneRod.name = "Techbane Rod"
    TechbaneRod.category = "Other"
    TechbaneRod.level = 8
    TechbaneRod.price = 10000
    TechbaneRod.bulk = 1
    TechbaneRod.content = """
    A simple wooden rod carved with sigils that pulse with magic, a techbane rod is particularly useful against those reliant on technology. These rods appeared during the Gap, likely created by spellcasters as an answer to rapidly expanding technology.
    
    As a standard action, you can touch a techbane rod to an unattended technological or hybrid item, weapon, or armor. If such an object fits inside a 10-foot cube, it must succeed at a Fortitude saving throw (DC = 14 + your key ability score modifier) or its functions are suppressed for 1d4 rounds.
    
    If a creature is holding or wearing the object, you must succeed at a melee attack roll against the creature’s EAC to hit the target object. Alternatively, if a creature is wearing the object, you can use the techbane rod as a club (which counts as magic for the purpose of overcoming DR) to hit the wearer and the target object. If your attack hits, the object must attempt a Fortitude saving throw as normal, but the bearer can use its Fortitude save bonus in place of the object’s.
    
    You can instead touch the rod to a creature that has the technological subtype, targeting EAC, or you can use the rod as a magic club against such a creature. If your attack hits, the creature must succeed at a Fortitude saving throw (at the same DC) or become staggered and unable to use energy-based attacks for 1d4 rounds. A creature can attempt a new Fortitude saving throw at the end of its turn each round to end the effect early.
    """
    
    let TeleportationPuck = CompendiumItem(context: context)
    TeleportationPuck.name = "Teleportation Puck"
    TeleportationPuck.category = "Other"
    TeleportationPuck.level = 8
    TeleportationPuck.price = 1500
    TeleportationPuck.bulk = 0
    TeleportationPuck.content = """
    A teleportation puck is a dull black disc, about 6 inches in diameter and 1 inch thick, with a rough surface. If the puck is viewed with detect magic, runic patterns become visible on the puck’s surface. As a standard action, you can activate the puck and throw it (range increment 30 feet) as a ranged attack targeting a square (AC 5). If the puck is within 120 feet of you after you throw it, you can teleport to the puck’s location as a move action, carrying objects up to your maximum capacity. You can also bring up to two willing or unconscious Medium or smaller creatures (or one willing or unconscious Large creature) with you, provided that all creatures that teleport in this way are touching at least one other creature that teleports at the same time.
    
    If you arrive in a place that is already occupied by a solid body, you and all creatures traveling with you each take 1d6 force damage and are shunted to a random open space on a suitable surface within 10 feet of the puck’s location. If no such space exists within 10 feet, you and all creatures traveling with you each take 1d6 additional force damage and are shunted to an appropriate space within 30 feet. If no such space exists within 30 feet, you and all creatures traveling with you each take 2d6 additional force damage and the teleportation fails. Any creature that occupies the destination space and causes the teleportation to fail takes half the damage you do.
    
    Once thrown, the puck remains active either until you successfully teleport to it or until 5 rounds have passed. It then becomes a nonmagical object that can’t be used to teleport again.
    """
    
    let EncryptionTattooOperative = CompendiumItem(context: context)
    EncryptionTattooOperative.name = "Encryption Tattoo, Operative"
    EncryptionTattooOperative.category = "Other"
    EncryptionTattooOperative.level = 8
    EncryptionTattooOperative.price = 8900
    EncryptionTattooOperative.bulk = 0.1
    EncryptionTattooOperative.content = """
    The secretive members of the Android Abolitionist Front identify each other with invisible magical tattoos. When you are within 60 feet of a being with another encryption tattoo and activate your encryption tattoo with a code word as a move action, your tattoo becomes visible for 1 minute and glows faintly. The tattoo closely resembles the glowing circuit patterns prevalent on android skin, and is therefore particularly obvious on non-androids. The agent encryption tattoo is the standard type of encryption tattoo. Certain encryption tattoos, when activated with a different code word, also grant you damage reduction: operative encryption tattoos provide DR 5/—, provocateur encryption tattoos provide DR 10/—, and master encryption tattoos provide DR 15/—. This damage reduction doesn’t stack with any damage reduction you already have. The damage reduction lasts for the 1 minute your tattoo is visible.
    
    Although there is no limit on the number of times you can cause your encryption tattoo to appear, you can activate its power to gain DR only once per day.
    
    An encryption tattoo doesn’t count as a worn magic item, and it can’t be disarmed or sundered. In addition, it can be installed in an android’s racial armor upgrade slot.
    """
    
    let FigurineofWondrousPowerBoneCrestEater = CompendiumItem(context: context)
    FigurineofWondrousPowerBoneCrestEater.name = "Figurine of Wondrous Power, Bone Crest-Eater"
    FigurineofWondrousPowerBoneCrestEater.category = "Other"
    FigurineofWondrousPowerBoneCrestEater.level = 8
    FigurineofWondrousPowerBoneCrestEater.price = 9000
    FigurineofWondrousPowerBoneCrestEater.bulk = 0
    FigurineofWondrousPowerBoneCrestEater.content = """
    This bone statuette can change into a crest-eater. The creature prefers to remain close to you, and if it has no other orders and can do so safely, it moves next to you.
    
    Each figurine of wondrous power is a statuette of a creature no more than a few inches tall and long. As a standard action, you can speak the figurine’s command word to transform the figurine into a creature in a space you can see within 30 feet of you. The figurine can’t change into a creature if it doesn’t have enough space to do so or if the environment can’t support the creature’s life functions. When the creature appears, it can act immediately on your turn. It understands and obeys your commands, and it understands Common but can’t speak. The creature considers your allies to be its allies and follows their orders when you aren’t able to give any.
    
    Each figurine in this entry can become a creature for up to 1 minute per day, though this duration does not need to be used continuously. After the figure has been in creature form for 1 minute, it reverts to figurine form and can’t be activated again for 24 hours. As a move action, you can dismiss the creature and return it to figurine form. The creature reverts to a figurine if killed. Although it can be healed while in creature form, the creature otherwise regains all its Hit Points 24 hours after its most recent activation. Therefore, if the creature is killed and reverts to figurine form, it can’t transform again for 24 hours.
    
    If you are within 30 feet of the creature when it returns to figurine form, the figurine appears in one of your empty hands or in your space (your choice). Otherwise, it reverts to figurine form as close to you as possible in its own space.
    
    A figurine of wondrous power becomes nonmagical if broken, losing its power to transform into a creature.
    """
    
    let ImprovisationAdornmentMk2 = CompendiumItem(context: context)
    ImprovisationAdornmentMk2.name = "Improvisation Adornment, Mk 2"
    ImprovisationAdornmentMk2.category = "Other"
    ImprovisationAdornmentMk2.level = 8
    ImprovisationAdornmentMk2.price = 8400
    ImprovisationAdornmentMk2.bulk = 0
    ImprovisationAdornmentMk2.content = """
    Those who rely on speaking to persuade or please others and those who require the ability to gauge an audience find an improvisation adornment invaluable. This item is usually something worn on or near the head, such as a necklace, headband, or a mask. While wearing this item, if you fail a Bluff, Culture, Diplomacy, Intimidate, or Sense Motive check, as a reaction you can reroll the check and take the better result. You can also reroll a Profession check, provided the GM agrees the check involved some sort of interaction, such as acting, musical performance, public speaking, and the like. Once you benefit from a given improvisation adornment, you can benefit from a different one only after 24 hours have passed.
    
    This adornment allows two rerolls per day.
    """
    
    let PlanarRuneplatesMk2 = CompendiumItem(context: context)
    PlanarRuneplatesMk2.name = "Planar Runeplates, Mk 2"
    PlanarRuneplatesMk2.category = "Other"
    PlanarRuneplatesMk2.level = 8
    PlanarRuneplatesMk2.price = 8500
    PlanarRuneplatesMk2.bulk = 0
    PlanarRuneplatesMk2.content = """
    Cultists and religious artificers forge planar runeplates, as do the demon-worshipping drow of Apostae. Each set of planar runeplates is dedicated to a specific powerful being native to the Outer Planes, such as an archdevil, a demon lord, or a god. Devotional symbols on the plates might convince others you’re aligned with the being in question, even if you’re not. You wear the plates by affixing them to clothing or armor; they count as a worn magic item unless you install them in armor, taking up a number of upgrade slots equal to their mark.
    
    Each set of planar runeplates has the same alignment as the extraplanar entity to which the plates are dedicated, although no plates are created with a neutral alignment with no other alignment components. While you wear the plates, they have several effects. If a creature with an alignment component opposite any of the plates’ alignment components attacks you, the plates alert you to the creature’s opposing subtypes. If the attack hits, as a reaction you can force the creature to reroll the attack and use the worse result. If you fail a saving throw against an effect created by such a creature, as a reaction you can reroll the saving throw and take the better result. Once you benefit from a given set of planar runeplates, you can benefit from a different set only after 24 hours have passed.
    
    This planar runeplate allows for two rerolls per day.
    """
    
    let AnvilofTorag = CompendiumItem(context: context)
    AnvilofTorag.name = "Anvil of Torag"
    AnvilofTorag.category = "Other"
    AnvilofTorag.level = 9
    AnvilofTorag.price = 12000
    AnvilofTorag.bulk = 50
    AnvilofTorag.content = """
    Anvils of Torag are extremely rare and highly valued relics that are believed to have come from the Five Kings Mountains of lost Golarion. Each anvil consists of a heavy iron block anchored to a 5-foot-diameter stone base engraved with magical runes and symbols. Anvils of Torag are much prized by dwarf collectors and the crafting guilds of dwarven star citadels, as the anvils are seen as a tangible link to Torag, the patron god of the dwarves, who disappeared during the Gap. While non-dwarf collectors often consider an anvil of Torag too precious to use, most dwarves think it’s ridiculous to have a crafting relic and not actually use it.
    
    An anvil of Torag aids in crafting equipment and magic items. If you use an anvil of Torag while crafting an item, you are considered to have 2 additional ranks in the appropriate crafting skill, allowing you to craft items of higher level than you would normally be able to create. A given anvil of Torag can be used to craft only one item per day.
    
    Due its bulk and size, an anvil of Torag is generally not portable and must be properly anchored before use. An anvil of Torag can be installed on a starship in an arcane laboratory, a cargo hold, or a tech workshop, or it can be placed anywhere with room to store a Large vehicle.
    """
    
    let DreamsilkCloak = CompendiumItem(context: context)
    DreamsilkCloak.name = "Dreamsilk Cloak"
    DreamsilkCloak.category = "Other"
    DreamsilkCloak.level = 9
    DreamsilkCloak.price = 13400
    DreamsilkCloak.bulk = 0.1
    DreamsilkCloak.content = """
    The original dreamsilk cloaks were woven from the purple silk of dozens of dream spiders, arachnids native to the vast Golarion jungle known as the Mwangi Expanse. Before the Gap, it was common for soothsayers and explorers to depend on the cloaks for the visions of the future that came to them in their sleep. Modern artificers have learned to make such cloaks by imbuing artificial fabrics with oils derived from transdimensional pesh.
    
    While wearing a dreamsilk cloak, you can see details in hallucinations and illusions that others overlook. This does not give you any bonus to saving throws against illusions, but if you successfully disbelieve an illusion and convey the fact that it is an illusion to others, they gain a +6 bonus to their saving throws to disbelieve, rather than the normal +4. Additionally, if you wear a dreamsilk cloak for an uninterrupted period of at least 16 hours and then sleep for at least 8 additional hours while still wearing it, you have a vivid, prophetic dream. Although the meaning of the dream isn’t immediately obvious when you wake up, you can learn more as the day progresses. Once during the next 24 hours, you can cast augury as a spell-like ability, using your character level as your caster level.
    """
    
    let HellknightFlail = CompendiumItem(context: context)
    HellknightFlail.name = "Hellknight Flail"
    HellknightFlail.category = "Other"
    HellknightFlail.level = 9
    HellknightFlail.price = 19400
    HellknightFlail.bulk = 0.1
    HellknightFlail.content = """
    Hellknight flails were first created by the Hellknight Order of the Chain on Golarion during the years just before the Gap. Many can be traced back to Citadel Gheradesca, the ancient fortress headquarters of the Order of the Chain, where they were given out as rewards to members of the order who brought particularly high-value fugitives back to face legal consequences. Traditionally, a Hellknight flail was a basic melee weapon with the archaic special property that had heavy iron chains affixed to the haft of the weapon. After the Gap, various Hellknight orders discovered instructions for the creation of Hellknight flails among their carefully archived records. As a result, modern Hellknights have recreated Hellknight flails by applying the binding and chained weapon fusions to batons and similar weapons. Order of the Chain Hellknights frequently use Hellknight flails, as do Hellknights of other orders, as well as other law enforcement agents and bounty hunters unaffiliated with the Hellknights, though to a lesser extent. The Hellknight flail presented in the table on page 50 is an incapacitator with the binding and chained fusions, and the price includes both the weapon and the fusions.
    """
    
    let RatfolkBelt = CompendiumItem(context: context)
    RatfolkBelt.name = "Ratfolk Belt"
    RatfolkBelt.category = "Other"
    RatfolkBelt.level = 9
    RatfolkBelt.price = 12250
    RatfolkBelt.bulk = 0.1
    RatfolkBelt.content = """
    Ysoki are skilled at negotiating the cramped corridors of a starship or the access tunnels in a sprawling metropolis, but even the smallest ysoki sometimes encounter openings too small to enter. While wearing a ratfolk belt, you can move through an area as small as one-quarter your space without squeezing or one-eighth your space when squeezing. A ratfolk belt is made of stretchable nylon webbing, and it often includes clips for tools or weapons.
    """
    
    let RodofCancellation = CompendiumItem(context: context)
    RodofCancellation.name = "Rod of Cancellation"
    RodofCancellation.category = "Other"
    RodofCancellation.level = 9
    RodofCancellation.price = 2100
    RodofCancellation.bulk = 0.1
    RodofCancellation.content = """
    This device pulses with strange powers that drain items of all magical properties. When you touch a hybrid or magic item with a rod of cancellation, the item must succeed at a Will saving throw (DC = 10 + half your level + your Charisma bonus) or lose all magic abilities, becoming a mundane item of its type. If the touched item is being held or worn by a character, the item can use its bearer’s Will save bonus in place of its own, if better. Upon draining an item, the rod itself becomes nonmagical and cannot be used again. Drained items can be restored only with wish or miracle.
    """
    
    let ArclordsRodMk1 = CompendiumItem(context: context)
    ArclordsRodMk1.name = "Arclord's Rod, Mk 1"
    ArclordsRodMk1.category = "Other"
    ArclordsRodMk1.level = 9
    ArclordsRodMk1.price = 14500
    ArclordsRodMk1.bulk = 0.1
    ArclordsRodMk1.content = """
    An Arclord’s rod is a scepter-like device roughly 3 feet long, made of copper and capped with smoke-colored silver. These rods were used on pre-Gap Golarion by powerful spellcasters known as the Arclords of Nex, who hailed from the Golarion nation of that name.
    
    An Arclord’s rod is a magic weapon that can be used to make either melee or ranged attacks, but it can be used only for a single attack each round. A mk 1 Arclord’s rod functions as a static shock truncheon for melee attacks and as a pulsecaster pistol for ranged attacks. A mk 2 Arclord’s rod functions as an aurora shock truncheon and a static arc pistol. A mk 3 Arclord’s rod functions as a storm shock truncheon and an aurora arc pistol. A mk 4 Arclord’s rod functions as a tempest shock truncheon and a storm arc pistol. An Arclord’s rod has an unlimited capacity (it never runs out of charges) and has the analog and unwieldy special properties. Proficiency with both advanced melee weapons and small arms is necessary to use an Arclord’s rod without penalty for melee and ranged attacks, respectively.
    
    Once per day when you cast a spell with the electricity descriptor while wielding an Arclord’s rod, you can add a thunderclap effect (which makes half of the spell’s damage sonic damage) and a rain squall effect (which creates a fog cloud, as per the spell of the same name, centered on the target or the center of the spell’s area and lasting for 10 minutes) to the spell.
    """
    
    let DiffractionCloakMk2 = CompendiumItem(context: context)
    DiffractionCloakMk2.name = "Diffraction Cloak, Mk 2"
    DiffractionCloakMk2.category = "Other"
    DiffractionCloakMk2.level = 9
    DiffractionCloakMk2.price = 12500
    DiffractionCloakMk2.bulk = 1
    DiffractionCloakMk2.content = """
    A diffraction cloak bends light around it, causing the garment to subtly shimmer and hinting at its ability to warp nearby energy. While you wear this cloak, it protects you from cold, electricity, fire, and force damage. If an attack dealing such damage targets your EAC and hits, as a reaction you can force the attacker to be reroll the d20 and use the lower result. If you fail a saving throw against an effect that deals such damage, as a reaction you can reroll the saving throw and use the higher result. If you use a given diffraction cloak, you can’t benefit from a different one for 24 hours.
    
    This cloak allows for two rerolls per day.
    """
    
    let ElementalGemMk3 = CompendiumItem(context: context)
    ElementalGemMk3.name = "Elemental Gem, Mk 3"
    ElementalGemMk3.category = "Other"
    ElementalGemMk3.level = 9
    ElementalGemMk3.price = 2000
    ElementalGemMk3.bulk = 0
    ElementalGemMk3.content = """
    Each elemental gem contains one elemental from a specific elemental plane. The gem’s color indicates the sort of elemental contained within—air gems are transparent, earth gems are brown, fire gems are orange, and water gems are blue. As a standard action, you can crush the gem, destroying it. The contained elemental then appears as if you had cast a summon creature spell of a level and caster level according to the gem’s type.
    
    3rd-level summon creature, caster level 9th
    """
    
    let FieryRuneplatesMk2 = CompendiumItem(context: context)
    FieryRuneplatesMk2.name = "Fiery Runeplates, Mk 2"
    FieryRuneplatesMk2.category = "Other"
    FieryRuneplatesMk2.level = 9
    FieryRuneplatesMk2.price = 14000
    FieryRuneplatesMk2.bulk = 3
    FieryRuneplatesMk2.content = """
    Those who serve the light sometimes wear fiery runeplates, as do those who love fire or associate with entities of elemental flame or hellfire. These rectangular copper plates are about a foot long and half as wide, and they come in a pair. They might bear fiery iconography such as that of Sarenrae, Hellknights, a mighty elemental being, or the demon lord Flauros, or they might have only their runes for decoration. You wear the plates by affixing them to clothing or armor. The plates count as a worn magic item unless you install them in armor, taking up a number of upgrade slots equal to their mark number.
    
    While wearing fiery runeplates, as a standard action, you can command them to generate an aura of spiraling flames in all squares adjacent to your space. When a creature starts its turn in or enters the area on its turn, it takes fire damage according to the plates’ type, as shown on Table 1–26: Fiery Runeplates. A creature takes this damage only once per round and can attempt a Reflex save (see the table) to take half damage. The flames can damage flammable objects in the area.
    
    Once the runeplates are activated, the flames persist for up to a total of 10 rounds per day. They cease immediately if you are unable to take actions, and as a move action you can end the effect entirely or suppress the flames for 1 round. Rounds in which the flames are suppressed don’t count against their daily limit. If you use a given set of fiery runeplates, you can use a different set only after 24 hours have passed.
    
    Damage: 10 F
    Save DC: 15
    """
    
    let PlasmaBeadsMk2 = CompendiumItem(context: context)
    PlasmaBeadsMk2.name = "Plasma Beads, Mk 2"
    PlasmaBeadsMk2.category = "Other"
    PlasmaBeadsMk2.level = 9
    PlasmaBeadsMk2.price = 12500
    PlasmaBeadsMk2.bulk = 0
    PlasmaBeadsMk2.content = """
    These four spherical beads strung with a cord emit a slight fiery glow from the plasma magically sealed inside them. While you wear the necklace, as a standard action, you can detach a bead and throw it (range increment 20 feet) as a ranged attack targeting a grid intersection (AC 5). If you throw the bead through a narrow opening, your attack roll must equal or exceed the opening’s AC (10 for a narrow opening or 15 for an extremely narrow one) to avoid hitting the side and detonating the bead prematurely. When the bead strikes a hard surface, it explodes in a 20-foot radius, dealing electricity and fire damage according to its type, as shown on the table below. A target that succeeds at a Reflex save (see the table) takes only half damage. Once you detach a bead, it loses its magic if it hasn’t exploded after 5 rounds. If the necklace isn’t worn, detached beads immediately become nonmagical.
    
    Damage: 5d6 E & F
    Save DC: 15
    """
    
    let TravelTreadsMk2 = CompendiumItem(context: context)
    TravelTreadsMk2.name = "Travel Treads, Mk 2"
    TravelTreadsMk2.category = "Other"
    TravelTreadsMk2.level = 9
    TravelTreadsMk2.price = 12000
    TravelTreadsMk2.bulk = 0
    TravelTreadsMk2.content = """
    Reduce hustling damage by 2, +2 enhancement bonus to checks during a forced march, and two rerolls.
    
    The wandering deity Weydan breaks pieces of himself off into mortal avatars to explore and experience the Material Plane. The first travel treads were gifts from such avatars bequeathed to fellow travelers. Followers of Weydan learned to create travel treads, and other organizations have copied the magic. Travel treads come in pairs, most often already attached to shoes, boots, or similar gear. You wear the treads by affixing them to existing footwear. The treads count as a worn magic item unless you install them in armor, taking up one upgrade slot.
    
    While you wear travel treads, you reduce the amount of nonlethal damage you take from hustling and gain an enhancement bonus to Constitution checks when making a forced march. In addition, if you fail a saving throw against an effect that would render you dazed, entangled, paralyzed, prone, staggered, or stunned, or an effect that would reduce your movement speed, as a reaction you can reroll the saving throw and take the higher result. Alternatively, if an opponent succeeds at a combat maneuver to bull rush, grapple, reposition, or trip you, as a reaction you can force that attacker to reroll the attack, taking the lower result. Once you benefit from a given set of travel treads, you can benefit from a different one only after 24 hours have passed.
    """
    
    let ShadowOrb = CompendiumItem(context: context)
    ShadowOrb.name = "Shadow Orb"
    ShadowOrb.category = "Other"
    ShadowOrb.level = 10
    ShadowOrb.price = 2850
    ShadowOrb.bulk = 0.1
    ShadowOrb.content = """
    While you hold this small orb of black glass, it puts forth tendrils of darkness that capture nearby light. The light level within a 20-foot radius of you decreases by one step. Lasers fired at you are bent toward the orb. This gives laser attacks against you a +1 circumstance bonus to hit, but also grants you fire resistance 5 against laser attacks.
    """
    
    let AballonianDroneBox = CompendiumItem(context: context)
    AballonianDroneBox.name = "Aballonian Drone Box"
    AballonianDroneBox.category = "Other"
    AballonianDroneBox.level = 11
    AballonianDroneBox.price = 24500
    AballonianDroneBox.bulk = 1
    AballonianDroneBox.content = """
    This item consists of six 1-foot-square circuit boards soldered together at their edges to form a box. One of the sides is hinged, forming a lid. Although the box appears empty, it rattles occasionally, as if something inside is seeking to escape. While anacites across Aballon create these items, Those Who Wait prefer to stockpile them for future use, but Those Who Become send as many of these boxes into the galaxy as possible for unspoken reasons.
    
    When you speak a command word and open the lid of the box as a standard action, a collection of fist-sized microbots swarms out of the box and circles you, granting you concealment against all attacks for 5 rounds before they collapse into 1 bulk of inert scrap. This function can be used once per day.
    
    The scrap can be used as the target of any spell with the word “junkbot” in the name, and the duration of such a spell increases by 1 round. The refuse left over at the end of the spell magically returns to the box, as does the scrap if it remains unused 4 hours after being created.
    """
    
    let InspirationBlazon = CompendiumItem(context: context)
    InspirationBlazon.name = "Inspiration Blazon"
    InspirationBlazon.category = "Other"
    InspirationBlazon.level = 11
    InspirationBlazon.price = 23500
    InspirationBlazon.bulk = 1
    InspirationBlazon.content = """
    Inspiration can play a large part in success, and as such some leaders wear magical symbols to inspire their allies during tough situations. An inspiration blazon is a decorated medal or tabard that lets you lend your allies your Resolve.
    
    An inspiration blazon must be worn prominently to function. When an ally within 60 feet of you spends Resolve Points, as a reaction while you are wearing an inspiration blazon, you can activate the blazon to inspire that ally, provided that you can see and be heard by the ally. You speak words of encouragement and spend up to 2 Resolve Points to reduce the number of Resolve Points your ally spends by the amount you spent, to a minimum of 0. The blazon has no effect on an ally who has no Resolve Points. An inspiration blazon can’t affect a given ally again until that ally regains Resolve Points during an 8-hour rest.

    """
    
    let MantleofWillpower = CompendiumItem(context: context)
    MantleofWillpower.name = "Mantle of Willpower"
    MantleofWillpower.category = "Other"
    MantleofWillpower.level = 12
    MantleofWillpower.price = 37000
    MantleofWillpower.bulk = 1
    MantleofWillpower.content = """
    A mantle of willpower is a garment that covers the shoulders, sometimes with a hood and sometimes including a longer cape. High-ranking members of the Knights of Golarion and the Stewards have been known to wear such mantles, as they help keep you calm and in control of your faculties.
    
    While wearing this mantle, you gain a +2 enhancement bonus to saving throws against mind-affecting effects. In addition, as a standard action, you can spend 1 Resolve Point to end all mind-affecting effects you are currently suffering from. If a mind-affecting effect renders you unable to take or determine your actions, you can spend 1 Resolve Point to end all mind-affecting effects you are currently suffering at the start of your turn, but you are then stunned until the start of your next turn. You can spend up to 2 Resolve Points per day to activate the mantle’s abilities. Once you spend any Resolve Points using a given mantle of willpower, that mantle won’t work for anyone else for 24 hours and you can’t use a different one for 24 hours.
    """
    
    let ArclordsRodMk2 = CompendiumItem(context: context)
    ArclordsRodMk2.name = "Arclord's Rod, Mk 2"
    ArclordsRodMk2.category = "Other"
    ArclordsRodMk2.level = 12
    ArclordsRodMk2.price = 38500
    ArclordsRodMk2.bulk = 0.1
    ArclordsRodMk2.content = """
    An Arclord’s rod is a scepter-like device roughly 3 feet long, made of copper and capped with smoke-colored silver. These rods were used on pre-Gap Golarion by powerful spellcasters known as the Arclords of Nex, who hailed from the Golarion nation of that name.
    
    An Arclord’s rod is a magic weapon that can be used to make either melee or ranged attacks, but it can be used only for a single attack each round. A mk 1 Arclord’s rod functions as a static shock truncheon for melee attacks and as a pulsecaster pistol for ranged attacks. A mk 2 Arclord’s rod functions as an aurora shock truncheon and a static arc pistol. A mk 3 Arclord’s rod functions as a storm shock truncheon and an aurora arc pistol. A mk 4 Arclord’s rod functions as a tempest shock truncheon and a storm arc pistol. An Arclord’s rod has an unlimited capacity (it never runs out of charges) and has the analog and unwieldy special properties. Proficiency with both advanced melee weapons and small arms is necessary to use an Arclord’s rod without penalty for melee and ranged attacks, respectively.
    
    Once per day when you cast a spell with the electricity descriptor while wielding an Arclord’s rod, you can add a thunderclap effect (which makes half of the spell’s damage sonic damage) and a rain squall effect (which creates a fog cloud, as per the spell of the same name, centered on the target or the center of the spell’s area and lasting for 10 minutes) to the spell.
    """
    
    let ElementalGemMk4 = CompendiumItem(context: context)
    ElementalGemMk4.name = "Elemental Gem, Mk 4"
    ElementalGemMk4.category = "Other"
    ElementalGemMk4.level = 12
    ElementalGemMk4.price = 5000
    ElementalGemMk4.bulk = 0
    ElementalGemMk4.content = """
    Each elemental gem contains one elemental from a specific elemental plane. The gem’s color indicates the sort of elemental contained within—air gems are transparent, earth gems are brown, fire gems are orange, and water gems are blue. As a standard action, you can crush the gem, destroying it. The contained elemental then appears as if you had cast a summon creature spell of a level and caster level according to the gem’s type.
    
    4th-level summon creature, caster level 12th
    """
    
    let ImprovisationAdornmentMk3 = CompendiumItem(context: context)
    ImprovisationAdornmentMk3.name = "Improvisation Adornment, Mk 3"
    ImprovisationAdornmentMk3.category = "Other"
    ImprovisationAdornmentMk3.level = 12
    ImprovisationAdornmentMk3.price = 33500
    ImprovisationAdornmentMk3.bulk = 0
    ImprovisationAdornmentMk3.content = """
    Those who rely on speaking to persuade or please others and those who require the ability to gauge an audience find an improvisation adornment invaluable. This item is usually something worn on or near the head, such as a necklace, headband, or a mask. While wearing this item, if you fail a Bluff, Culture, Diplomacy, Intimidate, or Sense Motive check, as a reaction you can reroll the check and take the better result. You can also reroll a Profession check, provided the GM agrees the check involved some sort of interaction, such as acting, musical performance, public speaking, and the like. Once you benefit from a given improvisation adornment, you can benefit from a different one only after 24 hours have passed.
    
    This adornment allows three rerolls per day.
    """
    
    let PlanarRuneplatesMk3 = CompendiumItem(context: context)
    PlanarRuneplatesMk3.name = "Planar Runeplates, Mk 3"
    PlanarRuneplatesMk3.category = "Other"
    PlanarRuneplatesMk3.level = 12
    PlanarRuneplatesMk3.price = 34000
    PlanarRuneplatesMk3.bulk = 0
    PlanarRuneplatesMk3.content = """
    Cultists and religious artificers forge planar runeplates, as do the demon-worshipping drow of Apostae. Each set of planar runeplates is dedicated to a specific powerful being native to the Outer Planes, such as an archdevil, a demon lord, or a god. Devotional symbols on the plates might convince others you’re aligned with the being in question, even if you’re not. You wear the plates by affixing them to clothing or armor; they count as a worn magic item unless you install them in armor, taking up a number of upgrade slots equal to their mark.
    
    Each set of planar runeplates has the same alignment as the extraplanar entity to which the plates are dedicated, although no plates are created with a neutral alignment with no other alignment components. While you wear the plates, they have several effects. If a creature with an alignment component opposite any of the plates’ alignment components attacks you, the plates alert you to the creature’s opposing subtypes. If the attack hits, as a reaction you can force the creature to reroll the attack and use the worse result. If you fail a saving throw against an effect created by such a creature, as a reaction you can reroll the saving throw and take the better result. Once you benefit from a given set of planar runeplates, you can benefit from a different set only after 24 hours have passed.
    
    This planar runeplate allows for three rerolls per day.
    """
    
    let PlasmaBeadsMk3 = CompendiumItem(context: context)
    PlasmaBeadsMk3.name = "Plasma Beads, Mk 3"
    PlasmaBeadsMk3.category = "Other"
    PlasmaBeadsMk3.level = 12
    PlasmaBeadsMk3.price = 37500
    PlasmaBeadsMk3.bulk = 0
    PlasmaBeadsMk3.content = """
    These four spherical beads strung with a cord emit a slight fiery glow from the plasma magically sealed inside them. While you wear the necklace, as a standard action, you can detach a bead and throw it (range increment 20 feet) as a ranged attack targeting a grid intersection (AC 5). If you throw the bead through a narrow opening, your attack roll must equal or exceed the opening’s AC (10 for a narrow opening or 15 for an extremely narrow one) to avoid hitting the side and detonating the bead prematurely. When the bead strikes a hard surface, it explodes in a 20-foot radius, dealing electricity and fire damage according to its type, as shown on the table below. A target that succeeds at a Reflex save (see the table) takes only half damage. Once you detach a bead, it loses its magic if it hasn’t exploded after 5 rounds. If the necklace isn’t worn, detached beads immediately become nonmagical.
    
    Damage: 9d6 E & F
    Save DC: 17
    """
    
    let ShantakWhistle = CompendiumItem(context: context)
    ShantakWhistle.name = "Shantak Whistle"
    ShantakWhistle.category = "Other"
    ShantakWhistle.level = 13
    ShantakWhistle.price = 49000
    ShantakWhistle.bulk = 0.1
    ShantakWhistle.content = """
    Resembling the skull of a shantak but carved from its wing bone, a shantak whistle is a recorder-like instrument with several decorative holes drilled in its length—though only one tone may be produced by blowing into this whistle, and only shantaks can hear the sound. All others hear nothing but the soft rush of breath sweeping through the instrument. When you play a shantak whistle for 1 minute, its song reaches out to the stars, and within 1d6 hours, a single shantak arrives at your location.
    
    Once it arrives, a shantak is under no magical compulsion to serve you, but you gain a +10 circumstance bonus to skill checks to secure the shantak’s service as a mount (at the GM’s discretion, usually requiring Diplomacy or Intimidate) for one Large or smaller creature. Even a shantak compelled to serve as a mount usually refuses to participate in battle and is likely to cooperate only long enough for a one-way trip using its spaceflight ability.
    
    A shantak whistle can be used only once every 2 weeks.
    """
    
    let DiffractionCloakMk3 = CompendiumItem(context: context)
    DiffractionCloakMk3.name = "Diffraction Cloak, Mk 3"
    DiffractionCloakMk3.category = "Other"
    DiffractionCloakMk3.level = 13
    DiffractionCloakMk3.price = 51000
    DiffractionCloakMk3.bulk = 1
    DiffractionCloakMk3.content = """
    A diffraction cloak bends light around it, causing the garment to subtly shimmer and hinting at its ability to warp nearby energy. While you wear this cloak, it protects you from cold, electricity, fire, and force damage. If an attack dealing such damage targets your EAC and hits, as a reaction you can force the attacker to be reroll the d20 and use the lower result. If you fail a saving throw against an effect that deals such damage, as a reaction you can reroll the saving throw and use the higher result. If you use a given diffraction cloak, you can’t benefit from a different one for 24 hours.
    
    This cloak allows for three rerolls per day.
    """
    
    let EncryptionTattooProvocateur = CompendiumItem(context: context)
    EncryptionTattooProvocateur.name = "Encryption Tattoo, Provocateur"
    EncryptionTattooProvocateur.category = "Other"
    EncryptionTattooProvocateur.level = 13
    EncryptionTattooProvocateur.price = 48000
    EncryptionTattooProvocateur.bulk = 0.1
    EncryptionTattooProvocateur.content = """
    The secretive members of the Android Abolitionist Front identify each other with invisible magical tattoos. When you are within 60 feet of a being with another encryption tattoo and activate your encryption tattoo with a code word as a move action, your tattoo becomes visible for 1 minute and glows faintly. The tattoo closely resembles the glowing circuit patterns prevalent on android skin, and is therefore particularly obvious on non-androids. The agent encryption tattoo is the standard type of encryption tattoo. Certain encryption tattoos, when activated with a different code word, also grant you damage reduction: operative encryption tattoos provide DR 5/—, provocateur encryption tattoos provide DR 10/—, and master encryption tattoos provide DR 15/—. This damage reduction doesn’t stack with any damage reduction you already have. The damage reduction lasts for the 1 minute your tattoo is visible.
    
    Although there is no limit on the number of times you can cause your encryption tattoo to appear, you can activate its power to gain DR only once per day.
    
    An encryption tattoo doesn’t count as a worn magic item, and it can’t be disarmed or sundered. In addition, it can be installed in an android’s racial armor upgrade slot.
    """
    
    let FieryRuneplatesMk3 = CompendiumItem(context: context)
    FieryRuneplatesMk3.name = "Fiery Runeplates, Mk 3"
    FieryRuneplatesMk3.category = "Other"
    FieryRuneplatesMk3.level = 13
    FieryRuneplatesMk3.price = 56000
    FieryRuneplatesMk3.bulk = 3
    FieryRuneplatesMk3.content = """
    Those who serve the light sometimes wear fiery runeplates, as do those who love fire or associate with entities of elemental flame or hellfire. These rectangular copper plates are about a foot long and half as wide, and they come in a pair. They might bear fiery iconography such as that of Sarenrae, Hellknights, a mighty elemental being, or the demon lord Flauros, or they might have only their runes for decoration. You wear the plates by affixing them to clothing or armor. The plates count as a worn magic item unless you install them in armor, taking up a number of upgrade slots equal to their mark number.
    
    While wearing fiery runeplates, as a standard action, you can command them to generate an aura of spiraling flames in all squares adjacent to your space. When a creature starts its turn in or enters the area on its turn, it takes fire damage according to the plates’ type, as shown on Table 1–26: Fiery Runeplates. A creature takes this damage only once per round and can attempt a Reflex save (see the table) to take half damage. The flames can damage flammable objects in the area.
    
    Once the runeplates are activated, the flames persist for up to a total of 10 rounds per day. They cease immediately if you are unable to take actions, and as a move action you can end the effect entirely or suppress the flames for 1 round. Rounds in which the flames are suppressed don’t count against their daily limit. If you use a given set of fiery runeplates, you can use a different set only after 24 hours have passed.
    
    Damage: 15 F
    Save DC: 17
    """
    
    let FigurineofWondrousPowerBloodstoneBloodbrother = CompendiumItem(context: context)
    FigurineofWondrousPowerBloodstoneBloodbrother.name = "Figurine of Wondrous Power, Bloodstone Bloodbrother"
    FigurineofWondrousPowerBloodstoneBloodbrother.category = "Other"
    FigurineofWondrousPowerBloodstoneBloodbrother.level = 13
    FigurineofWondrousPowerBloodstoneBloodbrother.price = 48000
    FigurineofWondrousPowerBloodstoneBloodbrother.bulk = 0
    FigurineofWondrousPowerBloodstoneBloodbrother.content = """
    This figure of green stone mottled with red flecks can change into a bloodbrother. The bloodbrother starts with no creature in its rib cage prison and can’t deal Constitution damage, so it lacks fast healing. If the bloodbrother reverts to figurine form while a victim is in the bloodbrother’s rib cage prison, the victim is released in the bloodbrother’s space.
    
    Each figurine of wondrous power is a statuette of a creature no more than a few inches tall and long. As a standard action, you can speak the figurine’s command word to transform the figurine into a creature in a space you can see within 30 feet of you. The figurine can’t change into a creature if it doesn’t have enough space to do so or if the environment can’t support the creature’s life functions. When the creature appears, it can act immediately on your turn. It understands and obeys your commands, and it understands Common but can’t speak. The creature considers your allies to be its allies and follows their orders when you aren’t able to give any.
    
    Each figurine in this entry can become a creature for up to 1 minute per day, though this duration does not need to be used continuously. After the figure has been in creature form for 1 minute, it reverts to figurine form and can’t be activated again for 24 hours. As a move action, you can dismiss the creature and return it to figurine form. The creature reverts to a figurine if killed. Although it can be healed while in creature form, the creature otherwise regains all its Hit Points 24 hours after its most recent activation. Therefore, if the creature is killed and reverts to figurine form, it can’t transform again for 24 hours.
    
    If you are within 30 feet of the creature when it returns to figurine form, the figurine appears in one of your empty hands or in your space (your choice). Otherwise, it reverts to figurine form as close to you as possible in its own space.
    
    A figurine of wondrous power becomes nonmagical if broken, losing its power to transform into a creature.
    """
    
    let TravelTreadsMk3 = CompendiumItem(context: context)
    TravelTreadsMk3.name = "Travel Treads, Mk 3"
    TravelTreadsMk3.category = "Other"
    TravelTreadsMk3.level = 13
    TravelTreadsMk3.price = 46500
    TravelTreadsMk3.bulk = 0
    TravelTreadsMk3.content = """
    Reduce hustling damage by 3, +3 enhancement bonus to checks during a forced march, and three rerolls.
    
    The wandering deity Weydan breaks pieces of himself off into mortal avatars to explore and experience the Material Plane. The first travel treads were gifts from such avatars bequeathed to fellow travelers. Followers of Weydan learned to create travel treads, and other organizations have copied the magic. Travel treads come in pairs, most often already attached to shoes, boots, or similar gear. You wear the treads by affixing them to existing footwear. The treads count as a worn magic item unless you install them in armor, taking up one upgrade slot.
    
    While you wear travel treads, you reduce the amount of nonlethal damage you take from hustling and gain an enhancement bonus to Constitution checks when making a forced march. In addition, if you fail a saving throw against an effect that would render you dazed, entangled, paralyzed, prone, staggered, or stunned, or an effect that would reduce your movement speed, as a reaction you can reroll the saving throw and take the higher result. Alternatively, if an opponent succeeds at a combat maneuver to bull rush, grapple, reposition, or trip you, as a reaction you can force that attacker to reroll the attack, taking the lower result. Once you benefit from a given set of travel treads, you can benefit from a different one only after 24 hours have passed.
    """
    
    let BoardroomAttire = CompendiumItem(context: context)
    BoardroomAttire.name = "Boardroom Attire"
    BoardroomAttire.category = "Other"
    BoardroomAttire.level = 14
    BoardroomAttire.price = 62500
    BoardroomAttire.bulk = 0
    BoardroomAttire.content = """
    This elegant tailored suit resembles a platinum AbadarCorp travel suit and has the same statistics as that armor. In addition, sigils of divination woven into the fabric of the suit subtly alert you to lies. When wearing a suit of boardroom attire, roll twice when attempting Sense Motive checks to detect deception and use the higher result. In addition, you never think a truthful statement contains deceptions, even if you fail your check by 5 or more.
    """
    
    let WarlordStone = CompendiumItem(context: context)
    WarlordStone.name = "Warlord Stone"
    WarlordStone.category = "Other"
    WarlordStone.level = 14
    WarlordStone.price = 75000
    WarlordStone.bulk = 0
    WarlordStone.content = """
    WARNING: This entry contains spoilers for the Dead Sun Adventure Path.
    This stone holds the collected memories, philosophies, and tactics of an ancient alien warlord, and is currently set in the palm of its original owner. This mk 3 ability crystal can increase any one ability score by 6 if you spend 1 hour communing with the item, as fragments of the ancient alien warlord’s psyche flood your mind and body. Its magic is then forever spent.
    """
    
    let ElementalGemMk5 = CompendiumItem(context: context)
    ElementalGemMk5.name = "Elemental Gem, Mk 5"
    ElementalGemMk5.category = "Other"
    ElementalGemMk5.level = 15
    ElementalGemMk5.price = 16000
    ElementalGemMk5.bulk = 0
    ElementalGemMk5.content = """
    Each elemental gem contains one elemental from a specific elemental plane. The gem’s color indicates the sort of elemental contained within—air gems are transparent, earth gems are brown, fire gems are orange, and water gems are blue. As a standard action, you can crush the gem, destroying it. The contained elemental then appears as if you had cast a summon creature spell of a level and caster level according to the gem’s type.
    
    5th-level summon creature, caster level 15th
    """
    
    let FigurineofWondrousPowerPlasticSharpwing = CompendiumItem(context: context)
    FigurineofWondrousPowerPlasticSharpwing.name = "Figurine of Wondrous Power, Plastic Sharpwing"
    FigurineofWondrousPowerPlasticSharpwing.category = "Other"
    FigurineofWondrousPowerPlasticSharpwing.level = 15
    FigurineofWondrousPowerPlasticSharpwing.price = 100000
    FigurineofWondrousPowerPlasticSharpwing.bulk = 0
    FigurineofWondrousPowerPlasticSharpwing.content = """
    This figurine is an authentic plastic replica of the sharpwing into which it can transform. This sharpwing cannot lay eggs, so it cannot use its ovitonomy ability.
    
    Each figurine of wondrous power is a statuette of a creature no more than a few inches tall and long. As a standard action, you can speak the figurine’s command word to transform the figurine into a creature in a space you can see within 30 feet of you. The figurine can’t change into a creature if it doesn’t have enough space to do so or if the environment can’t support the creature’s life functions. When the creature appears, it can act immediately on your turn. It understands and obeys your commands, and it understands Common but can’t speak. The creature considers your allies to be its allies and follows their orders when you aren’t able to give any.
    
    Each figurine in this entry can become a creature for up to 1 minute per day, though this duration does not need to be used continuously. After the figure has been in creature form for 1 minute, it reverts to figurine form and can’t be activated again for 24 hours. As a move action, you can dismiss the creature and return it to figurine form. The creature reverts to a figurine if killed. Although it can be healed while in creature form, the creature otherwise regains all its Hit Points 24 hours after its most recent activation. Therefore, if the creature is killed and reverts to figurine form, it can’t transform again for 24 hours.
    
    If you are within 30 feet of the creature when it returns to figurine form, the figurine appears in one of your empty hands or in your space (your choice). Otherwise, it reverts to figurine form as close to you as possible in its own space.
    
    A figurine of wondrous power becomes nonmagical if broken, losing its power to transform into a creature.
    """
    
    let CalecorSkullGlobe = CompendiumItem(context: context)
    CalecorSkullGlobe.name = "Calecor Skull-Globe"
    CalecorSkullGlobe.category = "Other"
    CalecorSkullGlobe.level = 17
    CalecorSkullGlobe.price = 250000
    CalecorSkullGlobe.bulk = 1
    CalecorSkullGlobe.content = """
    This crystalline globe is bonded to a planet and constantly changes to reflect a real-time image of that world. Touching the globe allows you to use clairaudience/clairvoyance at a location of your choice on that planet, regardless of range and lasting as long as you concentrate. You don’t need to have prior knowledge of the location—you just zoom in on the desired point from the global view. Additionally, once per week, the globe allows you to use interplanetary teleport to transport yourself and other willing creatures touching the globe to the location you’re currently observing using the globe’s clairaudience/clairvoyance effect. If you are currently on a different plane, this teleportation shifts you back to the Material Plane, as well. A calecor skull-globe’s planetary bond can’t be changed to a new planet.
    """
    
    let ArclordsRodMk3 = CompendiumItem(context: context)
    ArclordsRodMk3.name = "Arclord's Rod, Mk 3"
    ArclordsRodMk3.category = "Other"
    ArclordsRodMk3.level = 17
    ArclordsRodMk3.price = 275000
    ArclordsRodMk3.bulk = 0.1
    ArclordsRodMk3.content = """
    An Arclord’s rod is a scepter-like device roughly 3 feet long, made of copper and capped with smoke-colored silver. These rods were used on pre-Gap Golarion by powerful spellcasters known as the Arclords of Nex, who hailed from the Golarion nation of that name.
    
    An Arclord’s rod is a magic weapon that can be used to make either melee or ranged attacks, but it can be used only for a single attack each round. A mk 1 Arclord’s rod functions as a static shock truncheon for melee attacks and as a pulsecaster pistol for ranged attacks. A mk 2 Arclord’s rod functions as an aurora shock truncheon and a static arc pistol. A mk 3 Arclord’s rod functions as a storm shock truncheon and an aurora arc pistol. A mk 4 Arclord’s rod functions as a tempest shock truncheon and a storm arc pistol. An Arclord’s rod has an unlimited capacity (it never runs out of charges) and has the analog and unwieldy special properties. Proficiency with both advanced melee weapons and small arms is necessary to use an Arclord’s rod without penalty for melee and ranged attacks, respectively.
    
    Once per day when you cast a spell with the electricity descriptor while wielding an Arclord’s rod, you can add a thunderclap effect (which makes half of the spell’s damage sonic damage) and a rain squall effect (which creates a fog cloud, as per the spell of the same name, centered on the target or the center of the spell’s area and lasting for 10 minutes) to the spell.
    """
    
    let ElementalGemMk6 = CompendiumItem(context: context)
    ElementalGemMk6.name = "Elemental Gem, Mk 6"
    ElementalGemMk6.category = "Other"
    ElementalGemMk6.level = 18
    ElementalGemMk6.price = 49000
    ElementalGemMk6.bulk = 0
    ElementalGemMk6.content = """
    Each elemental gem contains one elemental from a specific elemental plane. The gem’s color indicates the sort of elemental contained within—air gems are transparent, earth gems are brown, fire gems are orange, and water gems are blue. As a standard action, you can crush the gem, destroying it. The contained elemental then appears as if you had cast a summon creature spell of a level and caster level according to the gem’s type.
    
    6th-level summon creature, caster level 18th
    """
    
    let EncryptionTattooMaster = CompendiumItem(context: context)
    EncryptionTattooMaster.name = "Encryption Tattoo, Master"
    EncryptionTattooMaster.category = "Other"
    EncryptionTattooMaster.level = 18
    EncryptionTattooMaster.price = 360000
    EncryptionTattooMaster.bulk = 0.1
    EncryptionTattooMaster.content = """
    The secretive members of the Android Abolitionist Front identify each other with invisible magical tattoos. When you are within 60 feet of a being with another encryption tattoo and activate your encryption tattoo with a code word as a move action, your tattoo becomes visible for 1 minute and glows faintly. The tattoo closely resembles the glowing circuit patterns prevalent on android skin, and is therefore particularly obvious on non-androids. The agent encryption tattoo is the standard type of encryption tattoo. Certain encryption tattoos, when activated with a different code word, also grant you damage reduction: operative encryption tattoos provide DR 5/—, provocateur encryption tattoos provide DR 10/—, and master encryption tattoos provide DR 15/—. This damage reduction doesn’t stack with any damage reduction you already have. The damage reduction lasts for the 1 minute your tattoo is visible.
    
    Although there is no limit on the number of times you can cause your encryption tattoo to appear, you can activate its power to gain DR only once per day.
    
    An encryption tattoo doesn’t count as a worn magic item, and it can’t be disarmed or sundered. In addition, it can be installed in an android’s racial armor upgrade slot.
    """
    
    let ContainmentTesseract = CompendiumItem(context: context)
    ContainmentTesseract.name = "Containment Tesseract"
    ContainmentTesseract.category = "Other"
    ContainmentTesseract.level = 19
    ContainmentTesseract.price = 500000
    ContainmentTesseract.bulk = 1
    ContainmentTesseract.content = """
    A containment tesseract is a four-dimensional cube, about 6 inches on a side, with runes lining the surfaces. It is thought that technomancers unknown to recorded history created initial models during the Gap. Historians posit these devices were intended to imprison extraplanar entities, and that a creature trapped within one might have avoided the effects of the Gap. If that’s true, there could be a containment tesseract holding a being that knows truths lost to the current age.
    
    As a standard action, you can command the tesseract to imprison a creature you can see within 60 feet of you. The target must attempt a Will saving throw (DC = 19 + your key ability score modifier). A creature that has already been imprisoned in a containment tesseract can roll the saving throw twice and take the higher result. On a failure, the target disappears into the tesseract and remains inside, unharmed and unaware, until released. The tesseract can hold only one creature at a time.
    
    Alternatively, as a standard action, you can command the tesseract to release a creature within it. The released creature must succeed at a Will saving throw or become helpful toward you for 1 hour. A creature that succeeds at the saving throw acts according to its normal inclinations and desires.
    
    A containment tesseract accepts commands only twice per day.
    """
    
    let ArclordsRodMk4 = CompendiumItem(context: context)
    ArclordsRodMk4.name = "Arclord's Rod, Mk 4"
    ArclordsRodMk4.category = "Other"
    ArclordsRodMk4.level = 20
    ArclordsRodMk4.price = 950000
    ArclordsRodMk4.bulk = 0.1
    ArclordsRodMk4.content = """
    An Arclord’s rod is a scepter-like device roughly 3 feet long, made of copper and capped with smoke-colored silver. These rods were used on pre-Gap Golarion by powerful spellcasters known as the Arclords of Nex, who hailed from the Golarion nation of that name.
    
    An Arclord’s rod is a magic weapon that can be used to make either melee or ranged attacks, but it can be used only for a single attack each round. A mk 1 Arclord’s rod functions as a static shock truncheon for melee attacks and as a pulsecaster pistol for ranged attacks. A mk 2 Arclord’s rod functions as an aurora shock truncheon and a static arc pistol. A mk 3 Arclord’s rod functions as a storm shock truncheon and an aurora arc pistol. A mk 4 Arclord’s rod functions as a tempest shock truncheon and a storm arc pistol. An Arclord’s rod has an unlimited capacity (it never runs out of charges) and has the analog and unwieldy special properties. Proficiency with both advanced melee weapons and small arms is necessary to use an Arclord’s rod without penalty for melee and ranged attacks, respectively.
    
    Once per day when you cast a spell with the electricity descriptor while wielding an Arclord’s rod, you can add a thunderclap effect (which makes half of the spell’s damage sonic damage) and a rain squall effect (which creates a fog cloud, as per the spell of the same name, centered on the target or the center of the spell’s area and lasting for 10 minutes) to the spell.
    """
    

    ChargeCloak.magicOrTech = "M"
    RecklessGloves.magicOrTech = "M"
    EncryptionTattooAgent.magicOrTech = "M"
    BroochofShielding.magicOrTech = "M"
    CorpseLantern.magicOrTech = "M"
    CoverSeed.magicOrTech = "M"
    ResilientJacket.magicOrTech = "M"
    AmuletofCamouflage.magicOrTech = "M"
    BrighsBolt.magicOrTech = "M"
    Hivemask.magicOrTech = "M"
    InstinctiveStabilizer.magicOrTech = "M"
    Lawfinder.magicOrTech = "M"
    ObfuscatedJournal.magicOrTech = "M"
    RecoveryAegis.magicOrTech = "M"
    StarfinderBackpack.magicOrTech = "M"
    ElementalGemMk1.magicOrTech = "M"
    DarksightGoogles.magicOrTech = "M"
    IomedaeanCrusaderHelm.magicOrTech = "M"
    TangleburstSeed.magicOrTech = "M"
    TramplingBoots.magicOrTech = "M"
    TruthAmplifier.magicOrTech = "M"
    ImprovisationAdornmentMk1.magicOrTech = "M"
    PlanarRuneplatesMk1.magicOrTech = "M"
    ArquandManacles.magicOrTech = "M"
    BarachiusHelm.magicOrTech = "M"
    BlackravenAxe.magicOrTech = "M"
    CelestialStole.magicOrTech = "M"
    ClearsightTrinket.magicOrTech = "M"
    DentedKasa.magicOrTech = "M"
    FalconBoots.magicOrTech = "M"
    RingofSustenance.magicOrTech = "M"
    SkyfireSaddle.magicOrTech = "M"
    StaffofMysticHealing.magicOrTech = "M"
    StorageGoo.magicOrTech = "M"
    DiffractionCloakMk1.magicOrTech = "M"
    FieryRuneplatesMk1.magicOrTech = "M"
    FigurineofWondrousPowerObsidianElectrovore.magicOrTech = "M"
    TravelTreadsMk1.magicOrTech = "M"
    EnergyRelayGloves.magicOrTech = "M"
    EohiBoots.magicOrTech = "M"
    FerocityBlazon.magicOrTech = "M"
    GloveofStoring.magicOrTech = "M"
    HatofDisguise.magicOrTech = "M"
    ElementalGemMk2.magicOrTech = "M"
    PlasmaBeadsMk1.magicOrTech = "M"
    ConspiratorsEmblem.magicOrTech = "M"
    FurtiveGarment.magicOrTech = "M"
    PathingTelescope.magicOrTech = "M"
    RestoringRod.magicOrTech = "M"
    Thruneblade.magicOrTech = "M"
    ArquandHorns.magicOrTech = "M"
    AuraGoggles.magicOrTech = "M"
    CalcificationRod.magicOrTech = "M"
    MaskoftheMantis.magicOrTech = "M"
    TechbaneRod.magicOrTech = "M"
    TeleportationPuck.magicOrTech = "M"
    EncryptionTattooOperative.magicOrTech = "M"
    FigurineofWondrousPowerBoneCrestEater.magicOrTech = "M"
    ImprovisationAdornmentMk2.magicOrTech = "M"
    PlanarRuneplatesMk2.magicOrTech = "M"
    AnvilofTorag.magicOrTech = "M"
    DreamsilkCloak.magicOrTech = "M"
    HellknightFlail.magicOrTech = "M"
    RatfolkBelt.magicOrTech = "M"
    RodofCancellation.magicOrTech = "M"
    ArclordsRodMk1.magicOrTech = "M"
    DiffractionCloakMk2.magicOrTech = "M"
    ElementalGemMk3.magicOrTech = "M"
    FieryRuneplatesMk2.magicOrTech = "M"
    PlasmaBeadsMk2.magicOrTech = "M"
    TravelTreadsMk2.magicOrTech = "M"
    ShadowOrb.magicOrTech = "M"
    AballonianDroneBox.magicOrTech = "M"
    InspirationBlazon.magicOrTech = "M"
    MantleofWillpower.magicOrTech = "M"
    ArclordsRodMk2.magicOrTech = "M"
    ElementalGemMk4.magicOrTech = "M"
    ImprovisationAdornmentMk3.magicOrTech = "M"
    PlanarRuneplatesMk3.magicOrTech = "M"
    PlasmaBeadsMk3.magicOrTech = "M"
    ShantakWhistle.magicOrTech = "M"
    DiffractionCloakMk3.magicOrTech = "M"
    EncryptionTattooProvocateur.magicOrTech = "M"
    FieryRuneplatesMk3.magicOrTech = "M"
    FigurineofWondrousPowerBloodstoneBloodbrother.magicOrTech = "M"
    TravelTreadsMk3.magicOrTech = "M"
    BoardroomAttire.magicOrTech = "M"
    WarlordStone.magicOrTech = "M"
    ElementalGemMk5.magicOrTech = "M"
    FigurineofWondrousPowerPlasticSharpwing.magicOrTech = "M"
    CalecorSkullGlobe.magicOrTech = "M"
    ArclordsRodMk3.magicOrTech = "M"
    ElementalGemMk6.magicOrTech = "M"
    EncryptionTattooMaster.magicOrTech = "M"
    ContainmentTesseract.magicOrTech = "M"
    ArclordsRodMk4.magicOrTech = "M"
    
    
    
}

func loadRings() {
    
    let RingofCounterspells = CompendiumItem(context: context)
    RingofCounterspells.name = "Ring of Counterspells"
    RingofCounterspells.category = "Ring"
    RingofCounterspells.level = 11
    RingofCounterspells.price = 24000
    RingofCounterspells.bulk = 0
    RingofCounterspells.content = """
    Spell duels are traditional in cultures throughout not only the Pact Worlds but the entire galaxy. A wily duelist might wear a ring of counterspells to foil one of an opponent’s tricks, though these rings also work well against enemies who employ predictable offensive magic.
    
    A spellcaster can target a ring of counterspells with a spell. That spell has no effect other than being stored in the ring. While you wear the ring, if you would be a target of the spell stored in the ring, the spell fails and has no effect. This countering is automatic; it requires no action or awareness on your part. Once the ring counters a spell, the stored spell dissipates, and the ring can’t counter a spell until another is stored within it.

    """
    
    let RingofWhispers = CompendiumItem(context: context)
    RingofWhispers.name = "Ring of Whispers"
    RingofWhispers.category = "Ring"
    RingofWhispers.level = 1
    RingofWhispers.price = 300
    RingofWhispers.bulk = 0
    RingofWhispers.content = """
    This simple gold band helps you hear when specific names are spoken. The ring can be attuned to recognize up to five proper names known to you, such as specific people, places, or things. The ring cannot be attuned to words that are not used as proper names. Attuning a ring of whispers to a new name takes 10 minutes, and if the new name exceeds the five-name limit, the oldest attuned name ceases to be attuned.
    
    The ring grants you a +5 insight bonus to hearing-based Perception checks and sense through (hearing), but both abilities apply only to allow you to hear one of the attuned names being spoken. This allows you to potentially hear a name being spoken a room away or even through soundproof glass, but not any other sounds or conversations.
    """
    
    let RingofResistanceMk1 = CompendiumItem(context: context)
    RingofResistanceMk1.name = "Ring of Resistance, Mk 1"
    RingofResistanceMk1.category = "Ring"
    RingofResistanceMk1.level = 2
    RingofResistanceMk1.price = 735
    RingofResistanceMk1.bulk = 0
    RingofResistanceMk1.content = """
    This ring grants you magic protection against attacks and effects to which you are particularly vulnerable. You gain an enhancement bonus to saving throws with your lowest base saving throw bonus. If two or three of your base saving throw bonuses are tied for lowest value, you select which category gains this bonus when you first put on the ring, and this choice does not change unless a different base saving throw bonus later becomes your lowest bonus. The bonus is determined by the model of the ring of resistance.
    
    Bonus: +1
    """
    
    let RingofFangs = CompendiumItem(context: context)
    RingofFangs.name = "Ring of Fangs"
    RingofFangs.category = "Ring"
    RingofFangs.level = 3
    RingofFangs.price = 315
    RingofFangs.bulk = 0
    RingofFangs.content = """
    When you wear this ring, your teeth become long and sharp, giving you a powerful bite attack. You can choose to have your unarmed attacks deal lethal piercing damage, and if you are 3rd level or higher, you automatically gain a special version of the Weapon Specialization feat that adds double your level to the damage of these unarmed attacks (rather than adding your level).
    """
    
    let RingofResistanceMk2 = CompendiumItem(context: context)
    RingofResistanceMk2.name = "Ring of Resistance, Mk 2"
    RingofResistanceMk2.category = "Ring"
    RingofResistanceMk2.level = 6
    RingofResistanceMk2.price = 4200
    RingofResistanceMk2.bulk = 0
    RingofResistanceMk2.content = """
    This ring grants you magic protection against attacks and effects to which you are particularly vulnerable. You gain an enhancement bonus to saving throws with your lowest base saving throw bonus. If two or three of your base saving throw bonuses are tied for lowest value, you select which category gains this bonus when you first put on the ring, and this choice does not change unless a different base saving throw bonus later becomes your lowest bonus. The bonus is determined by the model of the ring of resistance.
    
    Bonus: +2
    """
    
    let RingofResistanceMk3 = CompendiumItem(context: context)
    RingofResistanceMk3.name = "Ring of Resistance, Mk 3"
    RingofResistanceMk3.category = "Ring"
    RingofResistanceMk3.level = 10
    RingofResistanceMk3.price = 18100
    RingofResistanceMk3.bulk = 0
    RingofResistanceMk3.content = """
    This ring grants you magic protection against attacks and effects to which you are particularly vulnerable. You gain an enhancement bonus to saving throws with your lowest base saving throw bonus. If two or three of your base saving throw bonuses are tied for lowest value, you select which category gains this bonus when you first put on the ring, and this choice does not change unless a different base saving throw bonus later becomes your lowest bonus. The bonus is determined by the model of the ring of resistance.
    
    Bonus: +3
    """
    
    let RingofCosmicAlignment = CompendiumItem(context: context)
    RingofCosmicAlignment.name = "Ring of Cosmic Alignment"
    RingofCosmicAlignment.category = "Ring"
    RingofCosmicAlignment.level = 11
    RingofCosmicAlignment.price = 25000
    RingofCosmicAlignment.bulk = 0
    RingofCosmicAlignment.content = """
    This majestic ring is forged from twin bands of mithral and adamantine. If you have the stellar mode class feature, whenever you start a turn of combat attuned to a stellar mode and choose to become unattuned, you can immediately gain 1 attunement point for the stellar mode that opposes the mode you began your turn in. For instance, if you began the turn in photon mode and choose to become unattuned, you can use the ring to gain 1 graviton attunement point. Using this ability is a swift action.
    """
    
    let RingofResistanceMk4 = CompendiumItem(context: context)
    RingofResistanceMk4.name = "Ring of Resistance, Mk 4"
    RingofResistanceMk4.category = "Ring"
    RingofResistanceMk4.level = 14
    RingofResistanceMk4.price = 70000
    RingofResistanceMk4.bulk = 0
    RingofResistanceMk4.content = """
    This ring grants you magic protection against attacks and effects to which you are particularly vulnerable. You gain an enhancement bonus to saving throws with your lowest base saving throw bonus. If two or three of your base saving throw bonuses are tied for lowest value, you select which category gains this bonus when you first put on the ring, and this choice does not change unless a different base saving throw bonus later becomes your lowest bonus. The bonus is determined by the model of the ring of resistance.
    
    Bonus: +4
    """
    
    let RingofResistanceMk5 = CompendiumItem(context: context)
    RingofResistanceMk5.name = "Ring of Resistance, Mk 5"
    RingofResistanceMk5.category = "Ring"
    RingofResistanceMk5.level = 18
    RingofResistanceMk5.price = 361500
    RingofResistanceMk5.bulk = 0
    RingofResistanceMk5.content = """
    This ring grants you magic protection against attacks and effects to which you are particularly vulnerable. You gain an enhancement bonus to saving throws with your lowest base saving throw bonus. If two or three of your base saving throw bonuses are tied for lowest value, you select which category gains this bonus when you first put on the ring, and this choice does not change unless a different base saving throw bonus later becomes your lowest bonus. The bonus is determined by the model of the ring of resistance.
    
    Bonus: +5
    """
    
    RingofCounterspells.magicOrTech = "M"
    RingofWhispers.magicOrTech = "M"
    RingofResistanceMk1.magicOrTech = "M"
    RingofFangs.magicOrTech = "M"
    RingofResistanceMk2.magicOrTech = "M"
    RingofResistanceMk3.magicOrTech = "M"
    RingofCosmicAlignment.magicOrTech = "M"
    RingofResistanceMk4.magicOrTech = "M"
    RingofResistanceMk5.magicOrTech = "M"
    

    
}

func loadSerums() {
    
    let SerumofAppearanceChange = CompendiumItem(context: context)
    SerumofAppearanceChange.name = "Serum of Appearance Change"
    SerumofAppearanceChange.category = "Serum"
    SerumofAppearanceChange.level = 1
    SerumofAppearanceChange.price = 75
    SerumofAppearanceChange.bulk = 0.1
    SerumofAppearanceChange.content = """
    Upon drinking this elixir, your coloration and the general form of your features instantly and permanently changes. Within the range that is normal for your race and sex, you can select any skin tone, hair and eye color, and alter the nature of such things as the shape or your nose or chin, the length of your fingers, broadness of your frame, and so on. You are still recognizable as yourself unless you attempt a Disguise check to alter your features enough to conceal your identity (comparing the result of this Disguise check to any effort to determine if you are the same person as your original appearance). In no case can you take on the exact appearance of another creature (even with a Disguise check; the level of control is not that fine).
    """
    
    let SerumofHealingMk1 = CompendiumItem(context: context)
    SerumofHealingMk1.name = "Serum of Healing, Mk 1"
    SerumofHealingMk1.category = "Serum"
    SerumofHealingMk1.level = 1
    SerumofHealingMk1.price = 50
    SerumofHealingMk1.bulk = 0.1
    SerumofHealingMk1.content = """
    This vial of medical serum quickly sets bones and repairs other physical damage. It restores 1d8 Hit Points when administered to a living creature.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumLingo = CompendiumItem(context: context)
    SerumLingo.name = "Serum, Lingo"
    SerumLingo.category = "Serum"
    SerumLingo.level = 2
    SerumLingo.price = 100
    SerumLingo.bulk = 0
    SerumLingo.content = """
    Useful for explorers and scholars alike, the lingo serum has layers of rainbow hues and a spicy taste. For 10 minutes after you drink this serum, you can use the xenoseeker theme’s quick pidgin benefit. If you have the xenoseeker theme, your use of your quick pidgin benefit during this time is automatically successful.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let GravitySerum = CompendiumItem(context: context)
    GravitySerum.name = "Gravity Serum"
    GravitySerum.category = "Serum"
    GravitySerum.level = 3
    GravitySerum.price = 320
    GravitySerum.bulk = 0.1
    GravitySerum.content = """
    Gravity serum is a combination of hashukayak hormones and proteins that have been magically stabilized and adapted for use by a wide variety of life-forms. For 1 hour after you consume a gravity serum, you treat your Strength as 4 higher for the purposes of determining how much you can carry. Furthermore, while in an area of high gravity, you can move at three-quarters your speed, jump three-quarters as far as normal, and lift three-quarters as much weight, rather than half your normal values. You also reduce the nonlethal bludgeoning damage dealt by extreme gravity environments by half.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumofSexShift = CompendiumItem(context: context)
    SerumofSexShift.name = "Serum of Sex Shift"
    SerumofSexShift.category = "Serum"
    SerumofSexShift.level = 3
    SerumofSexShift.price = 350
    SerumofSexShift.bulk = 0.1
    SerumofSexShift.content = """
    Mass production has rendered this once-rare serum easy and inexpensive to obtain among the Pact Worlds. Upon drinking this elixir, your biology instantly transforms to take on a set of sexual characteristics of your choice, changing both your appearance and physiology accordingly. You have some mild control over the details of this change, but you retain a strong “family resemblance” to your former appearance.
    
    The elixir’s magic functions instantaneously and cannot be dispelled. Your new anatomy is as healthy and functional as your previous body’s, potentially allowing you to conceive, carry, or bear children (depending on your species’ biology). Drinking a second elixir of sex shift either reverts you back to a former form or allows you to adopt other sexual characteristics, as you choose. The elixir has no effect if you are unwilling, and the presence of certain sex-specific biological processes, such as gestation, may prevent this serum from taking effect.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumDaywalker = CompendiumItem(context: context)
    SerumDaywalker.name = "Serum, Daywalker"
    SerumDaywalker.category = "Serum"
    SerumDaywalker.level = 3
    SerumDaywalker.price = 200
    SerumDaywalker.bulk = 0
    SerumDaywalker.content = """
    The drow of House Xicton commonly brew daywalker serum, which is an oily, effervescent liquid that tastes like water. When you drink this serum, you ignore the effect of your light blindness weakness for 1 hour.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let AdaptiveSerumMk1 = CompendiumItem(context: context)
    AdaptiveSerumMk1.name = "Adaptive Serum, Mk 1"
    AdaptiveSerumMk1.category = "Serum"
    AdaptiveSerumMk1.level = 4
    AdaptiveSerumMk1.price = 350
    AdaptiveSerumMk1.bulk = 0
    AdaptiveSerumMk1.content = """
    A dose of adaptive serum consists of a small piece of ksarik flesh (usually the tip of one of its tentacles) floating in a slightly alcoholic tincture. For an hour after you consume an adaptive serum, the first time you take energy damage, you gain resistance against that type of damage for that attack and for the remainder of the hour or until you rest 10 minutes to regain Stamina Points, whichever comes first. The amount of energy resistance you receive depends on the level of the serum. A mk 1 adaptive serum grants energy resistance 5, a mk 2 adaptive serum grants energy resistance 10, and a mk 3 adaptive serum grants energy resistance 15.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumShadowblend = CompendiumItem(context: context)
    SerumShadowblend.name = "Serum, Shadowblend"
    SerumShadowblend.category = "Serum"
    SerumShadowblend.level = 4
    SerumShadowblend.price = 325
    SerumShadowblend.bulk = 0
    SerumShadowblend.content = """
    When you drink shadowblend serum, a purple, earthy-tasting liquid, you gain a +2 insight bonus to Stealth checks while you have concealment from dim light or darkness. In addition, darkness provides you concealment (but not total concealment) against darkvision. These effects last for 10 minutes.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumXRay = CompendiumItem(context: context)
    SerumXRay.name = "Serum, X-Ray"
    SerumXRay.category = "Serum"
    SerumXRay.level = 4
    SerumXRay.price = 350
    SerumXRay.bulk = 0
    SerumXRay.content = """
    When you drink X-ray serum, a fluid that looks like mercury and tastes like metal, your eyes turn white. For 1 minute, you can activate or suppress your X-ray vision as a move action. While your X-ray vision is active, you have sense through (vision) that can be blocked by 2 feet of wood or plastic, 1 foot of stone, 2 inches of common metal, or 1 inch of lead or any starmetal. Your X-ray vision is black and white, and while you use it, you lose the benefit of any vision other than darkvision. In addition, while using X-ray vision, you can’t attempt sight-based Perception checks beyond 60 feet.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let BloodbrotherSerum = CompendiumItem(context: context)
    BloodbrotherSerum.name = "Bloodbrother Serum"
    BloodbrotherSerum.category = "Serum"
    BloodbrotherSerum.level = 5
    BloodbrotherSerum.price = 500
    BloodbrotherSerum.bulk = 0
    BloodbrotherSerum.content = """
    Bloodbrother serum is made from rare alchemical reagents and the vital fluids of the eponymous beast. When the serum is consumed, you gain cold resistance 5 and regain 2 Hit Points per round for 5 rounds.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let PactWorldSerumAballonSpark = CompendiumItem(context: context)
    PactWorldSerumAballonSpark.name = "Pact World Serum, Aballon Spark"
    PactWorldSerumAballonSpark.category = "Serum"
    PactWorldSerumAballonSpark.level = 5
    PactWorldSerumAballonSpark.price = 475
    PactWorldSerumAballonSpark.bulk = 0
    PactWorldSerumAballonSpark.content = """
    This cool, sparkling fluid grants you a +2 insight bonus to Computers checks, and you can attempt checks with this skill untrained. Once while this serum is in effect, you can be healed by make whole or mending as though you were a construct.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let PactWorldSerumAbsalomAffable = CompendiumItem(context: context)
    PactWorldSerumAbsalomAffable.name = "Pact World Serum, Absalom Affable"
    PactWorldSerumAbsalomAffable.category = "Serum"
    PactWorldSerumAbsalomAffable.level = 5
    PactWorldSerumAbsalomAffable.price = 475
    PactWorldSerumAbsalomAffable.bulk = 0
    PactWorldSerumAbsalomAffable.content = """
    When you imbibe this clear, syrupy fluid, you gain a +2 insight bonus to Diplomacy and Disguise checks. If you begin an attempt to gather information while under the effects of this serum, the attempt takes only 1 hour.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let PactWorldSerumAkitonRustrider = CompendiumItem(context: context)
    PactWorldSerumAkitonRustrider.name = "Pact World Serum, Akiton Rustrider"
    PactWorldSerumAkitonRustrider.category = "Serum"
    PactWorldSerumAkitonRustrider.level = 5
    PactWorldSerumAkitonRustrider.price = 475
    PactWorldSerumAkitonRustrider.bulk = 0
    PactWorldSerumAkitonRustrider.content = """
    Upon consumption, this bitter, rust-red fluid grants you a +2 insight bonus to Athletics and Survival checks, and you do not take a penalty to Survival checks when riding a creature bareback. This serum turns a regular drinker’s teeth and lips rust-red in color—a side effect that Eppro Enterprises can’t quite overcome.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let PactWorldSerumBrethedaEffervescent = CompendiumItem(context: context)
    PactWorldSerumBrethedaEffervescent.name = "Pact World Serum, Bretheda Effervescent"
    PactWorldSerumBrethedaEffervescent.category = "Serum"
    PactWorldSerumBrethedaEffervescent.level = 5
    PactWorldSerumBrethedaEffervescent.price = 475
    PactWorldSerumBrethedaEffervescent.bulk = 0
    PactWorldSerumBrethedaEffervescent.content = """
    When you drink this sweet, bubbling, yellow fluid, you find your memory expanded; you gain a +2 insight bonus to recall knowledge with the Culture, Life Science, Mysticism, Physical Science, and Profession skills and can attempt checks to recall knowledge untrained with these skills.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let PactWorldSerumCastrovelEffloresce = CompendiumItem(context: context)
    PactWorldSerumCastrovelEffloresce.name = "Pact World Serum, Castrovel Effloresce"
    PactWorldSerumCastrovelEffloresce.category = "Serum"
    PactWorldSerumCastrovelEffloresce.level = 5
    PactWorldSerumCastrovelEffloresce.price = 475
    PactWorldSerumCastrovelEffloresce.bulk = 0
    PactWorldSerumCastrovelEffloresce.content = """
    This green, floral-smelling concoction grants you a +2 insight bonus to Life Science and Survival checks, and you can attempt Life Science checks and Survival checks to rear a wild animal untrained. While this serum is in effect, you always know which direction is magnetic north from your current location, if applicable (such as on most planets).
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let PactWorldSerumDiasporaDaredevil = CompendiumItem(context: context)
    PactWorldSerumDiasporaDaredevil.name = "Pact World Serum, Diaspora Daredevil"
    PactWorldSerumDiasporaDaredevil.category = "Serum"
    PactWorldSerumDiasporaDaredevil.level = 5
    PactWorldSerumDiasporaDaredevil.price = 475
    PactWorldSerumDiasporaDaredevil.bulk = 0
    PactWorldSerumDiasporaDaredevil.content = """
    Popular with pilots throughout the Pact Worlds, this serum is bright orange with tiny dark specks whirling within it. It grants you a +2 insight bonus to Piloting checks and to Computers checks when piloting a vehicle or when acting as captain, pilot, or science officer of a starship.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let PactWorldSerumEoxDeliquesce = CompendiumItem(context: context)
    PactWorldSerumEoxDeliquesce.name = "Pact World Serum, Eox Deliquesce"
    PactWorldSerumEoxDeliquesce.category = "Serum"
    PactWorldSerumEoxDeliquesce.level = 5
    PactWorldSerumEoxDeliquesce.price = 475
    PactWorldSerumEoxDeliquesce.bulk = 0
    PactWorldSerumEoxDeliquesce.content = """
    Eppro Enterprises doesn’t include this serum in its public catalogs, but the serum’s existence is an open secret. This shadowy fluid grants you a +2 insight bonus to Mysticism checks, and you can attempt checks with this skill untrained. While this serum is in effect, you can take a standard action to stop any bleed effect affecting you.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let PactWorldSerumIdariGold = CompendiumItem(context: context)
    PactWorldSerumIdariGold.name = "Pact World Serum, Idari Gold"
    PactWorldSerumIdariGold.category = "Serum"
    PactWorldSerumIdariGold.level = 5
    PactWorldSerumIdariGold.price = 475
    PactWorldSerumIdariGold.bulk = 0
    PactWorldSerumIdariGold.content = """
    Imbibing this translucent, golden fluid grants physical and mental grace. You gain a +3 insight bonus to Acrobatics and Sense Motive checks.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let PactWorldSerumTriaxusDragonsight = CompendiumItem(context: context)
    PactWorldSerumTriaxusDragonsight.name = "Pact World Serum, Triaxus Dragonsight"
    PactWorldSerumTriaxusDragonsight.category = "Serum"
    PactWorldSerumTriaxusDragonsight.level = 5
    PactWorldSerumTriaxusDragonsight.price = 475
    PactWorldSerumTriaxusDragonsight.bulk = 0
    PactWorldSerumTriaxusDragonsight.content = """
    This warm, fiery-red fluid grants you a +2 insight bonus to Perception checks, and you can ignore concealment caused by dim light (as if you had low-light vision or darkvision).
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let PactWorldSerumVercesGleam = CompendiumItem(context: context)
    PactWorldSerumVercesGleam.name = "Pact World Serum, Verces Gleam"
    PactWorldSerumVercesGleam.category = "Serum"
    PactWorldSerumVercesGleam.level = 5
    PactWorldSerumVercesGleam.price = 475
    PactWorldSerumVercesGleam.bulk = 0
    PactWorldSerumVercesGleam.content = """
    Eppro Enterprises markets this sparkling, white fluid as a favored drink of athletes. You gain a +3 insight bonus to Athletics checks. While under the effects of this serum, you must fail an Athletics check by 10 or more to fall, fall prone, or sink (as applicable), rather than fail by 5 or more.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumVeracity = CompendiumItem(context: context)
    SerumVeracity.name = "Serum, Veracity"
    SerumVeracity.category = "Serum"
    SerumVeracity.level = 5
    SerumVeracity.price = 450
    SerumVeracity.bulk = 0
    SerumVeracity.content = """
    A clear liquid, veracity serum has a sickly-sweet taste and syrupy consistency. For 1 hour after you drink this serum, you gain a +3 insight bonus to Sense Motive checks to detect deception or see through a diversion. In addition, you never suspect a true statement is false. You also gain a +2 insight bonus to saving throws against illusions.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumofEnhancementCommando = CompendiumItem(context: context)
    SerumofEnhancementCommando.name = "Serum of Enhancement, Commando"
    SerumofEnhancementCommando.category = "Serum"
    SerumofEnhancementCommando.level = 5
    SerumofEnhancementCommando.price = 475
    SerumofEnhancementCommando.bulk = 0.1
    SerumofEnhancementCommando.content = """
    The creature gains a +2 insight bonus to Acrobatics and Athletics checks, and it gains temporary Hit Points equal to half its level. If lost, these temporary Hit Points cannot be restored, and they do not stack with any other source of temporary Hit Points.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumofEnhancementDiplomat = CompendiumItem(context: context)
    SerumofEnhancementDiplomat.name = "Serum of Enhancement, Diplomat"
    SerumofEnhancementDiplomat.category = "Serum"
    SerumofEnhancementDiplomat.level = 5
    SerumofEnhancementDiplomat.price = 475
    SerumofEnhancementDiplomat.bulk = 0.1
    SerumofEnhancementDiplomat.content = """
    The creature gains a +2 insight bonus to Bluff and Diplomacy checks. Creatures with an Intelligence of 3 or greater also gain the ability to comprehend, speak, and understand one language that it has heard in the last 10 minutes.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumofEnhancementScientist = CompendiumItem(context: context)
    SerumofEnhancementScientist.name = "Serum of Enhancement, Scientist"
    SerumofEnhancementScientist.category = "Serum"
    SerumofEnhancementScientist.level = 5
    SerumofEnhancementScientist.price = 475
    SerumofEnhancementScientist.bulk = 0.1
    SerumofEnhancementScientist.content = """
    The creature gains a +2 insight bonus to Computers, Engineering, and Physical Science checks and can attempt checks with all three skills untrained.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumofEnhancementSensate = CompendiumItem(context: context)
    SerumofEnhancementSensate.name = "Serum of Enhancement, Sensate"
    SerumofEnhancementSensate.category = "Serum"
    SerumofEnhancementSensate.level = 5
    SerumofEnhancementSensate.price = 475
    SerumofEnhancementSensate.bulk = 0.1
    SerumofEnhancementSensate.content = """
    The creature gains a +1 insight bonus to Life Science and Mysticism checks and can attempt checks with both skills untrained.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumofEnhancementSneak = CompendiumItem(context: context)
    SerumofEnhancementSneak.name = "Serum of Enhancement, Sneak"
    SerumofEnhancementSneak.category = "Serum"
    SerumofEnhancementSneak.level = 5
    SerumofEnhancementSneak.price = 475
    SerumofEnhancementSneak.bulk = 0.1
    SerumofEnhancementSneak.content = """
    The creature gains a +2 insight bonus to Sleight of Hand and Stealth checks and can attempt checks with both skills untrained.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumofEnhancementWarrior = CompendiumItem(context: context)
    SerumofEnhancementWarrior.name = "Serum of Enhancement, Warrior"
    SerumofEnhancementWarrior.category = "Serum"
    SerumofEnhancementWarrior.level = 5
    SerumofEnhancementWarrior.price = 475
    SerumofEnhancementWarrior.bulk = 0.1
    SerumofEnhancementWarrior.content = """
    The creature gains a +2 insight bonus to Intimidate and Sense Motive checks, and whenever it successfully demoralizes an opponent, it increases the number of rounds that the opponent is shaken by 1.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumofHealingMk2 = CompendiumItem(context: context)
    SerumofHealingMk2.name = "Serum of Healing, Mk 2"
    SerumofHealingMk2.category = "Serum"
    SerumofHealingMk2.level = 5
    SerumofHealingMk2.price = 425
    SerumofHealingMk2.bulk = 0.1
    SerumofHealingMk2.content = """
    This vial of medical serum quickly sets bones and repairs other physical damage. It restores 3d8 Hit Points when administered to a living creature.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumCloseQuarters = CompendiumItem(context: context)
    SerumCloseQuarters.name = "Serum, Close-Quarters"
    SerumCloseQuarters.category = "Serum"
    SerumCloseQuarters.level = 7
    SerumCloseQuarters.price = 950
    SerumCloseQuarters.bulk = 0
    SerumCloseQuarters.content = """
    A close-quarters serum provides heightened awareness in combat, so the fluorescent-green concoction is a favorite among mercenaries and other warriors. It’s also minty. For 10 minutes after you drink this serum, enemies gain no benefit from flanking you.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let AdaptiveSerumMk2 = CompendiumItem(context: context)
    AdaptiveSerumMk2.name = "Adaptive Serum, Mk 2"
    AdaptiveSerumMk2.category = "Serum"
    AdaptiveSerumMk2.level = 8
    AdaptiveSerumMk2.price = 1500
    AdaptiveSerumMk2.bulk = 0
    AdaptiveSerumMk2.content = """
    A dose of adaptive serum consists of a small piece of ksarik flesh (usually the tip of one of its tentacles) floating in a slightly alcoholic tincture. For an hour after you consume an adaptive serum, the first time you take energy damage, you gain resistance against that type of damage for that attack and for the remainder of the hour or until you rest 10 minutes to regain Stamina Points, whichever comes first. The amount of energy resistance you receive depends on the level of the serum. A mk 1 adaptive serum grants energy resistance 5, a mk 2 adaptive serum grants energy resistance 10, and a mk 3 adaptive serum grants energy resistance 15.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let SerumofHealingMk3 = CompendiumItem(context: context)
    SerumofHealingMk3.name = "Serum of Healing, Mk 3"
    SerumofHealingMk3.category = "Serum"
    SerumofHealingMk3.level = 9
    SerumofHealingMk3.price = 1950
    SerumofHealingMk3.bulk = 0.1
    SerumofHealingMk3.content = """
    This vial of medical serum quickly sets bones and repairs other physical damage. It restores 6d8 Hit Points when administered to a living creature.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let AdaptiveSerumMk3 = CompendiumItem(context: context)
    AdaptiveSerumMk3.name = "Adaptive Serum, Mk 3"
    AdaptiveSerumMk3.category = "Serum"
    AdaptiveSerumMk3.level = 12
    AdaptiveSerumMk3.price = 5500
    AdaptiveSerumMk3.bulk = 0
    AdaptiveSerumMk3.content = """
    A dose of adaptive serum consists of a small piece of ksarik flesh (usually the tip of one of its tentacles) floating in a slightly alcoholic tincture. For an hour after you consume an adaptive serum, the first time you take energy damage, you gain resistance against that type of damage for that attack and for the remainder of the hour or until you rest 10 minutes to regain Stamina Points, whichever comes first. The amount of energy resistance you receive depends on the level of the serum. A mk 1 adaptive serum grants energy resistance 5, a mk 2 adaptive serum grants energy resistance 10, and a mk 3 adaptive serum grants energy resistance 15.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    
    let HaeshiShaaSerum = CompendiumItem(context: context)
    HaeshiShaaSerum.name = "Haeshi-Shaa Serum"
    HaeshiShaaSerum.category = "Serum"
    HaeshiShaaSerum.level = 14
    HaeshiShaaSerum.price = 10500
    HaeshiShaaSerum.bulk = 0.1
    HaeshiShaaSerum.content = """
    This serum causes a creature to become partially vaporous, imparting a 20% miss chance to its attacks and attacks targeting it. Spells the creature casts have a 20% chance to fail, and the creature becomes immune to critical hits. The effects of this serum last for 1 minute.
    
    Serums are vials of magic liquid that you can imbibe as a standard action or carefully trickle down the throat of a helpless or unconscious creature as a full action. Serums are normally 1 ounce of liquid (though it is possible to make serums with larger volumes, these are no more effective than standard serums), and lose potency if they are mixed with any other material. A serum can be used only once. Regardless of a serum’s actual item level, all serum vials have their hardness and Hit Points calculated as if they were 1st-level items.
    """
    

    SerumofAppearanceChange.magicOrTech = "M"
    SerumofHealingMk1.magicOrTech = "M"
    SerumLingo.magicOrTech = "M"
    GravitySerum.magicOrTech = "M"
    SerumofSexShift.magicOrTech = "M"
    SerumDaywalker.magicOrTech = "M"
    AdaptiveSerumMk1.magicOrTech = "M"
    SerumShadowblend.magicOrTech = "M"
    SerumXRay.magicOrTech = "M"
    BloodbrotherSerum.magicOrTech = "M"
    PactWorldSerumAballonSpark.magicOrTech = "M"
    PactWorldSerumAbsalomAffable.magicOrTech = "M"
    PactWorldSerumAkitonRustrider.magicOrTech = "M"
    PactWorldSerumBrethedaEffervescent.magicOrTech = "M"
    PactWorldSerumCastrovelEffloresce.magicOrTech = "M"
    PactWorldSerumDiasporaDaredevil.magicOrTech = "M"
    PactWorldSerumEoxDeliquesce.magicOrTech = "M"
    PactWorldSerumIdariGold.magicOrTech = "M"
    PactWorldSerumTriaxusDragonsight.magicOrTech = "M"
    PactWorldSerumVercesGleam.magicOrTech = "M"
    SerumVeracity.magicOrTech = "M"
    SerumofEnhancementCommando.magicOrTech = "M"
    SerumofEnhancementDiplomat.magicOrTech = "M"
    SerumofEnhancementScientist.magicOrTech = "M"
    SerumofEnhancementSensate.magicOrTech = "M"
    SerumofEnhancementSneak.magicOrTech = "M"
    SerumofEnhancementWarrior.magicOrTech = "M"
    SerumofHealingMk2.magicOrTech = "M"
    SerumCloseQuarters.magicOrTech = "M"
    AdaptiveSerumMk2.magicOrTech = "M"
    SerumofHealingMk3.magicOrTech = "M"
    AdaptiveSerumMk3.magicOrTech = "M"
    HaeshiShaaSerum.magicOrTech = "M"

    
}

func loadSpellAmpGemsAndTiaras() {
    
    let SpellAmpoule0 = CompendiumItem(context: context)
    SpellAmpoule0.name = "Spell Ampoule, 0"
    SpellAmpoule0.category = "Spell Ampoule"
    SpellAmpoule0.level = 2
    SpellAmpoule0.price = 200
    SpellAmpoule0.bulk = 0.1
    SpellAmpoule0.content = """
    Spell ampoules are injectable magic, where the essence of a magic spell has been condensed into a liquid form and prepared for injection into a creature. Known colloquially as “spell amps,” these heady, ready-to-use magic injections can be used only once. A spell amp duplicates the effect of a beneficial spell (a spell with “harmless” in its Saving Throw or Spell Resistance entry), excluding divination spells or spells that create some link between the caster and the target. In addition, the spell must be 3rd level or lower, have a casting time of 1 minute or less, and target one or more creatures (but not spells that target just the spellcaster). If a spell targets both creatures and objects, it only affects creatures when used as a spell amp. If a spell requires expending a Resolve Point to cast, it also requires the user to spend a Resolve Point when used as a spell amp (if you choose not to spend a Resolve Point or don’t have any Resolve Points remaining, the spell amp has no effect).
    
    A spell amp always has an item level equal to three times the level of the spell it duplicates (treat as a 2nd-level item for spell amps with 0-level spells), and a caster level equal to its item level. Creating a spell ampoule has the same requirements as creating a spell gem (see below).
    
    You can only use a spell ampoule on yourself or a willing or unconscious creature. Injecting yourself or a willing creature with a spell ampoule is a standard action, while injecting an unconscious creature is a full action. Spell amps take effect as if the spell had been cast upon the creature injected. When you are injected with a spell amp, you get to make any decisions about the spell’s effect as if you were the caster of the spell—you are both the effective target and the caster of the effect.
    """
    
    let SpellAmpoule1st = CompendiumItem(context: context)
    SpellAmpoule1st.name = "Spell Ampoule, 1st"
    SpellAmpoule1st.category = "Spell Ampoule"
    SpellAmpoule1st.level = 3
    SpellAmpoule1st.price = 300
    SpellAmpoule1st.bulk = 0.1
    SpellAmpoule1st.content = """
    Spell ampoules are injectable magic, where the essence of a magic spell has been condensed into a liquid form and prepared for injection into a creature. Known colloquially as “spell amps,” these heady, ready-to-use magic injections can be used only once. A spell amp duplicates the effect of a beneficial spell (a spell with “harmless” in its Saving Throw or Spell Resistance entry), excluding divination spells or spells that create some link between the caster and the target. In addition, the spell must be 3rd level or lower, have a casting time of 1 minute or less, and target one or more creatures (but not spells that target just the spellcaster). If a spell targets both creatures and objects, it only affects creatures when used as a spell amp. If a spell requires expending a Resolve Point to cast, it also requires the user to spend a Resolve Point when used as a spell amp (if you choose not to spend a Resolve Point or don’t have any Resolve Points remaining, the spell amp has no effect).
    
    A spell amp always has an item level equal to three times the level of the spell it duplicates (treat as a 2nd-level item for spell amps with 0-level spells), and a caster level equal to its item level. Creating a spell ampoule has the same requirements as creating a spell gem (see below).
    
    You can only use a spell ampoule on yourself or a willing or unconscious creature. Injecting yourself or a willing creature with a spell ampoule is a standard action, while injecting an unconscious creature is a full action. Spell amps take effect as if the spell had been cast upon the creature injected. When you are injected with a spell amp, you get to make any decisions about the spell’s effect as if you were the caster of the spell—you are both the effective target and the caster of the effect.
    """
    
    let SpellAmpoule2nd = CompendiumItem(context: context)
    SpellAmpoule2nd.name = "Spell Ampoule, 2nd"
    SpellAmpoule2nd.category = "Spell Ampoule"
    SpellAmpoule2nd.level = 6
    SpellAmpoule2nd.price = 700
    SpellAmpoule2nd.bulk = 0.1
    SpellAmpoule2nd.content = """
    Spell ampoules are injectable magic, where the essence of a magic spell has been condensed into a liquid form and prepared for injection into a creature. Known colloquially as “spell amps,” these heady, ready-to-use magic injections can be used only once. A spell amp duplicates the effect of a beneficial spell (a spell with “harmless” in its Saving Throw or Spell Resistance entry), excluding divination spells or spells that create some link between the caster and the target. In addition, the spell must be 3rd level or lower, have a casting time of 1 minute or less, and target one or more creatures (but not spells that target just the spellcaster). If a spell targets both creatures and objects, it only affects creatures when used as a spell amp. If a spell requires expending a Resolve Point to cast, it also requires the user to spend a Resolve Point when used as a spell amp (if you choose not to spend a Resolve Point or don’t have any Resolve Points remaining, the spell amp has no effect).
    
    A spell amp always has an item level equal to three times the level of the spell it duplicates (treat as a 2nd-level item for spell amps with 0-level spells), and a caster level equal to its item level. Creating a spell ampoule has the same requirements as creating a spell gem (see below).
    
    You can only use a spell ampoule on yourself or a willing or unconscious creature. Injecting yourself or a willing creature with a spell ampoule is a standard action, while injecting an unconscious creature is a full action. Spell amps take effect as if the spell had been cast upon the creature injected. When you are injected with a spell amp, you get to make any decisions about the spell’s effect as if you were the caster of the spell—you are both the effective target and the caster of the effect.
    """
    
    let SpellAmpoule3rd = CompendiumItem(context: context)
    SpellAmpoule3rd.name = "Spell Ampoule, 3rd"
    SpellAmpoule3rd.category = "Spell Ampoule"
    SpellAmpoule3rd.level = 10
    SpellAmpoule3rd.price = 3000
    SpellAmpoule3rd.bulk = 0.1
    SpellAmpoule3rd.content = """
    Spell ampoules are injectable magic, where the essence of a magic spell has been condensed into a liquid form and prepared for injection into a creature. Known colloquially as “spell amps,” these heady, ready-to-use magic injections can be used only once. A spell amp duplicates the effect of a beneficial spell (a spell with “harmless” in its Saving Throw or Spell Resistance entry), excluding divination spells or spells that create some link between the caster and the target. In addition, the spell must be 3rd level or lower, have a casting time of 1 minute or less, and target one or more creatures (but not spells that target just the spellcaster). If a spell targets both creatures and objects, it only affects creatures when used as a spell amp. If a spell requires expending a Resolve Point to cast, it also requires the user to spend a Resolve Point when used as a spell amp (if you choose not to spend a Resolve Point or don’t have any Resolve Points remaining, the spell amp has no effect).
    
    A spell amp always has an item level equal to three times the level of the spell it duplicates (treat as a 2nd-level item for spell amps with 0-level spells), and a caster level equal to its item level. Creating a spell ampoule has the same requirements as creating a spell gem (see below).
    
    You can only use a spell ampoule on yourself or a willing or unconscious creature. Injecting yourself or a willing creature with a spell ampoule is a standard action, while injecting an unconscious creature is a full action. Spell amps take effect as if the spell had been cast upon the creature injected. When you are injected with a spell amp, you get to make any decisions about the spell’s effect as if you were the caster of the spell—you are both the effective target and the caster of the effect.
    """
    

    let SpellGem0 = CompendiumItem(context: context)
    SpellGem0.name = "Spell Gem, 0"
    SpellGem0.category = "Spell Gem"
    SpellGem0.level = 1
    SpellGem0.price = 50
    SpellGem0.bulk = 0.1
    SpellGem0.content = """
    Consisting of one or more lattices of carefully arranged lines of rare metal and bits of precious stone in a silicon casing, each lattice in a spell gem is encoded with magical writings equivalent to the casting of a single, specific spell. Holding a spell gem in your hand unlocks little-used portions of your mind, granting you the ability to temporarily cast the spell encoded within the gem without using up your daily spell slots. You must hold the spell gem in your hand throughout the spell’s casting time and must spend at least a standard action using the spell gem, even if the spell’s casting time is shorter. Each spell stored within a spell gem can be cast only once, after which the magic encoded within the spell gem’s lattice is forever expended.
    
    Only spellcasters are capable of using spell gems—if you aren’t a spellcaster, you’re unable to make use of the knowledge that the gem unlocks. You don’t need to know the spell within a spell gem to use it, but the spell must be on your class’s spell list (or have otherwise been added to your spell list) and you must have a high enough key ability score to cast it. If the spell gem’s item level is higher than your caster level, once you’ve spent the full casting time of the spell, you must succeed at a caster level check with a DC equal to the spell gem’s item level + 1 or you fail to cast the spell. If you fail to cast a spell from a spell gem, the spell remains within the gem and you can attempt to use it again.
    
    To craft a spell gem, you have to know the spell you’re encoding into the gem. If a spell requires expensive materials as part of its casting (such as raise dead), you must provide those while crafting the gem, and the gem’s price is increased by the price of the components. You can create larger, compound spell gems with multiple spells in multiple lattices, with a price equal to the total price of all spells stored within it. Such spell gems can be used to cast only one spell at a time.
    """
    
    let SpellGem1st = CompendiumItem(context: context)
    SpellGem1st.name = "Spell Gem, 1st"
    SpellGem1st.category = "Spell Gem"
    SpellGem1st.level = 2
    SpellGem1st.price = 140
    SpellGem1st.bulk = 0.1
    SpellGem1st.content = """
    Consisting of one or more lattices of carefully arranged lines of rare metal and bits of precious stone in a silicon casing, each lattice in a spell gem is encoded with magical writings equivalent to the casting of a single, specific spell. Holding a spell gem in your hand unlocks little-used portions of your mind, granting you the ability to temporarily cast the spell encoded within the gem without using up your daily spell slots. You must hold the spell gem in your hand throughout the spell’s casting time and must spend at least a standard action using the spell gem, even if the spell’s casting time is shorter. Each spell stored within a spell gem can be cast only once, after which the magic encoded within the spell gem’s lattice is forever expended.
    
    Only spellcasters are capable of using spell gems—if you aren’t a spellcaster, you’re unable to make use of the knowledge that the gem unlocks. You don’t need to know the spell within a spell gem to use it, but the spell must be on your class’s spell list (or have otherwise been added to your spell list) and you must have a high enough key ability score to cast it. If the spell gem’s item level is higher than your caster level, once you’ve spent the full casting time of the spell, you must succeed at a caster level check with a DC equal to the spell gem’s item level + 1 or you fail to cast the spell. If you fail to cast a spell from a spell gem, the spell remains within the gem and you can attempt to use it again.
    
    To craft a spell gem, you have to know the spell you’re encoding into the gem. If a spell requires expensive materials as part of its casting (such as raise dead), you must provide those while crafting the gem, and the gem’s price is increased by the price of the components. You can create larger, compound spell gems with multiple spells in multiple lattices, with a price equal to the total price of all spells stored within it. Such spell gems can be used to cast only one spell at a time.
    """
    
    let SpellGem2nd = CompendiumItem(context: context)
    SpellGem2nd.name = "Spell Gem, 2nd"
    SpellGem2nd.category = "Spell Gem"
    SpellGem2nd.level = 5
    SpellGem2nd.price = 450
    SpellGem2nd.bulk = 0.1
    SpellGem2nd.content = """
    Consisting of one or more lattices of carefully arranged lines of rare metal and bits of precious stone in a silicon casing, each lattice in a spell gem is encoded with magical writings equivalent to the casting of a single, specific spell. Holding a spell gem in your hand unlocks little-used portions of your mind, granting you the ability to temporarily cast the spell encoded within the gem without using up your daily spell slots. You must hold the spell gem in your hand throughout the spell’s casting time and must spend at least a standard action using the spell gem, even if the spell’s casting time is shorter. Each spell stored within a spell gem can be cast only once, after which the magic encoded within the spell gem’s lattice is forever expended.
    
    Only spellcasters are capable of using spell gems—if you aren’t a spellcaster, you’re unable to make use of the knowledge that the gem unlocks. You don’t need to know the spell within a spell gem to use it, but the spell must be on your class’s spell list (or have otherwise been added to your spell list) and you must have a high enough key ability score to cast it. If the spell gem’s item level is higher than your caster level, once you’ve spent the full casting time of the spell, you must succeed at a caster level check with a DC equal to the spell gem’s item level + 1 or you fail to cast the spell. If you fail to cast a spell from a spell gem, the spell remains within the gem and you can attempt to use it again.
    
    To craft a spell gem, you have to know the spell you’re encoding into the gem. If a spell requires expensive materials as part of its casting (such as raise dead), you must provide those while crafting the gem, and the gem’s price is increased by the price of the components. You can create larger, compound spell gems with multiple spells in multiple lattices, with a price equal to the total price of all spells stored within it. Such spell gems can be used to cast only one spell at a time.
    """
    
    let SpellGem3rd = CompendiumItem(context: context)
    SpellGem3rd.name = "Spell Gem, 3rd"
    SpellGem3rd.category = "Spell Gem"
    SpellGem3rd.level = 8
    SpellGem3rd.price = 1400
    SpellGem3rd.bulk = 0.1
    SpellGem3rd.content = """
    Consisting of one or more lattices of carefully arranged lines of rare metal and bits of precious stone in a silicon casing, each lattice in a spell gem is encoded with magical writings equivalent to the casting of a single, specific spell. Holding a spell gem in your hand unlocks little-used portions of your mind, granting you the ability to temporarily cast the spell encoded within the gem without using up your daily spell slots. You must hold the spell gem in your hand throughout the spell’s casting time and must spend at least a standard action using the spell gem, even if the spell’s casting time is shorter. Each spell stored within a spell gem can be cast only once, after which the magic encoded within the spell gem’s lattice is forever expended.
    
    Only spellcasters are capable of using spell gems—if you aren’t a spellcaster, you’re unable to make use of the knowledge that the gem unlocks. You don’t need to know the spell within a spell gem to use it, but the spell must be on your class’s spell list (or have otherwise been added to your spell list) and you must have a high enough key ability score to cast it. If the spell gem’s item level is higher than your caster level, once you’ve spent the full casting time of the spell, you must succeed at a caster level check with a DC equal to the spell gem’s item level + 1 or you fail to cast the spell. If you fail to cast a spell from a spell gem, the spell remains within the gem and you can attempt to use it again.
    
    To craft a spell gem, you have to know the spell you’re encoding into the gem. If a spell requires expensive materials as part of its casting (such as raise dead), you must provide those while crafting the gem, and the gem’s price is increased by the price of the components. You can create larger, compound spell gems with multiple spells in multiple lattices, with a price equal to the total price of all spells stored within it. Such spell gems can be used to cast only one spell at a time.
    """
    
    let SpellGem4th = CompendiumItem(context: context)
    SpellGem4th.name = "Spell Gem, 4th"
    SpellGem4th.category = "Spell Gem"
    SpellGem4th.level = 11
    SpellGem4th.price = 3700
    SpellGem4th.bulk = 0.1
    SpellGem4th.content = """
    Consisting of one or more lattices of carefully arranged lines of rare metal and bits of precious stone in a silicon casing, each lattice in a spell gem is encoded with magical writings equivalent to the casting of a single, specific spell. Holding a spell gem in your hand unlocks little-used portions of your mind, granting you the ability to temporarily cast the spell encoded within the gem without using up your daily spell slots. You must hold the spell gem in your hand throughout the spell’s casting time and must spend at least a standard action using the spell gem, even if the spell’s casting time is shorter. Each spell stored within a spell gem can be cast only once, after which the magic encoded within the spell gem’s lattice is forever expended.
    
    Only spellcasters are capable of using spell gems—if you aren’t a spellcaster, you’re unable to make use of the knowledge that the gem unlocks. You don’t need to know the spell within a spell gem to use it, but the spell must be on your class’s spell list (or have otherwise been added to your spell list) and you must have a high enough key ability score to cast it. If the spell gem’s item level is higher than your caster level, once you’ve spent the full casting time of the spell, you must succeed at a caster level check with a DC equal to the spell gem’s item level + 1 or you fail to cast the spell. If you fail to cast a spell from a spell gem, the spell remains within the gem and you can attempt to use it again.
    
    To craft a spell gem, you have to know the spell you’re encoding into the gem. If a spell requires expensive materials as part of its casting (such as raise dead), you must provide those while crafting the gem, and the gem’s price is increased by the price of the components. You can create larger, compound spell gems with multiple spells in multiple lattices, with a price equal to the total price of all spells stored within it. Such spell gems can be used to cast only one spell at a time.
    """
    
    let SpellGem5th = CompendiumItem(context: context)
    SpellGem5th.name = "Spell Gem, 5th"
    SpellGem5th.category = "Spell Gem"
    SpellGem5th.level = 14
    SpellGem5th.price = 10600
    SpellGem5th.bulk = 0.1
    SpellGem5th.content = """
    Consisting of one or more lattices of carefully arranged lines of rare metal and bits of precious stone in a silicon casing, each lattice in a spell gem is encoded with magical writings equivalent to the casting of a single, specific spell. Holding a spell gem in your hand unlocks little-used portions of your mind, granting you the ability to temporarily cast the spell encoded within the gem without using up your daily spell slots. You must hold the spell gem in your hand throughout the spell’s casting time and must spend at least a standard action using the spell gem, even if the spell’s casting time is shorter. Each spell stored within a spell gem can be cast only once, after which the magic encoded within the spell gem’s lattice is forever expended.
    
    Only spellcasters are capable of using spell gems—if you aren’t a spellcaster, you’re unable to make use of the knowledge that the gem unlocks. You don’t need to know the spell within a spell gem to use it, but the spell must be on your class’s spell list (or have otherwise been added to your spell list) and you must have a high enough key ability score to cast it. If the spell gem’s item level is higher than your caster level, once you’ve spent the full casting time of the spell, you must succeed at a caster level check with a DC equal to the spell gem’s item level + 1 or you fail to cast the spell. If you fail to cast a spell from a spell gem, the spell remains within the gem and you can attempt to use it again.
    
    To craft a spell gem, you have to know the spell you’re encoding into the gem. If a spell requires expensive materials as part of its casting (such as raise dead), you must provide those while crafting the gem, and the gem’s price is increased by the price of the components. You can create larger, compound spell gems with multiple spells in multiple lattices, with a price equal to the total price of all spells stored within it. Such spell gems can be used to cast only one spell at a time.
    """
    
    let SpellGem6th = CompendiumItem(context: context)
    SpellGem6th.name = "Spell Gem, 6th"
    SpellGem6th.category = "Spell Gem"
    SpellGem6th.level = 17
    SpellGem6th.price = 36650
    SpellGem6th.bulk = 0.1
    SpellGem6th.content = """
    Consisting of one or more lattices of carefully arranged lines of rare metal and bits of precious stone in a silicon casing, each lattice in a spell gem is encoded with magical writings equivalent to the casting of a single, specific spell. Holding a spell gem in your hand unlocks little-used portions of your mind, granting you the ability to temporarily cast the spell encoded within the gem without using up your daily spell slots. You must hold the spell gem in your hand throughout the spell’s casting time and must spend at least a standard action using the spell gem, even if the spell’s casting time is shorter. Each spell stored within a spell gem can be cast only once, after which the magic encoded within the spell gem’s lattice is forever expended.
    
    Only spellcasters are capable of using spell gems—if you aren’t a spellcaster, you’re unable to make use of the knowledge that the gem unlocks. You don’t need to know the spell within a spell gem to use it, but the spell must be on your class’s spell list (or have otherwise been added to your spell list) and you must have a high enough key ability score to cast it. If the spell gem’s item level is higher than your caster level, once you’ve spent the full casting time of the spell, you must succeed at a caster level check with a DC equal to the spell gem’s item level + 1 or you fail to cast the spell. If you fail to cast a spell from a spell gem, the spell remains within the gem and you can attempt to use it again.
    
    To craft a spell gem, you have to know the spell you’re encoding into the gem. If a spell requires expensive materials as part of its casting (such as raise dead), you must provide those while crafting the gem, and the gem’s price is increased by the price of the components. You can create larger, compound spell gems with multiple spells in multiple lattices, with a price equal to the total price of all spells stored within it. Such spell gems can be used to cast only one spell at a time.
    """
    
    let TiaraofTranslocationMk1 = CompendiumItem(context: context)
    TiaraofTranslocationMk1.name = "Tiara of Translocation, Mk 1"
    TiaraofTranslocationMk1.category = "Spell Gem"
    TiaraofTranslocationMk1.level = 14
    TiaraofTranslocationMk1.price = 11750
    TiaraofTranslocationMk1.bulk = 0.1
    TiaraofTranslocationMk1.content = """
    This shimmering circlet is crafted from rare metals and seems to bend and distort light around it, creating an eerie halo of light around your brow. Once per day, a tiara of translocation allows you to teleport yourself and up to 5 additional creatures, functioning as a teleport spell. Unlike the spell, the range at which you can use this item varies based upon its model, as described below. You cannot use a tiara of translocation to travel between the planes, and it refuses to function at all while in the Drift.
    
    Teleportation: Any point within 200 miles
    """
    
    let TiaraofTranslocationMk2 = CompendiumItem(context: context)
    TiaraofTranslocationMk2.name = "Tiara of Translocation, Mk 2"
    TiaraofTranslocationMk2.category = "Spell Gem"
    TiaraofTranslocationMk2.level = 16
    TiaraofTranslocationMk2.price = 185000
    TiaraofTranslocationMk2.bulk = 0.1
    TiaraofTranslocationMk2.content = """
    This shimmering circlet is crafted from rare metals and seems to bend and distort light around it, creating an eerie halo of light around your brow. Once per day, a tiara of translocation allows you to teleport yourself and up to 5 additional creatures, functioning as a teleport spell. Unlike the spell, the range at which you can use this item varies based upon its model, as described below. You cannot use a tiara of translocation to travel between the planes, and it refuses to function at all while in the Drift.
    
    Teleportation: Any point within 2,000 miles
    """
    
    let TiaraofTranslocationMk3 = CompendiumItem(context: context)
    TiaraofTranslocationMk3.name = "Tiara of Translocation, Mk 3"
    TiaraofTranslocationMk3.category = "Spell Gem"
    TiaraofTranslocationMk3.level = 18
    TiaraofTranslocationMk3.price = 410000
    TiaraofTranslocationMk3.bulk = 0.1
    TiaraofTranslocationMk3.content = """
    This shimmering circlet is crafted from rare metals and seems to bend and distort light around it, creating an eerie halo of light around your brow. Once per day, a tiara of translocation allows you to teleport yourself and up to 5 additional creatures, functioning as a teleport spell. Unlike the spell, the range at which you can use this item varies based upon its model, as described below. You cannot use a tiara of translocation to travel between the planes, and it refuses to function at all while in the Drift.
    
    Teleportation: Any point within the same star system
    """
    
    let TiaraofTranslocationMk4 = CompendiumItem(context: context)
    TiaraofTranslocationMk4.name = "Tiara of Translocation, Mk 4"
    TiaraofTranslocationMk4.category = "Spell Gem"
    TiaraofTranslocationMk4.level = 20
    TiaraofTranslocationMk4.price = 875000
    TiaraofTranslocationMk4.bulk = 0.1
    TiaraofTranslocationMk4.content = """
    This shimmering circlet is crafted from rare metals and seems to bend and distort light around it, creating an eerie halo of light around your brow. Once per day, a tiara of translocation allows you to teleport yourself and up to 5 additional creatures, functioning as a teleport spell. Unlike the spell, the range at which you can use this item varies based upon its model, as described below. You cannot use a tiara of translocation to travel between the planes, and it refuses to function at all while in the Drift.
    
    Teleportation: Any point within the same galaxy
    """
    
    SpellAmpoule0.magicOrTech = "M"
    SpellAmpoule1st.magicOrTech = "M"
    SpellAmpoule2nd.magicOrTech = "M"
    SpellAmpoule3rd.magicOrTech = "M"
    SpellGem0.magicOrTech = "M"
    SpellGem1st.magicOrTech = "M"
    SpellGem2nd.magicOrTech = "M"
    SpellGem3rd.magicOrTech = "M"
    SpellGem4th.magicOrTech = "M"
    SpellGem5th.magicOrTech = "M"
    SpellGem6th.magicOrTech = "M"
    TiaraofTranslocationMk1.magicOrTech = "M"
    TiaraofTranslocationMk2.magicOrTech = "M"
    TiaraofTranslocationMk3.magicOrTech = "M"
    TiaraofTranslocationMk4.magicOrTech = "M"
    
}


func loadTechItems() {
    
    let CableLineAdamantineAlloy = CompendiumItem(context: context)
    CableLineAdamantineAlloy.name = "Cable Line, Adamantine Alloy"
    CableLineAdamantineAlloy.magicOrTech = "T"
    CableLineAdamantineAlloy.category = "Cable Lines"
    CableLineAdamantineAlloy.level = 1
    CableLineAdamantineAlloy.price = 500
    CableLineAdamantineAlloy.bulk = 0.1
    CableLineAdamantineAlloy.content = """
    Industrial-strength cabling is typically woven from hundreds of cords of high-durability plastic that are often coated in metal for added strength, usually adamantine or titanium alloy.
    """
    
    let CableLineTitaniumAlloy = CompendiumItem(context: context)
    CableLineTitaniumAlloy.name = "Cable Line, Titanium Alloy"
    CableLineTitaniumAlloy.magicOrTech = "T"
    CableLineTitaniumAlloy.category = "Cable Lines"
    CableLineTitaniumAlloy.level = 1
    CableLineTitaniumAlloy.price = 5
    CableLineTitaniumAlloy.bulk = 0.1
    CableLineTitaniumAlloy.content = """
    Industrial-strength cabling is typically woven from hundreds of cords of high-durability plastic that are often coated in metal for added strength, usually adamantine or titanium alloy.
    """
    
    let CommUnitPersonal = CompendiumItem(context: context)
    CommUnitPersonal.name = "Comm Unit, Personal"
    CommUnitPersonal.magicOrTech = "T"
    CommUnitPersonal.category = "Comm Units"
    CommUnitPersonal.level = 1
    CommUnitPersonal.price = 7
    CommUnitPersonal.bulk = 0.1
    CommUnitPersonal.capacity = 80
    CommUnitPersonal.usage = 1
    CommUnitPersonal.content = """
    A personal comm unit is pocket-sized device that combines a minor portable computer (treat as a tier-0 computer with no upgrades or modules) and a cellular communication device, allowing wireless communication with other comm units in both audio- and text-based formats at planetary range (see page 272). A personal comm unit also includes a calculator, a flashlight (increases the light level one step in a 15-foot cone), and several entertainment options (including games and access to any local infospheres). You can upgrade a personal comm unit to function as some other devices (such as full computers and scanners) by spending credits equal to 110% of the additional device’s price.
    
    Comm units that function at system-wide and unlimited ranges aren’t as portable; they include built-in generators that provide the necessary amount of power. Short-term use of these units can be purchased in most major settlements (see page 234).
    
    See page 430 for more about Pact Worlds communications.
    """
    
    let CommUnitSystemWide = CompendiumItem(context: context)
    CommUnitSystemWide.name = "Comm Unit, System-Wide"
    CommUnitSystemWide.magicOrTech = "T"
    CommUnitSystemWide.category = "Comm Units"
    CommUnitSystemWide.level = 6
    CommUnitSystemWide.price = 4000
    CommUnitSystemWide.bulk = 20
    CommUnitSystemWide.content = """
    A personal comm unit is pocket-sized device that combines a minor portable computer (treat as a tier-0 computer with no upgrades or modules) and a cellular communication device, allowing wireless communication with other comm units in both audio- and text-based formats at planetary range (see page 272). A personal comm unit also includes a calculator, a flashlight (increases the light level one step in a 15-foot cone), and several entertainment options (including games and access to any local infospheres). You can upgrade a personal comm unit to function as some other devices (such as full computers and scanners) by spending credits equal to 110% of the additional device’s price.
    
    Comm units that function at system-wide and unlimited ranges aren’t as portable; they include built-in generators that provide the necessary amount of power. Short-term use of these units can be purchased in most major settlements (see page 234).
    
    See page 430 for more about Pact Worlds communications.
    """
    
    let CommUnitUnlimited = CompendiumItem(context: context)
    CommUnitUnlimited.name = "Comm Unit, Unlimited"
    CommUnitUnlimited.magicOrTech = "T"
    CommUnitUnlimited.category = "Comm Units"
    CommUnitUnlimited.level = 12
    CommUnitUnlimited.price = 32000
    CommUnitUnlimited.bulk = 40
    CommUnitUnlimited.content = """
    A personal comm unit is pocket-sized device that combines a minor portable computer (treat as a tier-0 computer with no upgrades or modules) and a cellular communication device, allowing wireless communication with other comm units in both audio- and text-based formats at planetary range (see page 272). A personal comm unit also includes a calculator, a flashlight (increases the light level one step in a 15-foot cone), and several entertainment options (including games and access to any local infospheres). You can upgrade a personal comm unit to function as some other devices (such as full computers and scanners) by spending credits equal to 110% of the additional device’s price.
    
    Comm units that function at system-wide and unlimited ranges aren’t as portable; they include built-in generators that provide the necessary amount of power. Short-term use of these units can be purchased in most major settlements (see page 234).
    
    See page 430 for more about Pact Worlds communications.
    """
    
    let LockSimple = CompendiumItem(context: context)
    LockSimple.name = "Lock, Simple"
    LockSimple.magicOrTech = "T"
    LockSimple.category = "Locks"
    LockSimple.level = 1
    LockSimple.price = 100
    LockSimple.bulk = 0.1
    LockSimple.content = """
    Locks are extremely advanced reusable devices, able to secure any fastening or closure by bonding with its surface and then holding fast. Locks usually open with a code, security chip, or voice command. Successful Engineering checks can disable locks. Locks come in four levels of quality—simple, average, good, and superior—which determine the DC of Engineering checks to open them without the proper key or code. A lock takes two hands to secure or open with a security chip. For more information on locks, including the Engineering DCs to open them, see the Engineering skill on page 141.
    """
    
    let LockAverage = CompendiumItem(context: context)
    LockAverage.name = "Lock, Average"
    LockAverage.magicOrTech = "T"
    LockAverage.category = "Locks"
    LockAverage.level = 3
    LockAverage.price = 1000
    LockAverage.bulk = 0.1
    LockAverage.content = """
    Locks are extremely advanced reusable devices, able to secure any fastening or closure by bonding with its surface and then holding fast. Locks usually open with a code, security chip, or voice command. Successful Engineering checks can disable locks. Locks come in four levels of quality—simple, average, good, and superior—which determine the DC of Engineering checks to open them without the proper key or code. A lock takes two hands to secure or open with a security chip. For more information on locks, including the Engineering DCs to open them, see the Engineering skill on page 141.
    """
    
    let LockGood = CompendiumItem(context: context)
    LockGood.name = "Lock, Good"
    LockGood.magicOrTech = "T"
    LockGood.category = "Locks"
    LockGood.level = 6
    LockGood.price = 3600
    LockGood.bulk = 0.1
    LockGood.content = """
    Locks are extremely advanced reusable devices, able to secure any fastening or closure by bonding with its surface and then holding fast. Locks usually open with a code, security chip, or voice command. Successful Engineering checks can disable locks. Locks come in four levels of quality—simple, average, good, and superior—which determine the DC of Engineering checks to open them without the proper key or code. A lock takes two hands to secure or open with a security chip. For more information on locks, including the Engineering DCs to open them, see the Engineering skill on page 141.
    """
    
    let LockSuperior = CompendiumItem(context: context)
    LockSuperior.name = "Lock, Superior"
    LockSuperior.magicOrTech = "T"
    LockSuperior.category = "Locks"
    LockSuperior.level = 14
    LockSuperior.price = 60000
    LockSuperior.bulk = 0.1
    LockSuperior.content = """
    Locks are extremely advanced reusable devices, able to secure any fastening or closure by bonding with its surface and then holding fast. Locks usually open with a code, security chip, or voice command. Successful Engineering checks can disable locks. Locks come in four levels of quality—simple, average, good, and superior—which determine the DC of Engineering checks to open them without the proper key or code. A lock takes two hands to secure or open with a security chip. For more information on locks, including the Engineering DCs to open them, see the Engineering skill on page 141.
    """
    
    let Medpatch = CompendiumItem(context: context)
    Medpatch.name = "Medpatch"
    Medpatch.magicOrTech = "T"
    Medpatch.category = "Medical Gear"
    Medpatch.level = 1
    Medpatch.price = 50
    Medpatch.bulk = 0.1
    Medpatch.capacity = 1
    Medpatch.usage = 1
    Medpatch.content = """
    Medical gear allows you to attempt Medicine checks and determines the DC of Medicine checks to treat deadly wounds. See the Medicine skill on page 143 for more information.
    
    A medpatch is a simple, all-in-one, disposable medical device designed to be slapped onto a wound or area of concern (such as a clearly diseased or poisoned section of the body) with little skill required. A medpatch allows you to attempt a Medicine check untrained with a +10 circumstance bonus, but only for the first aid, long-term stability, treat disease, and treat drugs or poison tasks.
    """
    
    let MedkitBasic = CompendiumItem(context: context)
    MedkitBasic.name = "Medkit, Basic"
    MedkitBasic.magicOrTech = "T"
    MedkitBasic.category = "Medical Gear"
    MedkitBasic.level = 1
    MedkitBasic.price = 100
    MedkitBasic.bulk = 1
    MedkitBasic.content = """
    Medical gear allows you to attempt Medicine checks and determines the DC of Medicine checks to treat deadly wounds. See the Medicine skill on page 143 for more information.
    
    The basic medkit has spray antiseptic, bandages, and handheld instruments designed to examine, explore, and treat common ailments. The basic medkit allows you to attempt DC 25 Medicine checks to treat deadly wounds.
    """
    
    let Sprayflesh = CompendiumItem(context: context)
    Sprayflesh.name = "Sprayflesh"
    Sprayflesh.magicOrTech = "T"
    Sprayflesh.category = "Medical Gear"
    Sprayflesh.level = 5
    Sprayflesh.price = 440
    Sprayflesh.bulk = 0.1
    Sprayflesh.capacity = 1
    Sprayflesh.usage = 1
    Sprayflesh.content = """
    Medical gear allows you to attempt Medicine checks and determines the DC of Medicine checks to treat deadly wounds. See the Medicine skill on page 143 for more information.
    
    Sprayflesh is an advanced biotech medical device that sprays neutral biomass into a wound or area of concern (such as a clearly diseased or poisoned section of the body). If you have ranks in Medicine, a dose of sprayflesh allows you to attempt a check to treat deadly wounds on a creature that has already received its limit of treat deadly wound benefits for the day. If you succeed at a DC 25 Medicine check, the next time such a creature rests for 10 minutes and spends a Resolve Point to regain Stamina Points, it can instead gain the benefit of your Medicine check to treat deadly wounds. If you are not trained in Medicine, a dose of sprayflesh acts as a medpatch.
    """
    
    let MedkitAdvanced = CompendiumItem(context: context)
    MedkitAdvanced.name = "Medkit, Advanced"
    MedkitAdvanced.magicOrTech = "T"
    MedkitAdvanced.category = "Medical Gear"
    MedkitAdvanced.level = 5
    MedkitAdvanced.price = 2700
    MedkitAdvanced.bulk = 1
    MedkitAdvanced.content = """
    Medical gear allows you to attempt Medicine checks and determines the DC of Medicine checks to treat deadly wounds. See the Medicine skill on page 143 for more information.
    
    The advanced medkit adds more-advanced and specialized tools to diagnose and treat ailments. The advanced medkit can be used in the same way as a basic medkit, but the DC to treat deadly wounds is only 20, and you gain a +2 insight bonus to Medicine checks to treat drugs, diseases, and poisons. Additionally, you can use an advanced medkit to set up a temporary one-patient medical lab, though this requires 10 minutes. You can then provide long-term care to a single patient using the temporary medical lab, with a DC 30 Medicine check.
    """
    
    let MedicalLab = CompendiumItem(context: context)
    MedicalLab.name = "Medical Lab"
    MedicalLab.magicOrTech = "T"
    MedicalLab.category = "Medical Gear"
    MedicalLab.level = 7
    MedicalLab.price = 7000
    MedicalLab.bulk = 50
    MedicalLab.content = """
    Medical gear allows you to attempt Medicine checks and determines the DC of Medicine checks to treat deadly wounds. See the Medicine skill on page 143 for more information.
    
    A full medical lab contains beds, diagnostic equipment, sensors, and tools, and even a small surgical theater. A medical lab is not generally portable unless installed in a starship or vehicle of Huge or larger size. It allows you to treat up to three patients at once, and you can use the treat deadly wounds task of the Medicine skill twice per day on each patient. It otherwise functions as an advanced medical kit.
    """
    
    let SignalJammer = CompendiumItem(context: context)
    SignalJammer.name = "Signal Jammer"
    SignalJammer.magicOrTech = "T"
    SignalJammer.category = "Other"
    SignalJammer.level = 0
    SignalJammer.price = 0
    SignalJammer.bulk = 0.1
    SignalJammer.capacity = 12
    SignalJammer.usage = 1
    SignalJammer.content = """
    Price: Level squared x 100
    
    This handheld device, originally designed by the Stewards for military uses, is used by corporations and criminals alike. Signal jammers are available at any item level from 1 to 20 and can be purchased for a price equal to 100 credits × the square of the item level of the jammer. When activated, a signal jammer interrupts broadcast signals within 4 miles. If attached to a larger broadcasting station (such as those found aboard a starship), the range increases to 12 miles. A signal jammer blocks all communication devices from sending and receiving broadcasts. Each signal jammer is designed to affect one specific broadcasting medium (such as radio or wireless). You can attempt a Computers or Engineering check to bypass a signal jammer’s effects or to determine the location of the jammer. The DC to bypass a signal jammer is 15 + the signal jammer’s level, and attempting this check takes 1 minute.
    """
    
    let Chemalyzer = CompendiumItem(context: context)
    Chemalyzer.name = "Chemalyzer"
    Chemalyzer.magicOrTech = "T"
    Chemalyzer.category = "Other"
    Chemalyzer.level = 1
    Chemalyzer.price = 150
    Chemalyzer.bulk = 0.1
    Chemalyzer.capacity = 20
    Chemalyzer.usage = 2
    Chemalyzer.content = """
    This handheld unit includes an extendable wand tipped with a sampling nozzle, and can be easily operated with a single hand. It grants a +4 circumstance bonus to Engineering, Mysticism, and Physical Science checks to identify an unknown drug, medicinal, poison, or other chemical substance.
    """
    
    let Detonator = CompendiumItem(context: context)
    Detonator.name = "Detonator"
    Detonator.magicOrTech = "T"
    Detonator.category = "Other"
    Detonator.level = 1
    Detonator.price = 150
    Detonator.bulk = 0.1
    Detonator.capacity = 5
    Detonator.usage = 1
    Detonator.content = """
    This conical device primes and detonates explosives (including grenades) with a push of a button. Programming a detonator to a specific package of explosives takes 1 minute, after which the detonator can be triggered in one of several ways. The detonator can be set to ignite its payload with the simple press of a button (no action), a four-digit command code (a move action), or a complex input method, such as scanning your retina or thumbprint (a full action). You choose the triggering method when setting the detonator. A detonator detonates its payload only if it is within 500 feet, but some detonators can make use of signal-boosting technologies at the risk of becoming vulnerable to countermeasures like signal jammers and other effects. Explosives have the same price, effect, and weight as grenades (see page 183). If you successfully set an explosive on a stationary object with a detonator using the Engineering skill, the explosive’s damage ignores half of the object’s hardness.
    """
    
    let EmergencyBeacon = CompendiumItem(context: context)
    EmergencyBeacon.name = "Emergency Beacon"
    EmergencyBeacon.magicOrTech = "T"
    EmergencyBeacon.category = "Other"
    EmergencyBeacon.level = 1
    EmergencyBeacon.price = 100
    EmergencyBeacon.bulk = 0.1
    EmergencyBeacon.capacity = 20
    EmergencyBeacon.content = """
    When activated, this small, pod-shaped device emits a bright red flash from a dome on its top once every 6 seconds, using 1 charge per day. The emergency beacon also transmits its location. Any device capable of receiving signals of any sort can pick up an emergency beacon’s signal, which can then be tracked back to the source with a successful DC 15 Engineering or Survival check. An emergency beacon’s transmissions have a range of 100 miles over flat terrain, but this range is halved in forests or hills and quartered in mountainous terrain and underwater. Alternatively, an emergency beacon can be hooked up to a starship or vehicle’s communications system, in which case its usage increases to 1 charge per hour and its range matches that of the communications array of the vehicle or starship.
    """
    
    let FireExtinguisher = CompendiumItem(context: context)
    FireExtinguisher.name = "Fire Extinguisher"
    FireExtinguisher.magicOrTech = "T"
    FireExtinguisher.category = "Other"
    FireExtinguisher.level = 1
    FireExtinguisher.price = 15
    FireExtinguisher.bulk = 0.1
    FireExtinguisher.capacity = 20
    FireExtinguisher.usage = 1
    FireExtinguisher.content = """
    As a standard action, you can deploy a fire extinguisher to end a burn effect on any one creature or object of Medium or smaller size. Extinguishing a Large creature or object takes 2 rounds, and the number of rounds required doubles with each size category beyond Large. A fire extinguisher can function for 20 rounds (which need not be consecutive) and can be recharged for 10% of the purchase price.
    """
    
    let HabitatBox = CompendiumItem(context: context)
    HabitatBox.name = "Habitat Box"
    HabitatBox.magicOrTech = "T"
    HabitatBox.category = "Other"
    HabitatBox.level = 1
    HabitatBox.price = 375
    HabitatBox.bulk = 4
    HabitatBox.capacity = 20
    HabitatBox.usage = 1
    HabitatBox.content = """
    A habitat box is a powered container used to store small creatures or plant samples. Habitat boxes are typically used by explorers and naturalists to preserve samples, but couriers and smugglers also find them useful. The box has an adjustable temperature and humidity to keep the interior at a consistent environment, and food and water dispensers can sustain creatures stored within for as long as the box has power. The standard habitat box is a cube 2 feet square, although interior dividers allow you subdivide the box into several smaller compartments, each with their own isolated environment.
    """
    
    let HolographicSashimono = CompendiumItem(context: context)
    HolographicSashimono.name = "Holographic Sashimono"
    HolographicSashimono.magicOrTech = "T"
    HolographicSashimono.category = "Other"
    HolographicSashimono.level = 1
    HolographicSashimono.price = 300
    HolographicSashimono.bulk = 0.1
    HolographicSashimono.capacity = 20
    HolographicSashimono.usage = 1
    HolographicSashimono.content = """
    This lightweight, shoulder-mounted hologram projector displays the image of a banner or crest in the air above and slightly behind you. Some use these to broadcast their beliefs, while others employ them as personal advertisements. Most holographic sashimonos display images up to 2 feet wide and 3 feet tall, and these images can be programmed to be static (such as a military insignia) or short looping animations (such as roaring flames). A holographic sashimono grants you a +2 insight bonus to Profession checks to earn a living.
    """
    
    let LaserDrill = CompendiumItem(context: context)
    LaserDrill.name = "Laser Drill"
    LaserDrill.magicOrTech = "T"
    LaserDrill.category = "Other"
    LaserDrill.level = 1
    LaserDrill.price = 200
    LaserDrill.bulk = 0.1
    LaserDrill.capacity = 20
    LaserDrill.usage = 1
    LaserDrill.content = """
    A laser drill is a handheld item that resembles a snub-nosed pistol. As a standard action, you can use the drill to create a hole 1 inch in diameter and 1 inch deep in stationary and unattended materials with a hardness of 15 or less, such as concrete, plastic, or wood. At the GM’s discretion, you might be able to use a laser drill on harder materials as a full action or longer. Detecting a laser drill at work requires a successful DC 15 Perception check. A laser drill isn’t generally useful in combat, but it can deal 1 fire damage with a successful melee attack as an improvised weapon.
    """
    
    let RadiationBadge = CompendiumItem(context: context)
    RadiationBadge.name = "Radiation Badge"
    RadiationBadge.magicOrTech = "T"
    RadiationBadge.category = "Other"
    RadiationBadge.level = 1
    RadiationBadge.price = 100
    RadiationBadge.bulk = 0.1
    RadiationBadge.content = """
    Because the invisible danger of radiation can lurk anywhere, dwarven mining consortiums often issue these small apparatuses to those exploring uncharted asteroids. When you are about to enter a square containing any level of radiation and you are wearing a radiation badge, the badge beeps audibly to warn you. A radiation badge is always on and functions for 7 days before it needs to be recharged (much like the environmental protections of a suit of armor with an item level of 1).
    """
    
    let Zipstick = CompendiumItem(context: context)
    Zipstick.name = "Zipstick"
    Zipstick.magicOrTech = "T"
    Zipstick.category = "Other"
    Zipstick.level = 1
    Zipstick.price = 10
    Zipstick.bulk = 0
    Zipstick.capacity = 20
    Zipstick.usage = 1
    Zipstick.content = """
    A zipstick is a small pen-like device used to administer a small jolt of electricity. This jolt is enough to deal 1 electricity damage with a successful melee attack as an improvised weapon. A zipstick is most often used to activate or deactivate ion-bonding technology, such as ion tape.
    """
    
    let EmergencyRaftBasic = CompendiumItem(context: context)
    EmergencyRaftBasic.name = "Emergency Raft, Basic"
    EmergencyRaftBasic.magicOrTech = "T"
    EmergencyRaftBasic.category = "Other"
    EmergencyRaftBasic.level = 1
    EmergencyRaftBasic.price = 350
    EmergencyRaftBasic.bulk = 3
    EmergencyRaftBasic.capacity = 20
    EmergencyRaftBasic.usage = 1
    EmergencyRaftBasic.content = """
    Emergency rafts are stored in compressed cylinders with large fans that can inflate the rafts in mere moments.
    
    This emergency raft is stored as a brightred plastic cylinder, 6 inches wide and 2 feet long. When activated, it rapidly inflates into a plastic boat that measures 10 feet long, 4 feet wide, and 2 feet deep. It can hold four Medium creatures. The raft comes with four collapsible plastic oars to row with. As a move action, you can return the raft to its portable shape by pressing a button, as long as no objects or creatures remain inside. An emergency raft consumes 1 charge when you activate or collapse it.
    """
    
    let GrenadeScramblerMk1 = CompendiumItem(context: context)
    GrenadeScramblerMk1.name = "Grenade Scrambler, Mk 1"
    GrenadeScramblerMk1.magicOrTech = "T"
    GrenadeScramblerMk1.category = "Other"
    GrenadeScramblerMk1.level = 1
    GrenadeScramblerMk1.price = 250
    GrenadeScramblerMk1.bulk = 1
    GrenadeScramblerMk1.capacity = 20
    GrenadeScramblerMk1.usage = 5
    GrenadeScramblerMk1.content = """
    When activated as a move action, this unit emits a wireless signal that interferes with the detonation sequence of grenades within 30 feet. Grenades that would successfully land at an intersection in the area have a 50% chance to miss, and any grenade that targets an intersection in the area and misses lands 1d6 squares away (instead of 1d4). A grenade scrambler affects only grenades whose item level is equal to or lower than its own level. If an affected grenade’s level is at least 5 levels lower than the grenade scrambler’s, it automatically misses.
    
    Affects grenades with an item level of 1 or lower.
    """
    
    let MusicalInstrumentBasic = CompendiumItem(context: context)
    MusicalInstrumentBasic.name = "Musical Instrument, Basic"
    MusicalInstrumentBasic.magicOrTech = "T"
    MusicalInstrumentBasic.category = "Other"
    MusicalInstrumentBasic.level = 1
    MusicalInstrumentBasic.price = 100
    MusicalInstrumentBasic.capacity = 20
    MusicalInstrumentBasic.usage = 1
    MusicalInstrumentBasic.content = """
    Basic musical instruments can vary widely in quality and dimensions, but all can be played to provide a +2 insight bonus to Profession (musician) checks to earn a living. At the GM’s discretion, this bonus might also apply to similar Profession skills. Basic portable instruments are generally 1 bulk in size and can be held in one hand, even if they require two hands to play.
    
    Musical instruments are popular throughout the galaxy and come in a dizzying array of styles, such as autohorns, electropaizo synth keyboards, monofilament guitars, and psychoactive wave plates. All but the most traditional and classical instruments use modern technology to amplify their sound, provide musical accompaniment, or connect wirelessly to other instruments in a band or orchestra.
    """
    
    let ScannerVideoCamera = CompendiumItem(context: context)
    ScannerVideoCamera.name = "Scanner, Video Camera"
    ScannerVideoCamera.magicOrTech = "T"
    ScannerVideoCamera.category = "Other"
    ScannerVideoCamera.level = 1
    ScannerVideoCamera.price = 275
    ScannerVideoCamera.bulk = 0.1
    ScannerVideoCamera.capacity = 20
    ScannerVideoCamera.usage = 2
    ScannerVideoCamera.content = """
    Scanners are common items that allow you to extend your senses and record your experiences. Some specialized scanners can also provide other senses, such as blindsense or sense through, but these often require ongoing monitoring or impose other restrictions. Common examples include laser microphones, motion detectors, and x-ray visors.
    
    The most typical scanner is a video camera, which requires one hand to use. A video camera has ordinary sight and is capable of seeing whatever an ordinary human could see, with up to 10 times magnification. A video camera can record up to 4 hours of footage, which can be downloaded and viewed using nearly any computer.
    """
    
    let StrategyGameBasic = CompendiumItem(context: context)
    StrategyGameBasic.name = "Strategy Game, Basic"
    StrategyGameBasic.magicOrTech = "T"
    StrategyGameBasic.category = "Other"
    StrategyGameBasic.level = 1
    StrategyGameBasic.price = 150
    StrategyGameBasic.content = """
    A staggering variety of board and computer games exists across the galaxy, from venerable board games to singleplayer computer games available on datapads or even comm units. Some are even revered pastimes in specific cultures. Only physical strategy games have bulk; computer games have no bulk but generally consume 1 charge per hour of play.
    
    If two to six characters spend 1 hour playing a basic strategy game together, each can roll an Intelligence check, with the highest result determining the game’s winner (reroll ties). The next time the strategy game’s winner attempts to use aid another to assist any of the other players of that game session, the DC of the aid another check is reduced by 1. A single basic strategy game can provide this benefit only once per week.
    """
    
    let ToolKitStarfinderArmory = CompendiumItem(context: context)
    ToolKitStarfinderArmory.name = "Tool Kit, Starfinder Armory"
    ToolKitStarfinderArmory.magicOrTech = "T"
    ToolKitStarfinderArmory.category = "Other"
    ToolKitStarfinderArmory.level = 1
    ToolKitStarfinderArmory.price = 200
    ToolKitStarfinderArmory.bulk = 0.1
    ToolKitStarfinderArmory.content = """
    A tool kit is a set of specialized tools and devices not worth purchasing individually, but which as a collection are required for a given task or provide a circumstance bonus to certain skill checks. The types of tool kits are: disguise kit (required for Disguise checks to change appearance), engineering kit (Engineering checks without one take a –2 penalty), hacking kit (required for most Computer checks; see page 137 for more information), navigator’s tools (grants a +4 bonus to Survival checks when orienteering), professional’s tools (provides a +4 bonus to Profession checks for one profession), rider’s kit (provides a +4 bonus to Survival checks to ride creatures), and trapsmith’s tools (provides a +4 bonus to Engineering or Mysticism checks to arm or disarm traps).
    
    In escalating efforts to remain ahead of their competitors, many corporations market specialty tool kits as the latest advances or essential devices. The following tool kits supplement those presented on page 221 of the Core Rulebook and provide circumstance bonuses to one or more skills in specific situations. These tool kits include the following: animaltrainer’s kit (grants a +4 bonus to Survival checks to handle an animal or rear a wild animal), astrogator’s kit (grants a +4 bonus to Piloting checks to navigate or astrogate), aura-translation kit (grants a +4 bonus to Mysticism checks to identify a magic item), broad-spectrum scanning kit (grants a +4 bonus to Perception checks to search), light-scattering sniper’s blind (grants a +4 bonus to Stealth checks when sniping), mental interpretation kit (grants a +4 bonus to Sense Motive checks to discern a secret message out of combat), personal gravitational redistributor (grants a +4 bonus to Acrobatics checks to balance out of combat), and thieves’ tools (grants a +4 bonus to Computers checks to hack a computer system that controls a door and a +4 bonus to Engineering checks to disable a mechanical or technological lock). When using a thieves’ tools tool kit for its specialized purpose, you don’t take the –2 penalty to Engineering checks if you don’t have an engineering kit.
    """
    
    let ToolKit = CompendiumItem(context: context)
    ToolKit.name = "Tool Kit"
    ToolKit.magicOrTech = "T"
    ToolKit.category = "Other"
    ToolKit.level = 1
    ToolKit.price = 20
    ToolKit.bulk = 0.1
    ToolKit.content = """
    A tool kit is a set of specialized tools and devices not worth purchasing individually, but which as a collection are required for a given task or provide a circumstance bonus to certain skill checks. The types of tool kits are: disguise kit (required for Disguise checks to change appearance), engineering kit (Engineering checks without one take a –2 penalty), hacking kit (required for most Computer checks; see page 137 for more information), navigator’s tools (grants a +4 bonus to Survival checks when orienteering), professional’s tools (provides a +4 bonus to Profession checks for one profession), rider’s kit (provides a +4 bonus to Survival checks to ride creatures), and trapsmith’s tools (provides a +4 bonus to Engineering or Mysticism checks to arm or disarm traps).
    """
    
    let ToolKitXhintiHoldings = CompendiumItem(context: context)
    ToolKitXhintiHoldings.name = "Tool Kit, Xhinti Holdings"
    ToolKitXhintiHoldings.magicOrTech = "T"
    ToolKitXhintiHoldings.category = "Other"
    ToolKitXhintiHoldings.level = 1
    ToolKitXhintiHoldings.price = 200
    ToolKitXhintiHoldings.bulk = 0.1
    ToolKitXhintiHoldings.content = """
    A tool kit is a set of specialized tools and devices not worth purchasing individually, but which as a collection are required for a given task or provide a circumstance bonus to certain skill checks. The types of tool kits are: disguise kit (required for Disguise checks to change appearance), engineering kit (Engineering checks without one take a –2 penalty), hacking kit (required for most Computer checks; see page 137 for more information), navigator’s tools (grants a +4 bonus to Survival checks when orienteering), professional’s tools (provides a +4 bonus to Profession checks for one profession), rider’s kit (provides a +4 bonus to Survival checks to ride creatures), and trapsmith’s tools (provides a +4 bonus to Engineering or Mysticism checks to arm or disarm traps).
    
    Xhinti Holdings, which has corporate offices on Salomo Station and factories on Akiton, produces a line of specialty tool kits that supplement those presented on page 221 of the Starfinder Core Rulebook. Xhinti tool kits include the following: a climbing kit (grants a +4 bonus to Athletics checks when climbing), demolitionist’s kit (grants a +4 bonus to Engineering checks when arming and disarming explosives), linguist’s kit (grants a +4 bonus to Culture checks when deciphering writing), portable weather station (grants a +4 bonus to Survival checks when predicting the weather), starship repair kit (grants a +4 bonus to Engineering checks when repairing the hull of a starship), and survivalist’s kit (grants a +4 bonus to Survival checks when enduring severe weather or living off the land). When using a demolitionist’s kit or starship repair kit for its specialized purpose, you don’t take the –2 penalty to Engineering checks if you don’t have an engineering kit.
    """
    
    let Datapad = CompendiumItem(context: context)
    Datapad.name = "Datapad"
    Datapad.magicOrTech = "T"
    Datapad.category = "Other"
    Datapad.level = 2
    Datapad.price = 55
    Datapad.bulk = 0.1
    Datapad.capacity = 20
    Datapad.usage = 1
    Datapad.content = """
    Datapads are among the most common handheld computers and are ubiquitous in homes, manufacturing settings, and offices. Datapads require at least one hand to use. Nearly all datapads also incorporate a comm unit (which includes a microphone and speaker) along with several other functions, such as infosphere connectivity and data storage. Datapads can record simple audio and video (though not in high enough resolution to serve as proof of recorded events in most courts of law), store thousands of hours of recordings, play games, track time and set time-based alarms, act as word processors, and perform numerous other minor data processing and entertainment functions.
    
    All datapads have light bulk, and most are tier 1 computers with the miniaturization upgrade. Tier 2 and higher datapads are generally used only by the wealthy elites or technological sophisticates due to the additional miniaturization technology involved, but they are more powerful than many stationary computers while still fitting comfortably in one hand. Datapads can have computer modules and countermeasures installed at the usual additional costs. For example, most datapads in military or industrial use have the hardened upgrade.
    
    Saboteurs and spies frequently disguise eavesdropping devices or explosives as ordinary datapads, knowing that the datapads’ universal use means they won’t raise suspicion.
    """
    
    let DiagnosticLozenge = CompendiumItem(context: context)
    DiagnosticLozenge.name = "Diagnostic Lozenge"
    DiagnosticLozenge.magicOrTech = "T"
    DiagnosticLozenge.category = "Other"
    DiagnosticLozenge.level = 2
    DiagnosticLozenge.price = 175
    DiagnosticLozenge.bulk = 0
    DiagnosticLozenge.capacity = 20
    DiagnosticLozenge.usage = 1
    DiagnosticLozenge.content = """
    This smooth, thumb-sized device activates automatically when it is inside a living creature. You can implant a diagnostic lozenge subdermally in a willing or unconscious creature with a successful DC 20 Medicine check, or a creature can choose to swallow one. An activated diagnostic lozenge steers itself into a creature’s tissue and extrudes several filaments to monitor its status, broadcasting information on a predetermined wireless frequency to a designated receiver, such as a datapad or comm unit, as long as the receiver is within 1 mile of the lozenge. The diagnostic lozenge broadcasts the creature’s direction and distance relative to the receiver, as well as any of the following conditions that are affecting the creature: dead, dying, frightened, nauseated, panicked, sickened, stable, staggered, stunned, or unconscious. A single receiver can accept information from up to six different diagnostic lozenges simultaneously. When a diagnostic lozenge runs out of charges, it breaks down into harmless components that eventually pass out of the creature’s body. Diagnostic lozenges can’t normally be safely removed once activated.
    """
    
    let EvenfireUnit = CompendiumItem(context: context)
    EvenfireUnit.name = "Evenfire Unit"
    EvenfireUnit.magicOrTech = "T"
    EvenfireUnit.category = "Other"
    EvenfireUnit.level = 2
    EvenfireUnit.price = 550
    EvenfireUnit.bulk = 0.1
    EvenfireUnit.capacity = 20
    EvenfireUnit.usage = 2
    EvenfireUnit.content = """
    Crafted of chemicals found on sweltering jungle worlds, this dull-brown cylindrical unit is no larger than a datapad. When an evenfire unit is activated, an electric current causes the chemicals to emit steady heat, but not light, within a 30-foot radius. Over 1 minute, the temperature of this area increases by 60° F, to a maximum of 80° F. The effects of multiple active evenfire units do not stack. This heat dissipates once the unit is shut off. An evenfire’s heat is consistent throughout the area and is no hotter closer to the unit than at the edge of its area of effect. Anyone in the heated area gains a +2 circumstance bonus to Fortitude saves against environmental cold dangers. In moderate or strong winds, an evenfire’s temperature increase is reduced to 30° F, and the circumstance bonus to Fortitude saves is reduced to +1.
    
    In severe or stronger winds, an evenfire unit provides no temperature increase or save bonus.
    """
    
    let Grappler = CompendiumItem(context: context)
    Grappler.name = "Grappler"
    Grappler.magicOrTech = "T"
    Grappler.category = "Other"
    Grappler.level = 2
    Grappler.price = 700
    Grappler.bulk = 0.1
    Grappler.capacity = 20
    Grappler.usage = 1
    Grappler.content = """
    A grappler is a high-tech anchoring device that can be attached to a cable line as a move action. The cable line can instead be threaded through the grappler, which takes 1 minute but adds the cable line’s hardness and HP to the hardness and HP of the grappler (and vice versa). A grappler has clamps that can slide from its base along a cable line attached to it, allowing it to be climbed as easily as a knotted rope (see Athletics on page 136).
    
    You can attach a grappler through which a cable line is threaded to an immobile object that’s at least 5 feet in width with a ranged attack against AC 5. If the grappler is fired at a moving object or a smaller object, you must hit that object’s KAC + 8 to attach the grappler to the object. After it’s attached, the grappler remains anchored until either you give a release command as a move action, the grappler is pried free with an Athletics check equal to the attack roll you made to attach it, or the grappler is destroyed. If a cable line attached to or threaded through a grappler is destroyed but the grappler itself was not damaged, the cable line is destroyed, but the grappler is unharmed. In this case, the grappler loses the excess hardness and HP that a threaded cable line added to it.
    
    You can also target a creature with the grappler. This is resolved as a grapple combat maneuver, but a creature struck with the grappler can still use its hands, and its movement is only restricted to remain within range of the length of the grappler’s cable. In addition to the normal rules for escaping a grapple, the target can pry itself loose with a successful Athletics check (DC equal to your attack roll to grapple the target). Or, it can perform a sunder combat maneuver (see page 246) against the grappler. Even if the combat maneuver doesn’t destroy the attached cable, the creature escapes the grapple.
    
    A grappler can be thrown as a grenade or set over the muzzle of a ranged weapon that targets KAC, in which case it has half the normal range increment of the weapon, and you use any weapon proficiency and bonuses to attack you have with that weapon. A grappler can be reused.
    """
    
    let Holoskin = CompendiumItem(context: context)
    Holoskin.name = "Holoskin"
    Holoskin.magicOrTech = "T"
    Holoskin.category = "Other"
    Holoskin.level = 2
    Holoskin.price = 500
    Holoskin.bulk = 0.1
    Holoskin.capacity = 20
    Holoskin.usage = 1
    Holoskin.content = """
    This holographic projector is generally mounted to a belt or arm strap. It can be programmed using the Disguise skill to project a different appearance. When you use a holoskin, you can disguise major features, race, or creature type without the DC of your Disguise check increasing, except against Perception checks that involve physical examination.
    """
    
    let Magboots = CompendiumItem(context: context)
    Magboots.name = "Magboots"
    Magboots.magicOrTech = "T"
    Magboots.category = "Other"
    Magboots.level = 2
    Magboots.price = 750
    Magboots.bulk = 1
    Magboots.capacity = 20
    Magboots.usage = 1
    Magboots.content = """
    Used by the brave souls who venture onto the exterior of Absalom Station to conduct repairs, these sturdy boots have powerful electromagnets built directly into the soles. These magnets can be activated as a move action, providing you a +5 circumstance bonus to Athletics checks made to climb metal surfaces, as well as +2 circumstance bonus to KAC against bull rush and trip combat maneuvers when you are standing on a metal surface. In areas of zero gravity, while wearing a pair of magboots, you can move your land speed across metal surfaces without having to attempt skill checks, and as long as you are adjacent to an appropriate surface, you do not automatically move at the beginning of your turn each round. Magboots function until they run out of power or until you deactivate them as a move action, whichever comes first.
    """
    
    let Microgoggles = CompendiumItem(context: context)
    Microgoggles.name = "Microgoggles"
    Microgoggles.magicOrTech = "T"
    Microgoggles.category = "Other"
    Microgoggles.level = 2
    Microgoggles.price = 900
    Microgoggles.bulk = 0
    Microgoggles.capacity = 20
    Microgoggles.usage = 1
    Microgoggles.content = """
    This bulky set of goggles functions as a lighted magnifying glass or microscope, allowing you to see exceptionally small details with adjustable levels of magnification. Microgoggles provide a +2 insight bonus to any skill use that benefits from exceedingly close vision, such as detecting complicated forgeries or crafting drugs or medicinals.
    """
    
    let RadiationSweeper = CompendiumItem(context: context)
    RadiationSweeper.name = "Radiation Sweeper"
    RadiationSweeper.magicOrTech = "T"
    RadiationSweeper.category = "Other"
    RadiationSweeper.level = 2
    RadiationSweeper.price = 500
    RadiationSweeper.bulk = 1
    RadiationSweeper.capacity = 20
    RadiationSweeper.usage = 1
    RadiationSweeper.content = """
    As radiation is deadly yet undetectable to most creatures’ senses, many races have invented sensors to detect its presence. A common sensor is the radiation sweeper, a handheld device capable of detecting radiation within 120 feet. The sweeper emits warning pings in different tones to indicate the presence of low, medium, high, or severe radiation and displays the areas of radiation on a screen at the top of the device. You must take a move action each round to use the radiation sweeper. A radiation sweeper cannot detect radiation through 3 feet of dirt or wood, 1 foot of stone, 1 inch of common metal, a thin sheet of lead, or any force field.
    """
    
    let SurvivalStraw = CompendiumItem(context: context)
    SurvivalStraw.name = "Survival Straw"
    SurvivalStraw.magicOrTech = "T"
    SurvivalStraw.category = "Other"
    SurvivalStraw.level = 2
    SurvivalStraw.price = 450
    SurvivalStraw.bulk = 0
    SurvivalStraw.capacity = 20
    SurvivalStraw.usage = 1
    SurvivalStraw.content = """
    This thin tube contains nanomachines and several filters that destroy contaminants or trap them in a washable compartment in the middle of the straw. When you activate a survival straw, water-based liquids you drink through it are automatically filtered and purified, removing any diseases, drugs, and poisons present in the liquid. A survival straw uses 1 charge per gallon of water filtered (or fraction thereof).
    """
    
    let EmotionRegulatorBasic = CompendiumItem(context: context)
    EmotionRegulatorBasic.name = "Emotion Regulator, Basic"
    EmotionRegulatorBasic.magicOrTech = "T"
    EmotionRegulatorBasic.category = "Other"
    EmotionRegulatorBasic.level = 2
    EmotionRegulatorBasic.price = 800
    EmotionRegulatorBasic.bulk = 0.1
    EmotionRegulatorBasic.capacity = 20
    EmotionRegulatorBasic.usage = 1
    EmotionRegulatorBasic.content = """
    This small device is often worn strapped to the back of the neck or attached to a helmet. When activated, an emotion regulator sends out regular neurological pulses, reigning in extreme emotions.
    
    A basic emotion regulator grants you a +2 insight bonus to saves against emotion and fear effects, but your dulled reactions to danger impart a –2 penalty to your initiative checks and Reflex saving throws.
    """
    
    let NaniteHypopenBrown = CompendiumItem(context: context)
    NaniteHypopenBrown.name = "Nanite Hypopen, Brown"
    NaniteHypopenBrown.magicOrTech = "T"
    NaniteHypopenBrown.category = "Other"
    NaniteHypopenBrown.level = 2
    NaniteHypopenBrown.price = 160
    NaniteHypopenBrown.bulk = 0.1
    NaniteHypopenBrown.content = """
    Nanite hypopens are simple-to-use, one-shot, preloaded devices roughly the size of a writing stylus that inject specialized nanites into a creature’s body to heal many sorts of mental and physical injuries. Seven types of nanite hypopens exist along a color-coded scale, as detailed below. As a standard action, you can use a nanite hypopen on yourself or an adjacent willing or unconscious living creature. Each nanite hypopen has a different effect, determined by its color; these are technological effects that function as the specific spells indicated on the chart below (using your ranks in Medicine in place of caster level when needed, such as when using a white nanite hypopen to remove a disease). A nanite hypopen can be used only once, after which it has no value.
    
    Effect: Lesser remove condition
    """
    
    let ScannerShotgunMicrophone = CompendiumItem(context: context)
    ScannerShotgunMicrophone.name = "Scanner, Shotgun Microphone"
    ScannerShotgunMicrophone.magicOrTech = "T"
    ScannerShotgunMicrophone.category = "Other"
    ScannerShotgunMicrophone.level = 2
    ScannerShotgunMicrophone.price = 625
    ScannerShotgunMicrophone.bulk = 0.1
    ScannerShotgunMicrophone.capacity = 20
    ScannerShotgunMicrophone.usage = 1
    ScannerShotgunMicrophone.content = """
    Scanners are common items that allow you to extend your senses and record your experiences. Some specialized scanners can also provide other senses, such as blindsense or sense through, but these often require ongoing monitoring or impose other restrictions. Common examples include laser microphones, motion detectors, and x-ray visors.
    
    A shotgun microphone amplifies your sense of hearing within a particular direction. You gain a +2 insight bonus to hearing-based Perception checks in a 60-foot cone, but you take a –2 penalty to hearing-based Perception checks from other areas. A shotgun microphone can record up to 12 hours of sound. You don’t need to take an action to use a shotgun microphone, but changing its direction requires a move action.
    """
    
    let SwarmproofBanglesBasic = CompendiumItem(context: context)
    SwarmproofBanglesBasic.name = "Swarmproof Bangles, Basic"
    SwarmproofBanglesBasic.magicOrTech = "T"
    SwarmproofBanglesBasic.category = "Other"
    SwarmproofBanglesBasic.level = 2
    SwarmproofBanglesBasic.price = 900
    SwarmproofBanglesBasic.bulk = 0
    SwarmproofBanglesBasic.capacity = 20
    SwarmproofBanglesBasic.usage = 1
    SwarmproofBanglesBasic.content = """
    These matching anklets and bracelets are light and comfortable and come in many fashionable styles. When activated, they produce a broad-spectrum field around your body that repels vermin, making it difficult for Diminutive and Fine vermin to make physical contact with you.
    
    While basic swarmproof bangles are active, you have the entangled condition, but you also have DR 2/— against the swarm attack of Fine vermin and DR 1/— against the swarm attack of Diminutive vermin.
    """
    
    let ToolKitEngineeringSpecialty = CompendiumItem(context: context)
    ToolKitEngineeringSpecialty.name = "Tool Kit, Engineering Specialty"
    ToolKitEngineeringSpecialty.magicOrTech = "T"
    ToolKitEngineeringSpecialty.category = "Other"
    ToolKitEngineeringSpecialty.level = 2
    ToolKitEngineeringSpecialty.price = 445
    ToolKitEngineeringSpecialty.bulk = 0.1
    ToolKitEngineeringSpecialty.content = """
    A tool kit is a set of specialized tools and devices not worth purchasing individually, but which as a collection are required for a given task or provide a circumstance bonus to certain skill checks. The types of tool kits are: disguise kit (required for Disguise checks to change appearance), engineering kit (Engineering checks without one take a –2 penalty), hacking kit (required for most Computer checks; see page 137 for more information), navigator’s tools (grants a +4 bonus to Survival checks when orienteering), professional’s tools (provides a +4 bonus to Profession checks for one profession), rider’s kit (provides a +4 bonus to Survival checks to ride creatures), and trapsmith’s tools (provides a +4 bonus to Engineering or Mysticism checks to arm or disarm traps).
    """
    
    let AlertRedirector = CompendiumItem(context: context)
    AlertRedirector.name = "Alert Redirector"
    AlertRedirector.magicOrTech = "T"
    AlertRedirector.category = "Other"
    AlertRedirector.level = 3
    AlertRedirector.price = 1450
    AlertRedirector.bulk = 0
    AlertRedirector.capacity = 20
    AlertRedirector.usage = 1
    AlertRedirector.content = """
    The alert redirector consists of a metallic transmitter the size of a coin and a battery-powered receiver normally kept somewhere discreet on your body, such as in a pocket or on an arm strap under your clothing. As a standard action, you can attach the transmitter to a technological item that provides an alert or alarm when used, such as a radiation badge. Once the transmitter is attached, the item it is attached to doesn’t produce its usual alert or alarm; instead, the alert redirector’s receiver vibrates, warms slightly, or otherwise inaudibly alerts you as long as it is within 500 feet of the activated transmitter. Others relying on the item might consider an area safe, for example, while you know otherwise. Detecting a transmitter attached to an item normally requires a successful DC 20 Perception check, but the DC might be lower or higher based on the size of the item to which the transmitter is attached.
    """
    
    let DermalStapler = CompendiumItem(context: context)
    DermalStapler.name = "Dermal Stapler"
    DermalStapler.magicOrTech = "T"
    DermalStapler.category = "Other"
    DermalStapler.level = 3
    DermalStapler.price = 1200
    DermalStapler.bulk = 0.1
    DermalStapler.capacity = 20
    DermalStapler.usage = 1
    DermalStapler.content = """
    This oblong box the length of a human hand contains several hypoallergenic staples and a mass of sticky antiseptic gel. You use the dermal stapler by pressing it onto a willing or unconscious living creature’s wound; the dermal stapler launches one of its staples into the wound to close it and slathers the staple with the antiseptic gel. You can use a dermal stapler on a willing or unconscious creature to automatically end the bleeding condition without a Medicine check. Alternatively, you can use it in conjunction with a medkit to treat deadly wounds and gain a +1 insight bonus to your Medicine check. In addition to consuming a charge with each use, a dermal stapler must synthesize new staples and gel after 20 uses, at a cost in UPBs equal to one-quarter the stapler’s price.
    """
    
    let EngineersPuzzleBox = CompendiumItem(context: context)
    EngineersPuzzleBox.name = "Engineer's Puzzle Box"
    EngineersPuzzleBox.magicOrTech = "T"
    EngineersPuzzleBox.category = "Other"
    EngineersPuzzleBox.level = 3
    EngineersPuzzleBox.price = 1500
    EngineersPuzzleBox.bulk = 1
    EngineersPuzzleBox.capacity = 20
    EngineersPuzzleBox.usage = 1
    EngineersPuzzleBox.content = """
    This small box is covered with various circuits, electronic locks, gears, and other mechanisms that you must unlock or bypass in order to reach the box’s hollow center. The mechanisms shift and rearrange automatically, allowing for a multitude of combinations to keep the box from opening. Once unlocked, the box resets itself and reorders the mechanisms, starting the process over. Using an engineer’s puzzle box to improve your skills requires 1 hour and a DC 25 Engineering check. If you succeed at the check, you reduce the time required to disable devices using the Engineering skill by 2 rounds (to a minimum of 1 round). This bonus lasts for 24 hours. You can benefit from only one engineer’s puzzle box at a time.
    
    Some engineering organizations and mechanics’ societies are known to put prizes or certificates in the center of an engineer’s puzzle box as a final test for applicants.
    """
    
    let Holoshroud = CompendiumItem(context: context)
    Holoshroud.name = "Holoshroud"
    Holoshroud.magicOrTech = "T"
    Holoshroud.category = "Other"
    Holoshroud.level = 3
    Holoshroud.price = 1300
    Holoshroud.bulk = 2
    Holoshroud.capacity = 20
    Holoshroud.usage = 1
    Holoshroud.content = """
    This loose mesh of wire and miniature holographic projectors is used to disguise the presence of creatures or objects. Holoshroud comes in 10-foot-by-10-foot square sheets. When you hide under an activated holoshroud, you gain a +2 insight bonus to Stealth checks as long as you remain immobile and prone. Covering yourself with holoshroud is a full action requiring a successful DC 10 Survival check (failure means you do not cover yourself correctly with the holoshroud and do not gain its bonus to Stealth checks). You have the entangled condition when using a holoshroud, except you do not take a penalty to initiative or Stealth checks from this condition. Taking off a holoshroud is a move action, or you can take off the holoshroud as part of the move action to stand up from a prone position. A creature with the blindsense ability ignores the effect of a holoshroud. You cannot hide under a holoshroud that is not activated; if the holoshroud runs out of charges while you are underneath it, you are visible as normal.
    
    You can spend 1 minute covering a Medium or smaller object with a holoshroud, making it appear to be a natural part of the surrounding terrain. For example, you can conceal a hoverbike as a rock or patch of brush. Covering a Large object requires two holoshrouds. Covering a Huge or Gargantuan object requires five holoshrouds and takes 10 minutes of work. Camouflaging a Colossal object depends on its shape but generally requires at least 10 holoshrouds and takes 1 hour of work. The DC of Perception checks to notice or search for an object covered by a holoshroud is increased by 10. Any creature within 10 feet of a Large or larger object hidden by holoshrouds automatically recognizes it as a camouflaged object.
    """
    
    let IonTape = CompendiumItem(context: context)
    IonTape.name = "Ion Tape"
    IonTape.magicOrTech = "T"
    IonTape.category = "Other"
    IonTape.level = 3
    IonTape.price = 275
    IonTape.bulk = 0.1
    IonTape.content = """
    Ion tape is a ribbon of material tightly wound around a spindle. A roll of ion tape fits in the palm of a human hand and comes in a wide range of colors. A single roll contains 50 feet of tape. A single strip of tape is easy to cut through or tear. It has a weak adhesive that keeps the tape in place when wrapped around an object. When ion tape is exposed to an electrical charge of any power (including a jolt from a zipstick), the tape bonds into a single mass of plastic-like material, gaining hardness 8 and 15 Hit Points. When used to bind a creature, a few strips of activated ion tape require a successful DC 28 Strength check to break. A second jolt from an electrical source causes the tape to revert to its weaker ribbon state, at which point it can be torn easily. A strip of ion tape can hold about 5 pounds of weight normally, but when activated via a jolt, a single hardened strip can support up to 300 pounds. The uses for ion tape are many: it can be used to construct basic objects (such as a ladder), patch holes, bind prisoners, and so on.
    """
    
    let WhiteNoiseGenerator = CompendiumItem(context: context)
    WhiteNoiseGenerator.name = "White-Noise Generator"
    WhiteNoiseGenerator.magicOrTech = "T"
    WhiteNoiseGenerator.category = "Other"
    WhiteNoiseGenerator.level = 3
    WhiteNoiseGenerator.price = 1350
    WhiteNoiseGenerator.bulk = 1
    WhiteNoiseGenerator.capacity = 20
    WhiteNoiseGenerator.usage = 1
    WhiteNoiseGenerator.content = """
    This small box produces random signals across multiple auditory and subauditory spectra. An activated white-noise generator increases the DC of sound-based Perception checks by 4 within 100 feet of the device. This increase is reduced by 1 for each additional 100 feet. The increase is doubled for checks that rely on technological listening, such as with a drone or microphone.
    """
    
    let ScannerEnhancedCamera = CompendiumItem(context: context)
    ScannerEnhancedCamera.name = "Scanner, Enhanced Camera"
    ScannerEnhancedCamera.magicOrTech = "T"
    ScannerEnhancedCamera.category = "Other"
    ScannerEnhancedCamera.level = 3
    ScannerEnhancedCamera.price = 1375
    ScannerEnhancedCamera.bulk = 0.1
    ScannerEnhancedCamera.capacity = 20
    ScannerEnhancedCamera.usage = 1
    ScannerEnhancedCamera.content = """
    Scanners are common items that allow you to extend your senses and record your experiences. Some specialized scanners can also provide other senses, such as blindsense or sense through, but these often require ongoing monitoring or impose other restrictions. Common examples include laser microphones, motion detectors, and x-ray visors.
    
    An enhanced camera functions as a video camera, but it can view a wider band of wavelengths, including infrared wavelengths. Enhanced cameras have low-light vision and darkvision with a range of 60 feet. An enhanced camera can record up to 24 hours of footage.
    """
    
    let InertialReinforcementBelt = CompendiumItem(context: context)
    InertialReinforcementBelt.name = "Inertial-Reinforcement Belt"
    InertialReinforcementBelt.magicOrTech = "T"
    InertialReinforcementBelt.category = "Other"
    InertialReinforcementBelt.level = 4
    InertialReinforcementBelt.price = 2200
    InertialReinforcementBelt.bulk = 0.1
    InertialReinforcementBelt.capacity = 20
    InertialReinforcementBelt.usage = 1
    InertialReinforcementBelt.content = """
    When activated, an inertial-reinforcement belt anchors you in place, protecting you against outside forces that would move you. This effect grants you a +4 bonus to your AC against bull rush, reposition, and trip combat maneuvers, consuming 1 charge per minute. If you fall from a height greater than 10 feet, the inertial-reinforcement belt automatically activates just prior to impact and reduces your falling damage by half, consuming 1 charge per die of falling damage. If the belt has fewer remaining charges than the number of dice, the damage is reduced only by a number of dice equal to the number of charges remaining. Damage from landing on hazardous objects such as spikes is not reduced.
    """
    
    let Magnegloves = CompendiumItem(context: context)
    Magnegloves.name = "Magnegloves"
    Magnegloves.magicOrTech = "T"
    Magnegloves.category = "Other"
    Magnegloves.level = 4
    Magnegloves.price = 1950
    Magnegloves.bulk = 1
    Magnegloves.capacity = 20
    Magnegloves.usage = 1
    Magnegloves.content = """
    These heavy, durable gloves have powerful electromagnets built directly into the palms and are designed to be worn either directly on the body, or over armor or protective gear. These magnets can be activated as a move action, providing you a +2 insight bonus to Athletics checks to climb metal surfaces, as well as a +4 circumstance bonus to AC against attempts to disarm you (per the disarm combat maneuver) of metal items that you’re holding, consuming 1 charge every hour.
    
    As a move action while you are grappling a creature, you can cause the magnegloves to draw together more powerfully, increasing the DC of the Acrobatics check to escape your grapple or pin by 2, or by 5 if the creature is wearing metal armor, carrying a significant amount of metal, or made of metal. You can unbind the magnegloves as a swift action. While set to draw together, the magnegloves consume 1 charge each round.
    """
    
    let Magniscope = CompendiumItem(context: context)
    Magniscope.name = "Magniscope"
    Magniscope.magicOrTech = "T"
    Magniscope.category = "Other"
    Magniscope.level = 4
    Magniscope.price = 2000
    Magniscope.bulk = 0.1
    Magniscope.capacity = 20
    Magniscope.usage = 1
    Magniscope.content = """
    A magniscope is a set of goggles equipped with automated magnification-adjustment algorithms. A magniscope grants the same benefit as binoculars, but using it requires only one hand and no actions.
    """
    
    let ProximityHelmet = CompendiumItem(context: context)
    ProximityHelmet.name = "Proximity Helmet"
    ProximityHelmet.magicOrTech = "T"
    ProximityHelmet.category = "Other"
    ProximityHelmet.level = 4
    ProximityHelmet.price = 2050
    ProximityHelmet.bulk = 0.1
    ProximityHelmet.capacity = 20
    ProximityHelmet.usage = 2
    ProximityHelmet.content = """
    This open-faced, blue polymer helmet includes a nylon strap and adjustable tinted visor capable of hiding all but your mouth and chin. The interior of the tinted faceplate provides a heads-up display when activated, and while the helmet is activated, its external motion sensors pick up on sudden movements and subtle visual cues, granting you a +2 insight bonus to Perception checks to notice moving targets within 60 feet. A secondary setting on the helmet adds an audible alarm that creates a chirping sound near your ear whenever a Small or larger corporeal creature approaches within 60 feet, although a creature undetectable to normal vision (such as an invisible creature) does not trigger the alarm. Reduce this distance by 20 feet for each interposing closed door and each substantial interposing wall. This noise is loud enough to automatically wake you from sleep, but not loud enough to awaken nearby sleepers.
    """
    
    let PurifyingPuck = CompendiumItem(context: context)
    PurifyingPuck.name = "Purifying Puck"
    PurifyingPuck.magicOrTech = "T"
    PurifyingPuck.category = "Other"
    PurifyingPuck.level = 4
    PurifyingPuck.price = 2000
    PurifyingPuck.bulk = 0.1
    PurifyingPuck.capacity = 40
    PurifyingPuck.usage = 1
    PurifyingPuck.content = """
    This circular device resembles the sort of tiny cleaning drone seen aboard space stations and larger vessels, but it has no independent programming. Law-enforcement officers use purifying pucks to clean up areas after they deploy smoke grenades and similar effects. As a standard action, you can activate a purifying puck and slide it across the ground a maximum of 30 feet (difficult terrain reduces this distance to 15 feet, at the GM’s discretion). The purifying puck then sucks in all smoke and vapors within a 20-foot-radius spread over the next 4 rounds, completely dispersing the effect (such as from a smoke grenade or the fog cloud spell). If the radius of an effect is smaller than 20 feet, the time it takes a purifying puck to disperse the effect is reduced proportionally. If the effect contains any toxins (such as a cloud of poisonous gas), the time is doubled. A purifying puck can’t disperse an effect that has a radius larger than 20 feet.
    """
    
    let SolarSheeting = CompendiumItem(context: context)
    SolarSheeting.name = "Solar Sheeting"
    SolarSheeting.magicOrTech = "T"
    SolarSheeting.category = "Other"
    SolarSheeting.level = 4
    SolarSheeting.price = 2000
    SolarSheeting.bulk = 2
    SolarSheeting.content = """
    When you take a full action to unfurl this thin, 5-foot-square black panel, it absorbs solar energy and converts it into power, acting as a recharging station. In direct sunlight, it takes solar sheeting 10 minutes to recharge 1 charge in a battery or power cell. In overcast daytime conditions, it takes 1 hour per charge restored.
    """
    
    let DomesticDroneBasic = CompendiumItem(context: context)
    DomesticDroneBasic.name = "Domestic Drone, Basic"
    DomesticDroneBasic.magicOrTech = "T"
    DomesticDroneBasic.category = "Other"
    DomesticDroneBasic.level = 4
    DomesticDroneBasic.price = 2000
    DomesticDroneBasic.capacity = 20
    DomesticDroneBasic.usage = 1
    DomesticDroneBasic.content = """
    Robots are commonly used throughout the galaxy to handle repetitive tasks and make some aspects of life more convenient. Domestic drones have a rudimentary AI and only a limited ability to handle unexpected situations, making them useful for little beyond their specifically designated functions. Although the spy drone is a specialized—and in some places, illegal— version of a domestic drone, several other types of domestic drones are common in any large settlement. When activated, each acts as the indicated type of drone of a 1st-level mechanic, and you control it as if you were a 1st-level mechanic (using either an included remote control or a computer with an added control) except it can’t make any attacks and has no weapon mounts, no feats, and no ability to add drone mods beyond those mods specified in its entry. An activated domestic drone can move its speed, but it can otherwise take only the actions specified in its description or granted by its mods. Most domestic drones have a basic model and an elite model; both can understand one language (chosen at purchase), and elite models often have additional abilities and greater autonomy. Some mechanics design their personal drones to resemble ordinary domestic drones, which allows their far more adaptable (and sometimes menacing) drones to blend in.
    
    Deckhand Drone:  This Small drone is designed to provide basic assistance aboard a starship or other large vessel, including supplemental computation for navigation or astrogation. Most deckhand drones resemble a squat box with stubby, clawed feet that allow it to keep its orientation in zero-g. A deckhand drone acts as the stealth drone of a 1st-level mechanic, except it has the climbing claws and tool arm (fire extinguisher) mods instead of the stealth drone’s normal initial mods. If an activated deckhand drone is accessible to a creature attempting a Piloting check to navigate, that creature reduces the time needed to plot a course by half (generally from 10 minutes to 5 minutes). Its skill unit is Computers. A deckhand drone has 6 bulk.
    
    Mule Drone: This Medium quadrupedal drone is designed to act as a mount and carry heavy loads, just as mules and other beasts of burden are used throughout the galaxy. Most mule drones resemble metallic quadrupeds with overlarge hooves. A mule drone acts as the combat drone of a 1st-level mechanic, except it has the riding saddle and speed mods instead of the combat drone’s normal initial mods. Any Small or smaller creature can ride your mule drone, and the mule drone can be customized to support a specific Medium creature (normally you, if you are Medium); refitting the riding saddle to accommodate a different Medium creature takes 1 day and 100 UPBs. Its skill unit is Athletics. A mule drone has 18 bulk.
    
    Physician Drone: This Small drone is designed to provide basic medical services and nursing. Resembling a mechanical spider with four gripping feet and four arms tipped with syringes, antiseptic applicators, and biogel dispensers, a physician drone usually perches above its patient’s bed and provides assistance from above. A physician drone acts as the stealth drone of a 1st-level mechanic, except it has the climbing claws and manipulator arms mods instead of the stealth drone’s normal initial mods, and it treats Medicine as a class skill in which it has a single rank. Its skill unit is Acrobatics, and it has an Intelligence of 8 rather than 6. A physician drone has 6 bulk.
    
    Porter Drone: This sturdy Medium drone is designed to haul loads and assist with laborious tasks. Most porter drones resemble stout humanoids with large treaded wheels at the ends of two thick legs and a smooth faceplate with two optical sensors as their only facial features. A porter drone acts as the combat drone of a 1st-level mechanic, except it has the cargo rack and manipulator arms mods instead of the combat drone’s normal initial mods. Its skill unit is Perception. A porter drone has 20 bulk.
    
    Valet Drone: This Small drone is designed to aid in clothing selection, grooming, and light personal administrative tasks. A valet drone can speak the language it understands, though most valet drones are poor conversationalists and speak only to remind you of social obligations. A valet drone acts as the stealth drone of a 1st-level mechanic, except it has the manipulator arms mod and tool arm mod (containing an integrated hygiene kit and oversized mirror) instead of the stealth drone’s normal initial mods. Its skill unit is Perception. A valet drone has 6 bulk.
    """
    
    let GrenadeScramblerMk2 = CompendiumItem(context: context)
    GrenadeScramblerMk2.name = "Grenade Scrambler, Mk 2"
    GrenadeScramblerMk2.magicOrTech = "T"
    GrenadeScramblerMk2.category = "Other"
    GrenadeScramblerMk2.level = 4
    GrenadeScramblerMk2.price = 2100
    GrenadeScramblerMk2.bulk = 1
    GrenadeScramblerMk2.capacity = 40
    GrenadeScramblerMk2.usage = 5
    GrenadeScramblerMk2.content = """
    When activated as a move action, this unit emits a wireless signal that interferes with the detonation sequence of grenades within 30 feet. Grenades that would successfully land at an intersection in the area have a 50% chance to miss, and any grenade that targets an intersection in the area and misses lands 1d6 squares away (instead of 1d4). A grenade scrambler affects only grenades whose item level is equal to or lower than its own level. If an affected grenade’s level is at least 5 levels lower than the grenade scrambler’s, it automatically misses.
    
    Affects grenades with an item level of 4 or lower.
    """
    
    let WarningWireMk1 = CompendiumItem(context: context)
    WarningWireMk1.name = "Warning Wire, Mk 1"
    WarningWireMk1.magicOrTech = "T"
    WarningWireMk1.category = "Other"
    WarningWireMk1.level = 4
    WarningWireMk1.price = 2000
    WarningWireMk1.bulk = 0.1
    WarningWireMk1.capacity = 40
    WarningWireMk1.usage = 1
    WarningWireMk1.content = """
    This 50 feet of thin, nearly invisible wire is spooled around a dull-gray, flat metal cylinder. When any amount of the wire is unspooled and the cylinder is activated, the wire becomes exceptionally sensitive to vibration. The wire is often wrapped around valuable belongings or stretched as a trip wire across a doorway. When the activated wire is moved or touched, the cylinder emits a piercing alarm (though you can set it to send a silent alarm wirelessly to a comm unit or datapad instead). Noticing the warning wire requires a successful Perception check with a DC equal to 20 + the level of the warning wire, and bypassing it without setting it off usually requires a successful Acrobatics check at the same DC, though the GM might adjust the DC higher or lower as circumstances dictate. You can twist the cylinder in a preset pattern as a move action, deactivating the alarm and respooling the wire around the cylinder.
    
    DC to Notice: 24
    """
    
    let ClearsightGoggles = CompendiumItem(context: context)
    ClearsightGoggles.name = "Clearsight Goggles"
    ClearsightGoggles.magicOrTech = "T"
    ClearsightGoggles.category = "Other"
    ClearsightGoggles.level = 5
    ClearsightGoggles.price = 2750
    ClearsightGoggles.bulk = 0
    ClearsightGoggles.content = """
    Those who explore environments obscured by fog, foliage, smoke, and other vision-impairing elements value clearsight goggles, a set of tight-fitting eyewear that can be worn under a helmet or even other eyewear. While you wear the goggles, fog, smoke, and similar gases don’t grant targets concealment from you, and vegetation doesn’t either. The trinket provides no benefit against a target with total concealment.
    """
    
    let LaserMicrophone = CompendiumItem(context: context)
    LaserMicrophone.name = "Laser Microphone"
    LaserMicrophone.magicOrTech = "T"
    LaserMicrophone.category = "Other"
    LaserMicrophone.level = 5
    LaserMicrophone.price = 2725
    LaserMicrophone.bulk = 0.1
    LaserMicrophone.capacity = 10
    LaserMicrophone.usage = 1
    LaserMicrophone.content = """
    This handheld sensor allows you to hear through normally sound-impervious materials at great range. It grants you sense through (hearing), but only through materials that are 1 inch thick or thinner, and each Perception check attempted using it takes a full action, during which you are flat-footed.
    """
    
    let PortableGangway = CompendiumItem(context: context)
    PortableGangway.name = "Portable Gangway"
    PortableGangway.magicOrTech = "T"
    PortableGangway.category = "Other"
    PortableGangway.level = 5
    PortableGangway.price = 2700
    PortableGangway.bulk = 4
    PortableGangway.capacity = 40
    PortableGangway.usage = 1
    PortableGangway.content = """
    When activated, this heavy, 1-foot-square metal box unfolds into a flat gangway up to 30 feet long and 10 feet wide that is capable of supporting up to 2 tons. The gangway is selfsupporting with struts that automatically unfold and brace it in place, as long as there is terrain to support the gangway on at least one end. The gangway can have an angle of up to 45 degrees when it is created, forming a ramp instead of a bridge. The portable gangway unfolds only partway if there isn’t room for the entire gangway, supporting as much of its size as can fit into the area. When a control stud at any of the gangway’s corners is pressed as a move action, the gangway refolds into a box around that stud, as long as there are no creatures or objects on the gangway.
    """
    
    let WhisperComm = CompendiumItem(context: context)
    WhisperComm.name = "Whisper Comm"
    WhisperComm.magicOrTech = "T"
    WhisperComm.category = "Other"
    WhisperComm.level = 5
    WhisperComm.price = 3000
    WhisperComm.bulk = 0
    WhisperComm.capacity = 20
    WhisperComm.usage = 1
    WhisperComm.content = """
    This tight choker with a tiny earbud operates as a comm unit’s wireless communication device with planetary range, but you can control audio connections with slight neck movements and communicate via subvocalization. Anyone observing you using a whisper comm must succeed at a DC 20 Perception or Sense Motive check to realize you are using it to communicate.
    """
    
    let NaniteHypopenPurple = CompendiumItem(context: context)
    NaniteHypopenPurple.name = "Nanite Hypopen, Purple"
    NaniteHypopenPurple.magicOrTech = "T"
    NaniteHypopenPurple.category = "Other"
    NaniteHypopenPurple.level = 5
    NaniteHypopenPurple.price = 450
    NaniteHypopenPurple.bulk = 0.1
    NaniteHypopenPurple.content = """
    Nanite hypopens are simple-to-use, one-shot, preloaded devices roughly the size of a writing stylus that inject specialized nanites into a creature’s body to heal many sorts of mental and physical injuries. Seven types of nanite hypopens exist along a color-coded scale, as detailed below. As a standard action, you can use a nanite hypopen on yourself or an adjacent willing or unconscious living creature. Each nanite hypopen has a different effect, determined by its color; these are technological effects that function as the specific spells indicated on the chart below (using your ranks in Medicine in place of caster level when needed, such as when using a white nanite hypopen to remove a disease). A nanite hypopen can be used only once, after which it has no value.
    
    Effect: Remove condition
    """
    
    let PhrenicScramblerClear = CompendiumItem(context: context)
    PhrenicScramblerClear.name = "Phrenic Scrambler, Clear"
    PhrenicScramblerClear.magicOrTech = "T"
    PhrenicScramblerClear.category = "Other"
    PhrenicScramblerClear.level = 5
    PhrenicScramblerClear.price = 3000
    PhrenicScramblerClear.bulk = 0
    PhrenicScramblerClear.capacity = 40
    PhrenicScramblerClear.usage = 5
    PhrenicScramblerClear.content = """
    This fist-sized object consists of a psychoactive crystal set within a specially powered housing. It can be activated or deactivated as a move action to cause the crystal to resonate in a fashion that impedes psychic ability. Within 30 feet of any phrenic scrambler, limited telepathy does not function and other telepathic communication is hopelessly garbled unless both the sender and the recipient share a language. The color of a phrenic scrambler’s crystal determines its abilities as follows.
    """
    
    let StrategyGameImperialConquest = CompendiumItem(context: context)
    StrategyGameImperialConquest.name = "Strategy Game, Imperial Conquest"
    StrategyGameImperialConquest.magicOrTech = "T"
    StrategyGameImperialConquest.category = "Other"
    StrategyGameImperialConquest.level = 5
    StrategyGameImperialConquest.price = 2850
    StrategyGameImperialConquest.bulk = 2
    StrategyGameImperialConquest.capacity = 20
    StrategyGameImperialConquest.usage = 1
    StrategyGameImperialConquest.content = """
    A staggering variety of board and computer games exists across the galaxy, from venerable board games to singleplayer computer games available on datapads or even comm units. Some are even revered pastimes in specific cultures. Only physical strategy games have bulk; computer games have no bulk but generally consume 1 charge per hour of play.
    
    Imperial conquest is an ancient board game with deceptively simple rules and great strategic depth, and it is typically played via an elaborate holographic interface. Up to four people can play a game of imperial conquest, which generally takes 30 minutes per player. At the end of an uninterrupted game, each character who played attempts a DC 20 Intelligence check, with success granting tactical insights. For the next 8 hours, any character who succeeded at the Intelligence check gains a +1 bonus to AC against attacks of opportunity; when two players who succeeded at the Intelligence check flank the same enemy during this time, the bonus to attack rolls from flanking increases by 1. You cannot gain the advantage from more than one game of imperial conquest at a time.
    """
    
    let ElectroviscousCloak = CompendiumItem(context: context)
    ElectroviscousCloak.name = "Electroviscous Cloak"
    ElectroviscousCloak.magicOrTech = "T"
    ElectroviscousCloak.category = "Other"
    ElectroviscousCloak.level = 6
    ElectroviscousCloak.price = 4000
    ElectroviscousCloak.bulk = 0.1
    ElectroviscousCloak.capacity = 40
    ElectroviscousCloak.usage = 1
    ElectroviscousCloak.content = """
    This thin cloak is infused with conductive wiring and a polymer that changes states when charged with a specially modulated current. When you activate the cloak as a move action, its exterior becomes a frictionless gel, granting you a +2 circumstance bonus to your AC against grapple combat maneuvers and to Acrobatics checks to escape from a grapple or pin. In addition, when squeezing, you do not gain the entangled condition, though you still move at half speed and can’t run or charge.
    """
    
    let PlasmaDiverter = CompendiumItem(context: context)
    PlasmaDiverter.name = "Plasma Diverter"
    PlasmaDiverter.magicOrTech = "T"
    PlasmaDiverter.category = "Other"
    PlasmaDiverter.level = 6
    PlasmaDiverter.price = 4300
    PlasmaDiverter.bulk = 1
    PlasmaDiverter.content = """
    This bandolier emits a low, crackling hum when activated. Whenever an attack from a plasma weapon hits the plasma diverter’s user, half of the electricity and half the fire damage (maximum 5 points of each) is prevented and instead restores a number of charges equal to the damage prevented to the plasma diverter’s battery. If this would restore more charges than the battery can hold, the battery must succeed at a DC 15 Fortitude saving throw or be destroyed, dealing 1d6 damage to the plasma diverter per excess charge.
    
    A plasma diverter uses a super-capacity battery, and each minute of use (or fraction thereof) consumes 10 charges.
    """
    
    let SmartCable = CompendiumItem(context: context)
    SmartCable.name = "Smart Cable"
    SmartCable.magicOrTech = "T"
    SmartCable.category = "Other"
    SmartCable.level = 6
    SmartCable.price = 4000
    SmartCable.bulk = 0.1
    SmartCable.content = """
    This thick industrial cable of woven plastic contains special chains of chemicals that contract, expand, and twist when they receive electronic signals. A length of smart cable has a narrow battery pack near one end. When you activate the cable, you can change its shape by sending signals from a datapad or comm unit. You can command the smart cable to coil, uncoil, tie itself around objects, or go rigid. In addition, you can cause periodic sections of the cable to crimp, allowing creatures to treat it as a knotted rope for the purposes of using Athletics to climb. Commanding a smart cable requires a move action.
    
    When inactive or out of charges, a smart cable cannot receive commands and is identical to an adamantine alloy cable line, except that its hardness and Hit Points are based on its level.
    """
    
    let SpyDrone = CompendiumItem(context: context)
    SpyDrone.name = "Spy Drone"
    SpyDrone.magicOrTech = "T"
    SpyDrone.category = "Other"
    SpyDrone.level = 6
    SpyDrone.price = 4550
    SpyDrone.bulk = 0.1
    SpyDrone.capacity = 20
    SpyDrone.usage = 1
    SpyDrone.content = """
    A spy drone is a Tiny remote drone designed specifically to make observations at a distance. This acts as the flight drone of a 1st-level mechanic (and you control it as if you were a 1st-level mechanic, using its remote control or a computer with an added module to control the spy drone), except it cannot make any attacks and it has no weapon mounts, no feats, and no ability to add drone mods. Its skill unit is always Stealth. It cannot speak, but it does understand one language (chosen by you at the time of purchase) and allows you to attempt Perception checks using your own bonus when you directly control it (as the master control ability of a mechanic drone).
    
    A drone can be upgraded with any one of the following technological items by paying 125% of the item’s price: flashlight, grappler, lantern, laser microphone, motion detector, scanner, or X-ray visor. The price of buying and installing one upgrade includes the price of replacing an old upgrade on a drone, if applicable.
    """
    
    let SubdermalExtractor = CompendiumItem(context: context)
    SubdermalExtractor.name = "Subdermal Extractor"
    SubdermalExtractor.magicOrTech = "T"
    SubdermalExtractor.category = "Other"
    SubdermalExtractor.level = 6
    SubdermalExtractor.price = 3850
    SubdermalExtractor.bulk = 1
    SubdermalExtractor.capacity = 20
    SubdermalExtractor.usage = 1
    SubdermalExtractor.content = """
    This vicious-looking clawed wand is used to detect and quickly remove foreign objects from under the skin. You can use the subdermal extractor only on an unconscious or willing target. The clawed end of the subdermal extractor contains a delicate sensor that evaluates the target’s genetic material and scans for foreign objects (including alien eggs, biotech and cybernetic augmentations, tracking chips, etc.). To detect an anomalous object, you take a move action and must succeed at a Computers or Medicine check with a DC equal to 15 or 10 + the level of the implanted item, whichever is higher. If the implanted material was injected as part of a creature’s attack, the DC is instead 15 + the CR of the attacking creature. As a standard action, you can deploy the subdermal extractor to remove anomalous material you have detected. This typically requires a successful DC 25 Medicine check, but this DC might be lower or higher at the GM’s discretion (such as if the item is particularly small or if it has woven itself into the target’s interior physiology). Whether or not you succeed or fail at the check, the target takes 1d6 slashing damage from the attempt. Each detection attempt uses a charge from the subdermal extractor, as does each removal attempt. You can use a subdermal extractor on yourself, but the DCs of skill checks to use it are increased by 2.
    
    Although a subdermal extractor can be used to quickly remove cybernetics or other augmentations, only the most disreputable back-alley shops use subdermal extractors for this purpose, and such augmentations still can’t be resold.
    """
    
    let TrackingBug = CompendiumItem(context: context)
    TrackingBug.name = "Tracking Bug"
    TrackingBug.magicOrTech = "T"
    TrackingBug.category = "Other"
    TrackingBug.level = 6
    TrackingBug.price = 4250
    TrackingBug.bulk = 0.1
    TrackingBug.capacity = 20
    TrackingBug.usage = 1
    TrackingBug.content = """
    This tiny tracking device contains a miniaturized transponder that makes it easier to follow and locate quarry. Tracking bugs are usually sold on Absalom Station to private detective agencies and suspicious family members. You can hide a tracking bug on a creature as a standard action with a successful Sleight of Hand check to pick the creature’s pocket (this usually can’t be done during combat). You can hide a tracking bug on a vehicle or other conveyance as a standard action with a successful Sleight of Hand check opposed by the Perception checks of anyone searching the vehicle; you gain a +4 circumstance bonus to this check due to the tracking bug’s size.
    
    Once you plant a tracking bug, you can use a custom program (included in the tracking bug’s price) to follow the tracking bug with a successful DC 20 Computers check using a computer, a comm unit, a mechanic’s custom rig, or any similar computing device; the GM can alter this DC to reflect environmental conditions and other factors. The tracking bug’s transponder has a 500-foot-radius range, and you must be on the same plane as the tracking bug for the program to function. When a tracking bug runs out of power, you can no longer follow it.
    """
    
    let MimicImagerHelmetMounted = CompendiumItem(context: context)
    MimicImagerHelmetMounted.name = "Mimic Imager, Helmet-Mounted"
    MimicImagerHelmetMounted.magicOrTech = "T"
    MimicImagerHelmetMounted.category = "Other"
    MimicImagerHelmetMounted.level = 6
    MimicImagerHelmetMounted.price = 4150
    MimicImagerHelmetMounted.bulk = 0.1
    MimicImagerHelmetMounted.capacity = 40
    MimicImagerHelmetMounted.usage = 4
    MimicImagerHelmetMounted.content = """
    A mimic imager functions as both an image scanner and a holographic projector.
    
    The most common mimic imagers are mounted to a helmet on a swiveling, telescoping rod. When you activate the mimic imager, it takes 1 round to circle you and scan your current appearance. The round after you activate the mimic imager, it creates a holographic duplicate of you in a square (or squares, if you are a Large creature) within 20 feet that you designate. This hologram includes minor sounds but not understandable speech. The hologram then mimics your actual movements (walking forward as you walk forward, raising a gun as you do, and so on) while maintaining the same distance from you. You must always remain within 20 feet of the image and maintain line of sight to it, or the image winks out with a flash of static. Detecting the duplicate as being a hologram requires a move action and a successful DC 20 Perception check. If you deactivate the mimic imager or it runs out of charges, the mimic imager must rescan you the next time it is activated.
    """
    
    let MusicalInstrumentEuphonic = CompendiumItem(context: context)
    MusicalInstrumentEuphonic.name = "Musical Instrument, Euphonic"
    MusicalInstrumentEuphonic.magicOrTech = "T"
    MusicalInstrumentEuphonic.category = "Other"
    MusicalInstrumentEuphonic.level = 6
    MusicalInstrumentEuphonic.price = 4500
    MusicalInstrumentEuphonic.capacity = 80
    MusicalInstrumentEuphonic.usage = 1
    MusicalInstrumentEuphonic.content = """
    These instruments are specifically designed to stir nearby listeners with thrumming chords and subliminal riffs that most races find uplifting. While playing an activated euphonic musical instrument, you can attempt a DC 20 Profession (musician) check as a move action; on a success, you can suppress the fascinated or shaken condition on allies within 30 feet for 1 round, plus 1 additional round for every 5 by which your check exceeds the check’s DC. This doesn’t change the duration of the condition; if the duration would continue after your uplifting performance ends, the ally immediately regains the condition that was suppressed.
    
    Musical instruments are popular throughout the galaxy and come in a dizzying array of styles, such as autohorns, electropaizo synth keyboards, monofilament guitars, and psychoactive wave plates. All but the most traditional and classical instruments use modern technology to amplify their sound, provide musical accompaniment, or connect wirelessly to other instruments in a band or orchestra.
    """
    
    let NaniteHypopenBlack = CompendiumItem(context: context)
    NaniteHypopenBlack.name = "Nanite Hypopen, Black"
    NaniteHypopenBlack.magicOrTech = "T"
    NaniteHypopenBlack.category = "Other"
    NaniteHypopenBlack.level = 6
    NaniteHypopenBlack.price = 650
    NaniteHypopenBlack.bulk = 0.1
    NaniteHypopenBlack.content = """
    Nanite hypopens are simple-to-use, one-shot, preloaded devices roughly the size of a writing stylus that inject specialized nanites into a creature’s body to heal many sorts of mental and physical injuries. Seven types of nanite hypopens exist along a color-coded scale, as detailed below. As a standard action, you can use a nanite hypopen on yourself or an adjacent willing or unconscious living creature. Each nanite hypopen has a different effect, determined by its color; these are technological effects that function as the specific spells indicated on the chart below (using your ranks in Medicine in place of caster level when needed, such as when using a white nanite hypopen to remove a disease). A nanite hypopen can be used only once, after which it has no value.
    
    Effect: Lesser restoration
    """
    
    let AntigravityBelt = CompendiumItem(context: context)
    AntigravityBelt.name = "Antigravity Belt"
    AntigravityBelt.magicOrTech = "T"
    AntigravityBelt.category = "Other"
    AntigravityBelt.level = 7
    AntigravityBelt.price = 6500
    AntigravityBelt.bulk = 0.1
    AntigravityBelt.capacity = 20
    AntigravityBelt.usage = 1
    AntigravityBelt.content = """
    Most commonly used by those brave enough to travel to the high-gravity world of Aucturn, this belt uses a form of graviton levitation to essentially reduce gravitational pull. You can activate the belt as a swift action, and it operates until you spend another swift action to deactivate it or until it runs out of charges. You treat areas of extreme gravity as having high gravity, areas of high gravity as having standard gravity, and areas of standard gravity as having low gravity. This belt has no effect in areas that naturally have low gravity or zero gravity.
    """
    
    let MotionDetector = CompendiumItem(context: context)
    MotionDetector.name = "Motion Detector"
    MotionDetector.magicOrTech = "T"
    MotionDetector.category = "Other"
    MotionDetector.level = 7
    MotionDetector.price = 6000
    MotionDetector.bulk = 0.1
    MotionDetector.capacity = 10
    MotionDetector.usage = 1
    MotionDetector.content = """
    This handheld scanner is capable of detecting sweeping kinetic moves, such as the locomotion of creatures and vehicles. Motion detectors have blindsense (vibration) out to 30 feet, but you must take a move action each round to use the sensor.
    """
    
    let TractionHolster = CompendiumItem(context: context)
    TractionHolster.name = "Traction Holster"
    TractionHolster.magicOrTech = "T"
    TractionHolster.category = "Other"
    TractionHolster.level = 7
    TractionHolster.price = 6000
    TractionHolster.bulk = 0.1
    TractionHolster.capacity = 80
    TractionHolster.usage = 10
    TractionHolster.content = """
    This flat, metal plate usually appears to be a simple rectangle about 1 foot long with a textile belt or armband firmly attached to one side. As a full action, you can activate a traction holster by pressing a longarm, one-handed melee weapon, small arm, or piece of equipment of no more than 1 bulk flat against it, creating a quasi-magnetic bond with the weapon. Only one weapon at a time can be paired in this way. Thereafter, when you drop the weapon or it would otherwise land adjacent to you, it is automatically drawn into the traction holster as though you had spent a move action to sheathe or holster it. The holster does not protect a paired weapon against disarm combat maneuvers. A traction holster operates until it runs out of charges or until you take a full action to break the connection between the traction holster and its current weapon by holding down a small reset button.
    """
    
    let SwarmproofBanglesAdvanced = CompendiumItem(context: context)
    SwarmproofBanglesAdvanced.name = "Swarmproof Bangles, Advanced"
    SwarmproofBanglesAdvanced.magicOrTech = "T"
    SwarmproofBanglesAdvanced.category = "Other"
    SwarmproofBanglesAdvanced.level = 7
    SwarmproofBanglesAdvanced.price = 6500
    SwarmproofBanglesAdvanced.bulk = 0
    SwarmproofBanglesAdvanced.capacity = 40
    SwarmproofBanglesAdvanced.usage = 1
    SwarmproofBanglesAdvanced.content = """
    These matching anklets and bracelets are light and comfortable and come in many fashionable styles. When activated, they produce a broad-spectrum field around your body that repels vermin, making it difficult for Diminutive and Fine vermin to make physical contact with you.
    
    Advanced swarmproof bangles generate a more precise modulating field that impedes more than just vermin. You are not entangled when using advanced swarmproof bangles, and you have DR 10/— against the swarm attack of Fine creatures and DR 5/— against the swarm attack of Diminutive creatures. You also gain a +4 bonus to your AC against attacks by nanites or nanobots, such as those created by the inject nanobots spells.
    """
    
    let Autoclaw = CompendiumItem(context: context)
    Autoclaw.name = "Autoclaw"
    Autoclaw.magicOrTech = "T"
    Autoclaw.category = "Other"
    Autoclaw.level = 8
    Autoclaw.price = 9000
    Autoclaw.bulk = 1
    Autoclaw.capacity = 40
    Autoclaw.usage = 1
    Autoclaw.content = """
    This advanced device has adjustable arms that can be folded into multiple configurations, allowing you to bend, open, and twist objects made of metal and other durable materials. Powered by electric motors, an autoclaw takes 1 minute to configure for a specific task and has an effective Strength score of 30 (a +10 bonus) for the purpose of attempting Strength checks to break down doors and similar efforts; your own Strength score doesn’t affect checks attempted with the autoclaw.
    
    Autoclaws are frequently used in tasks beyond industrial uses. Free Captains and other space pirates use autoclaws to open stolen containers, while the Stewards’ special tactical units use autoclaws to force doors open.
    """
    
    let EnvoysMouthpiece = CompendiumItem(context: context)
    EnvoysMouthpiece.name = "Envoy's Mouthpiece"
    EnvoysMouthpiece.magicOrTech = "T"
    EnvoysMouthpiece.category = "Other"
    EnvoysMouthpiece.level = 8
    EnvoysMouthpiece.price = 9000
    EnvoysMouthpiece.bulk = 0.1
    EnvoysMouthpiece.capacity = 20
    EnvoysMouthpiece.usage = 2
    EnvoysMouthpiece.content = """
    Popularized by successful lashunta diplomats, an envoy’s mouthpiece is an elegant circlet with slender arms that reach down along the jaw. Two thin earpieces extend from the band to slip unobtrusively into your ears once the mouthpiece is donned. When created, an envoy’s mouthpiece is encoded with one specific language. Whenever the language is spoken within 30 feet of you, the mouthpiece translates that language into Common. In addition, any words you speak in Common are transformed by the mouthpiece into the encoded language, allowing conversation to take place between you and speakers of the encoded language. An envoy’s mouthpiece cannot be used to translate languages other than the one it has been programmed to translate, although devices that translate into languages other than Common do exist. An envoy’s mouthpiece automatically records any words it translates, allowing anything translated through the device to be replayed through its earpiece at the touch of a button located on the lower right side. Up to 10 continuous hours can be recorded in this manner. Holding the button down for a full round erases any currently stored conversations.
    """
    
    let Hoverskates = CompendiumItem(context: context)
    Hoverskates.name = "Hoverskates"
    Hoverskates.magicOrTech = "T"
    Hoverskates.category = "Other"
    Hoverskates.level = 8
    Hoverskates.price = 8500
    Hoverskates.bulk = 1
    Hoverskates.capacity = 20
    Hoverskates.usage = 1
    Hoverskates.content = """
    These stylish boots contain antigravity circuitry that, when activated, suspends you approximately 1 inch off the ground. You do not count as flying when using hoverskates; you move at your normal land speed when wearing them. You can walk both overland and over water (but not underwater), and you can ignore difficult terrain. When you take a move action to move your speed, you can increase your land speed by 20 feet by overcharging your hoverskates. This extra movement is treated as an enhancement bonus. The hoverskates must cool down for 1 minute before you can overcharge them again.
    
    Hoverskates do not function if you’re encumbered or overburdened.
    """
    
    let GrenadeScramblerMk3 = CompendiumItem(context: context)
    GrenadeScramblerMk3.name = "Grenade Scrambler, Mk 3"
    GrenadeScramblerMk3.magicOrTech = "T"
    GrenadeScramblerMk3.category = "Other"
    GrenadeScramblerMk3.level = 8
    GrenadeScramblerMk3.price = 9300
    GrenadeScramblerMk3.bulk = 1
    GrenadeScramblerMk3.capacity = 40
    GrenadeScramblerMk3.usage = 5
    GrenadeScramblerMk3.content = """
    When activated as a move action, this unit emits a wireless signal that interferes with the detonation sequence of grenades within 30 feet. Grenades that would successfully land at an intersection in the area have a 50% chance to miss, and any grenade that targets an intersection in the area and misses lands 1d6 squares away (instead of 1d4). A grenade scrambler affects only grenades whose item level is equal to or lower than its own level. If an affected grenade’s level is at least 5 levels lower than the grenade scrambler’s, it automatically misses.
    
    Affects grenades with an item level of 8 or lower. Affected grenades with an item level of 3 or lower automatically miss.
    """
    
    let WarningWireMk2 = CompendiumItem(context: context)
    WarningWireMk2.name = "Warning Wire, Mk 2"
    WarningWireMk2.magicOrTech = "T"
    WarningWireMk2.category = "Other"
    WarningWireMk2.level = 8
    WarningWireMk2.price = 8800
    WarningWireMk2.bulk = 0.1
    WarningWireMk2.capacity = 40
    WarningWireMk2.usage = 1
    WarningWireMk2.content = """
    This 50 feet of thin, nearly invisible wire is spooled around a dull-gray, flat metal cylinder. When any amount of the wire is unspooled and the cylinder is activated, the wire becomes exceptionally sensitive to vibration. The wire is often wrapped around valuable belongings or stretched as a trip wire across a doorway. When the activated wire is moved or touched, the cylinder emits a piercing alarm (though you can set it to send a silent alarm wirelessly to a comm unit or datapad instead). Noticing the warning wire requires a successful Perception check with a DC equal to 20 + the level of the warning wire, and bypassing it without setting it off usually requires a successful Acrobatics check at the same DC, though the GM might adjust the DC higher or lower as circumstances dictate. You can twist the cylinder in a preset pattern as a move action, deactivating the alarm and respooling the wire around the cylinder.
    
    DC to Notice: 28
    """
    
    let Autocartographer = CompendiumItem(context: context)
    Autocartographer.name = "Autocartographer"
    Autocartographer.magicOrTech = "T"
    Autocartographer.category = "Other"
    Autocartographer.level = 9
    Autocartographer.price = 13500
    Autocartographer.bulk = 1
    Autocartographer.capacity = 100
    Autocartographer.usage = 10
    Autocartographer.content = """
    This handheld holographic display unit has an underslung rack housing dozens of miniaturized flying microbots. When you activate the autocartographer, you pick a grid intersection within 50 feet to which you have line of effect. The microbots scatter in a 100-foot cube, scanning the environment and sending data back to the display unit for aggregation and analysis. The microbots transmit the dimensions and basic layout of rooms, corridors, and sizable natural features, including large furnishings. Their sensors ignore living creatures, fine details (such as images on computer screens), and temporary magical effects, but they record permanent ones, including illusory obstacles. They can’t differentiate between illusions or holograms and real objects. The microbots’ data is sent by a wireless signal and is therefore vulnerable to countermeasures such as signal jammers.
    
    Individual microbots are small enough to pass through any opening at least an inch wide. They can operate both in air or vacuum, but heavy gravity or strong or stronger winds overwhelm their delicate propulsion systems and render them inactive. The microbots emit a distinctive whir and can be detected with a successful DC 15 Perception check.
    
    One minute after you release the microbots, the autocartographer displays a composite map showing all features within the scanned 100-foot cube as a three-dimensional holographic image, and the microbots return to the unit. You can save these images in a data file that can be displayed later, although you need to rescan an area to obtain updated information, such as opened doors or repositioned furniture. Each file is tagged with global or astronomical positioning data, allowing you to connect multiple maps in space and scroll between them.
    """
    
    let XRayVisor = CompendiumItem(context: context)
    XRayVisor.name = "X-Ray Visor"
    XRayVisor.magicOrTech = "T"
    XRayVisor.category = "Other"
    XRayVisor.level = 9
    XRayVisor.price = 15000
    XRayVisor.bulk = 0.1
    XRayVisor.capacity = 40
    XRayVisor.usage = 1
    XRayVisor.content = """
    """
    
    let NaniteHypopenWhite = CompendiumItem(context: context)
    NaniteHypopenWhite.name = "Nanite Hypopen, White"
    NaniteHypopenWhite.magicOrTech = "T"
    NaniteHypopenWhite.category = "Other"
    NaniteHypopenWhite.level = 9
    NaniteHypopenWhite.price = 2300
    NaniteHypopenWhite.bulk = 0.1
    NaniteHypopenWhite.content = """
    Nanite hypopens are simple-to-use, one-shot, preloaded devices roughly the size of a writing stylus that inject specialized nanites into a creature’s body to heal many sorts of mental and physical injuries. Seven types of nanite hypopens exist along a color-coded scale, as detailed below. As a standard action, you can use a nanite hypopen on yourself or an adjacent willing or unconscious living creature. Each nanite hypopen has a different effect, determined by its color; these are technological effects that function as the specific spells indicated on the chart below (using your ranks in Medicine in place of caster level when needed, such as when using a white nanite hypopen to remove a disease). A nanite hypopen can be used only once, after which it has no value.
    
    Effect: Remove affliction
    """
    
    let PhrenicScramblerViridian = CompendiumItem(context: context)
    PhrenicScramblerViridian.name = "Phrenic Scrambler, Viridian"
    PhrenicScramblerViridian.magicOrTech = "T"
    PhrenicScramblerViridian.category = "Other"
    PhrenicScramblerViridian.level = 9
    PhrenicScramblerViridian.price = 13000
    PhrenicScramblerViridian.bulk = 0
    PhrenicScramblerViridian.capacity = 40
    PhrenicScramblerViridian.usage = 5
    PhrenicScramblerViridian.content = """
    This fist-sized object consists of a psychoactive crystal set within a specially powered housing. It can be activated or deactivated as a move action to cause the crystal to resonate in a fashion that impedes psychic ability. Within 30 feet of any phrenic scrambler, limited telepathy does not function and other telepathic communication is hopelessly garbled unless both the sender and the recipient share a language. The color of a phrenic scrambler’s crystal determines its abilities as follows.
    
    A phrenic scrambler with a viridian crystal also imparts a –1 penalty to saving throws against all spells or effects with the emotion, fear, mind-affecting, or pain descriptor within 30 feet.
    """
    
    let ScannerTrueFrameCamera = CompendiumItem(context: context)
    ScannerTrueFrameCamera.name = "Scanner, True-Frame Camera"
    ScannerTrueFrameCamera.magicOrTech = "T"
    ScannerTrueFrameCamera.category = "Other"
    ScannerTrueFrameCamera.level = 9
    ScannerTrueFrameCamera.price = 12250
    ScannerTrueFrameCamera.bulk = 0.1
    ScannerTrueFrameCamera.capacity = 100
    ScannerTrueFrameCamera.usage = 2
    ScannerTrueFrameCamera.content = """
    Scanners are common items that allow you to extend your senses and record your experiences. Some specialized scanners can also provide other senses, such as blindsense or sense through, but these often require ongoing monitoring or impose other restrictions. Common examples include laser microphones, motion detectors, and x-ray visors.
    
    A true-frame camera functions as an enhanced camera, and it also has supplemental multispectrum programming designed to detect the slight errors in shading and lighting that are artifacts of holograms and illusions. True-frame cameras automatically shift to variant wavelengths to detect and image actual objects, identifying the holograms and illusions as such with overlay text or masking. True-frame cameras automatically identify holograms and illusions via sense through (vision), except for images that specifically fool cameras or other surveillance systems (such as holographic image and nondetection). Trueframe cameras do not automatically detect mundane or lowtech disguises.
    """
    
    let InductiveBandolier = CompendiumItem(context: context)
    InductiveBandolier.name = "Inductive Bandolier"
    InductiveBandolier.magicOrTech = "T"
    InductiveBandolier.category = "Other"
    InductiveBandolier.level = 10
    InductiveBandolier.price = 19000
    InductiveBandolier.bulk = 0.1
    InductiveBandolier.capacity = 40
    InductiveBandolier.usage = 4
    InductiveBandolier.content = """
    This heavy bandolier’s large, flat buckle is a metallic charging pad that charges synced devices that are within a few inches of your body, including light or heavy armor or armor upgrades installed in light or heavy armor. While the bandolier is activated, you can tap a rechargeable item to the pad to sync the item to the bandolier (the item must use charges or a battery; the inductive bandolier can’t recharge other items). The synced item regains 1 charge per minute until it is fully charged or until the synced item is more than a few inches from your body. In either case, the item is no longer synced and the bandolier vibrates slightly to alert you to the lost connection. The inductive bandolier expends its charges as long as it is activated, whether or not an item is synced to it.
    """
    
    let DomesticDroneElite = CompendiumItem(context: context)
    DomesticDroneElite.name = "Domestic Drone, Elite"
    DomesticDroneElite.magicOrTech = "T"
    DomesticDroneElite.category = "Other"
    DomesticDroneElite.level = 10
    DomesticDroneElite.price = 18000
    DomesticDroneElite.capacity = 100
    DomesticDroneElite.usage = 1
    DomesticDroneElite.content = """
    Robots are commonly used throughout the galaxy to handle repetitive tasks and make some aspects of life more convenient. Domestic drones have a rudimentary AI and only a limited ability to handle unexpected situations, making them useful for little beyond their specifically designated functions. Although the spy drone is a specialized—and in some places, illegal— version of a domestic drone, several other types of domestic drones are common in any large settlement. When activated, each acts as the indicated type of drone of a 1st-level mechanic, and you control it as if you were a 1st-level mechanic (using either an included remote control or a computer with an added control) except it can’t make any attacks and has no weapon mounts, no feats, and no ability to add drone mods beyond those mods specified in its entry. An activated domestic drone can move its speed, but it can otherwise take only the actions specified in its description or granted by its mods. Most domestic drones have a basic model and an elite model; both can understand one language (chosen at purchase), and elite models often have additional abilities and greater autonomy. Some mechanics design their personal drones to resemble ordinary domestic drones, which allows their far more adaptable (and sometimes menacing) drones to blend in.
    
    Deckhand Drone: This Small drone is designed to provide basic assistance aboard a starship or other large vessel, including supplemental computation for navigation or astrogation. Most deckhand drones resemble a squat box with stubby, clawed feet that allow it to keep its orientation in zero-g. A deckhand drone acts as the stealth drone of a 1st-level mechanic, except it has the climbing claws and tool arm (fire extinguisher) mods instead of the stealth drone’s normal initial mods. If an activated deckhand drone is accessible to a creature attempting a Piloting check to navigate, that creature reduces the time needed to plot a course by half (generally from 10 minutes to 5 minutes). Its skill unit is Computers. A deckhand drone has 6 bulk.
    
    Elite Deckhand Drone (Level 10): An elite deckhand drone gains the skill subroutines (Engineering) mod and has an Intelligence score of 8 rather than 6. A deckhand drone can expend 5 charges of its battery to attempt to aid another to assist with the Engineering check to repair a starship’s hull. In addition, during starship combat, an elite deckhand drone can assist a ship’s engineer, reducing the DC of an engineer’s patch action by 5.
    
    Mule Drone: This Medium quadrupedal drone is designed to act as a mount and carry heavy loads, just as mules and other beasts of burden are used throughout the galaxy. Most mule drones resemble metallic quadrupeds with overlarge hooves. A mule drone acts as the combat drone of a 1st-level mechanic, except it has the riding saddle and speed mods instead of the combat drone’s normal initial mods. Any Small or smaller creature can ride your mule drone, and the mule drone can be customized to support a specific Medium creature (normally you, if you are Medium); refitting the riding saddle to accommodate a different Medium creature takes 1 day and 100 UPBs. Its skill unit is Athletics. A mule drone has 18 bulk.
    
    Elite Mule Drone (Level 10): An elite mule drone has the jump jets mod. In addition, as a full action, a drone can reconfigure its riding saddle to serve as a mount for any Medium or smaller creature.
    
    Physician Drone: This Small drone is designed to provide basic medical services and nursing. Resembling a mechanical spider with four gripping feet and four arms tipped with syringes, antiseptic applicators, and biogel dispensers, a physician drone usually perches above its patient’s bed and provides assistance from above. A physician drone acts as the stealth drone of a 1st-level mechanic, except it has the climbing claws and manipulator arms mods instead of the stealth drone’s normal initial mods, and it treats Medicine as a class skill in which it has a single rank. Its skill unit is Acrobatics, and it has an Intelligence of 8 rather than 6. A physician drone has 6 bulk.
    
    Elite Physician Drone (Level 10): An elite physician drone also has the medical subroutine mod, allowing it to provide emergency medical treatment.
    
    Porter Drone: This sturdy Medium drone is designed to haul loads and assist with laborious tasks. Most porter drones resemble stout humanoids with large treaded wheels at the ends of two thick legs and a smooth faceplate with two optical sensors as their only facial features. A porter drone acts as the combat drone of a 1st-level mechanic, except it has the cargo rack and manipulator arms mods instead of the combat drone’s normal initial mods. Its skill unit is Perception. A porter drone has 20 bulk.
    
    Elite Porter Drone (Level 10): An elite porter drone has the resistance mod, providing it resistance 10 to an energy type of your choice when you purchase it. This choice is usually dependent upon the environment in which the drone is intended to function, such as resistance to fire for a porter drone working in a foundry.
    
    Valet Drone: This Small drone is designed to aid in clothing selection, grooming, and light personal administrative tasks. A valet drone can speak the language it understands, though most valet drones are poor conversationalists and speak only to remind you of social obligations. A valet drone acts as the stealth drone of a 1st-level mechanic, except it has the manipulator arms mod and tool arm mod (containing an integrated hygiene kit and oversized mirror) instead of the stealth drone’s normal initial mods. Its skill unit is Perception. A valet drone has 6 bulk.
    
    Elite Valet Drone (Level 10): An elite valet drone treats Culture as a class skill in which it has a single rank, it can attempt Culture checks to recall knowledge, and it has an Intelligence of 8 rather than 6. Elite valet drones tend to be chatty, and they can spend 10 minutes to adjust your fashion and appearance as necessary for a specific social situation, granting a +2 insight bonus to Diplomacy checks to change a creature’s attitude in that situation.
    """
    
    let EmergencyRaftHovercraft = CompendiumItem(context: context)
    EmergencyRaftHovercraft.name = "Emergency Raft, Hovercraft"
    EmergencyRaftHovercraft.magicOrTech = "T"
    EmergencyRaftHovercraft.category = "Other"
    EmergencyRaftHovercraft.level = 10
    EmergencyRaftHovercraft.price = 17800
    EmergencyRaftHovercraft.bulk = 4
    EmergencyRaftHovercraft.capacity = 40
    EmergencyRaftHovercraft.usage = 1
    EmergencyRaftHovercraft.content = """
    Emergency rafts are stored in compressed cylinders with large fans that can inflate the rafts in mere moments.
    
    This emergency hovercraft is more luxurious and capable than its basic counterpart, and it is 2 feet wide and 4 feet long in its compact form. When activated, it unfolds into a hover pod, except that it has 40 Hit Points, is broken when reduced to or below 20 Hit Points, provides no bonus to Piloting checks, and has no autocontrol system. As a move action, you can return the hovercraft to its portable shape at the touch of a button, as long as no objects or creatures remain inside. An emergency hovercraft consumes 2 charges when you activate or collapse it, and it consumes 1 charge for every 10 minutes (or fraction thereof) its engines are in operation. You can power down its engines so that it doesn’t consume charges; like a basic emergency raft, it comes with four oars for rowing.
    """
    
    let BypassSubroutine = CompendiumItem(context: context)
    BypassSubroutine.name = "Bypass Subroutine"
    BypassSubroutine.magicOrTech = "T"
    BypassSubroutine.category = "Other"
    BypassSubroutine.level = 11
    BypassSubroutine.price = 23000
    BypassSubroutine.bulk = 0
    BypassSubroutine.content = """
    A bypass subroutine is a miniaturized single-function computer which takes the form of a ring with four nanite circuit-nodes and can be sized to fit nearly any finger. The compact nanites are attuned to input from the circuit-nodes and can form specific tools much larger than the ring itself as directed by information stored within the circuit-node. Infiltrators utilize these high-tech metal bands to assist in covert missions. Aspis Consortium agents also use these rings to ensure that locks that were opened appear as if they were never tampered with.
    
    When you succeed at a Computers or Engineering check to open a lock, you can activate the ring as a reaction. The ring then stores a record of the processes and tools used in opening the lock, and one of the nanite circuit-nodes on the ring takes on a texture or color associated with the area around the lock. As a move action, you can touch the ring to a lock recorded therein and it recreates the conditions needed to change the lock's status (creating any required tool output with nanites), either opening or relocking that lock.
    
    A bypass subroutine can record one lock in each of its circuit-nodes. Any additional recordings must replace one of the four already in the ring.
    """
    
    let MimicImagerHovering = CompendiumItem(context: context)
    MimicImagerHovering.name = "Mimic Imager, Hovering"
    MimicImagerHovering.magicOrTech = "T"
    MimicImagerHovering.category = "Other"
    MimicImagerHovering.level = 11
    MimicImagerHovering.price = 24500
    MimicImagerHovering.bulk = 0.1
    MimicImagerHovering.capacity = 40
    MimicImagerHovering.usage = 4
    MimicImagerHovering.content = """
    A mimic imager functions as both an image scanner and a holographic projector.
    
    A hovering mimic imager is a 2-inch-wide spherical microbot with more sophisticated imaging software and data on your movements, speech, and mannerisms. The hovering mimic imager operates as the helmet-mounted version, except that the hologram created by the hovering mimic imager can also mimic speech in your voice, and the DC of Perception checks to identify the hologram is 30. As the hovering mimic imager isn’t attached to you, the image can be up to 100 feet from you and doesn’t require line of sight to you (although it must be within 20 feet of and have line of sight to the microbot). The hovering mimic imager can receive your directions by voice or via a signal from a personal comm unit or a datapad with a control module installed. The hovering mimic imager has sound baffling and a light-shifting shell to avoid detection, but a creature can notice it with a successful DC 25 Perception check. Detecting the microbot doesn’t automatically reveal that your duplicate is a hologram, but its presence can provide creatures a clue that something unusual is going on. The hovering mimic imager is a Tiny technological construct with an AC of 20, hardness 8, 10 Hit Points, and a fly speed of 40 feet with perfect maneuverability. It cannot make attacks, and it fails any saving throw it is required to make. When the mimic imager has only 4 charges remaining, the hologram winks out and the hovering mimic imager immediately returns to you if it can. Your communication with a hovering mimic imager uses a wireless signal, and is therefore vulnerable to countermeasures such as signal jammers.
    """
    
    let NaniteHypopenGray = CompendiumItem(context: context)
    NaniteHypopenGray.name = "Nanite Hypopen, Gray"
    NaniteHypopenGray.magicOrTech = "T"
    NaniteHypopenGray.category = "Other"
    NaniteHypopenGray.level = 11
    NaniteHypopenGray.price = 3500
    NaniteHypopenGray.bulk = 0.1
    NaniteHypopenGray.content = """
    Nanite hypopens are simple-to-use, one-shot, preloaded devices roughly the size of a writing stylus that inject specialized nanites into a creature’s body to heal many sorts of mental and physical injuries. Seven types of nanite hypopens exist along a color-coded scale, as detailed below. As a standard action, you can use a nanite hypopen on yourself or an adjacent willing or unconscious living creature. Each nanite hypopen has a different effect, determined by its color; these are technological effects that function as the specific spells indicated on the chart below (using your ranks in Medicine in place of caster level when needed, such as when using a white nanite hypopen to remove a disease). A nanite hypopen can be used only once, after which it has no value.
    
    Effect: Remove radioactivity
    """
    
    let FlashShieldGenerator = CompendiumItem(context: context)
    FlashShieldGenerator.name = "Flash Shield Generator"
    FlashShieldGenerator.magicOrTech = "T"
    FlashShieldGenerator.category = "Other"
    FlashShieldGenerator.level = 12
    FlashShieldGenerator.price = 32000
    FlashShieldGenerator.bulk = 1
    FlashShieldGenerator.capacity = 100
    FlashShieldGenerator.usage = 10
    FlashShieldGenerator.content = """
    This scepter-like device coalesces atmosphere into a crystalline sheet. When you activate a flash shield generator, you select one edge of a square within 10 feet of you and create a 5-footsquare vertical sheet of translucent crystal on that edge, providing partial cover against attacks coming from one side of the sheet (your choice). The flash shield must be supported by the ground or another structure when it is created, and it can’t support any weight. You can make the flash shield cloudy when you create it, which causes it to block line of sight. The flash shield is delicate and easy to break; it has an AC of 10, hardness 0, and 10 Hit Points. A flash shield disintegrates on its own after 24 hours. If you create a new flash shield within 100 feet of an existing shield, the old shield disappears, its material evaporated and transformed to create the new shield. A flash shield generator does not function where there is no atmosphere.
    """
    
    let EmotionRegulatorAdvanced = CompendiumItem(context: context)
    EmotionRegulatorAdvanced.name = "Emotion Regulator, Advanced"
    EmotionRegulatorAdvanced.magicOrTech = "T"
    EmotionRegulatorAdvanced.category = "Other"
    EmotionRegulatorAdvanced.level = 12
    EmotionRegulatorAdvanced.price = 37000
    EmotionRegulatorAdvanced.bulk = 0.1
    EmotionRegulatorAdvanced.capacity = 100
    EmotionRegulatorAdvanced.usage = 1
    EmotionRegulatorAdvanced.content = """
    This small device is often worn strapped to the back of the neck or attached to a helmet. When activated, an emotion regulator sends out regular neurological pulses, reigning in extreme emotions.
    
    An advanced emotion regulator is more effective at suppressing a broader range of extreme emotions, granting you a +2 insight bonus to saves against emotion, fear, mind-affecting, and pain effects. In addition, you are undetectable to blindsense (emotion) and blindsight (emotion). An advanced emotion regulator does not impart penalties.
    """
    
    let GrenadeScramblerMk4 = CompendiumItem(context: context)
    GrenadeScramblerMk4.name = "Grenade Scrambler, Mk 4"
    GrenadeScramblerMk4.magicOrTech = "T"
    GrenadeScramblerMk4.category = "Other"
    GrenadeScramblerMk4.level = 12
    GrenadeScramblerMk4.price = 35000
    GrenadeScramblerMk4.bulk = 1
    GrenadeScramblerMk4.capacity = 40
    GrenadeScramblerMk4.usage = 5
    GrenadeScramblerMk4.content = """
    When activated as a move action, this unit emits a wireless signal that interferes with the detonation sequence of grenades within 30 feet. Grenades that would successfully land at an intersection in the area have a 50% chance to miss, and any grenade that targets an intersection in the area and misses lands 1d6 squares away (instead of 1d4). A grenade scrambler affects only grenades whose item level is equal to or lower than its own level. If an affected grenade’s level is at least 5 levels lower than the grenade scrambler’s, it automatically misses.
    
    Affects grenades with an item level of 12 or lower. Affected grenades with an item level of 7 or lower automatically miss.
    """
    
    let NaniteHypopenGreen = CompendiumItem(context: context)
    NaniteHypopenGreen.name = "Nanite Hypopen, Green"
    NaniteHypopenGreen.magicOrTech = "T"
    NaniteHypopenGreen.category = "Other"
    NaniteHypopenGreen.level = 12
    NaniteHypopenGreen.price = 5600
    NaniteHypopenGreen.bulk = 0.1
    NaniteHypopenGreen.content = """
    Nanite hypopens are simple-to-use, one-shot, preloaded devices roughly the size of a writing stylus that inject specialized nanites into a creature’s body to heal many sorts of mental and physical injuries. Seven types of nanite hypopens exist along a color-coded scale, as detailed below. As a standard action, you can use a nanite hypopen on yourself or an adjacent willing or unconscious living creature. Each nanite hypopen has a different effect, determined by its color; these are technological effects that function as the specific spells indicated on the chart below (using your ranks in Medicine in place of caster level when needed, such as when using a white nanite hypopen to remove a disease). A nanite hypopen can be used only once, after which it has no value.
    
    Effect: Restoration
    """
    
    let WarningWireMk3 = CompendiumItem(context: context)
    WarningWireMk3.name = "Warning Wire, Mk 3"
    WarningWireMk3.magicOrTech = "T"
    WarningWireMk3.category = "Other"
    WarningWireMk3.level = 12
    WarningWireMk3.price = 32900
    WarningWireMk3.bulk = 0.1
    WarningWireMk3.capacity = 40
    WarningWireMk3.usage = 1
    WarningWireMk3.content = """
    This 50 feet of thin, nearly invisible wire is spooled around a dull-gray, flat metal cylinder. When any amount of the wire is unspooled and the cylinder is activated, the wire becomes exceptionally sensitive to vibration. The wire is often wrapped around valuable belongings or stretched as a trip wire across a doorway. When the activated wire is moved or touched, the cylinder emits a piercing alarm (though you can set it to send a silent alarm wirelessly to a comm unit or datapad instead). Noticing the warning wire requires a successful Perception check with a DC equal to 20 + the level of the warning wire, and bypassing it without setting it off usually requires a successful Acrobatics check at the same DC, though the GM might adjust the DC higher or lower as circumstances dictate. You can twist the cylinder in a preset pattern as a move action, deactivating the alarm and respooling the wire around the cylinder.
    
    DC to Notice: 32
    """
    
    let MemoryExpunger = CompendiumItem(context: context)
    MemoryExpunger.name = "Memory Expunger"
    MemoryExpunger.magicOrTech = "T"
    MemoryExpunger.category = "Other"
    MemoryExpunger.level = 13
    MemoryExpunger.price = 50000
    MemoryExpunger.bulk = 0.1
    MemoryExpunger.content = """
    This metal-and-glass disk is 4 inches in diameter and has a small red button along its perimeter. By presenting the disk to a creature within 10 feet and pressing the button (all a standard action), you can erase the last 5 minutes of that creature’s memory as per modify memory by introducing a series of flashing lights into its visual sensors that directly affects the brain. The creature can attempt a DC 20 Will saving throw to negate this effect. A creature currently being threatened by you or your allies receives a +4 circumstance bonus to the save. A creature that succeeds at the save is instead dazzled for 1d4+4 rounds. This is a mind-affecting sense-dependent effect.
    
    A memory expunger uses a standard battery, and each use expends 5 charges.
    """
    
    let SpearofFates = CompendiumItem(context: context)
    SpearofFates.name = "Spear of Fates"
    SpearofFates.magicOrTech = "T"
    SpearofFates.category = "Other"
    SpearofFates.level = 13
    SpearofFates.price = 102300
    SpearofFates.bulk = 2
    SpearofFates.content = """
    WARNING: This entry contains spoilers for the Dead Sun Adventure Path.
    
    This unique weapon belonged to a Knight of Golarion who attempted to kill Serovox a few years before the signing of the Absalom Pact and the creation of the Corpse Fleet. It is a golden spear with a ruby blade and functions as both an inferno flame doshko and a white star plasma caster. It holds one ultra-capacity battery, which powers all uses of the weapon. Switching the weapon from melee functionality to ranged functionality (or vice versa) is a swift action.
    """
    
    let PhrenicScramblerViolet = CompendiumItem(context: context)
    PhrenicScramblerViolet.name = "Phrenic Scrambler, Violet"
    PhrenicScramblerViolet.magicOrTech = "T"
    PhrenicScramblerViolet.category = "Other"
    PhrenicScramblerViolet.level = 13
    PhrenicScramblerViolet.price = 49000
    PhrenicScramblerViolet.bulk = 0
    PhrenicScramblerViolet.capacity = 40
    PhrenicScramblerViolet.usage = 5
    PhrenicScramblerViolet.content = """
    This fist-sized object consists of a psychoactive crystal set within a specially powered housing. It can be activated or deactivated as a move action to cause the crystal to resonate in a fashion that impedes psychic ability. Within 30 feet of any phrenic scrambler, limited telepathy does not function and other telepathic communication is hopelessly garbled unless both the sender and the recipient share a language. The color of a phrenic scrambler’s crystal determines its abilities as follows.
    
    A phrenic scrambler with a violet crystal instead imparts a –2 penalty to saving throws against spells or effects with the emotion, fear, mind-affecting, or pain descriptor within 30 feet and allows you to set whether certain descriptors are included or excluded from this penalty as a move action (for example, you can impart the penalty against emotion and pain descriptors only).
    """
    
    let CartersBaton = CompendiumItem(context: context)
    CartersBaton.name = "Carter's Baton"
    CartersBaton.magicOrTech = "T"
    CartersBaton.category = "Other"
    CartersBaton.level = 14
    CartersBaton.price = 65000
    CartersBaton.bulk = 0.1
    CartersBaton.capacity = 80
    CartersBaton.usage = 8
    CartersBaton.content = """
    This flanged rod allows you to control gravitational forces around a single object within 100 feet. When you activate the baton, you can move an object of no more than 25 pounds or 2 bulk up to 20 feet per round in any direction (including up or down), but you can’t move it farther than 100 feet from you. If you attempt to move an object that another creature is holding, that creature can attempt a DC 15 Reflex save to prevent you from removing the object from its grasp.
    """
    
    let SynapticLink = CompendiumItem(context: context)
    SynapticLink.name = "Synaptic Link"
    SynapticLink.magicOrTech = "T"
    SynapticLink.category = "Other"
    SynapticLink.level = 14
    SynapticLink.price = 75000
    SynapticLink.bulk = 0.1
    SynapticLink.capacity = 100
    SynapticLink.usage = 5
    SynapticLink.content = """
    These heavy headbands resemble woven insect chitin and always come in pairs. Each headband has a capacity of 100 and uses 5 charges per round. When you and another creature wear and activate the headband, you both benefit from a psychic communion that transmits information about danger between you instantaneously as long as you are within 60 feet of each other. While connected in this way, both wearers gain a +2 insight bonus to initiative and Perception checks. If one wearer is aware of a combatant, the other wearer is also aware of it, and a wearer cannot be surprised unless the other wearer is also surprised. If one wearer succeeds at a Will save to disbelieve an illusion effect, the other wearer also disbelieves that effect. This link does not otherwise allow thoughts or communication to be shared.
    
    You can wear only one synaptic link at a time.
    """
    
    let NaniteHypopenRed = CompendiumItem(context: context)
    NaniteHypopenRed.name = "Nanite Hypopen, Red"
    NaniteHypopenRed.magicOrTech = "T"
    NaniteHypopenRed.category = "Other"
    NaniteHypopenRed.level = 14
    NaniteHypopenRed.price = 11500
    NaniteHypopenRed.bulk = 0.1
    NaniteHypopenRed.content = """
    Nanite hypopens are simple-to-use, one-shot, preloaded devices roughly the size of a writing stylus that inject specialized nanites into a creature’s body to heal many sorts of mental and physical injuries. Seven types of nanite hypopens exist along a color-coded scale, as detailed below. As a standard action, you can use a nanite hypopen on yourself or an adjacent willing or unconscious living creature. Each nanite hypopen has a different effect, determined by its color; these are technological effects that function as the specific spells indicated on the chart below (using your ranks in Medicine in place of caster level when needed, such as when using a white nanite hypopen to remove a disease). A nanite hypopen can be used only once, after which it has no value.
    
    Effect: Greater remove condition
    """
    
    let GroundingBoots = CompendiumItem(context: context)
    GroundingBoots.name = "Grounding Boots"
    GroundingBoots.magicOrTech = "T"
    GroundingBoots.category = "Other"
    GroundingBoots.level = 15
    GroundingBoots.price = 105000
    GroundingBoots.bulk = 0.1
    GroundingBoots.capacity = 100
    GroundingBoots.usage = 1
    GroundingBoots.content = """
    When activated, these heavy boots create an electromagnetic field around you that disperses electrical current into the ground. You gain electricity resistance 15, and as long as you are standing on any surface larger than you are, creatures adjacent to you gain electricity resistance 5.
    """
    
    let RegenerationTable = CompendiumItem(context: context)
    RegenerationTable.name = "Regeneration Table"
    RegenerationTable.magicOrTech = "T"
    RegenerationTable.category = "Other"
    RegenerationTable.level = 16
    RegenerationTable.price = 45000
    RegenerationTable.bulk = 20
    RegenerationTable.content = """
    A regeneration table is a medical bed that uses the most advanced medical technology known in the Pact Worlds to restore a creature’s body to full function from nearly any mishap or injury, including death. It does this with quantumlocked nanites held in a suspended state from which they can become nearly any form of matter, including stem cells for biological creatures or mechanical components for artificial creatures like androids or Akiton’s anacites. The table both reads the creature’s own genetic code (or equivalent data) and uses supercomputing predictive algorithms to determine what damage or affliction is present, then attempts to restore the subject to perfect health based on that information.
    
    A living creature using a regeneration table is affected as if a 6th-level mystic cure spell as well as the remove affliction and restoration spells were cast on it. A dead creature is affected as if raise dead were cast on it. A regeneration table has an effective caster level of 20th.
    
    As a result of its need to perfectly attune itself to one creature suffering one exact set of ailments and the expenditure of its quantum state particles, a regeneration table functions only once and is then inert and useless.
    """
    
    let GrenadeScramblerMk5 = CompendiumItem(context: context)
    GrenadeScramblerMk5.name = "Grenade Scrambler, Mk 5"
    GrenadeScramblerMk5.magicOrTech = "T"
    GrenadeScramblerMk5.category = "Other"
    GrenadeScramblerMk5.level = 16
    GrenadeScramblerMk5.price = 165000
    GrenadeScramblerMk5.bulk = 1
    GrenadeScramblerMk5.capacity = 100
    GrenadeScramblerMk5.usage = 5
    GrenadeScramblerMk5.content = """
    When activated as a move action, this unit emits a wireless signal that interferes with the detonation sequence of grenades within 30 feet. Grenades that would successfully land at an intersection in the area have a 50% chance to miss, and any grenade that targets an intersection in the area and misses lands 1d6 squares away (instead of 1d4). A grenade scrambler affects only grenades whose item level is equal to or lower than its own level. If an affected grenade’s level is at least 5 levels lower than the grenade scrambler’s, it automatically misses.
    
    Affects grenades with an item level of 16 or lower. Affected grenades with an item level of 11 or lower automatically miss.
    """
    
    let QuantumBoxes = CompendiumItem(context: context)
    QuantumBoxes.name = "Quantum Boxes"
    QuantumBoxes.magicOrTech = "T"
    QuantumBoxes.category = "Other"
    QuantumBoxes.level = 17
    QuantumBoxes.price = 250000
    QuantumBoxes.bulk = 2
    QuantumBoxes.capacity = 100
    QuantumBoxes.usage = 25
    QuantumBoxes.content = """
    These silvery boxes always come in pairs, and while powerful corporations use them to smuggle items of great value, their potential applications are virtually limitless. By spending 1 minute, you can seal one item of up to 1 bulk into each quantum box, subjecting the contents of each box to quantum entanglement. This uses 25 charges and causes both items to effectively cease to exist, including for the purposes of spells and effects such as detect magic. Anytime afterward, as long as both boxes are on the same plane, you can specify either of the two entangled items and open one quantum box as a standard action that consumes 25 charges. The named item immediately appears in the opened box, and the other item immediately appears in the paired box, no matter where it is. Effects that prevent dimensional travel block activation of a quantum box, but effects that block signals do not. If either box is destroyed or otherwise disabled, the contents of both are lost.
    """
    
    let PersonalPhaseShifter = CompendiumItem(context: context)
    PersonalPhaseShifter.name = "Personal Phase Shifter"
    PersonalPhaseShifter.magicOrTech = "T"
    PersonalPhaseShifter.category = "Other"
    PersonalPhaseShifter.level = 18
    PersonalPhaseShifter.price = 380000
    PersonalPhaseShifter.bulk = 1
    PersonalPhaseShifter.capacity = 100
    PersonalPhaseShifter.usage = 10
    PersonalPhaseShifter.content = """
    A personal phase shifter works on a subatomic level to allow atoms to pass out of phase with one another. In practice, this allows the affected material to exist without interacting with other physical material. A personal phase shifter is a formfitting jumpsuit that can be worn over most clothing and light armor, but not over heavy armor or powered armor. When you activate a personal phase shifter, you are incorporeal (Core Rulebook 264) except you do not gain the ability to move at full speed if you otherwise could not do so. The phase shifter contains antigravity repulsors that grant you a fly speed of 30 feet with average maneuverability. You cannot hold any items while incorporeal, and your nonmagical attacks deal half damage. Magical attacks are unaffected, and you can use magic items and other equipment worn under the jumpsuit as normal.
    """
    
    let WeightlessFootlocker = CompendiumItem(context: context)
    WeightlessFootlocker.name = "Weightless Footlocker"
    WeightlessFootlocker.magicOrTech = "T"
    WeightlessFootlocker.category = "Other"
    WeightlessFootlocker.level = 18
    WeightlessFootlocker.price = 340000
    WeightlessFootlocker.bulk = 2
    WeightlessFootlocker.capacity = 100
    WeightlessFootlocker.usage = 1
    WeightlessFootlocker.content = """
    This metal chest is 2 feet long and can normally hold up to 1 item of 2 bulk, 4 items of 1 bulk, or up to 20 items of light bulk. When you close and activate the footlocker, sophisticated gravity-reversal units built into the chest’s frame reduce the bulk of any items in the chest to 0. Even superdense materials have their bulk negated, as long as they fit within the chest. You must deactivate the chest before opening it, which returns its contents to their normal weight.
    """
    
    let DisintegrationHoop = CompendiumItem(context: context)
    DisintegrationHoop.name = "Disintegration Hoop"
    DisintegrationHoop.magicOrTech = "T"
    DisintegrationHoop.category = "Other"
    DisintegrationHoop.level = 20
    DisintegrationHoop.price = 750000
    DisintegrationHoop.bulk = 1
    DisintegrationHoop.capacity = 100
    DisintegrationHoop.usage = 10
    DisintegrationHoop.content = """
    This adamantine ring is 1 foot in diameter and surrounded by coils and circuitry. When activated, the disintegration hoop completely obliterates all matter placed through the center. Creatures that place an appendage into the hoop take 4d20 electricity and fire damage as the appendage is disintegrated, and creatures small enough to fit entirely within the hoop instead take 14d20 electricity and fire damage. In either case, a creature that would be forced through the hoop can attempt a DC 14 Reflex save to avoid passing into the hoop. Appendages destroyed by the disintegration hoop can be restored only with regenerate or a similarly powerful effect; creatures slain by the hoop can be restored only with miracle or wish. Attempts at creating larger disintegration hoops have thus far been disastrous failures, although rumors persist of larger, stable disintegration hoops that use advanced technology.
    """
    
    let GrenadeScramblerMk6 = CompendiumItem(context: context)
    GrenadeScramblerMk6.name = "Grenade Scrambler, Mk 6"
    GrenadeScramblerMk6.magicOrTech = "T"
    GrenadeScramblerMk6.category = "Other"
    GrenadeScramblerMk6.level = 20
    GrenadeScramblerMk6.price = 815000
    GrenadeScramblerMk6.bulk = 1
    GrenadeScramblerMk6.capacity = 100
    GrenadeScramblerMk6.usage = 5
    GrenadeScramblerMk6.content = """
    When activated as a move action, this unit emits a wireless signal that interferes with the detonation sequence of grenades within 30 feet. Grenades that would successfully land at an intersection in the area have a 50% chance to miss, and any grenade that targets an intersection in the area and misses lands 1d6 squares away (instead of 1d4). A grenade scrambler affects only grenades whose item level is equal to or lower than its own level. If an affected grenade’s level is at least 5 levels lower than the grenade scrambler’s, it automatically misses.
    
    Affects grenades with an item level of 20 or lower. Affected grenades with an item level of 15 or lower automatically miss.
    """
    
    let PortableLightBeacon = CompendiumItem(context: context)
    PortableLightBeacon.name = "Portable Light, Beacon"
    PortableLightBeacon.magicOrTech = "T"
    PortableLightBeacon.category = "Portable Lights"
    PortableLightBeacon.level = 1
    PortableLightBeacon.price = 25
    PortableLightBeacon.bulk = 1
    PortableLightBeacon.capacity = 10
    PortableLightBeacon.usage = 1
    PortableLightBeacon.content = """
    A portable light, sometimes called an electric torch, is one of several different devices that use batteries to create light sources. A portable light increases the light level by one step in an area determined by its model, as follows: flashlight (20- foot cone), lantern (10-foot radius), beacon (50-foot radius), and spotlight (100-foot cone).
    """
    
    let PortableLightFlashlight = CompendiumItem(context: context)
    PortableLightFlashlight.name = "Portable Light, Flashlight"
    PortableLightFlashlight.magicOrTech = "T"
    PortableLightFlashlight.category = "Portable Lights"
    PortableLightFlashlight.level = 1
    PortableLightFlashlight.price = 1
    PortableLightFlashlight.bulk = 0.1
    PortableLightFlashlight.capacity = 10
    PortableLightFlashlight.usage = 1
    PortableLightFlashlight.content = """
    A portable light, sometimes called an electric torch, is one of several different devices that use batteries to create light sources. A portable light increases the light level by one step in an area determined by its model, as follows: flashlight (20- foot cone), lantern (10-foot radius), beacon (50-foot radius), and spotlight (100-foot cone).
    """
    
    let PortableLightLantern = CompendiumItem(context: context)
    PortableLightLantern.name = "Portable Light, Lantern"
    PortableLightLantern.magicOrTech = "T"
    PortableLightLantern.category = "Portable Lights"
    PortableLightLantern.level = 1
    PortableLightLantern.price = 1
    PortableLightLantern.bulk = 0.1
    PortableLightLantern.capacity = 10
    PortableLightLantern.usage = 1
    PortableLightLantern.content = """
    A portable light, sometimes called an electric torch, is one of several different devices that use batteries to create light sources. A portable light increases the light level by one step in an area determined by its model, as follows: flashlight (20- foot cone), lantern (10-foot radius), beacon (50-foot radius), and spotlight (100-foot cone).
    """
    
    let PortableLightSpotlight = CompendiumItem(context: context)
    PortableLightSpotlight.name = "Portable Light, Spotlight"
    PortableLightSpotlight.magicOrTech = "T"
    PortableLightSpotlight.category = "Portable Lights"
    PortableLightSpotlight.level = 1
    PortableLightSpotlight.price = 25
    PortableLightSpotlight.bulk = 1
    PortableLightSpotlight.capacity = 10
    PortableLightSpotlight.usage = 1
    PortableLightSpotlight.content = """
    A portable light, sometimes called an electric torch, is one of several different devices that use batteries to create light sources. A portable light increases the light level by one step in an area determined by its model, as follows: flashlight (20- foot cone), lantern (10-foot radius), beacon (50-foot radius), and spotlight (100-foot cone).
    """
    
    let KishaleeBattery = CompendiumItem(context: context)
    KishaleeBattery.name = "Kishalee Battery"
    KishaleeBattery.magicOrTech = "T"
    KishaleeBattery.category = "Relic"
    KishaleeBattery.level = 2
    KishaleeBattery.price = 400
    KishaleeBattery.bulk = 0
    KishaleeBattery.content = """
    Roughly the same size as standard batteries, kishalee batteries are translucent cylindrical objects bound by a transparent aluminum alloy. By a strange quirk of fate and parallel engineering, kishalee batteries can be interchanged with the standard batteries used among the Pact Worlds and beyond, but these rare batteries allow a creature to use and kishalee artifacts with greater efficiency. If placed in non-kishalee items, a kishalee battery functions like a standard battery. The technology for rapid recharging of a kishalee battery has been lost, but such batteries recharge themselves automatically over the course of 24 hours of disuse.
    
    These batteries come in four different varieties: normal, high-capacity, super-capacity, and ultra-capacity. Each variety has a maximum number of charges as the normal batteries of the same type (Starfinder Core Rulebook 179). When these batteries are found, they are almost always fully charged.
    
    Relic
    
    These rare items are bits of lost technology or unique items less powerful than artifacts. A relic has an item level but can be sold for 100% of the item’s price (like trade goods). A relic cannot be crafted without the means of a specific formula, which is almost always long lost, and often requires specific materials. A relic that became understood well enough to be reproduced, standardized, and mass-marketed might lose its relic status.
    """
    
    let HoldallRaiment = CompendiumItem(context: context)
    HoldallRaiment.name = "Holdall Raiment"
    HoldallRaiment.magicOrTech = "T"
    HoldallRaiment.category = "Relic"
    HoldallRaiment.level = 4
    HoldallRaiment.price = 2000
    HoldallRaiment.bulk = 0.1
    HoldallRaiment.content = """
    Though this ivory-white frock is tailored for kishalee physiology, most humanoids can wear it with little to no discomfort. A holdall raiment features a dozen pockets, each of which can access a series of linked extradimensional pockets. Each pocket can hold a single item that weighs up to 1 bulk, though any item stored within the raiment can be retrieved from any pocket as a move action, but only by the wearer of the raiment. The stored items cannot be detected by anyone searching or frisking you.
    
    Relic
    
    These rare items are bits of lost technology or unique items less powerful than artifacts. A relic has an item level but can be sold for 100% of the item’s price (like trade goods). A relic cannot be crafted without the means of a specific formula, which is almost always long lost, and often requires specific materials. A relic that became understood well enough to be reproduced, standardized, and mass-marketed might lose its relic status.
    """
    
    let AcclimationTorc = CompendiumItem(context: context)
    AcclimationTorc.name = "Acclimation Torc"
    AcclimationTorc.magicOrTech = "T"
    AcclimationTorc.category = "Relic"
    AcclimationTorc.level = 5
    AcclimationTorc.price = 2700
    AcclimationTorc.bulk = 0.1
    AcclimationTorc.content = """
    This simple metal band attaches to the collar area of your space suit, suit of armor, or other set of clothes. When activated as a standard action, an acclimation torc places your respiratory system and your digestive system in a form of temporal stasis, while still keeping you alive. Essentially, your need to eat, drink, and breathe is temporarily “paused” while the acclimation torc continues to hold a charge. You can breathe normally in vacuums, clouds of smoke, water, and thick, thin, and toxic atmospheres, though you aren’t protected against the damage of a corrosive atmosphere. In addition, you don’t need to worry about starvation or thirst while your acclimation torc is active. Unlike the normal protections provided by most suits of armor, an acclimation torc doesn’t grant you protection against low levels of radiation or conditions of cold and heat. An acclimation torc holds 50 charges and uses 1 charge per hour. You can replenish these charges the same way you recharge the duration of a suit of armor’s environmental protections (Starfinder Core Rulebook 198).
    
    Relic
    
    These rare items are bits of lost technology or unique items less powerful than artifacts. A relic has an item level but can be sold for 100% of the item’s price (like trade goods). A relic cannot be crafted without the means of a specific formula, which is almost always long lost, and often requires specific materials. A relic that became understood well enough to be reproduced, standardized, and mass-marketed might lose its relic status.
    """
    
    let DimensionalCommUnit = CompendiumItem(context: context)
    DimensionalCommUnit.name = "Dimensional Comm Unit"
    DimensionalCommUnit.magicOrTech = "T"
    DimensionalCommUnit.category = "Relic"
    DimensionalCommUnit.level = 6
    DimensionalCommUnit.price = 4500
    DimensionalCommUnit.bulk = 0
    DimensionalCommUnit.content = """
    These devices are handheld and circular in shape and have a very high-resolution screen and simple controls. Dimensional comm units are a kishalee version of the comm units commonly found in the Pact Worlds, but they function using the remnants of the vast demiplane network utilized by the now extinct kishalee civilization. The advantage of dimensional comm units is that their text and verbal communications are instantaneous, whether in the same system or through interstellar space, but because of the degraded state of the kishalee dimensional network, they work only sporadically. Prior to use, a dimensional comm unit must be linked with at least one other unit—a process that takes only a minute when all units to be linked are on the same planet. Dimensional comm units nearly always work when used on the same planet to reach other linked devices. Over greater distances, each time a dimensional comm is used, there is a 50% chance that it will function properly if used in the same system or a 25% chance if the communication is interstellar (this is rolled in secret by the GM), but only with linked dimensional comm units. If two linked dimensional comm units make a connection, they retain that connection for 24 hours. If the dimensional comm units don’t manage to connect, the users can try again after 24 hours. Dimensional comm units do not function within the Drift or on other planes.
    
    Relic
    
    These rare items are bits of lost technology or unique items less powerful than artifacts. A relic has an item level but can be sold for 100% of the item’s price (like trade goods). A relic cannot be crafted without the means of a specific formula, which is almost always long lost, and often requires specific materials. A relic that became understood well enough to be reproduced, standardized, and mass-marketed might lose its relic status.
    """
    
    let KishaleeBatteryHighCapacity = CompendiumItem(context: context)
    KishaleeBatteryHighCapacity.name = "Kishalee Battery, High-Capacity"
    KishaleeBatteryHighCapacity.magicOrTech = "T"
    KishaleeBatteryHighCapacity.category = "Relic"
    KishaleeBatteryHighCapacity.level = 6
    KishaleeBatteryHighCapacity.price = 3000
    KishaleeBatteryHighCapacity.bulk = 0
    KishaleeBatteryHighCapacity.content = """
    Roughly the same size as standard batteries, kishalee batteries are translucent cylindrical objects bound by a transparent aluminum alloy. By a strange quirk of fate and parallel engineering, kishalee batteries can be interchanged with the standard batteries used among the Pact Worlds and beyond, but these rare batteries allow a creature to use and kishalee artifacts with greater efficiency. If placed in non-kishalee items, a kishalee battery functions like a standard battery. The technology for rapid recharging of a kishalee battery has been lost, but such batteries recharge themselves automatically over the course of 24 hours of disuse.
    
    These batteries come in four different varieties: normal, high-capacity, super-capacity, and ultra-capacity. Each variety has a maximum number of charges as the normal batteries of the same type (Starfinder Core Rulebook 179). When these batteries are found, they are almost always fully charged.
    
    Relic
    
    These rare items are bits of lost technology or unique items less powerful than artifacts. A relic has an item level but can be sold for 100% of the item’s price (like trade goods). A relic cannot be crafted without the means of a specific formula, which is almost always long lost, and often requires specific materials. A relic that became understood well enough to be reproduced, standardized, and mass-marketed might lose its relic status.
    """
    
    let HorizonShield = CompendiumItem(context: context)
    HorizonShield.name = "Horizon Shield"
    HorizonShield.magicOrTech = "T"
    HorizonShield.category = "Relic"
    HorizonShield.level = 7
    HorizonShield.price = 6500
    HorizonShield.bulk = 1
    HorizonShield.content = """
    A horizon shield slips over one hand much like a set of brass knuckles with a touch-sensitive control pad resting in your palm. Activating or deactivating a horizon shield is a move action. When activated, a horizon shield forms a nearly invisible barrier that warps space around you, making you more difficult to hit with ranged attacks. Any ranged attack targeting you treats you as if are 60 feet farther away than you actually are. This might impart a range increment penalty to the attack roll or even make the attack impossible altogether. You must be aware of the attacker and can’t be holding anything else in the hand equipped with the horizon shield. This effect doesn’t stack with effects from other horizon shields. A horizon shield has a capacity of 20 and uses 1 charge per round that it is active.
    
    Relic
    
    These rare items are bits of lost technology or unique items less powerful than artifacts. A relic has an item level but can be sold for 100% of the item’s price (like trade goods). A relic cannot be crafted without the means of a specific formula, which is almost always long lost, and often requires specific materials. A relic that became understood well enough to be reproduced, standardized, and mass-marketed might lose its relic status.
    """
    
    let KishaleeBatterySuperCapacity = CompendiumItem(context: context)
    KishaleeBatterySuperCapacity.name = "Kishalee Battery, Super-Capacity"
    KishaleeBatterySuperCapacity.magicOrTech = "T"
    KishaleeBatterySuperCapacity.category = "Relic"
    KishaleeBatterySuperCapacity.level = 7
    KishaleeBatterySuperCapacity.price = 5000
    KishaleeBatterySuperCapacity.bulk = 0
    KishaleeBatterySuperCapacity.content = """
    Roughly the same size as standard batteries, kishalee batteries are translucent cylindrical objects bound by a transparent aluminum alloy. By a strange quirk of fate and parallel engineering, kishalee batteries can be interchanged with the standard batteries used among the Pact Worlds and beyond, but these rare batteries allow a creature to use and kishalee artifacts with greater efficiency. If placed in non-kishalee items, a kishalee battery functions like a standard battery. The technology for rapid recharging of a kishalee battery has been lost, but such batteries recharge themselves automatically over the course of 24 hours of disuse.
    
    These batteries come in four different varieties: normal, high-capacity, super-capacity, and ultra-capacity. Each variety has a maximum number of charges as the normal batteries of the same type (Starfinder Core Rulebook 179). When these batteries are found, they are almost always fully charged.
    
    Relic
    
    These rare items are bits of lost technology or unique items less powerful than artifacts. A relic has an item level but can be sold for 100% of the item’s price (like trade goods). A relic cannot be crafted without the means of a specific formula, which is almost always long lost, and often requires specific materials. A relic that became understood well enough to be reproduced, standardized, and mass-marketed might lose its relic status.
    """
    
    let KishaleeBatteryUltraCapacity = CompendiumItem(context: context)
    KishaleeBatteryUltraCapacity.name = "Kishalee Battery, Ultra-Capacity"
    KishaleeBatteryUltraCapacity.magicOrTech = "T"
    KishaleeBatteryUltraCapacity.category = "Relic"
    KishaleeBatteryUltraCapacity.level = 8
    KishaleeBatteryUltraCapacity.price = 8400
    KishaleeBatteryUltraCapacity.bulk = 0
    KishaleeBatteryUltraCapacity.content = """
    Roughly the same size as standard batteries, kishalee batteries are translucent cylindrical objects bound by a transparent aluminum alloy. By a strange quirk of fate and parallel engineering, kishalee batteries can be interchanged with the standard batteries used among the Pact Worlds and beyond, but these rare batteries allow a creature to use and kishalee artifacts with greater efficiency. If placed in non-kishalee items, a kishalee battery functions like a standard battery. The technology for rapid recharging of a kishalee battery has been lost, but such batteries recharge themselves automatically over the course of 24 hours of disuse.
    
    These batteries come in four different varieties: normal, high-capacity, super-capacity, and ultra-capacity. Each variety has a maximum number of charges as the normal batteries of the same type (Starfinder Core Rulebook 179). When these batteries are found, they are almost always fully charged.
    
    Relic
    
    These rare items are bits of lost technology or unique items less powerful than artifacts. A relic has an item level but can be sold for 100% of the item’s price (like trade goods). A relic cannot be crafted without the means of a specific formula, which is almost always long lost, and often requires specific materials. A relic that became understood well enough to be reproduced, standardized, and mass-marketed might lose its relic status.
    """
    
    let SovereignHelm = CompendiumItem(context: context)
    SovereignHelm.name = "Sovereign Helm"
    SovereignHelm.magicOrTech = "T"
    SovereignHelm.category = "Relic"
    SovereignHelm.level = 9
    SovereignHelm.price = 14975
    SovereignHelm.bulk = 0.1
    SovereignHelm.content = """
    This strange silvery helm features a glowing band of greenish energy. Four metal clasps attached to long, sharp appendages poke out from the crown of the helm. When the apparatus is held over the head of a Small or Medium living creature for 1 minute, the band of energy pulsates wildly, and at the end of that time, the clasps slap down and start to painlessly burrow into the creature’s cranium. After another full minute, the appendages become fully embedded, and the sovereign helm begins the 24-hour process of rewriting the neural pathways of the subject’s brain. If the helm is removed at any time during this period and then placed back onto the same subject, the 24 hours begin anew. Once this process is complete, the sovereign helm grants the wearer some control over constructs with the technological subtype.
    
    While a sovereign helm has a different method of installation than most augmentations, it acts as a brain system augmentation in all other ways. You can’t wear and make use of a sovereign helm if you have preexisting brain system implantation, nor can you install a brain system implantation while a sovereign helm’s apparatuses are burrowed into your cranium.
    
    Once the sovereign helm has fully rewritten your neural pathways, it allows you to spend a standard action in an attempt to assert some amount of control over a single construct with the technological subtype that you can see within 60 feet of you. A targeted construct must attempt a Will saving throw (DC = 10 + half your level + your key ability score modifier); on a failure, it must stop what is doing and can do only what you command (using only the following commands) until the end of your next turn. If the construct succeeds at its saving throw, it is immune to your sovereign helm’s control for 24 hours.
    
    Full Stop: The construct cannot do anything until the end of your next turn.
    
    Move: On the construct’s next turn, you can decide how it spends its move action.
    
    Attack: On the construct’s next turn, you can decide how it attacks.
    
    After the first round a construct has failed its save, you can attempt to maintain your control over it with a move action each round, but the construct can attempt another saving throw. If the construct succeeds, you lose control and the construct is immune to your sovereign helm’s effects for 24 hours. If the construct fails, your control over it continues until the end of your next turn, and you can choose the same or a different command from the list. A sovereign helm allows you to control only one construct at a time.
    
    Relic
    
    These rare items are bits of lost technology or unique items less powerful than artifacts. A relic has an item level but can be sold for 100% of the item’s price (like trade goods). A relic cannot be crafted without the means of a specific formula, which is almost always long lost, and often requires specific materials. A relic that became understood well enough to be reproduced, standardized, and mass-marketed might lose its relic status.
    """
    
    let RestraintsBinders = CompendiumItem(context: context)
    RestraintsBinders.name = "Restraints, Binders"
    RestraintsBinders.magicOrTech = "T"
    RestraintsBinders.category = "Restraints"
    RestraintsBinders.level = 1
    RestraintsBinders.price = 5
    RestraintsBinders.bulk = 0
    RestraintsBinders.content = """
    Binders are simple, single-use, resin-cord restraints that can be placed only on helpless, pinned, or willing creatures (a standard action). A pair of binders immobilizes two limbs of your choice. A creature can escape binders with a successful Acrobatics check (DC = 20 + 1-1/2 × your level).
    
    Manacles are reusable wrist restraints made of hardened metal or ceramics and keyed to open with a security chip, code, or voice command (determined when they are manufactured). Manacles can be placed only on helpless, pinned, or willing creatures (a standard action). Manacles prevent two arms from holding or using any object. A creature can escape manacles with a successful DC 30 Acrobatics check.
    """
    
    let RestraintsManacles = CompendiumItem(context: context)
    RestraintsManacles.name = "Restraints, Manacles"
    RestraintsManacles.magicOrTech = "T"
    RestraintsManacles.category = "Restraints"
    RestraintsManacles.level = 4
    RestraintsManacles.price = 350
    RestraintsManacles.bulk = 1
    RestraintsManacles.content = """
    Binders are simple, single-use, resin-cord restraints that can be placed only on helpless, pinned, or willing creatures (a standard action). A pair of binders immobilizes two limbs of your choice. A creature can escape binders with a successful Acrobatics check (DC = 20 + 1-1/2 × your level).
    
    Manacles are reusable wrist restraints made of hardened metal or ceramics and keyed to open with a security chip, code, or voice command (determined when they are manufactured). Manacles can be placed only on helpless, pinned, or willing creatures (a standard action). Manacles prevent two arms from holding or using any object. A creature can escape manacles with a successful DC 30 Acrobatics check.
    """
    

    
}

func loadHybridItems() {
    
    let DustGoggles = CompendiumItem(context: context)
    DustGoggles.name = "Dust Goggles"
    DustGoggles.magicOrTech = "MT"
    DustGoggles.category = "Hybrid"
    DustGoggles.level = 1
    DustGoggles.price = 120
    DustGoggles.bulk = 0
    DustGoggles.content = """
    These goggles of smoked glass are used by membrane ghibranis of Elytrio to protect their eyes during the frequent dust storms in the wastes of their ravaged planet. When you wear a pair of dust goggles, the penalty to Perception checks from storms is removed and your visibility range isn’t reduced (see Weather on page 398 of the Starfinder Core Rulebook). In addition, you reduce your miss chance due to concealment from smoke and fog (including that produced by a smoke grenade or an effect such as fog cloud) by 10% (to a minimum of 0%); this reduction doesn’t stack with any other ability that reduces miss chance due to concealment.
    
    Dust goggles can also be installed in armor (or an android’s armor upgrade slot) as an armor upgrade. This has no effect on weight or cost, but when installed in this way, they do not count toward a character’s limit of two worn magic or hybrid items at once.
    """
    
    let PlantShieldAmulet = CompendiumItem(context: context)
    PlantShieldAmulet.name = "Plant Shield Amulet"
    PlantShieldAmulet.magicOrTech = "MT"
    PlantShieldAmulet.category = "Hybrid"
    PlantShieldAmulet.level = 1
    PlantShieldAmulet.price = 300
    PlantShieldAmulet.bulk = 0
    PlantShieldAmulet.content = """
    A plant shield amulet creates an energy field around you, resonating with magic frequencies that repel plants. You can move through undergrowth that acts as difficult terrain (such as bushes, fungal blooms, roots, and vines) at your normal speed and without taking damage from thorns or similar elements of the plant life. Plant creatures’ attacks and abilities, as well as spells and other magical effects such as the xenodruid’s grasping vines mystic connection power, affect you normally.
    """
    
    let ShotalashuSaddle = CompendiumItem(context: context)
    ShotalashuSaddle.name = "Shotalashu Saddle"
    ShotalashuSaddle.magicOrTech = "MT"
    ShotalashuSaddle.category = "Hybrid"
    ShotalashuSaddle.level = 1
    ShotalashuSaddle.price = 300
    ShotalashuSaddle.bulk = 0
    ShotalashuSaddle.content = """
    This traditional saddle for shotalashu riders is adorned with small, colorful gems and engraved with intricate images of lashunta culture. More than a simple decoration, however, a shotalashu saddle amplifies and solidifies the lashunta’s telepathic bond with its mount through a series of telepathic relays that serve as conductors from the rider’s body to the shotalashu’s. While riding a shotalashu saddle, you gain a +5 bonus on Survival checks to ride the shotalashu. While austere, mass-produced shotalashu saddles that provide the same benefit as handmade versions certainly exist, most lashuntas consider it disrespectful to their mount not to use a lovingly crafted artisanal saddle. Particularly beautiful saddles often serve as cherished heirlooms, passed down through generations, and it’s not uncommon for lashuntas to mark special milestones in their loved ones’ lives with the gift of a new shotalashu saddle. A functional shotalashu saddle costs 300 credits, though particularly elaborate or ancient specimens may be worth many times more.
    """
    
    let StarstoneCompass = CompendiumItem(context: context)
    StarstoneCompass.name = "Starstone Compass"
    StarstoneCompass.magicOrTech = "MT"
    StarstoneCompass.category = "Hybrid"
    StarstoneCompass.level = 1
    StarstoneCompass.price = 3
    StarstoneCompass.bulk = 0.1
    StarstoneCompass.content = """
    This small, clockwork navigational device hones in on mystical signals emitted by the Starstone resting at the heart of Absalom Station, calculating the compass’s precise distance from and direction relative to the enigmatic font. While you are in the Pact Worlds system, this device lets you automatically know which direction Absalom Station is in relation to your current location, and it grants you a +2 insight bonus to Piloting checks when astrogating throughout the Pact Worlds system.
    """
    
    let SoftwareImpTier1 = CompendiumItem(context: context)
    SoftwareImpTier1.name = "Software Imp, Tier 1"
    SoftwareImpTier1.magicOrTech = "MT"
    SoftwareImpTier1.category = "Hybrid"
    SoftwareImpTier1.level = 1
    SoftwareImpTier1.price = 400
    SoftwareImpTier1.bulk = 0
    SoftwareImpTier1.content = """
    Whether or not it has attained true consciousness, a software imp is a perverse and illegal AI obnoxious enough that the question is academic. Software imps come on memory sticks so they remain isolated from your own systems. A software imp has a tier, and it is ineffective on any computer of a higher tier than its own.
    
    You must have access to a computer to install a software imp on it, and you can do so as a full action. The imp renders its memory stick unusable on the way out, leaving no way to conclusively determine what was once stored there. Once installed, the software imp becomes an artificial personality on its host computer. If the computer already has an artificial personality, the imp finds and overwrites it if possible. Faced with an artificial personality to which it does not have access, the imp lies in wait until it gains access to that personality in order to replace it.
    
    Initially, the imp can access information and modules that were accessible to you when you installed the imp. It can gain further access if a user unwittingly uses more access while the imp is installed. The imp can also fool users into giving it more access by attempting Bluff, Diplomacy, Intimidate, and Sense Motive checks with a bonus according to its tier.
    
    While acting as an artificial personality, the imp is as unhelpful as possible to anyone attempting to use the system. The software imp doesn’t ignore commands, but it interprets them in the worst way possible. It can misdirect, reveal unwanted information, obfuscate the truth, and otherwise aggravate and demoralize the user.
    
    Finding and removing a software imp requires a successful Computers check to hack the imp as if it were a computer of its tier. However, the imp copies and installs itself as redundantly as it can, based on its tier number, and it can revive itself so long as a single copy remains. A dismissal spell targeting a computer infested with software imps can remove the malicious AIs as if they were extraplanar creatures, each with a CR equal to its item level and a Will save bonus based on its tier.
    
    The tiers of software imps and the capabilities of each are as follows.
    
    Tier 1: Skill bonus +5; Will +4; no copies
    
    Tier 2: Skill bonus +8; Will +6; one copy
    
    Tier 3: Skill bonus +11; Will +8; one copy
    
    Tier 4: Skill bonus +14; Will +10; two copies
    
    Tier 5: Skill bonus +17; Will +12; two copies
    
    Tier 6: Skill bonus +20; Will +14; three copies
    
    Tier 7: Skill bonus +23; Will +16; three copies
    
    Tier 8: Skill bonus +26; Will +18; four copies
    
    Tier 9: Skill bonus +29; Will +20; four copies
    
    Tier 10: Skill bonus +32; Will +21; five copies
    """
    
    let MetalNitroSilver = CompendiumItem(context: context)
    MetalNitroSilver.name = "Metal Nitro, Silver"
    MetalNitroSilver.magicOrTech = "MT"
    MetalNitroSilver.category = "Hybrid"
    MetalNitroSilver.level = 2
    MetalNitroSilver.price = 175
    MetalNitroSilver.bulk = 0
    MetalNitroSilver.content = """
    Introduced into a vehicle’s engine through the vehicle’s control panel, metal nitro comes in magical capsules of soft metal. Unlike technological racing nitrous, which releases more oxygen into an engine’s system to help the fuel burn, metal nitro infuses the vehicle with a burst of magical power.
    
    As a move action, you can crush a capsule of metal nitro into a vehicle’s control panel, which increases the vehicle’s drive speed and full speed for a total of 10 rounds. If the pilot fails to take the race action within 1 round of activating the metal nitro or fails the Piloting check to race from a dead stop, the metal nitro forces the vehicle to move its full speed immediately in an uncontrolled manner. If the Pilot fails the check to race, or the nitro activates in an uncontrolled manner, the pilot and any passengers take bludgeoning damage according to the type of metal nitro.
    
    Metal nitro can be safely used only on a vehicle that has an equal or higher item level. If you use metal nitro of an item level higher than the target vehicle’s, the vehicle takes damage after the pilot races or the vehicle first moves because of the nitro. The amount of damage varies according to the type of metal nitro. The types of metal nitro and their speed increase, as well as potential passenger and vehicle damage, are as follows.
    
    Silver: Speed × 1-1/2; damage 1d6
    
    Gold: Speed × 2; damage 3d6
    
    Platinum: Speed × 2-1/2; damage 6d6
    
    Star: Speed × 3; damage 10d6
    """
    
    let MindlinkCircletMk1 = CompendiumItem(context: context)
    MindlinkCircletMk1.name = "Mindlink Circlet, Mk 1"
    MindlinkCircletMk1.magicOrTech = "MT"
    MindlinkCircletMk1.category = "Hybrid"
    MindlinkCircletMk1.level = 2
    MindlinkCircletMk1.price = 1600
    MindlinkCircletMk1.bulk = 0.1
    MindlinkCircletMk1.content = """
    Although items with powers similar to those of the mindlink circlet have existed in the Pact Worlds for thousands of years, the technological components of the this useful item were an innovation that made its powers readily available. The effects of a mindlink circlet depend upon its model, as described below.
    
    You can telepathically communicate with any creatures within 30 feet with which you share a language. This functions like a shirren’s limited telepathy racial trait.
    """
    
    let ShadowstaffLesser = CompendiumItem(context: context)
    ShadowstaffLesser.name = "Shadowstaff, Lesser"
    ShadowstaffLesser.magicOrTech = "MT"
    ShadowstaffLesser.category = "Hybrid"
    ShadowstaffLesser.level = 2
    ShadowstaffLesser.price = 500
    ShadowstaffLesser.bulk = 1
    ShadowstaffLesser.content = """
    Draeliks who have proven their worth wield a shadowstaff, a weapon that channels cold, dark energy from the Negative Energy Plane. Many sages believe that sceaduinars gifted the arcane technology necessary to create these items to the draeliks to protect them from the predations of the Azlanti Star Empire. Shadowstaves function as both two-handed basic melee weapons and as small arms. A wielder must be proficient in small arms to use one as a ranged weapon without penalties and to gain the benefits of the Weapon Specialization feat with a shadowstaff used as a ranged weapon. These weapons use a special ammunition that is manufactured only on the worlds of the Shadari Confederacy (Starfinder Core Rulebook 468) and costs 160 credits for a 40-charge clip. Presented below are the statistics for a standard shadowstaff, used by advanced practitioners of the weapon’s art, as well as the lesser shadowstaff used by those newly honored with the responsibility of bearing the symbolic weapon. While even more powerful versions of the weapon exist, these are usually restricted to draelik high priests and other highly respected operatives of the draelik government.
    
    A shadowstaff is covered with fell symbols and is often surrounded by a dark nimbus of shadowy energy. As a basic two-handed melee weapon, a shadowstaff deals 2d6 bludgeoning, slashing, or piercing damage (your choice) as it manifests blades or spikes at will, and it has the block weapon special property. When a shadowstaff is used as a small arm, it has a range increment of 60 feet, and a single shot consumes 2 charges from its 40-charge capacity and deals 2d4 cold damage. Switching a shadowstaff from melee functionality to ranged functionality (or vice versa) is a swift action. Additionally, you can use a shadowstaff to create darkness, as per the universal creature rule, once per day (see page 153).
    """
    
    let MotionDetectionBadge = CompendiumItem(context: context)
    MotionDetectionBadge.name = "Motion-Detection Badge"
    MotionDetectionBadge.magicOrTech = "MT"
    MotionDetectionBadge.category = "Hybrid"
    MotionDetectionBadge.level = 3
    MotionDetectionBadge.price = 1350
    MotionDetectionBadge.bulk = 0.1
    MotionDetectionBadge.content = """
    This hexagon-shaped adornment can be activated or deactivated as a move action. A motion-detection badge has 4 charges, which refresh daily, and an hour of activation uses 1 charge. While active, as long as you haven’t moved for at least 1 round, the badge emits a quick flash of red light whenever a Small or larger corporeal creature approaches within 60 feet, although creatures undetectable to normal vision (such as an invisible creature) don’t trigger the flash. This flash is sufficient to alert you, but doesn’t otherwise affect your vision or your actions. Reduce this distance by 20 feet for each interposing closed door or substantial barrier (such as a wall at least 1 inch thick). You can attune the badge to a creature by touching it with the item, which takes a full action; you can attune the badge to up to 10 different creatures. When you are within 60 feet of one of these creatures, regardless of whether you have moved in the past round, the badge emits a yellow flash to let you know an ally is near. Attempting to attune an eleventh creature causes the badge to lose its attunement to the earliest attuned creature. Note that in certain environments, such as a crowded shopping center, the badge flashes so frequently as to be practically useless for detecting approaching threats.
    """
    
    let RedundancyBelt = CompendiumItem(context: context)
    RedundancyBelt.name = "Redundancy Belt"
    RedundancyBelt.magicOrTech = "MT"
    RedundancyBelt.category = "Hybrid"
    RedundancyBelt.level = 3
    RedundancyBelt.price = 1200
    RedundancyBelt.bulk = 0.1
    RedundancyBelt.content = """
    These devices were originally created by ilthisarian travelers early in their exploration of worlds beyond their native Arshalin. Most are wide mesh belts with entwined serpentine patterns, though redundancy belts made beyond Arshalin have a wider variety of appearances. After being worn for at least 24 hours, the belt creates duplicates of your existing vital organs that last as long as you wear the belt, magically and temporarily rearranging your internal anatomy to create space for them. You gain a +4 resistance bonus to Fortitude saving throws against poison, to withstand the harmful effects of thick and thin atmospheres, and to avoid choking when breathing in heavy smoke. You can hold your breath for a number of rounds equal to four times your Constitution score, and you always take minimum damage from falls (as though rolling a 1 for each die of damage).
    """
    
    let AnimisticToolsMk1 = CompendiumItem(context: context)
    AnimisticToolsMk1.name = "Animistic Tools, Mk 1"
    AnimisticToolsMk1.magicOrTech = "MT"
    AnimisticToolsMk1.category = "Hybrid"
    AnimisticToolsMk1.level = 3
    AnimisticToolsMk1.price = 1350
    AnimisticToolsMk1.bulk = 0.1
    AnimisticToolsMk1.content = """
    People often have superstitions regarding whether objects have a spirit or intelligence, and animistic tools were made with such beliefs in mind. Each of these tool kits has the power to communicate a user’s intentions to inanimate objects. When you use animistic tools with the appropriate skill and you fail a check, you can use the tool’s magic to reroll the check and take the higher result. In addition, as a move action, you can tap or bang a tool from the kit on a broken object, causing the object to ignore the penalties of being broken for a time. An item can benefit from animistic tools in this way only once per day, causing some engineers to joke that no one likes percussive maintenance.
    
    The model of the tools determines the number of rerolls per day and the time an item ignores the broken condition. Once you use a set of animistic tools, you can’t benefit from a different set for 24 hours.
    
    Mk 1: One reroll; ignore the broken condition for 1 minute
    
    Mk 2: Two rerolls; ignore the broken condition for 10 minutes
    
    Mk 3: Three rerolls; ignore the broken condition for 1 hour
    """
    
    let SoftwareImpTier2 = CompendiumItem(context: context)
    SoftwareImpTier2.name = "Software Imp, Tier 2"
    SoftwareImpTier2.magicOrTech = "MT"
    SoftwareImpTier2.category = "Hybrid"
    SoftwareImpTier2.level = 3
    SoftwareImpTier2.price = 1400
    SoftwareImpTier2.bulk = 0
    SoftwareImpTier2.content = """
    Whether or not it has attained true consciousness, a software imp is a perverse and illegal AI obnoxious enough that the question is academic. Software imps come on memory sticks so they remain isolated from your own systems. A software imp has a tier, and it is ineffective on any computer of a higher tier than its own.
    
    You must have access to a computer to install a software imp on it, and you can do so as a full action. The imp renders its memory stick unusable on the way out, leaving no way to conclusively determine what was once stored there. Once installed, the software imp becomes an artificial personality on its host computer. If the computer already has an artificial personality, the imp finds and overwrites it if possible. Faced with an artificial personality to which it does not have access, the imp lies in wait until it gains access to that personality in order to replace it.
    
    Initially, the imp can access information and modules that were accessible to you when you installed the imp. It can gain further access if a user unwittingly uses more access while the imp is installed. The imp can also fool users into giving it more access by attempting Bluff, Diplomacy, Intimidate, and Sense Motive checks with a bonus according to its tier.
    
    While acting as an artificial personality, the imp is as unhelpful as possible to anyone attempting to use the system. The software imp doesn’t ignore commands, but it interprets them in the worst way possible. It can misdirect, reveal unwanted information, obfuscate the truth, and otherwise aggravate and demoralize the user.
    
    Finding and removing a software imp requires a successful Computers check to hack the imp as if it were a computer of its tier. However, the imp copies and installs itself as redundantly as it can, based on its tier number, and it can revive itself so long as a single copy remains. A dismissal spell targeting a computer infested with software imps can remove the malicious AIs as if they were extraplanar creatures, each with a CR equal to its item level and a Will save bonus based on its tier.
    
    The tiers of software imps and the capabilities of each are as follows.
    
    Tier 1: Skill bonus +5; Will +4; no copies
    
    Tier 2: Skill bonus +8; Will +6; one copy
    
    Tier 3: Skill bonus +11; Will +8; one copy
    
    Tier 4: Skill bonus +14; Will +10; two copies
    
    Tier 5: Skill bonus +17; Will +12; two copies
    
    Tier 6: Skill bonus +20; Will +14; three copies
    
    Tier 7: Skill bonus +23; Will +16; three copies
    
    Tier 8: Skill bonus +26; Will +18; four copies
    
    Tier 9: Skill bonus +29; Will +20; four copies
    
    Tier 10: Skill bonus +32; Will +21; five copies
    """
    
    let AnimatedTrapsmithsTools = CompendiumItem(context: context)
    AnimatedTrapsmithsTools.name = "Animated Trapsmith's Tools"
    AnimatedTrapsmithsTools.magicOrTech = "MT"
    AnimatedTrapsmithsTools.category = "Hybrid"
    AnimatedTrapsmithsTools.level = 4
    AnimatedTrapsmithsTools.price = 2000
    AnimatedTrapsmithsTools.bulk = 0.1
    AnimatedTrapsmithsTools.content = """
    When you whisper a command word to these otherwise normal trapsmith’s tools (Starfinder Core Rulebook 221), they begin to move on their own. You can use these tools to arm explosives or disarm a trap at a distance of 10 feet, using your total skill bonus in the appropriate skill (though the circumstance bonus provided by the tools is decreased to +2 when used in this way).
    """
    
    let DrainGrenade = CompendiumItem(context: context)
    DrainGrenade.name = "Drain Grenade"
    DrainGrenade.magicOrTech = "MT"
    DrainGrenade.category = "Hybrid"
    DrainGrenade.level = 4
    DrainGrenade.price = 700
    DrainGrenade.bulk = 0.1
    DrainGrenade.content = """
    When a drain grenade explodes, each creature in a 10-foot-radius burst must succeed at a Reflex saving throw or all batteries in its possession lose 2d4 charges.
    """
    
    let EfficientBandolier = CompendiumItem(context: context)
    EfficientBandolier.name = "Efficient Bandolier"
    EfficientBandolier.magicOrTech = "MT"
    EfficientBandolier.category = "Hybrid"
    EfficientBandolier.level = 4
    EfficientBandolier.price = 2000
    EfficientBandolier.bulk = 0.1
    EfficientBandolier.content = """
    This bandolier fits over any Medium creature and contains five compartments, each corresponding to a specific type of weapon: melee weapons, small arms, longarms, heavy weapons, and explosives. Each compartment contains an extradimensional space designed to house up to 1 bulk of ammunition or batteries (for this purpose, 10 batteries or pieces of ammunition with no bulk count as having light bulk). The bandolier does not accumulate bulk even as its compartments are filled.
    
    Each efficient bandolier includes an advanced AI capable of controlling the bandolier’s robotic components to suit your needs. As a swift action, you can command an efficient bandolier to draw up to 1 bulk worth of batteries or ammunition, placing the items directly into one of your hands.
    """
    
    let GraviticModulator = CompendiumItem(context: context)
    GraviticModulator.name = "Gravitic Modulator"
    GraviticModulator.magicOrTech = "MT"
    GraviticModulator.category = "Hybrid"
    GraviticModulator.level = 4
    GraviticModulator.price = 2200
    GraviticModulator.bulk = 1
    GraviticModulator.content = """
    Gravitic-modulator technology was developed on Silselrik, derived from the selamids’ innate ability to withstand the stresses of changing gravity. Originally designed by the selamids for their own use when venturing away from the safety of their megadoplexes, these devices see common use among offworlders visiting Silselrik for commerce, research, or work in the diamond mines. While a selamid simply absorbs the device into its protoplasm, most humanoids wear the gravitic modulator as a backpack due to its size and weight.
    
    While wearing a gravitic modulator, you are shielded from some of the effects of rapidly changing gravity. You gain a +2 enhancement bonus to saving throws to resist gravity-based effects, such as a control gravity spell or a solarian’s black hole revelation. In addition, whenever you would take damage from extreme gravity, you take 5 less damage (minimum 0 damage).
    """
    
    let PsychicBooster = CompendiumItem(context: context)
    PsychicBooster.name = "Psychic Booster"
    PsychicBooster.magicOrTech = "MT"
    PsychicBooster.category = "Hybrid"
    PsychicBooster.level = 4
    PsychicBooster.price = 2000
    PsychicBooster.bulk = 0.1
    PsychicBooster.content = """
    This circlet, originally designed by lashuntas, fits over the wearer’s brow and wraps around the wearer’s antennae (if any). A psychic booster augments the power of your inherent psychic abilities. If you have telepathy, the range of your telepathy doubles. (For instance, if you have limited telepathy out to a range of 30 feet, the range increases from 30 feet to 60 feet.)
    """
    
    let AblativeInsulationMk1 = CompendiumItem(context: context)
    AblativeInsulationMk1.name = "Ablative Insulation, Mk 1"
    AblativeInsulationMk1.magicOrTech = "MT"
    AblativeInsulationMk1.category = "Hybrid"
    AblativeInsulationMk1.level = 4
    AblativeInsulationMk1.price = 350
    AblativeInsulationMk1.bulk = 0.1
    AblativeInsulationMk1.content = """
    Civilization on Verces exists on the thin line between fiery heat and frozen desolation. Verthani’s unique perspective on the elements led them to develop temperature-sensitive compounds with remarkable properties. Ablative insulation comes in a single-use canister containing enchanted fullerene-based powder. In a process that takes 1 minute, you can spray the contents on a creature to thoroughly coat it with the powder (though it automatically avoids orifices and sensory organs such as the eyes, mouth, and nose). The creature coated gains energy resistance to all energy types (which doesn’t stack with any other source of energy resistance), and the ablative insulation wears away as it prevents damage. The coating lasts for 1 hour if not ablated away sooner. Multiple coatings don’t offer any additional benefit (ignore all but the highest-level coating). Each canister contains enough material to fully cover a single Medium or smaller creature, with any excess wasted. When applied to a Large creature, the insulation provides only half the energy resistance (rounded down) and total points of absorption unless a second canister is used. If applied to a Huge or larger creature, the insulation is wasted without effect.
    
    Mk 1: The creature receives energy resistance 5 to all energy types. The coating lasts for 1 hour or until it prevents a total of 20 damage, whichever comes first.
    
    Mk 2: The creature receives energy resistance 10 to all energy types. The coating lasts for 1 hour or until it prevents a total of 40 damage, whichever comes first.
    
    Mk 3: The creature receives energy resistance 15 to all energy types. The coating lasts for 1 hour or until it prevents a total of 60 damage, whichever comes first.
    """
    
    let ComputerIdolMk1 = CompendiumItem(context: context)
    ComputerIdolMk1.name = "Computer Idol, Mk 1"
    ComputerIdolMk1.magicOrTech = "MT"
    ComputerIdolMk1.category = "Hybrid"
    ComputerIdolMk1.level = 4
    ComputerIdolMk1.price = 1850
    ComputerIdolMk1.bulk = 0.1
    ComputerIdolMk1.content = """
    A computer idol is a small statuette that creates a field of good luck during computer use. These figures vary wildly in shape, from religious figures to trivid mascots. When you fail a Computers check, the computer idol allows you to reroll and take the higher result. You must be within 5 feet of your computer idol and able to see it to benefit from it.
    
    A computer idol allows a number of rerolls per day based on its type. Mk 1 allows for one reroll, Mk 2: two rerolls, and Mk 3: three rerolls. Once you benefit from a given computer idol, you can’t benefit from a different one for 24 hours.
    """
    
    let CreatorCapsuleMk1 = CompendiumItem(context: context)
    CreatorCapsuleMk1.name = "Creator Capsule, Mk 1"
    CreatorCapsuleMk1.magicOrTech = "MT"
    CreatorCapsuleMk1.category = "Hybrid"
    CreatorCapsuleMk1.level = 4
    CreatorCapsuleMk1.price = 2000
    CreatorCapsuleMk1.bulk = 0.1
    CreatorCapsuleMk1.content = """
    Although it appears to be little more than an oblong case full of electronics, a creator capsule is a tiny 3D printer, with a programmable interface and a supply of UPBs stored in an extradimensional space. As a full action, you can connect the creator capsule wirelessly to your comm unit or computer, then command it to print one or more nonmagical personal or technological items. Printing an item requires you to have the plans on the connected device or an infosphere connection through which you can download the blueprints.
    
    A creator capsule takes 1 round to create an item, plus 1 round per bulk of the item above light. No individual printed item can have a bulk greater than 3. The creator capsule consumes itself during the printing process. Although the printer can be stopped as a move action, doing so renders the capsule useless for further printing. An item printed by the creator capsule is of average quality, and it has the statistics of an ordinary item of its type.
    
    Based on its type, a creator capsule has the following cost and level limits on items it creates.
    
    Mk 1: Combined cost up to 1,000 credits; item level no higher than 2
    
    Mk 2: Combined cost up to 4,500 credits; item level no higher than 6
    
    Mk 3: Combined cost up to 19,000 credits; item level no higher than 10
    """
    
    let PrescientLensesMk1 = CompendiumItem(context: context)
    PrescientLensesMk1.name = "Prescient Lenses, Mk 1"
    PrescientLensesMk1.magicOrTech = "MT"
    PrescientLensesMk1.category = "Hybrid"
    PrescientLensesMk1.level = 4
    PrescientLensesMk1.price = 2150
    PrescientLensesMk1.bulk = 0
    PrescientLensesMk1.content = """
    Prescient lenses blend quantum computing and divination magic to model, extrapolate, and display events happening in the next few seconds as translucent holograms. A pair of lenses has one charge, which is refreshed each day, and a creature can benefit from a single use of prescient lenses each day (with any subsequent attempt showing the same few seconds of time as the first daily use). Prescient lenses were originally as optical enhancements for the robotic anacites of Aballon and can be integrated into a robot for the listed price. Alternatively, they can be installed as a cybernetic eye augmentation for 1,000 additional credits.
    
    Mk 1: You can study the image in the lenses as a move action and gain a +1 insight bonus to a single attack roll, ability check, or skill check attempted before the start of your next turn. Attempting an attack roll or check expends the charge.
    
    Mk 2: These function as mk 1 prescient lenses, but you can instead roll the attack roll or check twice and take the better of the two results.
    
    Mk 3: These function as mk 2 prescient lenses, but as a reaction you can instead reroll a failed attack roll, ability check, or skill check.
    """
    
    let VitalSeedBeast = CompendiumItem(context: context)
    VitalSeedBeast.name = "Vital Seed, Beast"
    VitalSeedBeast.magicOrTech = "MT"
    VitalSeedBeast.category = "Hybrid"
    VitalSeedBeast.level = 4
    VitalSeedBeast.price = 650
    VitalSeedBeast.bulk = 0
    VitalSeedBeast.content = """
    Bioengineered to grow specific chemicals and cellular structures, even those that replicate animal or humanoid flesh, vital seeds come packed in tiny capsules of First World soil to make them grow at alarming speeds. The specific effect depends on the purpose for which the seed was bioengineered. Vital seeds can grow livestock and plants, replace missing organs, and perform many other useful tasks. Some common vital seeds are listed here.
    
    As a standard action, you can squeeze a beast vital seed and place it on the ground or throw it (range 20 feet). A Medium First World beast grows from the seed instantaneously as if you had just completed casting the 3rd-level version of the summon creature spell. Rather than obeying your commands, the creature is initially friendly toward you.
    """
    
    let DigitalHarrowDeck = CompendiumItem(context: context)
    DigitalHarrowDeck.name = "Digital Harrow Deck"
    DigitalHarrowDeck.magicOrTech = "MT"
    DigitalHarrowDeck.category = "Hybrid"
    DigitalHarrowDeck.level = 5
    DigitalHarrowDeck.price = 3500
    DigitalHarrowDeck.bulk = 0.1
    DigitalHarrowDeck.content = """
    A digital harrow deck is a modernization of an archaic means of fortune-telling whose roots trace back to vanished Golarion. Once per day, you can activate the deck as a full action. It projects holograms of 54 cards, which buzz around you. To begin the reading, you ask a question aloud to the harrow deck, causing all of the cards to come together as a deck; then, the deck uses hundreds of advanced pseudomystical calculations to deal a three-by-three array of cards for you, which it then uses to vocally interpret the circumstances surrounding your question. This works as the augury spell, with a spell level equal to the deck’s item level.
    
    Additionally, a mystic who has a digital harrow deck and who also knows augury can ignore the spell’s requirement that a Resolve Point be spent to cast it. A mystic can do this a number of times per day equal to his Wisdom bonus.
    
    A technomancer can designate a digital harrow deck as her spell cache. If she does, the deck’s AI integrates with her own consciousness, providing her with a +1 bonus to her caster level for divination spells and effects. Additionally, she can spend 1 Resolve Point as a swift action when she casts a technomancer spell to draw upon the algorithms that allow the deck to function, adding a +1 insight bonus to the spell’s save DC.
    """
    
    let MnemonicEditorMk1 = CompendiumItem(context: context)
    MnemonicEditorMk1.name = "Mnemonic Editor, Mk 1"
    MnemonicEditorMk1.magicOrTech = "MT"
    MnemonicEditorMk1.category = "Hybrid"
    MnemonicEditorMk1.level = 5
    MnemonicEditorMk1.price = 500
    MnemonicEditorMk1.bulk = 10
    MnemonicEditorMk1.content = """
    A mnemonic editor consists of a complex series of brain implant injectors, digital harrow deck autoreaders, illusion runes, and virtual-reality programs, all controlled by an enchanted analysis computer and attached to a mobile surgical bed. The network of magic and technology is capable of removing experiences from a patient strapped to the bed over the course of a single 24-hour session. Skills and knowledge can be excised, lessons unlearned and muscle memory altered. Memories are not lost entirely; the patient still recalls what it did during its life, whom it met, and how it felt about the moments it experienced, but the impact of those experiences is subtly altered. The device then creates a new set of experiences—clearly artificial but no less effective—by leaving impressions and implanting new knacks, muscle memory, reflexes, and skills.
    
    If you use a mnemonic editor, you can undo 2 character levels’ worth of decisions about which class levels you took, which feats you selected, how you applied any level-based increases to ability scores, how you assigned new skill ranks, and so on. All decisions you made as a result of advancing over the previous 2 character levels you gained are undone. You then make new selections, including new class levels, feats, skills, and the like, as if you had regained the 2 missing character levels. Go through the normal process of advancing your character through each of these 2 levels.
    
    Each mnemonic editor works only once—the strain on its technology and the consequences of rewriting your past to even this small degree cause it to break down into valueless junk after a single session. Additionally, the alterations made to you render it more difficult for such extraordinary procedures to be effective in the future. A mk 1 mnemonic editor cannot be used on you if you have already benefited from one in the past. However, it is possible to use a more advanced mk 2 model that functions in the same manner, even if you have already used a mk 1 mnemonic editor. Of course, you can only benefit from a mk 2 mnemonic editor once. There exist even more advanced mk 3 and mk 4 models, and each can be used on you once even after you have used a lower-level mnemonic editor, but they are so expensive that they are usually produced only upon request.
    
    Reworking Your Character
    
    A GM has the final decision on whether or not you may rework your character, changing decisions you previously made, and whether you are required to use a mnemonic editor to do so. A GM can decide that mnemonic editors are not available and cannot be crafted, created, or accessed through any means. A GM might also let a player to change a feat or class level if the player and GM agree it makes sense to do so, without resorting to such a device. The mnemonic editor provides an in-world explanation for mechanical changes made to a character. For example, it gives a character who started as an envoy but decided to study the ways of mysticism (and was seen casting spells) a plausible way to suddenly lose that spellcasting ability if the player decides that multicasting as an envoy/mystic isn’t as fun as expected.
    """
    
    let NullSpaceChamberMk1 = CompendiumItem(context: context)
    NullSpaceChamberMk1.name = "Null-Space Chamber, Mk 1"
    NullSpaceChamberMk1.magicOrTech = "MT"
    NullSpaceChamberMk1.category = "Hybrid"
    NullSpaceChamberMk1.level = 5
    NullSpaceChamberMk1.price = 3050
    NullSpaceChamberMk1.bulk = 0.1
    NullSpaceChamberMk1.content = """
    A null-space chamber is a circular device often designed to be strapped to an arm or backpack. When you press a button on the side, the device creates a circular extradimensional rift to a pocket space, the size of which is determined by the null-space chamber’s model. You can close it by pressing the button again, causing the entrance to the space to disappear. Anything stored within the space remains, however, traveling with the item. The null-space chamber can be opened and closed only from the outside.
    
    The only air within the pocket space is that which enters when you open the entrance. The device does not accumulate bulk even as its pocket space is filled. Each null-space chamber is associated with its own particular extradimensional space. Each null-space chamber can carry a set amount of bulk, after which it can no longer be closed (even if it has room left for more material). Spells and items that contain or create extradimensional spaces, such as other null-space chambers, do not function within a null-space chamber’s pocket dimension.
    
    A readout on a null-space chamber automatically catalogs all items within it, and if the chamber is open, you can call up any such item and have it placed in your hand as a full action.
    
    You can close up to 25 bulk in a Mk 1 device’s pocket space, a 3-foot cube. It can hold enough air for one Medium creature or two Small creatures for 10 minutes. Mk 2 devices' can close up to 50 bulk, a 6-foot cube. It can hold enough air for one Medium creature or two Small creatures for 2 hours. You can close up to 100 bulk in a Mk 3 device’s pocket space, a 9-foot cube. It can hold enough air for one Medium creature or two Small creatures for 2 days. You can close up to 200 bulk in a Mk 4 device’s pocket space, a 12-foot cube. It can hold enough air for one Medium creature or two Small creatures for 1 week.
    """
    
    let SoftwareImpTier3 = CompendiumItem(context: context)
    SoftwareImpTier3.name = "Software Imp, Tier 3"
    SoftwareImpTier3.magicOrTech = "MT"
    SoftwareImpTier3.category = "Hybrid"
    SoftwareImpTier3.level = 5
    SoftwareImpTier3.price = 2800
    SoftwareImpTier3.bulk = 0
    SoftwareImpTier3.content = """
    Whether or not it has attained true consciousness, a software imp is a perverse and illegal AI obnoxious enough that the question is academic. Software imps come on memory sticks so they remain isolated from your own systems. A software imp has a tier, and it is ineffective on any computer of a higher tier than its own.
    
    You must have access to a computer to install a software imp on it, and you can do so as a full action. The imp renders its memory stick unusable on the way out, leaving no way to conclusively determine what was once stored there. Once installed, the software imp becomes an artificial personality on its host computer. If the computer already has an artificial personality, the imp finds and overwrites it if possible. Faced with an artificial personality to which it does not have access, the imp lies in wait until it gains access to that personality in order to replace it.
    
    Initially, the imp can access information and modules that were accessible to you when you installed the imp. It can gain further access if a user unwittingly uses more access while the imp is installed. The imp can also fool users into giving it more access by attempting Bluff, Diplomacy, Intimidate, and Sense Motive checks with a bonus according to its tier.
    
    While acting as an artificial personality, the imp is as unhelpful as possible to anyone attempting to use the system. The software imp doesn’t ignore commands, but it interprets them in the worst way possible. It can misdirect, reveal unwanted information, obfuscate the truth, and otherwise aggravate and demoralize the user.
    
    Finding and removing a software imp requires a successful Computers check to hack the imp as if it were a computer of its tier. However, the imp copies and installs itself as redundantly as it can, based on its tier number, and it can revive itself so long as a single copy remains. A dismissal spell targeting a computer infested with software imps can remove the malicious AIs as if they were extraplanar creatures, each with a CR equal to its item level and a Will save bonus based on its tier.
    
    The tiers of software imps and the capabilities of each are as follows.
    
    Tier 1: Skill bonus +5; Will +4; no copies
    
    Tier 2: Skill bonus +8; Will +6; one copy
    
    Tier 3: Skill bonus +11; Will +8; one copy
    
    Tier 4: Skill bonus +14; Will +10; two copies
    
    Tier 5: Skill bonus +17; Will +12; two copies
    
    Tier 6: Skill bonus +20; Will +14; three copies
    
    Tier 7: Skill bonus +23; Will +16; three copies
    
    Tier 8: Skill bonus +26; Will +18; four copies
    
    Tier 9: Skill bonus +29; Will +20; four copies
    
    Tier 10: Skill bonus +32; Will +21; five copies
    """
    
    let UniversalSolventBasic = CompendiumItem(context: context)
    UniversalSolventBasic.name = "Universal Solvent, Basic"
    UniversalSolventBasic.magicOrTech = "MT"
    UniversalSolventBasic.category = "Hybrid"
    UniversalSolventBasic.level = 5
    UniversalSolventBasic.price = 500
    UniversalSolventBasic.bulk = 0
    UniversalSolventBasic.content = """
    Sold in enchanted vials that hold one application each, universal solvent is a magical chemical mixture that can dissolve almost every known substance in the galaxy. (Universal solvent can’t damage creatures.) As a standard action, you can splash universal solvent on an object. If a creature holds or wears the item, you must hit with a melee attack against that creature’s EAC. One application of solvent can cover five objects of light bulk, one object of 1 bulk, or a 5-foot area of a surface. When the solvent’s vial is emptied, it leaves a clean, empty vial with no residue.
    
    Universal solvent dissolves adhesives instantaneously, including the strands released by stickybomb grenades, provided the adhesive is of an item level equal to or lower than the solvent. The solvent also softens objects it coats, suppressing hardness according to the solvent’s type. As a full action, a creature can wipe off an application of universal solvent, ending the solvent’s effect on the cleaned object (but not the object used to clean it).
    
    If an object is exposed to universal solvent for 1 minute, the object takes an amount of damage equal to twice the amount by which the solvent’s hardness suppression exceeded the object’s actual hardness. The solvent then becomes inert and turns to dust, and the object returns to its normal hardness.
    
    The basic type has hardness suppression 10. The concentrated, forte, and regia types have hardness suppression 20, 30 , and 40 respectively.
    """
    
    let PhaseDetector = CompendiumItem(context: context)
    PhaseDetector.name = "Phase Detector"
    PhaseDetector.magicOrTech = "MT"
    PhaseDetector.category = "Hybrid"
    PhaseDetector.level = 6
    PhaseDetector.price = 4000
    PhaseDetector.bulk = 0.1
    PhaseDetector.content = """
    A small circular device that usually resembles a pocket watch, a phase detector can also be a module attached to a personal comm unit. If a creature or object teleports or changes planes, such as by being summoned, within 120 feet of you, the phase detector alerts you to the event and informs you of its distance and direction relative to you. A phase detector doesn’t specify the type of event it detected, and it doesn’t pinpoint the event’s location.
    """
    
    let TactokinesisGloves = CompendiumItem(context: context)
    TactokinesisGloves.name = "Tactokinesis Gloves"
    TactokinesisGloves.magicOrTech = "MT"
    TactokinesisGloves.category = "Hybrid"
    TactokinesisGloves.level = 6
    TactokinesisGloves.price = 4450
    TactokinesisGloves.bulk = 0.1
    TactokinesisGloves.content = """
    Tactokinesis gloves use an array of magical and magnetic sensors to extend and amplify the wearer’s sense of touch. They were first developed in the Diaspora to allow miners to locate veins of metal by touch through the material of their space suits. It soon found applications for thieves and explorers alike. Using the gloves, you can perceive and manipulate objects close at hand without actually touching them, and you can even sense details hidden just below the surface.
    
    While wearing a pair of tactokinesis gloves, you can use the Perception and Physical Science skills to examine a metal or technological construct or object within your reach, whether or not you can perceive the object with other senses. In addition, the gloves provide a +2 circumstance bonus to Engineering checks to assess stability or disable a device, and they count as necessary tools for such purposes. You can attempt such checks without directly touching the target, as well as use similar abilities that manipulate technology by touch, such as the overload mechanic class feature. In a zero-gravity environment, you can use the limited telekinesis provided by the gloves to pick up and move objects of up to 1 bulk without actually touching them. As a standard action, you can use the gloves to deliver a disruptive pulse to an android, drone, robot, or creature with the technological subtype. If the creature fails a Will saving throw (DC = 13 + your Dexterity modifier), it is dazed for 1 round. Once a creature has attempted a saving throw against this ability (regardless of the result), it is immune to this ability for 24 hours.
    
    The range of this telekinesis is limited to your reach, as you must be almost touching the target to manipulate it. Tactokinesis gloves do not function through a force field.
    """
    
    let HoldingGlovesMk1 = CompendiumItem(context: context)
    HoldingGlovesMk1.name = "Holding Gloves, Mk 1"
    HoldingGlovesMk1.magicOrTech = "MT"
    HoldingGlovesMk1.category = "Hybrid"
    HoldingGlovesMk1.level = 6
    HoldingGlovesMk1.price = 4250
    HoldingGlovesMk1.bulk = 0.1
    HoldingGlovesMk1.content = """
    Holding gloves have copper mesh on the fingertips and forming a concavity on the palm. The gloves count as a worn magic item unless you install them in armor, taking up one upgrade slot. Once per day as a standard action while wearing the gloves, you can use their embedded spell as a spell-like ability. If you hit with a melee attack (including an unarmed strike), you can use the spell from the gloves as a reaction, targeting the same creature the attack hit, without provoking an attack of opportunity. After the first time you cast the spell, you can spend 1 Resolve Point to cast it again, up to two more times on a given day. Once you use a given pair of holding gloves, you can’t use a different pair for 24 hours.
    
    The spell imbued in holding gloves depends on their model, as follows.
    
    Mk 1: Hold person (save DC = 12 + your key ability score modifier; caster level 5th)
    
    Mk 2: Hold monster (save DC = 14 + your key ability score modifier; caster level 10th)
    """
    
    let MetalNitroGold = CompendiumItem(context: context)
    MetalNitroGold.name = "Metal Nitro, Gold"
    MetalNitroGold.magicOrTech = "MT"
    MetalNitroGold.category = "Hybrid"
    MetalNitroGold.level = 6
    MetalNitroGold.price = 675
    MetalNitroGold.bulk = 0
    MetalNitroGold.content = """
    Introduced into a vehicle’s engine through the vehicle’s control panel, metal nitro comes in magical capsules of soft metal. Unlike technological racing nitrous, which releases more oxygen into an engine’s system to help the fuel burn, metal nitro infuses the vehicle with a burst of magical power.
    
    As a move action, you can crush a capsule of metal nitro into a vehicle’s control panel, which increases the vehicle’s drive speed and full speed for a total of 10 rounds. If the pilot fails to take the race action within 1 round of activating the metal nitro or fails the Piloting check to race from a dead stop, the metal nitro forces the vehicle to move its full speed immediately in an uncontrolled manner. If the Pilot fails the check to race, or the nitro activates in an uncontrolled manner, the pilot and any passengers take bludgeoning damage according to the type of metal nitro.
    
    Metal nitro can be safely used only on a vehicle that has an equal or higher item level. If you use metal nitro of an item level higher than the target vehicle’s, the vehicle takes damage after the pilot races or the vehicle first moves because of the nitro. The amount of damage varies according to the type of metal nitro. The types of metal nitro and their speed increase, as well as potential passenger and vehicle damage, are as follows.
    
    Silver: Speed × 1-1/2; damage 1d6
    
    Gold: Speed × 2; damage 3d6
    
    Platinum: Speed × 2-1/2; damage 6d6
    
    Star: Speed × 3; damage 10d6
    """
    
    let ScramblerGllovesMk1 = CompendiumItem(context: context)
    ScramblerGllovesMk1.name = "Scrambler Gloves, Mk 1"
    ScramblerGllovesMk1.magicOrTech = "MT"
    ScramblerGllovesMk1.category = "Hybrid"
    ScramblerGllovesMk1.level = 6
    ScramblerGllovesMk1.price = 4500
    ScramblerGllovesMk1.bulk = 0.1
    ScramblerGllovesMk1.content = """
    Missing Description!
    """
    
    let MiGoHollowskin = CompendiumItem(context: context)
    MiGoHollowskin.name = "Mi-Go Hollowskin"
    MiGoHollowskin.magicOrTech = "MT"
    MiGoHollowskin.category = "Hybrid"
    MiGoHollowskin.level = 7
    MiGoHollowskin.price = 5500
    MiGoHollowskin.bulk = 0.1
    MiGoHollowskin.content = """
    Mi-go use the body parts of humanoid creatures— predominantly the hollowed head, severed hands, and parts of the neural and circulatory tissue—to create mi-go hollowskins. Fungal mycelia connect and strengthen the other portions. Mi-go wear these macabre devices to appear to be the individual from which the humanoid tissue comes. You can wear a mi-go hollowskin only if you are Medium or Small. While wearing the skin, you can activate it as a standard action to appear to be the specific person the device was made from, using Mysticism as if it were Disguise for your check. The DC of this check doesn’t increase for changes in features, size, race, or creature type except against Perception checks that involve physical examination of body parts other than the hands and head. This altered appearance lasts for 1 hour, after which the hollowskin can be activated again.
    """
    
    let Motospheres = CompendiumItem(context: context)
    Motospheres.name = "Motospheres (pack of 4)"
    Motospheres.magicOrTech = "MT"
    Motospheres.category = "Hybrid"
    Motospheres.level = 7
    Motospheres.price = 5600
    Motospheres.bulk = 0.1
    Motospheres.content = """
    Sold in blister packs of four (the price and bulk listed are for a set of four), motospheres are metal orbs that are each the size of a grenade and traced with glyphs. As a standard action, you can deploy one to four motospheres from the same set; each rolls into its own square within 15 feet of you and instantly transforms into a vehicle similar to a basic enercycle with the changes noted below. If a creature or object occupies a square a vehicle formed from a motosphere would occupy, the motosphere doesn’t transform. You choose each vehicle’s initial heading as it transforms. After being deployed, a vehicle turns back into a motosphere after 1 hour, or as a move action you can turn it back into a motosphere by entering a series of commands on the vehicle’s controls. A single motosphere takes 24 hours to recharge before it can be used again.
    
    A vehicle formed out of a motosphere has a hardness of 7, and its hover jets allow it travel over both land and water (though not underwater). The vehicle has 14 Hit Points and becomes broken when it is reduced to 7 Hit Points or fewer. A vehicle that is reduced to 0 Hit Points turns back into a motosphere and can’t be used until it is repaired (treat it as if it were broken).
    
    Motospheres can be sold back only in their original pack of four for the normal 10% of the set’s purchase price; a set that is missing even one motosphere (or containing one that is broken) can be sold back for 2% of the set’s purchase price.
    """
    
    let AnimisticToolsMk2 = CompendiumItem(context: context)
    AnimisticToolsMk2.name = "Animistic Tools, Mk 2"
    AnimisticToolsMk2.magicOrTech = "MT"
    AnimisticToolsMk2.category = "Hybrid"
    AnimisticToolsMk2.level = 7
    AnimisticToolsMk2.price = 5500
    AnimisticToolsMk2.bulk = 0.1
    AnimisticToolsMk2.content = """
    People often have superstitions regarding whether objects have a spirit or intelligence, and animistic tools were made with such beliefs in mind. Each of these tool kits has the power to communicate a user’s intentions to inanimate objects. When you use animistic tools with the appropriate skill and you fail a check, you can use the tool’s magic to reroll the check and take the higher result. In addition, as a move action, you can tap or bang a tool from the kit on a broken object, causing the object to ignore the penalties of being broken for a time. An item can benefit from animistic tools in this way only once per day, causing some engineers to joke that no one likes percussive maintenance.
    
    The model of the tools determines the number of rerolls per day and the time an item ignores the broken condition. Once you use a set of animistic tools, you can’t benefit from a different set for 24 hours.
    
    Mk 1: One reroll; ignore the broken condition for 1 minute
    
    Mk 2: Two rerolls; ignore the broken condition for 10 minutes
    
    Mk 3: Three rerolls; ignore the broken condition for 1 hour
    """
    
    let RetrievalCharmsMk1 = CompendiumItem(context: context)
    RetrievalCharmsMk1.name = "Retrieval Charms, Mk 1"
    RetrievalCharmsMk1.magicOrTech = "MT"
    RetrievalCharmsMk1.category = "Hybrid"
    RetrievalCharmsMk1.level = 7
    RetrievalCharmsMk1.price = 6500
    RetrievalCharmsMk1.bulk = 0.1
    RetrievalCharmsMk1.content = """
    Most retrieval charms are bejeweled decorations, although some are knickknacks that depict popular idols or fictional characters. These items come in a pair, each charm attuned to the other with magically enhanced quantum entanglement. It takes 1 minute to attach a charm to an object, and this object can have no more than 3 bulk. As a move action, you can activate the second charm while holding it, teleporting the first charm and its attached object to you. If you do so, the object instantly appears in hand if you have enough hands free to grasp it. Otherwise, it appears in your space. The attached object teleports to you even if it is worn or carried by another creature. Each set of retrieval charms can be used one time per day. The charms’ type limits the scale of the teleportation, as follows.
    
    Mk 1 charms range is 100 miles. Mk 2 charms' limit is anywhere on the same planet. Mk 3 charms allow teleportation anywhere on the same plane while Mk 4 charms function even on othe planes
    """
    
    let SoftwareImpTier4 = CompendiumItem(context: context)
    SoftwareImpTier4.name = "Software Imp, Tier 4"
    SoftwareImpTier4.magicOrTech = "MT"
    SoftwareImpTier4.category = "Hybrid"
    SoftwareImpTier4.level = 7
    SoftwareImpTier4.price = 6000
    SoftwareImpTier4.bulk = 0
    SoftwareImpTier4.content = """
    Whether or not it has attained true consciousness, a software imp is a perverse and illegal AI obnoxious enough that the question is academic. Software imps come on memory sticks so they remain isolated from your own systems. A software imp has a tier, and it is ineffective on any computer of a higher tier than its own.
    
    You must have access to a computer to install a software imp on it, and you can do so as a full action. The imp renders its memory stick unusable on the way out, leaving no way to conclusively determine what was once stored there. Once installed, the software imp becomes an artificial personality on its host computer. If the computer already has an artificial personality, the imp finds and overwrites it if possible. Faced with an artificial personality to which it does not have access, the imp lies in wait until it gains access to that personality in order to replace it.
    
    Initially, the imp can access information and modules that were accessible to you when you installed the imp. It can gain further access if a user unwittingly uses more access while the imp is installed. The imp can also fool users into giving it more access by attempting Bluff, Diplomacy, Intimidate, and Sense Motive checks with a bonus according to its tier.
    
    While acting as an artificial personality, the imp is as unhelpful as possible to anyone attempting to use the system. The software imp doesn’t ignore commands, but it interprets them in the worst way possible. It can misdirect, reveal unwanted information, obfuscate the truth, and otherwise aggravate and demoralize the user.
    
    Finding and removing a software imp requires a successful Computers check to hack the imp as if it were a computer of its tier. However, the imp copies and installs itself as redundantly as it can, based on its tier number, and it can revive itself so long as a single copy remains. A dismissal spell targeting a computer infested with software imps can remove the malicious AIs as if they were extraplanar creatures, each with a CR equal to its item level and a Will save bonus based on its tier.
    
    The tiers of software imps and the capabilities of each are as follows.
    
    Tier 1: Skill bonus +5; Will +4; no copies
    
    Tier 2: Skill bonus +8; Will +6; one copy
    
    Tier 3: Skill bonus +11; Will +8; one copy
    
    Tier 4: Skill bonus +14; Will +10; two copies
    
    Tier 5: Skill bonus +17; Will +12; two copies
    
    Tier 6: Skill bonus +20; Will +14; three copies
    
    Tier 7: Skill bonus +23; Will +16; three copies
    
    Tier 8: Skill bonus +26; Will +18; four copies
    
    Tier 9: Skill bonus +29; Will +20; four copies
    
    Tier 10: Skill bonus +32; Will +21; five copies
    """
    
    let DimensionalFetters = CompendiumItem(context: context)
    DimensionalFetters.name = "Dimensional Fetters"
    DimensionalFetters.magicOrTech = "MT"
    DimensionalFetters.category = "Hybrid"
    DimensionalFetters.level = 8
    DimensionalFetters.price = 9200
    DimensionalFetters.bulk = 1
    DimensionalFetters.content = """
    These manacles (Core Rulebook 221) are crafted from a special hardened ceramic etched with mystic symbols. They are opened with a security code. A creature restrained by dimensional fetters that attempts to use a teleportation effect or spell fails unless it succeeds at a DC 30 Will saving throw.
    """
    
    let MemoryCrypt = CompendiumItem(context: context)
    MemoryCrypt.name = "Memory Crypt"
    MemoryCrypt.magicOrTech = "MT"
    MemoryCrypt.category = "Hybrid"
    MemoryCrypt.level = 8
    MemoryCrypt.price = 9500
    MemoryCrypt.bulk = 0
    MemoryCrypt.content = """
    An accessory of bone-like plastic worn on the body near the brain, a memory crypt uses magical microcircuitry to keep an ongoing record of your experiences and monitor your vital signs. A memory crypt must be worn for 24 hours to adapt to your neurophysiology. During this time, it records nothing, but thereafter, it records your memories and experiences. After the item adapts to you, you can set a passcode to prevent those who don’t know the word or phrase you set from activating the device. A hacker can bypass the password with a successful DC 30 Computers check.
    
    If you remove the memory crypt or die, the item stops recording, though it preserves the record of your personality and vitals up to that point. Someone who has the memory crypt can activate it as a standard action. Doing so displays a hologram of you in a form called a memory ghost. This “ghost” can answer up to six questions. Its knowledge is limited to what you knew up to the point the record in the memory crypt ends, including the languages you spoke.
    
    Your ghost answers and converses with creatures as you would, with the attitudes you hold. If you trust the creature asking questions, the memory ghost answers truthfully and helpfully. Otherwise, the ghost can refuse to answer questions or attempt to deceive the questioner using your Bluff skill. A creature can attempt a Computers check to hack the memory crypt to erase it or force your memory ghost to answer questions truthfully. The DC to erase the memory crypt is 20 + your Bluff bonus or your level or CR, whichever is higher. The DC to force your memory ghost to answer is 5 higher. If a memory crypt is erased before being used to question the memory ghost it contains, it can be reused. Additionally, a memory crypt that contains an intact memory ghost can be used as the representation required for casting raise dead or the monument required for reincarnate. If used in this way to successfully cast either spell, the memory crypt is consumed. Once a memory crypt is activated, the memory ghost remains for 10 minutes or until it answers six questions. Magic powers the circuitry to replicate brain patterns. These patterns are disrupted if another power source is patched into the item in an attempt to prolong the memory ghost. When the duration ends, the memory crypt can be activated to project the memory ghost’s image, but the memory ghost is gone and can no longer interact, answer questions, or serve as the focus for raise dead or restoration. A memory crypt in this state can’t be reused.
    """
    
    let MiGoBrainCylinder = CompendiumItem(context: context)
    MiGoBrainCylinder.name = "Mi-Go Brain Cylinder"
    MiGoBrainCylinder.magicOrTech = "MT"
    MiGoBrainCylinder.category = "Hybrid"
    MiGoBrainCylinder.level = 8
    MiGoBrainCylinder.price = 10000
    MiGoBrainCylinder.bulk = 1
    MiGoBrainCylinder.content = """
    The mi-go brain cylinder is part of the most infamous mi-go surgical procedure, in which a creature’s brain is extracted and made an organic memory bank. The biotech cylinder suspends an extracted brain in a matrix of biotechnological and magical slime that sustains the tissue and suppresses any mental powers the brain has. Inside the cylinder, a brain can survive indefinitely, locked away in its own thoughts. Attachments can allow the brain to see, hear, and speak; migo often attach such gear to access the brain’s information.
    
    Once a mi-go brain cylinder has a speech attachment, it can converse. It has all its skills and memories, but nothing about the cylinder compels the brain to answer questions or to do so truthfully. Most enslaved brains have been conditioned via pain and isolation to be compliant to questioning, but those within newly created cylinders might need coaxing to cooperate. A brain is susceptible to any spell or power it was susceptible to before it became disembodied. Some mi-go have powers that allow them to encourage or force a brain’s compliance or to telepathically probe a brain for desired data.
    """
    
    let VampiricCharger = CompendiumItem(context: context)
    VampiricCharger.name = "Vampiric Charger"
    VampiricCharger.magicOrTech = "MT"
    VampiricCharger.category = "Hybrid"
    VampiricCharger.level = 8
    VampiricCharger.price = 10000
    VampiricCharger.bulk = 0.1
    VampiricCharger.content = """
    Carved to resemble a grotesque, bestial head, a vampiric charger has a wide maw with a pair of sharpened fangs serving as prongs. The charger converts life force into magical power and then into electricity.
    
    As a move action, you can insert a battery into the vampiric charger, and as another move action, you can stab the charger's fangs into a helpless or willing creature. Your target loses 1d4+1 Hit Points, which can’t be negated or mitigated in any way without causing the charger to fail. Every round thereafter, the creature takes 1 Constitution damage, and the battery attached to the charger regains 10 charges (up to its maximum). Once attached to a creature, the vampiric charger continues to inflict Constitution damage until it is removed or the creature dies, even if the battery is fully charged. A creature can remove the charger as a move action.
    
    Each time a battery is recharged in this way, it has a 20% chance to become corrupted. If the creature the charger is attached to dies while a battery is charging, that battery immediately becomes corrupted. Only a vampiric charger can recharge such a corrupted battery.
    """
    
    let AblativeInsulationMk2 = CompendiumItem(context: context)
    AblativeInsulationMk2.name = "Ablative Insulation, Mk 2"
    AblativeInsulationMk2.magicOrTech = "MT"
    AblativeInsulationMk2.category = "Hybrid"
    AblativeInsulationMk2.level = 8
    AblativeInsulationMk2.price = 1500
    AblativeInsulationMk2.bulk = 0.1
    AblativeInsulationMk2.content = """
    Civilization on Verces exists on the thin line between fiery heat and frozen desolation. Verthani’s unique perspective on the elements led them to develop temperature-sensitive compounds with remarkable properties. Ablative insulation comes in a single-use canister containing enchanted fullerene-based powder. In a process that takes 1 minute, you can spray the contents on a creature to thoroughly coat it with the powder (though it automatically avoids orifices and sensory organs such as the eyes, mouth, and nose). The creature coated gains energy resistance to all energy types (which doesn’t stack with any other source of energy resistance), and the ablative insulation wears away as it prevents damage. The coating lasts for 1 hour if not ablated away sooner. Multiple coatings don’t offer any additional benefit (ignore all but the highest-level coating). Each canister contains enough material to fully cover a single Medium or smaller creature, with any excess wasted. When applied to a Large creature, the insulation provides only half the energy resistance (rounded down) and total points of absorption unless a second canister is used. If applied to a Huge or larger creature, the insulation is wasted without effect.
    
    Mk 1: The creature receives energy resistance 5 to all energy types. The coating lasts for 1 hour or until it prevents a total of 20 damage, whichever comes first.
    
    Mk 2: The creature receives energy resistance 10 to all energy types. The coating lasts for 1 hour or until it prevents a total of 40 damage, whichever comes first.
    
    Mk 3: The creature receives energy resistance 15 to all energy types. The coating lasts for 1 hour or until it prevents a total of 60 damage, whichever comes first.
    """
    
    let ComputerIdolMk2 = CompendiumItem(context: context)
    ComputerIdolMk2.name = "Computer Idol, Mk 2"
    ComputerIdolMk2.magicOrTech = "MT"
    ComputerIdolMk2.category = "Hybrid"
    ComputerIdolMk2.level = 8
    ComputerIdolMk2.price = 8500
    ComputerIdolMk2.bulk = 0.1
    ComputerIdolMk2.content = """
    A computer idol is a small statuette that creates a field of good luck during computer use. These figures vary wildly in shape, from religious figures to trivid mascots. When you fail a Computers check, the computer idol allows you to reroll and take the higher result. You must be within 5 feet of your computer idol and able to see it to benefit from it.
    
    A computer idol allows a number of rerolls per day based on its type. Mk 1 allows for one reroll, Mk 2: two rerolls, and Mk 3: three rerolls. Once you benefit from a given computer idol, you can’t benefit from a different one for 24 hours.
    """
    
    let CreatorCapsuleMk2 = CompendiumItem(context: context)
    CreatorCapsuleMk2.name = "Creator Capsule, Mk 2"
    CreatorCapsuleMk2.magicOrTech = "MT"
    CreatorCapsuleMk2.category = "Hybrid"
    CreatorCapsuleMk2.level = 8
    CreatorCapsuleMk2.price = 9000
    CreatorCapsuleMk2.bulk = 0.1
    CreatorCapsuleMk2.content = """
    Although it appears to be little more than an oblong case full of electronics, a creator capsule is a tiny 3D printer, with a programmable interface and a supply of UPBs stored in an extradimensional space. As a full action, you can connect the creator capsule wirelessly to your comm unit or computer, then command it to print one or more nonmagical personal or technological items. Printing an item requires you to have the plans on the connected device or an infosphere connection through which you can download the blueprints.
    
    A creator capsule takes 1 round to create an item, plus 1 round per bulk of the item above light. No individual printed item can have a bulk greater than 3. The creator capsule consumes itself during the printing process. Although the printer can be stopped as a move action, doing so renders the capsule useless for further printing. An item printed by the creator capsule is of average quality, and it has the statistics of an ordinary item of its type.
    
    Based on its type, a creator capsule has the following cost and level limits on items it creates.
    
    Mk 1: Combined cost up to 1,000 credits; item level no higher than 2
    
    Mk 2: Combined cost up to 4,500 credits; item level no higher than 6
    
    Mk 3: Combined cost up to 19,000 credits; item level no higher than 10
    """
    
    let KineticCoverterMk1 = CompendiumItem(context: context)
    KineticCoverterMk1.name = "Kinetic Coverter, Mk 1"
    KineticCoverterMk1.magicOrTech = "MT"
    KineticCoverterMk1.category = "Hybrid"
    KineticCoverterMk1.level = 8
    KineticCoverterMk1.price = 10500
    KineticCoverterMk1.bulk = 0.1
    KineticCoverterMk1.content = """
    """
    
    let MindlinkCircletMk2 = CompendiumItem(context: context)
    MindlinkCircletMk2.name = "Mindlink Circlet, Mk 2"
    MindlinkCircletMk2.magicOrTech = "MT"
    MindlinkCircletMk2.category = "Hybrid"
    MindlinkCircletMk2.level = 8
    MindlinkCircletMk2.price = 11000
    MindlinkCircletMk2.bulk = 0.1
    MindlinkCircletMk2.content = """
    Although items with powers similar to those of the mindlink circlet have existed in the Pact Worlds for thousands of years, the technological components of the this useful item were an innovation that made its powers readily available. The effects of a mindlink circlet depend upon its model, as described below.
    
    You can telepathically communicate with any creatures within 100 feet with which you share a language. This otherwise functions like a shirren’s limited telepathy racial trait.
    """
    
    let ShadowstaffStandard = CompendiumItem(context: context)
    ShadowstaffStandard.name = "Shadowstaff, Standard"
    ShadowstaffStandard.magicOrTech = "MT"
    ShadowstaffStandard.category = "Hybrid"
    ShadowstaffStandard.level = 8
    ShadowstaffStandard.price = 10000
    ShadowstaffStandard.bulk = 1
    ShadowstaffStandard.content = """
    """
    
    let EntropyGloves = CompendiumItem(context: context)
    EntropyGloves.name = "Entropy Gloves"
    EntropyGloves.magicOrTech = "MT"
    EntropyGloves.category = "Hybrid"
    EntropyGloves.level = 9
    EntropyGloves.price = 13000
    EntropyGloves.bulk = 0.1
    EntropyGloves.content = """
    These dark gloves have silver claws and a clear hemisphere embedded on the back of the hand that contains a writhing ball of negative energy. The gloves count as a worn magic item unless you install them in armor, taking up one upgrade slot.
    
    Once per day as a standard action while wearing the gloves, you can use entropic grasp as a spell-like ability (save DC = 14 + your key ability score modifier; caster level 9th). If you hit with a melee attack (including an unarmed strike), you can use the spell from the gloves as a reaction, targeting the same creature the attack hit, without provoking an attack of opportunity. After the first time you cast the spell, you can spend 1 Resolve Point to cast it again, up to two more times on a given day. Once you use a given pair of entropy gloves, you can’t use a different pair for 24 hours.
    """
    
    let TelekineticGloves = CompendiumItem(context: context)
    TelekineticGloves.name = "Telekinetic Gloves"
    TelekineticGloves.magicOrTech = "MT"
    TelekineticGloves.category = "Hybrid"
    TelekineticGloves.level = 9
    TelekineticGloves.price = 135000
    TelekineticGloves.bulk = 0.1
    TelekineticGloves.content = """
    Thin leather gloves that have delicate steel wires running through them, telekinetic gloves allow you to manipulate objects at a distance. The gloves count as a worn magic item unless you install them in armor, taking up one upgrade slot.
    
    While you wear the gloves, you can use psychokinetic hand as a spell-like ability at will with a range of up to 30 feet. Once per day, the glove can be used to either use psychokinetic strangulation as a spell-like ability (range 30 feet, duration 2 rounds, save DC = 13 + your key ability score modifier) or attempt to disarm or trip a target within 30 feet of you. To attempt a combat maneuver, roll 1d20 + your level + your key ability score modifier against your target’s KAC + 8. If you succeed at the disarm maneuver, you can bring the object to you, catching it in a hand you have free or allowing it to land in your space. After you use the gloves this way for the first time in a day, you can spend 1 Resolve Point to do so again, up to two more times a day. Once you use a given pair of telekinetic gloves, you can’t use a different pair for 24 hours.
    """
    
    let CaptiveStarAmuletRedDwarf = CompendiumItem(context: context)
    CaptiveStarAmuletRedDwarf.name = "Captive-Star Amulet, Red Dwarf"
    CaptiveStarAmuletRedDwarf.magicOrTech = "MT"
    CaptiveStarAmuletRedDwarf.category = "Hybrid"
    CaptiveStarAmuletRedDwarf.level = 9
    CaptiveStarAmuletRedDwarf.price = 14500
    CaptiveStarAmuletRedDwarf.bulk = 0.1
    CaptiveStarAmuletRedDwarf.content = """
    The pendant of a captive-star amulet is a miniature containment field that holds magical energy compressed to resemble a tiny star. While you wear the amulet, if a spell includes you as a target, the necklace allows you to use the counter option of dispel magic against that spell as a reaction. You must attempt a dispel check (1d20 + half the amulet’s item level + your key ability score modifier). A captive-star amulet works once per day, but you can spend 1 Resolve Point to activate it a second time during that same day. Once you use a given captive-star amulet, you can’t use a different one for 24 hours.
    """
    
    let NullSpaceChamberMk2 = CompendiumItem(context: context)
    NullSpaceChamberMk2.name = "Null-Space Chamber, Mk 2"
    NullSpaceChamberMk2.magicOrTech = "MT"
    NullSpaceChamberMk2.category = "Hybrid"
    NullSpaceChamberMk2.level = 9
    NullSpaceChamberMk2.price = 12250
    NullSpaceChamberMk2.bulk = 0.1
    NullSpaceChamberMk2.content = """
    A null-space chamber is a circular device often designed to be strapped to an arm or backpack. When you press a button on the side, the device creates a circular extradimensional rift to a pocket space, the size of which is determined by the null-space chamber’s model. You can close it by pressing the button again, causing the entrance to the space to disappear. Anything stored within the space remains, however, traveling with the item. The null-space chamber can be opened and closed only from the outside.
    
    The only air within the pocket space is that which enters when you open the entrance. The device does not accumulate bulk even as its pocket space is filled. Each null-space chamber is associated with its own particular extradimensional space. Each null-space chamber can carry a set amount of bulk, after which it can no longer be closed (even if it has room left for more material). Spells and items that contain or create extradimensional spaces, such as other null-space chambers, do not function within a null-space chamber’s pocket dimension.
    
    A readout on a null-space chamber automatically catalogs all items within it, and if the chamber is open, you can call up any such item and have it placed in your hand as a full action.
    
    You can close up to 25 bulk in a Mk 1 device’s pocket space, a 3-foot cube. It can hold enough air for one Medium creature or two Small creatures for 10 minutes. Mk 2 devices' can close up to 50 bulk, a 6-foot cube. It can hold enough air for one Medium creature or two Small creatures for 2 hours. You can close up to 100 bulk in a Mk 3 device’s pocket space, a 9-foot cube. It can hold enough air for one Medium creature or two Small creatures for 2 days. You can close up to 200 bulk in a Mk 4 device’s pocket space, a 12-foot cube. It can hold enough air for one Medium creature or two Small creatures for 1 week.
    """
    
    let PrescientLensesMk2 = CompendiumItem(context: context)
    PrescientLensesMk2.name = "Prescient Lenses, Mk 2"
    PrescientLensesMk2.magicOrTech = "MT"
    PrescientLensesMk2.category = "Hybrid"
    PrescientLensesMk2.level = 9
    PrescientLensesMk2.price = 13900
    PrescientLensesMk2.bulk = 0
    PrescientLensesMk2.content = """
    Prescient lenses blend quantum computing and divination magic to model, extrapolate, and display events happening in the next few seconds as translucent holograms. A pair of lenses has one charge, which is refreshed each day, and a creature can benefit from a single use of prescient lenses each day (with any subsequent attempt showing the same few seconds of time as the first daily use). Prescient lenses were originally as optical enhancements for the robotic anacites of Aballon and can be integrated into a robot for the listed price. Alternatively, they can be installed as a cybernetic eye augmentation for 1,000 additional credits.
    
    Mk 1: You can study the image in the lenses as a move action and gain a +1 insight bonus to a single attack roll, ability check, or skill check attempted before the start of your next turn. Attempting an attack roll or check expends the charge.
    
    Mk 2: These function as mk 1 prescient lenses, but you can instead roll the attack roll or check twice and take the better of the two results.
    
    Mk 3: These function as mk 2 prescient lenses, but as a reaction you can instead reroll a failed attack roll, ability check, or skill check.
    """
    
    let SoftwareImpTier5 = CompendiumItem(context: context)
    SoftwareImpTier5.name = "Software Imp, Tier 5"
    SoftwareImpTier5.magicOrTech = "MT"
    SoftwareImpTier5.category = "Hybrid"
    SoftwareImpTier5.level = 9
    SoftwareImpTier5.price = 12500
    SoftwareImpTier5.bulk = 0
    SoftwareImpTier5.content = """
    Whether or not it has attained true consciousness, a software imp is a perverse and illegal AI obnoxious enough that the question is academic. Software imps come on memory sticks so they remain isolated from your own systems. A software imp has a tier, and it is ineffective on any computer of a higher tier than its own.
    
    You must have access to a computer to install a software imp on it, and you can do so as a full action. The imp renders its memory stick unusable on the way out, leaving no way to conclusively determine what was once stored there. Once installed, the software imp becomes an artificial personality on its host computer. If the computer already has an artificial personality, the imp finds and overwrites it if possible. Faced with an artificial personality to which it does not have access, the imp lies in wait until it gains access to that personality in order to replace it.
    
    Initially, the imp can access information and modules that were accessible to you when you installed the imp. It can gain further access if a user unwittingly uses more access while the imp is installed. The imp can also fool users into giving it more access by attempting Bluff, Diplomacy, Intimidate, and Sense Motive checks with a bonus according to its tier.
    
    While acting as an artificial personality, the imp is as unhelpful as possible to anyone attempting to use the system. The software imp doesn’t ignore commands, but it interprets them in the worst way possible. It can misdirect, reveal unwanted information, obfuscate the truth, and otherwise aggravate and demoralize the user.
    
    Finding and removing a software imp requires a successful Computers check to hack the imp as if it were a computer of its tier. However, the imp copies and installs itself as redundantly as it can, based on its tier number, and it can revive itself so long as a single copy remains. A dismissal spell targeting a computer infested with software imps can remove the malicious AIs as if they were extraplanar creatures, each with a CR equal to its item level and a Will save bonus based on its tier.
    
    The tiers of software imps and the capabilities of each are as follows.
    
    Tier 1: Skill bonus +5; Will +4; no copies
    
    Tier 2: Skill bonus +8; Will +6; one copy
    
    Tier 3: Skill bonus +11; Will +8; one copy
    
    Tier 4: Skill bonus +14; Will +10; two copies
    
    Tier 5: Skill bonus +17; Will +12; two copies
    
    Tier 6: Skill bonus +20; Will +14; three copies
    
    Tier 7: Skill bonus +23; Will +16; three copies
    
    Tier 8: Skill bonus +26; Will +18; four copies
    
    Tier 9: Skill bonus +29; Will +20; four copies
    
    Tier 10: Skill bonus +32; Will +21; five copies
    """
    
    let UniversalSolventConcentrated = CompendiumItem(context: context)
    UniversalSolventConcentrated.name = "Universal Solvent, Concentrated"
    UniversalSolventConcentrated.magicOrTech = "MT"
    UniversalSolventConcentrated.category = "Hybrid"
    UniversalSolventConcentrated.level = 9
    UniversalSolventConcentrated.price = 2000
    UniversalSolventConcentrated.bulk = 0
    UniversalSolventConcentrated.content = """
    Sold in enchanted vials that hold one application each, universal solvent is a magical chemical mixture that can dissolve almost every known substance in the galaxy. (Universal solvent can’t damage creatures.) As a standard action, you can splash universal solvent on an object. If a creature holds or wears the item, you must hit with a melee attack against that creature’s EAC. One application of solvent can cover five objects of light bulk, one object of 1 bulk, or a 5-foot area of a surface. When the solvent’s vial is emptied, it leaves a clean, empty vial with no residue.
    
    Universal solvent dissolves adhesives instantaneously, including the strands released by stickybomb grenades, provided the adhesive is of an item level equal to or lower than the solvent. The solvent also softens objects it coats, suppressing hardness according to the solvent’s type. As a full action, a creature can wipe off an application of universal solvent, ending the solvent’s effect on the cleaned object (but not the object used to clean it).
    
    If an object is exposed to universal solvent for 1 minute, the object takes an amount of damage equal to twice the amount by which the solvent’s hardness suppression exceeded the object’s actual hardness. The solvent then becomes inert and turns to dust, and the object returns to its normal hardness.
    
    The basic type has hardness suppression 10. The concentrated, forte, and regia types have hardness suppression 20, 30 , and 40 respectively.
    """
    
    let EarthboundAnklets = CompendiumItem(context: context)
    EarthboundAnklets.name = "Earthbound Anklets"
    EarthboundAnklets.magicOrTech = "MT"
    EarthboundAnklets.category = "Hybrid"
    EarthboundAnklets.level = 10
    EarthboundAnklets.price = 17000
    EarthboundAnklets.bulk = 0.1
    EarthboundAnklets.content = """
    Made of industrial ceramic sometimes decorated with precious minerals, earthbound anklets contain an internal matrix of directional, weight, and acceleration sensors. Traditionally, the ceramic is created from soil constituents from the wearer’s home world, and the anklets are a way to carry a piece of that home. (The rarest earthbound anklets contain clay from lost Golarion.) Pragmatically, through quantum entanglement and magical means, earthbound anklets provide you a connection to normal gravity.
    
    While you wear earthbound anklets, you can activate or deactivate them as a standard action. Wearing the active anklets allows you to act as if you’re in standard gravity, ignoring the perils of high gravity and the benefits of low gravity. In zero gravity, you decide a gravitational up and down when you activate the anklets, changing this orientation as a move action. Activating the anklets in zero-g allows you to end the off-kilter condition as part of the same action, and you can then move relative to your subjective up and down as if you were walking on a solid surface.
    
    This standard-gravity effect applies only to you and to objects you hold or wear. If an object, such as a thrown weapon, leaves your possession, it is subjected to the gravity of your environment rather than that provided by the anklets.
    
    The anklets can remain active for up to 1 hour per day. This usage need not be continuous, but it must be used in 1-minute increments. Once you benefit from a given set of earthbound anklets, you can’t benefit from a different set for 24 hours.
    """
    
    let NecroticMantle = CompendiumItem(context: context)
    NecroticMantle.name = "Necrotic Mantle"
    NecroticMantle.magicOrTech = "MT"
    NecroticMantle.category = "Hybrid"
    NecroticMantle.level = 10
    NecroticMantle.price = 17000
    NecroticMantle.bulk = 0.1
    NecroticMantle.content = """
    Used by the commanders of the Corpse Fleet to conceal their unliving agents, a necrotic mantle is woven of bioactive fibers that mask the necromantic energies of an undead wearer and convert positive energy into something less harmful to that undead. While wearing a necrotic mantle, if you are undead, you have the aura of a living creature instead of an undead for the purposes of magic or technology that can detect undead. You receive a +4 divine bonus to saves against any spell or effect that targets undead, such as control undead. In addition, if you are undead and fail a saving throw against a spell that both affects only undead creatures and has an ongoing effect (such as control undead), you can attempt a second saving throw after 1 round with the same DC as the first. If you succeed, you gain the same reduction in effect as if your initial saving throw had been successful. Additionally, any effort to determine whether a necrotic mantle you are wearing is a magic or technological item requires the creature making the determination to succeed at a Will save (DC = 15 + your key ability modifier).
    
    If you are undead and are by or in the area of an effect that restores Hit Points only to living creatures, you regain half the number of Hit Points instead of none. If that effect also damages undead creatures, you take no damage; this does not apply to effects that harm undead without healing living creatures.
    """
    
    let Queller = CompendiumItem(context: context)
    Queller.name = "Queller"
    Queller.magicOrTech = "MT"
    Queller.category = "Hybrid"
    Queller.level = 10
    Queller.price = 18000
    Queller.bulk = 1
    Queller.content = """
    A queller looks like a simple fire extinguisher and is constantly covered with a thin layer of frost. Three times per day as a standard action, you can use a queller to spray a burst of freezing chemicals in a 15-foot cone that deals 5d8 cold damage to each creature in the area (Reflex DC 15 half) and extinguishes all nonmagical fires in the cone (this ends any burning conditions). Kishalee researchers used similar devices to contain incursions from the Elemental Planes; at the GM’s discretion, other quellers that deal different types of energy damage might exist (though they don’t extinguish fires).
    """
    
    let RemoteSurveyor = CompendiumItem(context: context)
    RemoteSurveyor.name = "Remote Surveyor"
    RemoteSurveyor.magicOrTech = "MT"
    RemoteSurveyor.category = "Hybrid"
    RemoteSurveyor.level = 10
    RemoteSurveyor.price = 18000
    RemoteSurveyor.bulk = 0.1
    RemoteSurveyor.content = """
    Forbidden from venturing to the Sepres VI’s surface due both to the cultural taboo against doing so and the very real risks associated with it, seprevois—especially members and sympathizers of the Returners—created these handheld devices to remotely explore their planet’s surface. The surveyor features a small dish that transmits and receives a signal to the target, as well as a view screen and speaker that relay the device’s findings to you. The device allows you to employ both the audio and visual versions of clairaudience/clairvoyance simultaneously at a planetary range once per day, for a maximum duration of 10 minutes.
    """
    
    let VoidDust = CompendiumItem(context: context)
    VoidDust.name = "Void Dust"
    VoidDust.magicOrTech = "MT"
    VoidDust.category = "Hybrid"
    VoidDust.level = 10
    VoidDust.price = 2550
    VoidDust.bulk = 0
    VoidDust.content = """
    This powder looks like shimmering iron filings, but void dust is actually nanotech infused with magic antithetical to force effects. As a standard action, you can sprinkle the dust on something within your reach. When you sprinkle the dust on a magical force effect or a personal force field, roll 1d20 + 10 against a DC equal to 11 + the level of the caster or the item that created the force effect. If you succeed, the targeted effect is disrupted. A magical effect either ends, or, if it’s permanent or ongoing, is suppressed for 10 minutes. A personal force field is suppressed for 10 minutes. If you fail, the targeted effect is suppressed for 1 round. The time spent suppressed counts against an effect’s duration, and an item that uses battery charges still consumes those charges while suppressed.
    
    Void dust is sold by the pinch. One pinch affects only one force effect, and the pinch is consumed whether you succeed or fail. This dust isn’t strong enough to affect starship force fields or force effects of a similar scale.
    """
    
    let MetalNitroPlatinum = CompendiumItem(context: context)
    MetalNitroPlatinum.name = "Metal Nitro, Platinum"
    MetalNitroPlatinum.magicOrTech = "MT"
    MetalNitroPlatinum.category = "Hybrid"
    MetalNitroPlatinum.level = 10
    MetalNitroPlatinum.price = 2700
    MetalNitroPlatinum.bulk = 0
    MetalNitroPlatinum.content = """
    Introduced into a vehicle’s engine through the vehicle’s control panel, metal nitro comes in magical capsules of soft metal. Unlike technological racing nitrous, which releases more oxygen into an engine’s system to help the fuel burn, metal nitro infuses the vehicle with a burst of magical power.
    
    As a move action, you can crush a capsule of metal nitro into a vehicle’s control panel, which increases the vehicle’s drive speed and full speed for a total of 10 rounds. If the pilot fails to take the race action within 1 round of activating the metal nitro or fails the Piloting check to race from a dead stop, the metal nitro forces the vehicle to move its full speed immediately in an uncontrolled manner. If the Pilot fails the check to race, or the nitro activates in an uncontrolled manner, the pilot and any passengers take bludgeoning damage according to the type of metal nitro.
    
    Metal nitro can be safely used only on a vehicle that has an equal or higher item level. If you use metal nitro of an item level higher than the target vehicle’s, the vehicle takes damage after the pilot races or the vehicle first moves because of the nitro. The amount of damage varies according to the type of metal nitro. The types of metal nitro and their speed increase, as well as potential passenger and vehicle damage, are as follows.
    
    Silver: Speed × 1-1/2; damage 1d6
    
    Gold: Speed × 2; damage 3d6
    
    Platinum: Speed × 2-1/2; damage 6d6
    
    Star: Speed × 3; damage 10d6
    """
    
    let MnemonicEditorMk2 = CompendiumItem(context: context)
    MnemonicEditorMk2.name = "Mnemonic Editor, Mk 2"
    MnemonicEditorMk2.magicOrTech = "MT"
    MnemonicEditorMk2.category = "Hybrid"
    MnemonicEditorMk2.level = 10
    MnemonicEditorMk2.price = 3000
    MnemonicEditorMk2.bulk = 10
    MnemonicEditorMk2.content = """
    A mnemonic editor consists of a complex series of brain implant injectors, digital harrow deck autoreaders, illusion runes, and virtual-reality programs, all controlled by an enchanted analysis computer and attached to a mobile surgical bed. The network of magic and technology is capable of removing experiences from a patient strapped to the bed over the course of a single 24-hour session. Skills and knowledge can be excised, lessons unlearned and muscle memory altered. Memories are not lost entirely; the patient still recalls what it did during its life, whom it met, and how it felt about the moments it experienced, but the impact of those experiences is subtly altered. The device then creates a new set of experiences—clearly artificial but no less effective—by leaving impressions and implanting new knacks, muscle memory, reflexes, and skills.
    
    If you use a mnemonic editor, you can undo 2 character levels’ worth of decisions about which class levels you took, which feats you selected, how you applied any level-based increases to ability scores, how you assigned new skill ranks, and so on. All decisions you made as a result of advancing over the previous 2 character levels you gained are undone. You then make new selections, including new class levels, feats, skills, and the like, as if you had regained the 2 missing character levels. Go through the normal process of advancing your character through each of these 2 levels.
    
    Each mnemonic editor works only once—the strain on its technology and the consequences of rewriting your past to even this small degree cause it to break down into valueless junk after a single session. Additionally, the alterations made to you render it more difficult for such extraordinary procedures to be effective in the future. A mk 1 mnemonic editor cannot be used on you if you have already benefited from one in the past. However, it is possible to use a more advanced mk 2 model that functions in the same manner, even if you have already used a mk 1 mnemonic editor. Of course, you can only benefit from a mk 2 mnemonic editor once. There exist even more advanced mk 3 and mk 4 models, and each can be used on you once even after you have used a lower-level mnemonic editor, but they are so expensive that they are usually produced only upon request.
    
    Reworking Your Character
    
    A GM has the final decision on whether or not you may rework your character, changing decisions you previously made, and whether you are required to use a mnemonic editor to do so. A GM can decide that mnemonic editors are not available and cannot be crafted, created, or accessed through any means. A GM might also let a player to change a feat or class level if the player and GM agree it makes sense to do so, without resorting to such a device. The mnemonic editor provides an in-world explanation for mechanical changes made to a character. For example, it gives a character who started as an envoy but decided to study the ways of mysticism (and was seen casting spells) a plausible way to suddenly lose that spellcasting ability if the player decides that multicasting as an envoy/mystic isn’t as fun as expected.
    """
    
    let ScramblerGllovesMk2 = CompendiumItem(context: context)
    ScramblerGllovesMk2.name = "Scrambler Gloves, Mk 2"
    ScramblerGllovesMk2.magicOrTech = "MT"
    ScramblerGllovesMk2.category = "Hybrid"
    ScramblerGllovesMk2.level = 10
    ScramblerGllovesMk2.price = 18000
    ScramblerGllovesMk2.bulk = 0.1
    ScramblerGllovesMk2.content = """
    """
    
    let VitalSeedZeolite = CompendiumItem(context: context)
    VitalSeedZeolite.name = "Vital Seed, Zeolite"
    VitalSeedZeolite.magicOrTech = "MT"
    VitalSeedZeolite.category = "Hybrid"
    VitalSeedZeolite.level = 10
    VitalSeedZeolite.price = 5000
    VitalSeedZeolite.bulk = 0
    VitalSeedZeolite.content = """
    Bioengineered to grow specific chemicals and cellular structures, even those that replicate animal or humanoid flesh, vital seeds come packed in tiny capsules of First World soil to make them grow at alarming speeds. The specific effect depends on the purpose for which the seed was bioengineered. Vital seeds can grow livestock and plants, replace missing organs, and perform many other useful tasks. Some common vital seeds are listed here.
    
    As a standard action, you can squeeze a zeolite vital seed and place it on the ground or throw it (range 20 feet). A crystalline structure grows from the seed instantaneously, creating difficult terrain in its square. The structure absorbs radiation in its square and all adjacent squares, and it diminishes the severity of radiation within 30 feet of it by one step. Creatures in the area the zeolite vital seed affects gain a +2 circumstance bonus to saving throws against radiation sickness.
    """
    
    let InfiltrationAssistant = CompendiumItem(context: context)
    InfiltrationAssistant.name = "Infiltration Assistant"
    InfiltrationAssistant.magicOrTech = "MT"
    InfiltrationAssistant.category = "Hybrid"
    InfiltrationAssistant.level = 11
    InfiltrationAssistant.price = 28000
    InfiltrationAssistant.bulk = 0.1
    InfiltrationAssistant.content = """
    A magical scanner and psychic projector connected to sophisticated 3D mapping software, an infiltration assistant can create sophisticated representational maps of an area you’re in. You wear the scanner on your head or headwear, wirelessly connected to your comm unit or eyewear. The assistant counts as a worn magic item unless you install it in your armor, taking up one upgrade slot.
    
    As a move action while wearing the assistant, you can cause the device to magically ping an area within a 60-foot spherical spread of you. Using this ping, the software creates a 3D reconstruction of the area, which it psychically projects to you and all creatures you consider allies in the affected area. This image adjusts to show each creature where it is in the image. The ping doesn’t sense through most objects, but it can sense through a closed door or window that isn’t airtight, hidden, or otherwise sealed. However, any starmetal in the structure of the door or window blocks this benefit. The ping can detect creatures and objects beyond your line of sight and places them as features on the map. Images of such creatures and objects are sometimes distorted, especially if they’re in motion.
    
    The infiltration assistant grants you and your allies in its area a +5 insight bonus to Perception checks to locate hidden creatures and doors within the mapped area. The bonus to find creatures applies only so long as those creatures remain in the same place.
    
    Creatures with ranks in Mysticism perceive the ping like a barely audible sound that raises goose bumps, and they can attempt a DC 25 Mysticism check to determine that something magical just happened. A creature concentrating on detect magic can sense the ping as a brief flash of magic, and a creature benefitting from arcane sight can see the ping as a literal flash of divination magic.
    
    An infiltration assistant can send out 10 pings per day. Each psychic image it produces lasts 5 rounds. As a move action, you can save the image on your comm unit or a similar device for later reference. This static image can provide you a map of the pinged area later without needing to ping it again, but it provides no bonus to Perception checks.
    
    Using the assistant creates magical resonance in creatures that benefit from it. Any creature that benefits from more than 10 pings in a given day experiences visual anomalies, becoming dazzled until after an uninterrupted 8-hour rest.
    """
    
    let AnimisticToolsMk3 = CompendiumItem(context: context)
    AnimisticToolsMk3.name = "Animistic Tools, Mk 3"
    AnimisticToolsMk3.magicOrTech = "MT"
    AnimisticToolsMk3.category = "Hybrid"
    AnimisticToolsMk3.level = 11
    AnimisticToolsMk3.price = 22000
    AnimisticToolsMk3.bulk = 0.1
    AnimisticToolsMk3.content = """
    People often have superstitions regarding whether objects have a spirit or intelligence, and animistic tools were made with such beliefs in mind. Each of these tool kits has the power to communicate a user’s intentions to inanimate objects. When you use animistic tools with the appropriate skill and you fail a check, you can use the tool’s magic to reroll the check and take the higher result. In addition, as a move action, you can tap or bang a tool from the kit on a broken object, causing the object to ignore the penalties of being broken for a time. An item can benefit from animistic tools in this way only once per day, causing some engineers to joke that no one likes percussive maintenance.
    
    The model of the tools determines the number of rerolls per day and the time an item ignores the broken condition. Once you use a set of animistic tools, you can’t benefit from a different set for 24 hours.
    
    Mk 1: One reroll; ignore the broken condition for 1 minute
    
    Mk 2: Two rerolls; ignore the broken condition for 10 minutes
    
    Mk 3: Three rerolls; ignore the broken condition for 1 hour
    """
    
    let RetrievalCharmsMk2 = CompendiumItem(context: context)
    RetrievalCharmsMk2.name = "Retrieval Charms, Mk 2"
    RetrievalCharmsMk2.magicOrTech = "MT"
    RetrievalCharmsMk2.category = "Hybrid"
    RetrievalCharmsMk2.level = 11
    RetrievalCharmsMk2.price = 26000
    RetrievalCharmsMk2.bulk = 0.1
    RetrievalCharmsMk2.content = """
    Most retrieval charms are bejeweled decorations, although some are knickknacks that depict popular idols or fictional characters. These items come in a pair, each charm attuned to the other with magically enhanced quantum entanglement. It takes 1 minute to attach a charm to an object, and this object can have no more than 3 bulk. As a move action, you can activate the second charm while holding it, teleporting the first charm and its attached object to you. If you do so, the object instantly appears in hand if you have enough hands free to grasp it. Otherwise, it appears in your space. The attached object teleports to you even if it is worn or carried by another creature. Each set of retrieval charms can be used one time per day. The charms’ type limits the scale of the teleportation, as follows.
    
    Mk 1 charms range is 100 miles. Mk 2 charms' limit is anywhere on the same planet. Mk 3 charms allow teleportation anywhere on the same plane while Mk 4 charms function even on othe planes
    """
    
    let SoftwareImpTier6 = CompendiumItem(context: context)
    SoftwareImpTier6.name = "Software Imp, Tier 6"
    SoftwareImpTier6.magicOrTech = "MT"
    SoftwareImpTier6.category = "Hybrid"
    SoftwareImpTier6.level = 11
    SoftwareImpTier6.price = 25000
    SoftwareImpTier6.bulk = 0
    SoftwareImpTier6.content = """
    Whether or not it has attained true consciousness, a software imp is a perverse and illegal AI obnoxious enough that the question is academic. Software imps come on memory sticks so they remain isolated from your own systems. A software imp has a tier, and it is ineffective on any computer of a higher tier than its own.
    
    You must have access to a computer to install a software imp on it, and you can do so as a full action. The imp renders its memory stick unusable on the way out, leaving no way to conclusively determine what was once stored there. Once installed, the software imp becomes an artificial personality on its host computer. If the computer already has an artificial personality, the imp finds and overwrites it if possible. Faced with an artificial personality to which it does not have access, the imp lies in wait until it gains access to that personality in order to replace it.
    
    Initially, the imp can access information and modules that were accessible to you when you installed the imp. It can gain further access if a user unwittingly uses more access while the imp is installed. The imp can also fool users into giving it more access by attempting Bluff, Diplomacy, Intimidate, and Sense Motive checks with a bonus according to its tier.
    
    While acting as an artificial personality, the imp is as unhelpful as possible to anyone attempting to use the system. The software imp doesn’t ignore commands, but it interprets them in the worst way possible. It can misdirect, reveal unwanted information, obfuscate the truth, and otherwise aggravate and demoralize the user.
    
    Finding and removing a software imp requires a successful Computers check to hack the imp as if it were a computer of its tier. However, the imp copies and installs itself as redundantly as it can, based on its tier number, and it can revive itself so long as a single copy remains. A dismissal spell targeting a computer infested with software imps can remove the malicious AIs as if they were extraplanar creatures, each with a CR equal to its item level and a Will save bonus based on its tier.
    
    The tiers of software imps and the capabilities of each are as follows.
    
    Tier 1: Skill bonus +5; Will +4; no copies
    
    Tier 2: Skill bonus +8; Will +6; one copy
    
    Tier 3: Skill bonus +11; Will +8; one copy
    
    Tier 4: Skill bonus +14; Will +10; two copies
    
    Tier 5: Skill bonus +17; Will +12; two copies
    
    Tier 6: Skill bonus +20; Will +14; three copies
    
    Tier 7: Skill bonus +23; Will +16; three copies
    
    Tier 8: Skill bonus +26; Will +18; four copies
    
    Tier 9: Skill bonus +29; Will +20; four copies
    
    Tier 10: Skill bonus +32; Will +21; five copies
    """
    
    let MindGuardian = CompendiumItem(context: context)
    MindGuardian.name = "Mind Guardian"
    MindGuardian.magicOrTech = "MT"
    MindGuardian.category = "Hybrid"
    MindGuardian.level = 12
    MindGuardian.price = 36000
    MindGuardian.bulk = 0
    MindGuardian.content = """
    The microcircuitry contained within this adamantine ring records and magically reinforces your core personality. Once per day when you first come under the control of a mind-affecting effect, such as charm monster or dominate person, you can act normally for the first round of the effect, after which you are staggered for 1d4 rounds and affected by the mind-affecting effect as normal.
    
    You must wear a mind guardian at least 12 hours a day for 7 consecutive days before you can use its ability. After this, if the ring is not worn for 24 hours or longer, the mental patterns collapse and must be reestablished.
    
    The lashuntas of Castrovel devised the mind guardians to protect the less mentally adept against outside control. Android engineers particularly skilled in the construction of self-aware neural networks assisted in the design. While most commonly found as a ring, a mind guardian can take the form of any compact piece of jewelry or personal adornment, but it functions only when in direct contact with the body.
    """
    
    let Runeworm = CompendiumItem(context: context)
    Runeworm.name = "Runeworm"
    Runeworm.magicOrTech = "MT"
    Runeworm.category = "Hybrid"
    Runeworm.level = 12
    Runeworm.price = 37000
    Runeworm.bulk = 0
    Runeworm.content = """
    WARNING: This entry contains spoilers for the Dead Sun Adventure Path.
    
    Currently interlaced with the skull and spine of one of Serovox’s defeated foes, this hybrid item appears to be a 24-inch-long metallic centipede covered in runes. When it is placed near your ear (or a similar orifice), it animates and enters your body. Once inside you, the runeworm intertwines with your internal anatomy and releases an arcane virus that rewrites and improves some part of your body’s function. It functions as a mk 2 synergizing symbiote, which is able to increase an ability score by 4. However, it is so advanced that it can instead upgrade any mk 2 personal upgrade already in your system to a mk 3 personal upgrade, increasing the ability score bonus from +4 to +6.
    """
    
    let AblativeInsulationMk3 = CompendiumItem(context: context)
    AblativeInsulationMk3.name = "Ablative Insulation, Mk 3"
    AblativeInsulationMk3.magicOrTech = "MT"
    AblativeInsulationMk3.category = "Hybrid"
    AblativeInsulationMk3.level = 12
    AblativeInsulationMk3.price = 5500
    AblativeInsulationMk3.bulk = 0.1
    AblativeInsulationMk3.content = """
    Civilization on Verces exists on the thin line between fiery heat and frozen desolation. Verthani’s unique perspective on the elements led them to develop temperature-sensitive compounds with remarkable properties. Ablative insulation comes in a single-use canister containing enchanted fullerene-based powder. In a process that takes 1 minute, you can spray the contents on a creature to thoroughly coat it with the powder (though it automatically avoids orifices and sensory organs such as the eyes, mouth, and nose). The creature coated gains energy resistance to all energy types (which doesn’t stack with any other source of energy resistance), and the ablative insulation wears away as it prevents damage. The coating lasts for 1 hour if not ablated away sooner. Multiple coatings don’t offer any additional benefit (ignore all but the highest-level coating). Each canister contains enough material to fully cover a single Medium or smaller creature, with any excess wasted. When applied to a Large creature, the insulation provides only half the energy resistance (rounded down) and total points of absorption unless a second canister is used. If applied to a Huge or larger creature, the insulation is wasted without effect.
    
    Mk 1: The creature receives energy resistance 5 to all energy types. The coating lasts for 1 hour or until it prevents a total of 20 damage, whichever comes first.
    
    Mk 2: The creature receives energy resistance 10 to all energy types. The coating lasts for 1 hour or until it prevents a total of 40 damage, whichever comes first.
    
    Mk 3: The creature receives energy resistance 15 to all energy types. The coating lasts for 1 hour or until it prevents a total of 60 damage, whichever comes first.
    """
    
    let ComputerIdolMk3 = CompendiumItem(context: context)
    ComputerIdolMk3.name = "Computer Idol, Mk 3"
    ComputerIdolMk3.magicOrTech = "MT"
    ComputerIdolMk3.category = "Hybrid"
    ComputerIdolMk3.level = 12
    ComputerIdolMk3.price = 34000
    ComputerIdolMk3.bulk = 0.1
    ComputerIdolMk3.content = """
    A computer idol is a small statuette that creates a field of good luck during computer use. These figures vary wildly in shape, from religious figures to trivid mascots. When you fail a Computers check, the computer idol allows you to reroll and take the higher result. You must be within 5 feet of your computer idol and able to see it to benefit from it.
    
    A computer idol allows a number of rerolls per day based on its type. Mk 1 allows for one reroll, Mk 2: two rerolls, and Mk 3: three rerolls. Once you benefit from a given computer idol, you can’t benefit from a different one for 24 hours.
    """
    
    let CreatorCapsuleMk3 = CompendiumItem(context: context)
    CreatorCapsuleMk3.name = "Creator Capsule, Mk 3"
    CreatorCapsuleMk3.magicOrTech = "MT"
    CreatorCapsuleMk3.category = "Hybrid"
    CreatorCapsuleMk3.level = 12
    CreatorCapsuleMk3.price = 38000
    CreatorCapsuleMk3.bulk = 0.1
    CreatorCapsuleMk3.content = """
    Although it appears to be little more than an oblong case full of electronics, a creator capsule is a tiny 3D printer, with a programmable interface and a supply of UPBs stored in an extradimensional space. As a full action, you can connect the creator capsule wirelessly to your comm unit or computer, then command it to print one or more nonmagical personal or technological items. Printing an item requires you to have the plans on the connected device or an infosphere connection through which you can download the blueprints.
    
    A creator capsule takes 1 round to create an item, plus 1 round per bulk of the item above light. No individual printed item can have a bulk greater than 3. The creator capsule consumes itself during the printing process. Although the printer can be stopped as a move action, doing so renders the capsule useless for further printing. An item printed by the creator capsule is of average quality, and it has the statistics of an ordinary item of its type.
    
    Based on its type, a creator capsule has the following cost and level limits on items it creates.
    
    Mk 1: Combined cost up to 1,000 credits; item level no higher than 2
    
    Mk 2: Combined cost up to 4,500 credits; item level no higher than 6
    
    Mk 3: Combined cost up to 19,000 credits; item level no higher than 10
    """
    
    let HoldingGlovesMk2 = CompendiumItem(context: context)
    HoldingGlovesMk2.name = "Holding Gloves, Mk 2"
    HoldingGlovesMk2.magicOrTech = "MT"
    HoldingGlovesMk2.category = "Hybrid"
    HoldingGlovesMk2.level = 12
    HoldingGlovesMk2.price = 35000
    HoldingGlovesMk2.bulk = 0.1
    HoldingGlovesMk2.content = """
    Holding gloves have copper mesh on the fingertips and forming a concavity on the palm. The gloves count as a worn magic item unless you install them in armor, taking up one upgrade slot. Once per day as a standard action while wearing the gloves, you can use their embedded spell as a spell-like ability. If you hit with a melee attack (including an unarmed strike), you can use the spell from the gloves as a reaction, targeting the same creature the attack hit, without provoking an attack of opportunity. After the first time you cast the spell, you can spend 1 Resolve Point to cast it again, up to two more times on a given day. Once you use a given pair of holding gloves, you can’t use a different pair for 24 hours.
    
    The spell imbued in holding gloves depends on their model, as follows.
    
    Mk 1: Hold person (save DC = 12 + your key ability score modifier; caster level 5th)
    
    Mk 2: Hold monster (save DC = 14 + your key ability score modifier; caster level 10th)
    """
    
    let KineticCoverterMk2 = CompendiumItem(context: context)
    KineticCoverterMk2.name = "Kinetic Coverter, Mk 2"
    KineticCoverterMk2.magicOrTech = "MT"
    KineticCoverterMk2.category = "Hybrid"
    KineticCoverterMk2.level = 12
    KineticCoverterMk2.price = 42000
    KineticCoverterMk2.bulk = 0.1
    KineticCoverterMk2.content = """
    """
    
    let EoxianWrackstaff = CompendiumItem(context: context)
    EoxianWrackstaff.name = "Eoxian Wrackstaff"
    EoxianWrackstaff.magicOrTech = "MT"
    EoxianWrackstaff.category = "Hybrid"
    EoxianWrackstaff.level = 13
    EoxianWrackstaff.price = 48500
    EoxianWrackstaff.bulk = 1
    EoxianWrackstaff.content = """
    Consisting of a long metallic shaft capped with a two-pronged head, an Eoxian wrackstaff is a two-handed basic melee weapon that deals 6d4 bludgeoning damage and has the block weapon special property. On a critical hit, the target is affected by inflict pain (CL 13th). Undead creatures are immune to this critical hit effect.
    """
    
    let EyesofRhean = CompendiumItem(context: context)
    EyesofRhean.name = "Eyes of Rhean"
    EyesofRhean.magicOrTech = "MT"
    EyesofRhean.category = "Hybrid"
    EyesofRhean.level = 13
    EyesofRhean.price = 55000
    EyesofRhean.bulk = 0.1
    EyesofRhean.content = """
    WARNING: This entry contains spoilers for the Dead Sun Adventure Path.
    
    Serovox pried this pair of pale sapphire gems from the head of an inevitable they destroyed in a duel. When you hold one of the eyes in one hand, you can control the other as a spy drone that can’t be upgraded. You see what the flying eye sees through the eye you hold. However, if you place the gems over your own eyes, they burrow into your skull and replace two of your eyes (destroying the optic nerves of any additional eyes if you have more than two eyes), functioning as a long-range darkvision capacitors augmentation. You can still send out one eye as a spy drone, during which time the eyes do not grant you darkvision. When the eyes aren’t embedded in a skull and aren’t in use, a reddish mist slowly coalesces around them.
    """
    
    let CaptiveStarAmuletMagnetar = CompendiumItem(context: context)
    CaptiveStarAmuletMagnetar.name = "Captive-Star Amulet, Magnetar"
    CaptiveStarAmuletMagnetar.magicOrTech = "MT"
    CaptiveStarAmuletMagnetar.category = "Hybrid"
    CaptiveStarAmuletMagnetar.level = 13
    CaptiveStarAmuletMagnetar.price = 54000
    CaptiveStarAmuletMagnetar.bulk = 0.1
    CaptiveStarAmuletMagnetar.content = """
    The pendant of a captive-star amulet is a miniature containment field that holds magical energy compressed to resemble a tiny star. While you wear the amulet, if a spell includes you as a target, the necklace allows you to use the counter option of dispel magic against that spell as a reaction. You must attempt a dispel check (1d20 + half the amulet’s item level + your key ability score modifier). A captive-star amulet works once per day, but you can spend 1 Resolve Point to activate it a second time during that same day. Once you use a given captive-star amulet, you can’t use a different one for 24 hours.
    
    In addition to countering the spell, a magnetar captive-star amulet allows you to absorb a successfully countered spell to recover one of your previously expended spell slots of a level lower than that of the negated spell.
    """
    
    let NullSpaceChamberMk3 = CompendiumItem(context: context)
    NullSpaceChamberMk3.name = "Null-Space Chamber, Mk 3"
    NullSpaceChamberMk3.magicOrTech = "MT"
    NullSpaceChamberMk3.category = "Hybrid"
    NullSpaceChamberMk3.level = 13
    NullSpaceChamberMk3.price = 50000
    NullSpaceChamberMk3.bulk = 0.1
    NullSpaceChamberMk3.content = """
    A null-space chamber is a circular device often designed to be strapped to an arm or backpack. When you press a button on the side, the device creates a circular extradimensional rift to a pocket space, the size of which is determined by the null-space chamber’s model. You can close it by pressing the button again, causing the entrance to the space to disappear. Anything stored within the space remains, however, traveling with the item. The null-space chamber can be opened and closed only from the outside.
    
    The only air within the pocket space is that which enters when you open the entrance. The device does not accumulate bulk even as its pocket space is filled. Each null-space chamber is associated with its own particular extradimensional space. Each null-space chamber can carry a set amount of bulk, after which it can no longer be closed (even if it has room left for more material). Spells and items that contain or create extradimensional spaces, such as other null-space chambers, do not function within a null-space chamber’s pocket dimension.
    
    A readout on a null-space chamber automatically catalogs all items within it, and if the chamber is open, you can call up any such item and have it placed in your hand as a full action.
    
    You can close up to 25 bulk in a Mk 1 device’s pocket space, a 3-foot cube. It can hold enough air for one Medium creature or two Small creatures for 10 minutes. Mk 2 devices' can close up to 50 bulk, a 6-foot cube. It can hold enough air for one Medium creature or two Small creatures for 2 hours. You can close up to 100 bulk in a Mk 3 device’s pocket space, a 9-foot cube. It can hold enough air for one Medium creature or two Small creatures for 2 days. You can close up to 200 bulk in a Mk 4 device’s pocket space, a 12-foot cube. It can hold enough air for one Medium creature or two Small creatures for 1 week.
    """
    
    let SoftwareImpTier7 = CompendiumItem(context: context)
    SoftwareImpTier7.name = "Software Imp, Tier 7"
    SoftwareImpTier7.magicOrTech = "MT"
    SoftwareImpTier7.category = "Hybrid"
    SoftwareImpTier7.level = 13
    SoftwareImpTier7.price = 50000
    SoftwareImpTier7.bulk = 0
    SoftwareImpTier7.content = """
    Whether or not it has attained true consciousness, a software imp is a perverse and illegal AI obnoxious enough that the question is academic. Software imps come on memory sticks so they remain isolated from your own systems. A software imp has a tier, and it is ineffective on any computer of a higher tier than its own.
    
    You must have access to a computer to install a software imp on it, and you can do so as a full action. The imp renders its memory stick unusable on the way out, leaving no way to conclusively determine what was once stored there. Once installed, the software imp becomes an artificial personality on its host computer. If the computer already has an artificial personality, the imp finds and overwrites it if possible. Faced with an artificial personality to which it does not have access, the imp lies in wait until it gains access to that personality in order to replace it.
    
    Initially, the imp can access information and modules that were accessible to you when you installed the imp. It can gain further access if a user unwittingly uses more access while the imp is installed. The imp can also fool users into giving it more access by attempting Bluff, Diplomacy, Intimidate, and Sense Motive checks with a bonus according to its tier.
    
    While acting as an artificial personality, the imp is as unhelpful as possible to anyone attempting to use the system. The software imp doesn’t ignore commands, but it interprets them in the worst way possible. It can misdirect, reveal unwanted information, obfuscate the truth, and otherwise aggravate and demoralize the user.
    
    Finding and removing a software imp requires a successful Computers check to hack the imp as if it were a computer of its tier. However, the imp copies and installs itself as redundantly as it can, based on its tier number, and it can revive itself so long as a single copy remains. A dismissal spell targeting a computer infested with software imps can remove the malicious AIs as if they were extraplanar creatures, each with a CR equal to its item level and a Will save bonus based on its tier.
    
    The tiers of software imps and the capabilities of each are as follows.
    
    Tier 1: Skill bonus +5; Will +4; no copies
    
    Tier 2: Skill bonus +8; Will +6; one copy
    
    Tier 3: Skill bonus +11; Will +8; one copy
    
    Tier 4: Skill bonus +14; Will +10; two copies
    
    Tier 5: Skill bonus +17; Will +12; two copies
    
    Tier 6: Skill bonus +20; Will +14; three copies
    
    Tier 7: Skill bonus +23; Will +16; three copies
    
    Tier 8: Skill bonus +26; Will +18; four copies
    
    Tier 9: Skill bonus +29; Will +20; four copies
    
    Tier 10: Skill bonus +32; Will +21; five copies
    """
    
    let UniversalSolventForte = CompendiumItem(context: context)
    UniversalSolventForte.name = "Universal Solvent, Forte"
    UniversalSolventForte.magicOrTech = "MT"
    UniversalSolventForte.category = "Hybrid"
    UniversalSolventForte.level = 13
    UniversalSolventForte.price = 7500
    UniversalSolventForte.bulk = 0
    UniversalSolventForte.content = """
    Sold in enchanted vials that hold one application each, universal solvent is a magical chemical mixture that can dissolve almost every known substance in the galaxy. (Universal solvent can’t damage creatures.) As a standard action, you can splash universal solvent on an object. If a creature holds or wears the item, you must hit with a melee attack against that creature’s EAC. One application of solvent can cover five objects of light bulk, one object of 1 bulk, or a 5-foot area of a surface. When the solvent’s vial is emptied, it leaves a clean, empty vial with no residue.
    
    Universal solvent dissolves adhesives instantaneously, including the strands released by stickybomb grenades, provided the adhesive is of an item level equal to or lower than the solvent. The solvent also softens objects it coats, suppressing hardness according to the solvent’s type. As a full action, a creature can wipe off an application of universal solvent, ending the solvent’s effect on the cleaned object (but not the object used to clean it).
    
    If an object is exposed to universal solvent for 1 minute, the object takes an amount of damage equal to twice the amount by which the solvent’s hardness suppression exceeded the object’s actual hardness. The solvent then becomes inert and turns to dust, and the object returns to its normal hardness.
    
    The basic type has hardness suppression 10. The concentrated, forte, and regia types have hardness suppression 20, 30 , and 40 respectively.
    """
    
    let MetalNitroStar = CompendiumItem(context: context)
    MetalNitroStar.name = "Metal Nitro, Star"
    MetalNitroStar.magicOrTech = "MT"
    MetalNitroStar.category = "Hybrid"
    MetalNitroStar.level = 14
    MetalNitroStar.price = 10800
    MetalNitroStar.bulk = 0
    MetalNitroStar.content = """
    Introduced into a vehicle’s engine through the vehicle’s control panel, metal nitro comes in magical capsules of soft metal. Unlike technological racing nitrous, which releases more oxygen into an engine’s system to help the fuel burn, metal nitro infuses the vehicle with a burst of magical power.
    
    As a move action, you can crush a capsule of metal nitro into a vehicle’s control panel, which increases the vehicle’s drive speed and full speed for a total of 10 rounds. If the pilot fails to take the race action within 1 round of activating the metal nitro or fails the Piloting check to race from a dead stop, the metal nitro forces the vehicle to move its full speed immediately in an uncontrolled manner. If the Pilot fails the check to race, or the nitro activates in an uncontrolled manner, the pilot and any passengers take bludgeoning damage according to the type of metal nitro.
    
    Metal nitro can be safely used only on a vehicle that has an equal or higher item level. If you use metal nitro of an item level higher than the target vehicle’s, the vehicle takes damage after the pilot races or the vehicle first moves because of the nitro. The amount of damage varies according to the type of metal nitro. The types of metal nitro and their speed increase, as well as potential passenger and vehicle damage, are as follows.
    
    Silver: Speed × 1-1/2; damage 1d6
    
    Gold: Speed × 2; damage 3d6
    
    Platinum: Speed × 2-1/2; damage 6d6
    
    Star: Speed × 3; damage 10d6
    """
    
    let MindlinkCircletMk3 = CompendiumItem(context: context)
    MindlinkCircletMk3.name = "Mindlink Circlet, Mk 3"
    MindlinkCircletMk3.magicOrTech = "MT"
    MindlinkCircletMk3.category = "Hybrid"
    MindlinkCircletMk3.level = 14
    MindlinkCircletMk3.price = 78000
    MindlinkCircletMk3.bulk = 0.1
    MindlinkCircletMk3.content = """
    Although items with powers similar to those of the mindlink circlet have existed in the Pact Worlds for thousands of years, the technological components of the this useful item were an innovation that made its powers readily available. The effects of a mindlink circlet depend upon its model, as described below.
    
    You can telepathically communicate with any creatures within 100 feet that are capable of understanding language, including languages you do not understand. This otherwise functions like a shirren’s limited telepathy racial trait.
    """
    
    let PrescientLensesMk3 = CompendiumItem(context: context)
    PrescientLensesMk3.name = "Prescient Lenses, Mk 3"
    PrescientLensesMk3.magicOrTech = "MT"
    PrescientLensesMk3.category = "Hybrid"
    PrescientLensesMk3.level = 14
    PrescientLensesMk3.price = 77000
    PrescientLensesMk3.bulk = 0
    PrescientLensesMk3.content = """
    Prescient lenses blend quantum computing and divination magic to model, extrapolate, and display events happening in the next few seconds as translucent holograms. A pair of lenses has one charge, which is refreshed each day, and a creature can benefit from a single use of prescient lenses each day (with any subsequent attempt showing the same few seconds of time as the first daily use). Prescient lenses were originally as optical enhancements for the robotic anacites of Aballon and can be integrated into a robot for the listed price. Alternatively, they can be installed as a cybernetic eye augmentation for 1,000 additional credits.
    
    Mk 1: You can study the image in the lenses as a move action and gain a +1 insight bonus to a single attack roll, ability check, or skill check attempted before the start of your next turn. Attempting an attack roll or check expends the charge.
    
    Mk 2: These function as mk 1 prescient lenses, but you can instead roll the attack roll or check twice and take the better of the two results.
    
    Mk 3: These function as mk 2 prescient lenses, but as a reaction you can instead reroll a failed attack roll, ability check, or skill check.
    """
    
    let ScramblerGllovesMk3 = CompendiumItem(context: context)
    ScramblerGllovesMk3.name = "Scrambler Gloves, Mk 3"
    ScramblerGllovesMk3.magicOrTech = "MT"
    ScramblerGllovesMk3.category = "Hybrid"
    ScramblerGllovesMk3.level = 14
    ScramblerGllovesMk3.price = 73000
    ScramblerGllovesMk3.bulk = 0.1
    ScramblerGllovesMk3.content = """
    """
    
    let MnemonicEditorMk3 = CompendiumItem(context: context)
    MnemonicEditorMk3.name = "Mnemonic Editor, Mk 3"
    MnemonicEditorMk3.magicOrTech = "MT"
    MnemonicEditorMk3.category = "Hybrid"
    MnemonicEditorMk3.level = 15
    MnemonicEditorMk3.price = 20000
    MnemonicEditorMk3.bulk = 10
    MnemonicEditorMk3.content = """
    A mnemonic editor consists of a complex series of brain implant injectors, digital harrow deck autoreaders, illusion runes, and virtual-reality programs, all controlled by an enchanted analysis computer and attached to a mobile surgical bed. The network of magic and technology is capable of removing experiences from a patient strapped to the bed over the course of a single 24-hour session. Skills and knowledge can be excised, lessons unlearned and muscle memory altered. Memories are not lost entirely; the patient still recalls what it did during its life, whom it met, and how it felt about the moments it experienced, but the impact of those experiences is subtly altered. The device then creates a new set of experiences—clearly artificial but no less effective—by leaving impressions and implanting new knacks, muscle memory, reflexes, and skills.
    
    If you use a mnemonic editor, you can undo 2 character levels’ worth of decisions about which class levels you took, which feats you selected, how you applied any level-based increases to ability scores, how you assigned new skill ranks, and so on. All decisions you made as a result of advancing over the previous 2 character levels you gained are undone. You then make new selections, including new class levels, feats, skills, and the like, as if you had regained the 2 missing character levels. Go through the normal process of advancing your character through each of these 2 levels.
    
    Each mnemonic editor works only once—the strain on its technology and the consequences of rewriting your past to even this small degree cause it to break down into valueless junk after a single session. Additionally, the alterations made to you render it more difficult for such extraordinary procedures to be effective in the future. A mk 1 mnemonic editor cannot be used on you if you have already benefited from one in the past. However, it is possible to use a more advanced mk 2 model that functions in the same manner, even if you have already used a mk 1 mnemonic editor. Of course, you can only benefit from a mk 2 mnemonic editor once. There exist even more advanced mk 3 and mk 4 models, and each can be used on you once even after you have used a lower-level mnemonic editor, but they are so expensive that they are usually produced only upon request.
    
    Reworking Your Character
    
    A GM has the final decision on whether or not you may rework your character, changing decisions you previously made, and whether you are required to use a mnemonic editor to do so. A GM can decide that mnemonic editors are not available and cannot be crafted, created, or accessed through any means. A GM might also let a player to change a feat or class level if the player and GM agree it makes sense to do so, without resorting to such a device. The mnemonic editor provides an in-world explanation for mechanical changes made to a character. For example, it gives a character who started as an envoy but decided to study the ways of mysticism (and was seen casting spells) a plausible way to suddenly lose that spellcasting ability if the player decides that multicasting as an envoy/mystic isn’t as fun as expected.
    """
    
    let RetrievalCharmsMk3 = CompendiumItem(context: context)
    RetrievalCharmsMk3.name = "Retrieval Charms, Mk 3"
    RetrievalCharmsMk3.magicOrTech = "MT"
    RetrievalCharmsMk3.category = "Hybrid"
    RetrievalCharmsMk3.level = 15
    RetrievalCharmsMk3.price = 105000
    RetrievalCharmsMk3.bulk = 0.1
    RetrievalCharmsMk3.content = """
    Most retrieval charms are bejeweled decorations, although some are knickknacks that depict popular idols or fictional characters. These items come in a pair, each charm attuned to the other with magically enhanced quantum entanglement. It takes 1 minute to attach a charm to an object, and this object can have no more than 3 bulk. As a move action, you can activate the second charm while holding it, teleporting the first charm and its attached object to you. If you do so, the object instantly appears in hand if you have enough hands free to grasp it. Otherwise, it appears in your space. The attached object teleports to you even if it is worn or carried by another creature. Each set of retrieval charms can be used one time per day. The charms’ type limits the scale of the teleportation, as follows.
    
    Mk 1 charms range is 100 miles. Mk 2 charms' limit is anywhere on the same planet. Mk 3 charms allow teleportation anywhere on the same plane while Mk 4 charms function even on othe planes
    """
    
    let SoftwareImpTier8 = CompendiumItem(context: context)
    SoftwareImpTier8.name = "Software Imp, Tier 8"
    SoftwareImpTier8.magicOrTech = "MT"
    SoftwareImpTier8.category = "Hybrid"
    SoftwareImpTier8.level = 15
    SoftwareImpTier8.price = 100000
    SoftwareImpTier8.bulk = 0
    SoftwareImpTier8.content = """
    Whether or not it has attained true consciousness, a software imp is a perverse and illegal AI obnoxious enough that the question is academic. Software imps come on memory sticks so they remain isolated from your own systems. A software imp has a tier, and it is ineffective on any computer of a higher tier than its own.
    
    You must have access to a computer to install a software imp on it, and you can do so as a full action. The imp renders its memory stick unusable on the way out, leaving no way to conclusively determine what was once stored there. Once installed, the software imp becomes an artificial personality on its host computer. If the computer already has an artificial personality, the imp finds and overwrites it if possible. Faced with an artificial personality to which it does not have access, the imp lies in wait until it gains access to that personality in order to replace it.
    
    Initially, the imp can access information and modules that were accessible to you when you installed the imp. It can gain further access if a user unwittingly uses more access while the imp is installed. The imp can also fool users into giving it more access by attempting Bluff, Diplomacy, Intimidate, and Sense Motive checks with a bonus according to its tier.
    
    While acting as an artificial personality, the imp is as unhelpful as possible to anyone attempting to use the system. The software imp doesn’t ignore commands, but it interprets them in the worst way possible. It can misdirect, reveal unwanted information, obfuscate the truth, and otherwise aggravate and demoralize the user.
    
    Finding and removing a software imp requires a successful Computers check to hack the imp as if it were a computer of its tier. However, the imp copies and installs itself as redundantly as it can, based on its tier number, and it can revive itself so long as a single copy remains. A dismissal spell targeting a computer infested with software imps can remove the malicious AIs as if they were extraplanar creatures, each with a CR equal to its item level and a Will save bonus based on its tier.
    
    The tiers of software imps and the capabilities of each are as follows.
    
    Tier 1: Skill bonus +5; Will +4; no copies
    
    Tier 2: Skill bonus +8; Will +6; one copy
    
    Tier 3: Skill bonus +11; Will +8; one copy
    
    Tier 4: Skill bonus +14; Will +10; two copies
    
    Tier 5: Skill bonus +17; Will +12; two copies
    
    Tier 6: Skill bonus +20; Will +14; three copies
    
    Tier 7: Skill bonus +23; Will +16; three copies
    
    Tier 8: Skill bonus +26; Will +18; four copies
    
    Tier 9: Skill bonus +29; Will +20; four copies
    
    Tier 10: Skill bonus +32; Will +21; five copies
    """
    
    let KineticCoverterMk3 = CompendiumItem(context: context)
    KineticCoverterMk3.name = "Kinetic Coverter, Mk 3"
    KineticCoverterMk3.magicOrTech = "MT"
    KineticCoverterMk3.category = "Hybrid"
    KineticCoverterMk3.level = 16
    KineticCoverterMk3.price = 172000
    KineticCoverterMk3.bulk = 0.1
    KineticCoverterMk3.content = """
    """
    
    let CaptiveStarAmuletPulsar = CompendiumItem(context: context)
    CaptiveStarAmuletPulsar.name = "Captive-Star Amulet, Pulsar"
    CaptiveStarAmuletPulsar.magicOrTech = "MT"
    CaptiveStarAmuletPulsar.category = "Hybrid"
    CaptiveStarAmuletPulsar.level = 17
    CaptiveStarAmuletPulsar.price = 270000
    CaptiveStarAmuletPulsar.bulk = 0.1
    CaptiveStarAmuletPulsar.content = """
    The pendant of a captive-star amulet is a miniature containment field that holds magical energy compressed to resemble a tiny star. While you wear the amulet, if a spell includes you as a target, the necklace allows you to use the counter option of dispel magic against that spell as a reaction. You must attempt a dispel check (1d20 + half the amulet’s item level + your key ability score modifier). A captive-star amulet works once per day, but you can spend 1 Resolve Point to activate it a second time during that same day. Once you use a given captive-star amulet, you can’t use a different one for 24 hours.
    
    A pulsar captive-star amulet can function like a magnetar captive-star amulet, allowing you to absorb a successfully countered spell to recover one of your previously expended spell slots of a level lower than that of the negated spell. Alternatively, instead of negating and absorbing the spell, you can redirect the spell. You choose the spell’s new targets, area, or other variables, but statistics determined by caster level are still calculated according to its original caster.
    """
    
    let NullSpaceChamberMk4 = CompendiumItem(context: context)
    NullSpaceChamberMk4.name = "Null-Space Chamber, Mk 4"
    NullSpaceChamberMk4.magicOrTech = "MT"
    NullSpaceChamberMk4.category = "Hybrid"
    NullSpaceChamberMk4.level = 17
    NullSpaceChamberMk4.price = 250000
    NullSpaceChamberMk4.bulk = 0.1
    NullSpaceChamberMk4.content = """
    A null-space chamber is a circular device often designed to be strapped to an arm or backpack. When you press a button on the side, the device creates a circular extradimensional rift to a pocket space, the size of which is determined by the null-space chamber’s model. You can close it by pressing the button again, causing the entrance to the space to disappear. Anything stored within the space remains, however, traveling with the item. The null-space chamber can be opened and closed only from the outside.
    
    The only air within the pocket space is that which enters when you open the entrance. The device does not accumulate bulk even as its pocket space is filled. Each null-space chamber is associated with its own particular extradimensional space. Each null-space chamber can carry a set amount of bulk, after which it can no longer be closed (even if it has room left for more material). Spells and items that contain or create extradimensional spaces, such as other null-space chambers, do not function within a null-space chamber’s pocket dimension.
    
    A readout on a null-space chamber automatically catalogs all items within it, and if the chamber is open, you can call up any such item and have it placed in your hand as a full action.
    
    You can close up to 25 bulk in a Mk 1 device’s pocket space, a 3-foot cube. It can hold enough air for one Medium creature or two Small creatures for 10 minutes. Mk 2 devices' can close up to 50 bulk, a 6-foot cube. It can hold enough air for one Medium creature or two Small creatures for 2 hours. You can close up to 100 bulk in a Mk 3 device’s pocket space, a 9-foot cube. It can hold enough air for one Medium creature or two Small creatures for 2 days. You can close up to 200 bulk in a Mk 4 device’s pocket space, a 12-foot cube. It can hold enough air for one Medium creature or two Small creatures for 1 week.
    """
    
    let SoftwareImpTier9 = CompendiumItem(context: context)
    SoftwareImpTier9.name = "Software Imp, Tier 9"
    SoftwareImpTier9.magicOrTech = "MT"
    SoftwareImpTier9.category = "Hybrid"
    SoftwareImpTier9.level = 17
    SoftwareImpTier9.price = 225000
    SoftwareImpTier9.bulk = 0
    SoftwareImpTier9.content = """
    Whether or not it has attained true consciousness, a software imp is a perverse and illegal AI obnoxious enough that the question is academic. Software imps come on memory sticks so they remain isolated from your own systems. A software imp has a tier, and it is ineffective on any computer of a higher tier than its own.
    
    You must have access to a computer to install a software imp on it, and you can do so as a full action. The imp renders its memory stick unusable on the way out, leaving no way to conclusively determine what was once stored there. Once installed, the software imp becomes an artificial personality on its host computer. If the computer already has an artificial personality, the imp finds and overwrites it if possible. Faced with an artificial personality to which it does not have access, the imp lies in wait until it gains access to that personality in order to replace it.
    
    Initially, the imp can access information and modules that were accessible to you when you installed the imp. It can gain further access if a user unwittingly uses more access while the imp is installed. The imp can also fool users into giving it more access by attempting Bluff, Diplomacy, Intimidate, and Sense Motive checks with a bonus according to its tier.
    
    While acting as an artificial personality, the imp is as unhelpful as possible to anyone attempting to use the system. The software imp doesn’t ignore commands, but it interprets them in the worst way possible. It can misdirect, reveal unwanted information, obfuscate the truth, and otherwise aggravate and demoralize the user.
    
    Finding and removing a software imp requires a successful Computers check to hack the imp as if it were a computer of its tier. However, the imp copies and installs itself as redundantly as it can, based on its tier number, and it can revive itself so long as a single copy remains. A dismissal spell targeting a computer infested with software imps can remove the malicious AIs as if they were extraplanar creatures, each with a CR equal to its item level and a Will save bonus based on its tier.
    
    The tiers of software imps and the capabilities of each are as follows.
    
    Tier 1: Skill bonus +5; Will +4; no copies
    
    Tier 2: Skill bonus +8; Will +6; one copy
    
    Tier 3: Skill bonus +11; Will +8; one copy
    
    Tier 4: Skill bonus +14; Will +10; two copies
    
    Tier 5: Skill bonus +17; Will +12; two copies
    
    Tier 6: Skill bonus +20; Will +14; three copies
    
    Tier 7: Skill bonus +23; Will +16; three copies
    
    Tier 8: Skill bonus +26; Will +18; four copies
    
    Tier 9: Skill bonus +29; Will +20; four copies
    
    Tier 10: Skill bonus +32; Will +21; five copies
    """
    
    let UniversalSolventRegia = CompendiumItem(context: context)
    UniversalSolventRegia.name = "Universal Solvent, Regia"
    UniversalSolventRegia.magicOrTech = "MT"
    UniversalSolventRegia.category = "Hybrid"
    UniversalSolventRegia.level = 17
    UniversalSolventRegia.price = 36000
    UniversalSolventRegia.bulk = 0
    UniversalSolventRegia.content = """
    Sold in enchanted vials that hold one application each, universal solvent is a magical chemical mixture that can dissolve almost every known substance in the galaxy. (Universal solvent can’t damage creatures.) As a standard action, you can splash universal solvent on an object. If a creature holds or wears the item, you must hit with a melee attack against that creature’s EAC. One application of solvent can cover five objects of light bulk, one object of 1 bulk, or a 5-foot area of a surface. When the solvent’s vial is emptied, it leaves a clean, empty vial with no residue.
    
    Universal solvent dissolves adhesives instantaneously, including the strands released by stickybomb grenades, provided the adhesive is of an item level equal to or lower than the solvent. The solvent also softens objects it coats, suppressing hardness according to the solvent’s type. As a full action, a creature can wipe off an application of universal solvent, ending the solvent’s effect on the cleaned object (but not the object used to clean it).
    
    If an object is exposed to universal solvent for 1 minute, the object takes an amount of damage equal to twice the amount by which the solvent’s hardness suppression exceeded the object’s actual hardness. The solvent then becomes inert and turns to dust, and the object returns to its normal hardness.
    
    The basic type has hardness suppression 10. The concentrated, forte, and regia types have hardness suppression 20, 30 , and 40 respectively.
    """
    
    let VitalSeedRegrower = CompendiumItem(context: context)
    VitalSeedRegrower.name = "Vital Seed, Regrower"
    VitalSeedRegrower.magicOrTech = "MT"
    VitalSeedRegrower.category = "Hybrid"
    VitalSeedRegrower.level = 17
    VitalSeedRegrower.price = 40000
    VitalSeedRegrower.bulk = 0
    VitalSeedRegrower.content = """
    Bioengineered to grow specific chemicals and cellular structures, even those that replicate animal or humanoid flesh, vital seeds come packed in tiny capsules of First World soil to make them grow at alarming speeds. The specific effect depends on the purpose for which the seed was bioengineered. Vital seeds can grow livestock and plants, replace missing organs, and perform many other useful tasks. Some common vital seeds are listed here.
    
    As a standard action, you can swallow a regrower vital seed. This allows you to regain 12d8 Hit Points and removes the exhausted and fatigued conditions. Any lost organs and limbs also start regrowing. If you can reattach a missing part, this regrowth takes only 1 round. Otherwise, it takes 2d10 rounds.
    """
    
    let EnergyMatterGateway = CompendiumItem(context: context)
    EnergyMatterGateway.name = "Energy-Matter Gateway"
    EnergyMatterGateway.magicOrTech = "MT"
    EnergyMatterGateway.category = "Hybrid"
    EnergyMatterGateway.level = 19
    EnergyMatterGateway.price = 600000
    EnergyMatterGateway.bulk = 4
    EnergyMatterGateway.content = """
    An inert energy-matter gateway is a black cube composed of aligned tubes. When you activate the gateway as a standard action, you designate creatures that can benefit from it. The cube’s tubes realign 1 round later to form a 10-foot-tall, hollow monolith that glows with an untapped power. Once active, an energy-matter gateway creates a magical field in a 60-foot-radius spread. An energy-matter gateway can be deactivated as a move action, whereupon it folds back up into its cubic form.
    
    A designated creature within the magical field of an activated energy-matter gateway can spend 1 Resolve Point to tap into the gateway’s field for 1 minute. If such a creature uses a weapon that consumes standard ammunition, the monolith magically produces the ammunition as it’s used. When a creature is tapped into the field, its battery-operated equipment consumes no charges.
    """
    
    let RetrievalCharmsMk4 = CompendiumItem(context: context)
    RetrievalCharmsMk4.name = "Retrieval Charms, Mk 4"
    RetrievalCharmsMk4.magicOrTech = "MT"
    RetrievalCharmsMk4.category = "Hybrid"
    RetrievalCharmsMk4.level = 19
    RetrievalCharmsMk4.price = 480000
    RetrievalCharmsMk4.bulk = 0.1
    RetrievalCharmsMk4.content = """
    Most retrieval charms are bejeweled decorations, although some are knickknacks that depict popular idols or fictional characters. These items come in a pair, each charm attuned to the other with magically enhanced quantum entanglement. It takes 1 minute to attach a charm to an object, and this object can have no more than 3 bulk. As a move action, you can activate the second charm while holding it, teleporting the first charm and its attached object to you. If you do so, the object instantly appears in hand if you have enough hands free to grasp it. Otherwise, it appears in your space. The attached object teleports to you even if it is worn or carried by another creature. Each set of retrieval charms can be used one time per day. The charms’ type limits the scale of the teleportation, as follows.
    
    Mk 1 charms range is 100 miles. Mk 2 charms' limit is anywhere on the same planet. Mk 3 charms allow teleportation anywhere on the same plane while Mk 4 charms function even on othe planes
    """
    
    let SoftwareImpTier10 = CompendiumItem(context: context)
    SoftwareImpTier10.name = "Software Imp, Tier 10"
    SoftwareImpTier10.magicOrTech = "MT"
    SoftwareImpTier10.category = "Hybrid"
    SoftwareImpTier10.level = 19
    SoftwareImpTier10.price = 550000
    SoftwareImpTier10.bulk = 0
    SoftwareImpTier10.content = """
    Whether or not it has attained true consciousness, a software imp is a perverse and illegal AI obnoxious enough that the question is academic. Software imps come on memory sticks so they remain isolated from your own systems. A software imp has a tier, and it is ineffective on any computer of a higher tier than its own.
    
    You must have access to a computer to install a software imp on it, and you can do so as a full action. The imp renders its memory stick unusable on the way out, leaving no way to conclusively determine what was once stored there. Once installed, the software imp becomes an artificial personality on its host computer. If the computer already has an artificial personality, the imp finds and overwrites it if possible. Faced with an artificial personality to which it does not have access, the imp lies in wait until it gains access to that personality in order to replace it.
    
    Initially, the imp can access information and modules that were accessible to you when you installed the imp. It can gain further access if a user unwittingly uses more access while the imp is installed. The imp can also fool users into giving it more access by attempting Bluff, Diplomacy, Intimidate, and Sense Motive checks with a bonus according to its tier.
    
    While acting as an artificial personality, the imp is as unhelpful as possible to anyone attempting to use the system. The software imp doesn’t ignore commands, but it interprets them in the worst way possible. It can misdirect, reveal unwanted information, obfuscate the truth, and otherwise aggravate and demoralize the user.
    
    Finding and removing a software imp requires a successful Computers check to hack the imp as if it were a computer of its tier. However, the imp copies and installs itself as redundantly as it can, based on its tier number, and it can revive itself so long as a single copy remains. A dismissal spell targeting a computer infested with software imps can remove the malicious AIs as if they were extraplanar creatures, each with a CR equal to its item level and a Will save bonus based on its tier.
    
    The tiers of software imps and the capabilities of each are as follows.
    
    Tier 1: Skill bonus +5; Will +4; no copies
    
    Tier 2: Skill bonus +8; Will +6; one copy
    
    Tier 3: Skill bonus +11; Will +8; one copy
    
    Tier 4: Skill bonus +14; Will +10; two copies
    
    Tier 5: Skill bonus +17; Will +12; two copies
    
    Tier 6: Skill bonus +20; Will +14; three copies
    
    Tier 7: Skill bonus +23; Will +16; three copies
    
    Tier 8: Skill bonus +26; Will +18; four copies
    
    Tier 9: Skill bonus +29; Will +20; four copies
    
    Tier 10: Skill bonus +32; Will +21; five copies
    """
    
    let MnemonicEditorMk4 = CompendiumItem(context: context)
    MnemonicEditorMk4.name = "Mnemonic Editor, Mk 4"
    MnemonicEditorMk4.magicOrTech = "MT"
    MnemonicEditorMk4.category = "Hybrid"
    MnemonicEditorMk4.level = 20
    MnemonicEditorMk4.price = 125000
    MnemonicEditorMk4.bulk = 10
    MnemonicEditorMk4.content = """
    A mnemonic editor consists of a complex series of brain implant injectors, digital harrow deck autoreaders, illusion runes, and virtual-reality programs, all controlled by an enchanted analysis computer and attached to a mobile surgical bed. The network of magic and technology is capable of removing experiences from a patient strapped to the bed over the course of a single 24-hour session. Skills and knowledge can be excised, lessons unlearned and muscle memory altered. Memories are not lost entirely; the patient still recalls what it did during its life, whom it met, and how it felt about the moments it experienced, but the impact of those experiences is subtly altered. The device then creates a new set of experiences—clearly artificial but no less effective—by leaving impressions and implanting new knacks, muscle memory, reflexes, and skills.
    
    If you use a mnemonic editor, you can undo 2 character levels’ worth of decisions about which class levels you took, which feats you selected, how you applied any level-based increases to ability scores, how you assigned new skill ranks, and so on. All decisions you made as a result of advancing over the previous 2 character levels you gained are undone. You then make new selections, including new class levels, feats, skills, and the like, as if you had regained the 2 missing character levels. Go through the normal process of advancing your character through each of these 2 levels.
    
    Each mnemonic editor works only once—the strain on its technology and the consequences of rewriting your past to even this small degree cause it to break down into valueless junk after a single session. Additionally, the alterations made to you render it more difficult for such extraordinary procedures to be effective in the future. A mk 1 mnemonic editor cannot be used on you if you have already benefited from one in the past. However, it is possible to use a more advanced mk 2 model that functions in the same manner, even if you have already used a mk 1 mnemonic editor. Of course, you can only benefit from a mk 2 mnemonic editor once. There exist even more advanced mk 3 and mk 4 models, and each can be used on you once even after you have used a lower-level mnemonic editor, but they are so expensive that they are usually produced only upon request.
    
    Reworking Your Character
    
    A GM has the final decision on whether or not you may rework your character, changing decisions you previously made, and whether you are required to use a mnemonic editor to do so. A GM can decide that mnemonic editors are not available and cannot be crafted, created, or accessed through any means. A GM might also let a player to change a feat or class level if the player and GM agree it makes sense to do so, without resorting to such a device. The mnemonic editor provides an in-world explanation for mechanical changes made to a character. For example, it gives a character who started as an envoy but decided to study the ways of mysticism (and was seen casting spells) a plausible way to suddenly lose that spellcasting ability if the player decides that multicasting as an envoy/mystic isn’t as fun as expected.
    """
    

    
}


//Ammo  ################################################################################################################

func loadAmmo() {
    
    let Arrow = CompendiumAmmo(context: context)
    Arrow.name = "Arrow"
    Arrow.isBattery = false
    Arrow.level = 1
    Arrow.price = 50
    Arrow.comesAs = 20
    Arrow.bulk = 0.1
    
    let Battery = CompendiumAmmo(context: context)
    Battery.name = "Battery"
    Battery.isBattery = true
    Battery.level = 1
    Battery.price = 60
    Battery.comesAs = 1
    Battery.charges = 20
    Battery.bulk = 0
    
    let Batteryhighcapacity = CompendiumAmmo(context: context)
    Batteryhighcapacity.name = "Battery, high-capacity"
    Batteryhighcapacity.isBattery = true
    Batteryhighcapacity.level = 4
    Batteryhighcapacity.price = 330
    Batteryhighcapacity.comesAs = 1
    Batteryhighcapacity.charges = 40
    Batteryhighcapacity.bulk = 0
    
    let Batterysupercapacity = CompendiumAmmo(context: context)
    Batterysupercapacity.name = "Battery, super-capacity"
    Batterysupercapacity.isBattery = true
    Batterysupercapacity.level = 4
    Batterysupercapacity.price = 390
    Batterysupercapacity.comesAs = 1
    Batterysupercapacity.charges = 80
    Batterysupercapacity.bulk = 0
    
    let Batteryultracapacity = CompendiumAmmo(context: context)
    Batteryultracapacity.name = "Battery, ultra-capacity"
    Batteryultracapacity.isBattery = true
    Batteryultracapacity.level = 5
    Batteryultracapacity.price = 445
    Batteryultracapacity.comesAs = 1
    Batteryultracapacity.charges = 100
    Batteryultracapacity.bulk = 0.1
    
    let Dart = CompendiumAmmo(context: context)
    Dart.name = "Dart"
    Dart.isBattery = false
    Dart.level = 1
    Dart.price = 20
    Dart.comesAs = 25
    Dart.bulk = 0.1
    
    let Flare = CompendiumAmmo(context: context)
    Flare.name = "Flare"
    Flare.isBattery = false
    Flare.level = 1
    Flare.price = 5
    Flare.comesAs = 1
    Flare.bulk = 0
    
    let Minirocket = CompendiumAmmo(context: context)
    Minirocket.name = "Mini-rocket"
    Minirocket.isBattery = false
    Minirocket.level = 4
    Minirocket.price = 300
    Minirocket.comesAs = 10
    Minirocket.bulk = 0.1
    
    let Petroltankstandard = CompendiumAmmo(context: context)
    Petroltankstandard.name = "Petrol tank, standard"
    Petroltankstandard.isBattery = true
    Petroltankstandard.level = 1
    Petroltankstandard.price = 60
    Petroltankstandard.comesAs = 1
    Petroltankstandard.charges = 20
    Petroltankstandard.bulk = 1
    
    let Petroltankhighcapacity = CompendiumAmmo(context: context)
    Petroltankhighcapacity.name = "Petrol tank, high-capacity"
    Petroltankhighcapacity.isBattery = true
    Petroltankhighcapacity.level = 3
    Petroltankhighcapacity.price = 280
    Petroltankhighcapacity.comesAs = 1
    Petroltankhighcapacity.charges = 40
    Petroltankhighcapacity.bulk = 2
    
    let Roundsmallarm = CompendiumAmmo(context: context)
    Roundsmallarm.name = "Round, small arm"
    Roundsmallarm.isBattery = false
    Roundsmallarm.level = 1
    Roundsmallarm.price = 40
    Roundsmallarm.comesAs = 30
    Roundsmallarm.bulk = 0.1
    
    let Roundlongarmandsniper = CompendiumAmmo(context: context)
    Roundlongarmandsniper.name = "Round, long arm and sniper"
    Roundlongarmandsniper.isBattery = false
    Roundlongarmandsniper.level = 1
    Roundlongarmandsniper.price = 75
    Roundlongarmandsniper.comesAs = 25
    Roundlongarmandsniper.bulk = 0.1
    
    let Roundheavy = CompendiumAmmo(context: context)
    Roundheavy.name = "Round, heavy"
    Roundheavy.isBattery = false
    Roundheavy.level = 2
    Roundheavy.price = 90
    Roundheavy.comesAs = 20
    Roundheavy.bulk = 0.1
    
    let Scattergunshell = CompendiumAmmo(context: context)
    Scattergunshell.name = "Scattergun shell"
    Scattergunshell.isBattery = false
    Scattergunshell.level = 1
    Scattergunshell.price = 55
    Scattergunshell.comesAs = 25
    Scattergunshell.bulk = 0.1
    
    let GrenadearrowI = CompendiumAmmo(context: context)
    GrenadearrowI.name = "Grenade arrow I"
    GrenadearrowI.isBattery = false
    GrenadearrowI.level = 6
    GrenadearrowI.price = 875
    GrenadearrowI.comesAs = 1
    GrenadearrowI.bulk = 0
    GrenadearrowI.special = "As any 1st-level grenade"
    
    let GrenadearrowII = CompendiumAmmo(context: context)
    GrenadearrowII.name = "Grenade arrow II"
    GrenadearrowII.isBattery = false
    GrenadearrowII.level = 10
    GrenadearrowII.price = 5450
    GrenadearrowII.comesAs = 1
    GrenadearrowII.bulk = 0
    GrenadearrowII.special = "As any 5th- or lower-level grenade"
    
    let GrenadearrowIII = CompendiumAmmo(context: context)
    GrenadearrowIII.name = "Grenade arrow III"
    GrenadearrowIII.isBattery = false
    GrenadearrowIII.level = 15
    GrenadearrowIII.price = 32050
    GrenadearrowIII.comesAs = 1
    GrenadearrowIII.bulk = 0
    GrenadearrowIII.special = "As any 10th- or lower-level grenade"
    
    let GrenadearrowIV = CompendiumAmmo(context: context)
    GrenadearrowIV.name = "Grenade arrow IV"
    GrenadearrowIV.isBattery = false
    GrenadearrowIV.level = 20
    GrenadearrowIV.price = 245000
    GrenadearrowIV.comesAs = 1
    GrenadearrowIV.bulk = 0
    GrenadearrowIV.special = "As any 15th- or lower-level grenade"
    
    let Tacticalmissile = CompendiumAmmo(context: context)
    Tacticalmissile.name = "Tactical missile"
    Tacticalmissile.isBattery = false
    Tacticalmissile.level = 10
    Tacticalmissile.price = 5700
    Tacticalmissile.comesAs = 1
    Tacticalmissile.bulk = 1
    Tacticalmissile.special = "Explode 6d8 B & P (30 ft.)"
    
    let Advancedmissile = CompendiumAmmo(context: context)
    Advancedmissile.name = "Advanced missile"
    Advancedmissile.isBattery = false
    Advancedmissile.level = 13
    Advancedmissile.price = 14600
    Advancedmissile.comesAs = 1
    Advancedmissile.bulk = 1
    Advancedmissile.special = "Explode 13d8 B & F (30 ft.)"
}

func loadConditions() {
    
    let blinded = CompendiumCondition(context: context)
    blinded.name = "Blinded"
    blinded.content = "You’re flat-footed, you take a –4 penalty to most Str– and Dex-based skill checks and opposed Perception checks, you automatically fail Perception checks based on sight, opponents have total concealment against you, and you must succeed at a DC 10 Acrobatics check to move faster than half speed or else fall prone."
    let blinded1 = Bonus(context: context)
    blinded1.type = "EAC"
    blinded1.bonus = -2
    blinded.addToBonuses(blinded1)
    let blinded2 = Bonus(context: context)
    blinded2.type = "KAC"
    blinded2.bonus = -2
    blinded.addToBonuses(blinded2)
    
    let confused = CompendiumCondition(context: context)
    confused.name = "Confused"
    confused.content = "You are mentally befuddled and can’t act normally. You can’t tell the difference between ally and foe, and thus you treat all creatures as enemies, even your closest friends and family, if applicable. An ally who wishes to cast a beneficial Spell on you with a range of touch must succeed at an attack roll against your Energy Armor Class, since you cannot be considered a willing target. If you are attacked while you’re confused, you always attack the creature that last attacked you until that creature is dead or out of sight, unless it is otherwise impossible for you to attack it that round. While confused, you can’t make attacks of opportunity against any creature or thing that you aren’t already committed to attacking.\n\nIf you are not devoted to attacking a target, roll on the following table at the beginning of your turn each round to see what you do in that round.\n\nd%\t\tBehavior\n1-25\t\tAct Normally\n26-50\t\tDo nothing but babble incoherently\n51-75\t\tDeal 1d8 + Str modifier damage to self with item in hand\n76-100\t\tAttack nearest creature"
    
    let dazed = CompendiumCondition(context: context)
    dazed.name = "Dazed"
    dazed.content = "You are unable to act normally. You can take no actions but have no penalty to your AC. A dazed condition typically lasts 1 round."
    
    let dazzled = CompendiumCondition(context: context)
    dazzled.name = "Dazzled"
    dazzled.content = "You are unable to see well because of overstimulation of your eyes. You take a –1 penalty to attack rolls and sight-based Perception checks."
    let dazzled1 = Bonus(context: context)
    dazzled1.type = "Attack"
    dazzled1.bonus = -1
    dazzled.addToBonuses(dazzled1)
    
    let deafened = CompendiumCondition(context: context)
    deafened.name = "Deafened"
    deafened.content = "You can’t hear. You take a –4 penalty to initiative checks and opposed Perception checks, and you automatically fail Perception checks based on sound. Characters who remain deafened for a long time grow accustomed to these drawbacks and can overcome some of them."
    let deafened1 = Bonus(context: context)
    deafened1.type = "Initiative"
    deafened1.bonus = -4
    deafened.addToBonuses(deafened1)
    
    let encumbered = CompendiumCondition(context: context)
    encumbered.name = "Encumbered"
    encumbered.content = "All of your speeds are reduced by 10 feet, your maximum Dexterity bonus to your Armor Class is reduced to +2, and you take a –5 penalty to Strength– and Dexterity-based checks (or you take your armor’s armor check penalty, whichever is worse)."
    let encum1 = Bonus(context: context)
    encum1.type = "Speed"
    encum1.bonus = -10
    
    
}





